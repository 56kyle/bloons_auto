


class <>f__AnonymousType0<<index>j__TPar,<query>j__TPar,<options>j__TPar,<limit>j__TPar,<offset>j__TPar,<hint>j__TPar>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>f__AnonymousType1<<_script>j__TPar>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>f__AnonymousType2<<type>j__TPar,<order>j__TPar,<script>j__TPar>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>f__AnonymousType3<<whitelist>j__TPar,<blacklist>j__TPar>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Module>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <PrivateImplementationDetails>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class __StaticArrayInitTypeSize=12:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class __StaticArrayInitTypeSize=16:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class __StaticArrayInitTypeSize=20:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class __StaticArrayInitTypeSize=24:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class __StaticArrayInitTypeSize=36:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class __StaticArrayInitTypeSize=76:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AddBehaviorToIceTowerMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AnimationAudio:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AnimationEventAudio:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AnimatorRandomIdleSelector:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AnimatorRepeat:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Load>d__7<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Unload>d__11<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <StartCloseAnimation>d__7:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <WaitForCloseAnimation>d__6:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <WaitForOpenAnimation>d__5:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass38_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass42_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass47_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <LoadFontsFromPlayerProfileLanguage>d__44:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <LoadGlobalScene>d__45:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <LoadLocs>d__38:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <LoadPlayer>d__46:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <LoadingSequence>d__37:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <UpdateNKTimer>d__55:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <UpdateStatusMessage>d__47:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DataDisplay:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TimeFormat:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <WaitingForDownloadConfirm>d__15:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass7_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <OnIvePlayedBeforeButtonClicked>d__21:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <WaitForPlayButtonClick>d__14:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Hide>d__5:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Reveal>d__3:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass3_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass3_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass3_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass3_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <AssetReferences>d__2:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class OffsetDictionary:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass6_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <LoadAsync>d__17:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass3_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass3_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass3_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <PreloadAsync>d__8:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass3_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass3_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass3_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass4_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Cost:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TrophyStoreItem:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass6_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass7_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <LoadAsync>d__4:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass9_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GenerateGameModelHash>d__23:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <LoadGameModelAsync>d__9:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetDescendants>d__21<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ChildSearchEnumerable<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ChildSearchEnumerator<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DescendantsSearchEnumerable<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DescendantsSearchEnumerator<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DescendantsSearchEnumeratorStack<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CollisionGroupData:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BloonTimeSlowMutatorClass:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TowerTimeSlowMutatorClass:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass10_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PlayerMode:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass15_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass15_1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PUS:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class StatNames:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass7_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass8_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Bounds:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ConnectionSettings:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BluePopup:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BufferSizes:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class LatencyCheck:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class LatencyHistory:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Reconnect:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass39_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass40_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass40_1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass45_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetChallengeFromRotation>d__12:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetChallengeWithId>d__10:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetDailyChallenge>d__5:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ChallengeFileInfo:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class IdRotationCache:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class LoopInfo:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RotationInfo:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetLeaderboardRewards>d__12:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RoundsContainer:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Bucket:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Difficulties:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Modes:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Players:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Tracktypes:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetRaceForId>d__4:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PriceMutatorClass:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RateMutatorClass:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SetMaxHealthForBloon:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Apply>d__2:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Apply>d__2:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__25<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__26<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BiohackDamageMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Mutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BloodSacrificeMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CallToArmsMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ChangeProjectileDisplayMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DamageUpMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DoorGunnerMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class EmergencyUnlockMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class GroundZeroBuffMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RangeMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class LongArmOfLightMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AddBehaviorToBloonMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MorphMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DamageMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ProjectileMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class OverclockMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class OverclockPermanentMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AddBehaviorToBloonMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DarkMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Mutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ShutoffMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DamageMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PierceMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class NecromancerPierceMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class HexMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TCBOOMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PowerDegreeMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Mutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RateMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SubmergeMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BloonWorthMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MutatorTower:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RateMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AddAcidicMixtureToProjectileMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Mutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BeserkerBrewMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BlockerMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Mutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Mutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SlapMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DamageUpTagMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DamageUpMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Mutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Mutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Mutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class HeatItUpDamageMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BloonWorthMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BloonWorthMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class KnockbackMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BloonWorthMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MoveBackMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PierceUpMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PsiBloonMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RangeUpMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RemoveDamageTypeModifierMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Mutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SlowMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SpeedUpMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class StripChildrenMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AddBehaviorToBloonMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TowerSize:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ProjectileSpeedMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass2_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass3_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass4_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Pex:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class IdObjectMap<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BloonDamageSoundGroupIds:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RemoveBloonPropertyMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ChargedMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DamageTask:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DamageResult:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class StateInfo:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetTargets>d__23:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BloonDegradeDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BloonFilter:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BloonLeakCallback:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BloonSpawnedDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Get>d__10<T,K>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GenerateObjectReports>d__27:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetUncast>d__17<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetUncastCached>d__18<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BlanketAdd:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CreationInfo:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class EnumerableSequence<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RootObjectReport:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class OnTowerOwnerReassignedDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass26_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass30_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass30_1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass39_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass43_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass43_1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MutationLimiter:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetBehaviors>d__24<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetBehaviorsInDependants>d__26<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BehaviourSearchEnumerable<TSearch>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BehaviourSearchEnumerator<TSearch>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DependantsSearchEnumerable<TSearch>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DependantsSearchEnumerator<TSearch>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class IteratorPair<TSearch>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DependantsSearchIteratorStack<TSearch>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DestroyedEventHandler:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetInLine>d__7<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Collisions<From,To>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CollisionState<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MonkeyBoostMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PowerActivateDef:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ThriveMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CircleIntersectionType:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <get_inputManagers>d__81:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CashManager:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CashSource:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CashType:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ProcessDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SpawnEffectModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ThrowawayEffect:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass15_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class OnProjectileEnterDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class OnProjectileExitDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class GridChanged:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ArtilleryCommandDamageMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Mutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Mutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MutatorTower:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MutatorTower:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetVisibleInRangePathSegments>d__32:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetVisibleTargets>d__31:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetTargets>d__5:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetTargets>d__7:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetTargets>d__7:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetTargets>d__7:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass13_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetTargets>d__4:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetTargets>d__17:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetTargets>d__4:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetTargets>d__9:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetTargets>d__6:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetTargets>d__4:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetTargets>d__4:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetTargets>d__5:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetTargets>d__4:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetTargets>d__8:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetTargets>d__9:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetTargets>d__9:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetTargets>d__13:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetTargets>d__8:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetBloonTargets>d__11:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetTrackTargets>d__12:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetTargets>d__6:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetTargets>d__25:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MutatorTower:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Mutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Mutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BloonWorthMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CentralMarketMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ComancheDefenceHeli:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RateMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Mutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MutatorTower:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MutatorTower:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MutatorTower:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CustomMovement:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MutatorTower:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass13_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass16_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ActiveBloon:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Mutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MutatorTower:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class EmissionMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MutatorTower:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class InvestmentEffect:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class InvestmentInfo:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BeserkerBrewMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MutatorTower:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PoplustMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PrinceOfDarknessZombieBuffMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MutatorTower:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MutatorTower:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MutatorTower:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Mutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RateSupportMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MutatorTower:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MutatorTower:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Mutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MutatorTower:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MutatorTower:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MutatorTower:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MutatorTower:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass18_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Mutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Mutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Mutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Mutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Mutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Mutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Mutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Mutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Mutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Mutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class WanderState:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ThatEventHandler:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Mutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class WindMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class OnPathChanged:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class OnUpgradedDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class OnUpgradedWithTowerDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetChildTowers>d__66:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetTowers>d__60:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetTowersByBaseId>d__59:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetTowersByBaseIdRaw>d__61:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetTowersInRange>d__58:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TowerCreateDef:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TowerDestroyedDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TowerFilter:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TowerMutatedDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TowerSacrificedDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TowerSellDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TowerUpdateDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TowerUpgradeDef:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Mutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass39_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BlockerEdge:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BlockerWall:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PointAndDistance:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetPathSegmentsInRange>d__17:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RoundDataInstance:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <OnDeepLinkActivated>d__15:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <OpenChallengeDeepLink>d__21:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <OpenDeepLinkMenu>d__19:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class OnSharedToClipboard:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass11_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass11_1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass4_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass15_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass29_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass43_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetValidServerUrl>d__19:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <LoadSettings>d__17:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <MigrateGuidToDeviceID>d__43:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <StartSession>d__44:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class LeakedBloon:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <ExecuteTask>d__36:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class FadingAudio:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass26_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass27_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass31_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CreateTowerInSeconds>d__32:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <LoadSave>d__27:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <LoadScenario>d__26:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Start>d__24:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class GcControl:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TowerInfo:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AbilityActivateInfo:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class LifeLeakInfo:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PowerActivateInfo:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TowerPlaceInfo:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TowerPopInfo:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TowerSellInfo:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TowerUpgradeInfo:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass127_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass58_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass60_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass60_1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass60_2:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass73_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass75_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Action:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ActivateInstaTowerAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ActivatePowerAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AddCashAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ApplyAbilityCustomInputDataAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ApplyTargetTypeDataAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BankCollectAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Codes:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ContinueAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CreateTowerAtAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CursorDownAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CursorUpAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DeclarePause:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DeclareTimeScale:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DesyncCheck:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class FastForwardAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class FreeplayAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class InteractableClickedAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Join:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class LoadSaveAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class LoseAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class OnInteractWithGizmoAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Peer:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PeerLeaveAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PeerRejoinAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PerformActionButtonActionAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PreResyncRecoveryAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PreResyncRecoveryInfo:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PreResyncRecoveryPlayer:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PreResyncRecoveryProjectile:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PreResyncRecoveryTower:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PrimeAbilityAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PurchaseHeroLevelUpAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PurchaseMaxHeroLevelAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RejoinNotAllowed:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RemovePeerAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RequestCashAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RestartAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SaveSnapshotAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SellRemovableAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SellTowerAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SendCashAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SendEmoteAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SetAutoplayAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SetCursorAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SetNextTowerTargetTypeAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Signoff:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class StartRoundAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TSMThemeAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TakeSaveSnapshotAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TakeSaveSnapshotState:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class UpgradeHeroToLevelAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class UpgradeTowerAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class WinAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass49_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass44_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass45_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass45_1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass47_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass48_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass48_1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass49_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass50_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass50_1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetExpressionlessFields>d__43:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetExpressions>d__45:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetObjects>d__48:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetSerielizedFields>d__42:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ExpressionInfo:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ObjectReferenceInfo:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass5_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ProxyPath:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <HasPendingRewards>d__47:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ThemeType:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <LoadFromData>d__12:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BonusInfo:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass14_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <OnCollect>d__37:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass30_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass32_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <ResetAnimatorCullMode>d__45:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <SwapAnimations>d__52:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class InitialisableBoolean:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Mode:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <SwapAnimations>d__48:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AnimationSwapRecord:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CycleCullingMode>d__16:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetTowerProcessList>d__1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ColouredMesh:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DebugCircle:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DebugLine:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class EffectCounter:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass21_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass22_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PooledNode:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GoToAnimationTime>d__5:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass28_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass28_1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass30_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Vertex:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <SwapAnimationsAsync>d__70:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <LoadGameModel>d__32:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <SetUpCameras>d__33:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <SetupAchievements>d__29:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <ShowLoginWebView>d__48:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass7_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass6_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass9_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CheckForGifts>d__6:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetPoints>d__0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetPoints>d__1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <WaitUntilShow>d__6:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <WaitUntilHide>d__6:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ObjectTime:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass8_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Load>d__4:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <UnloadAssetsAfterAsyncOperaton>d__6:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetPoints>d__4:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CheckForAnimEnd>d__13:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <PlayAnim>d__12:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass40_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass41_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass57_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass71_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass72_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CheckWorldScene>d__36:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CloseCurrentMenuInternal>d__53:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CloseLoadingScreen>d__39:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <LoadInGame>d__33:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <LoadMenus>d__35:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <LoadSceneAsync>d__30:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <OpenMenuInternal>d__43:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <PlayCloseAnimation>d__48:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <PlayOpenAnimation>d__45:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <PlayReOpenAnimation>d__46:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <PrevMenuCloseComplete>d__49:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <PrevMenuReCloseComplete>d__55:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <SwitchWorldScene>d__38:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <UnloadAllDontUnloads>d__58:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <UnloadInGame>d__34:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <UnloadMenus>d__32:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <UnloadSceneAsync>d__31:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ActionAsync_String:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class OnMenuEvent:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass5_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass5_1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass14_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass1_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Bucket:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Fetch>d__16:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Upload>d__15:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass4_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass5_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass6_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass7_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetHash>d__2:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetHashDeep>d__3:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass5_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass6_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <AskForAuthToken>d__4:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass187_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass192_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CPU>d__40:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CheckHakrStatus>d__155:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <ClaimRacePass>d__57:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <ClaimRacePassWithLink>d__59:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <EnterRace>d__179:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GainTrophies>d__47:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetOnlineData>d__28:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <InitializeOnlineProfile>d__31:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <LoadOnlineData>d__30:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <MigrateGuidToDeviceID>d__35:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <MigrateWalletFromNoLinkToLiNKID>d__43:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <OneTimeStartUpChecks>d__34:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <SPU>d__41:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <SpendRacePass>d__61:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <SpendTrophies>d__50:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Sync>d__22:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <SyncPendingRacePassTransactions>d__55:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <SyncRacePassCount>d__54:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <SyncTrophyBalance>d__45:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <SyncTrophyBalanceNotSynchronised>d__46:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class HakrStatus:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class NotEnoughException:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RaceStartMethod:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TransactionFailedException:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass3_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <<HandleConflictWithUi>g__CloseAndUnloadConflictScene|3>d:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <<HandleConflictWithUi>g__useLocal|1>d:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <<HandleConflictWithUi>g__useRemote|2>d:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <HandleConflictWithUi>d__3:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <UseRemote>d__2:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <enumerateThenCompleteTask>d__9:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Start>d__15:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <DownloadStats>d__7:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetStats>d__1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <UploadStats>d__3:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <LerpProperty>d__5:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass16_0<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass17_0<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass18_0<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass19_0<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass20_0<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass8_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetCoopChallengeAsync>d__22:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetDailyChallengeAsync>d__21:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Initialise>d__4:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Refresh>d__7:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <RefreshEventsData>d__9:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass0_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <StartTasks>d__1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <StartTasks>d__1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass1_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass2_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass3_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass4_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass5_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <EnumerateAction>d__11:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <EnumerateEnumerator>d__12:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <EnumeratePromise>d__13:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <EnumerateTask>d__14:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <WrapWithTryCatch>d__0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TowerUnlockGoalType:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class UnlockGoalDef:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass51_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass14_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass14_1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass16_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass16_1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <DisplayAchievementsAsync>d__13:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GooglePlayClicked>d__20:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <LoadAchievementPanelsAsync>d__14:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Open>d__8:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass33_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CancelRunningTasks>d__17:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <LoadAndDisplayChallenges>d__25:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <RunChallengeSearch>d__32:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <RunLoadAndDisplay>d__29:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <SearchChallenge>d__27:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RequestCompleted:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Trending:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass116_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass139_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass148_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CheckForProfanity>d__115:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ProfanityFinish:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass81_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass81_1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass99_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <OnCopyToClipboard>d__77:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Open>d__70:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <ShareChallengeConfirmed>d__99:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <ToggleStatsPopup>d__71:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ProfanityFinish:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass21_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Initialize>d__21:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <OnCopyToClipboard>d__25:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <ToggleStatsPopup>d__23:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Load>d__12:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Open>d__16:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass48_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass63_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass65_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass90_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <DisplayChallenges>d__90:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <DownloadAndDisplayChallenge>d__67:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetPanel>d__108:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <OnClickContinue>d__95:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Open>d__53:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <RunLoadingTasksInParallel>d__60:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <RunSearch>d__106:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Start>d__48:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <WaitForInternetAndRefresh>d__56:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DisplayPosition:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Init>d__31:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <LoadNameAndAvatar>d__33:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <PlayClicked>d__41:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Init>d__4:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetData>d__9:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <UpdateOwnerStats>d__0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass21_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass43_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass55_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass57_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass61_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass62_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass63_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass69_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CheckProfanity>d__24:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CompletedPlayerChallenge>d__69:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <ContainsProfanity>d__52:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <DeleteChallenge>d__42:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <DownloadChallengeData>d__35:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <DownloadChallengeInfo>d__19:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetAuthorName>d__20:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetChallengeInfo>d__47:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetChallengeInfos>d__51:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetChallengeName>d__22:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetChallengeStats>d__45:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <IsOwnChallenge>d__78:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <ReStartedPlayerChallenge>d__76:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <ShareChallenge>d__36:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <StartedPlayerChallenge>d__74:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PlayerChallengeInfoCache:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RequestCompleted:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ShareFinish:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <IsHackerOrModder>d__0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <SendRequest>d__8:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetPlayerStats>d__8:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class StatsCache:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass38_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass41_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass42_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass42_1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <FadeIn>d__46:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <FadeOut>d__47:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <TakeSnapshotWithBlurAtEndOfFrame>d__34:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <WaitingForCashToSent>d__34:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <JoinLobby>d__20:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <OnClickRefreshLocalLobbies>d__24:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <ShowLocalLobbies>d__26:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <TryShowLocalLobbies>d__25:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass33_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CopyLobbyCode>d__50:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CountdownToGame>d__39:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <OnDisconnected>d__46:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <OnMakePublicClicked>d__47:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Open>d__33:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <WaitForSeconds>d__40:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <WaitToStartLobby>d__41:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <OnGo>d__10:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass33_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass34_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass35_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Initialise>d__29:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <MoneyReminderPlayAnimation>d__54:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <MoneyReminderTimer>d__53:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <ShowNetworkWarningForSelf>d__56:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <OnGo>d__24:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass0_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Rejoin>d__1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <OnGo>d__13:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Init>d__9:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass24_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass19_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetPlayerStats>d__24:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <LoadPlayerAvatar>d__23:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <OnClickPlayerStats>d__22:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BadgeCount:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CreateFullLeaderboard>d__43:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CreateLeaderboards>d__40:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CreateMiniLeaderboard>d__45:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetFullLeaderboardResults>d__44:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetMiniLeaderboardResults>d__46:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <PopulatePlayerDataInPopupSlot>d__48:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CheckCoopChallenge>d__11:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CheckInternetStatus>d__12:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Initialise>d__23:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <PlaceTowerHere>d__36:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Open>d__31:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass28_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass28_1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass49_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass49_1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <ContinueClicked>d__61:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <OnGo>d__65:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Open>d__46:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Update>d__60:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass50_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass50_1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CheckOnlineThenStartNewGame>d__58:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Open>d__45:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <SyncTrophyCountWithLiNK>d__46:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Initialise>d__7:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Bind>d__5:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass7_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Bind>d__5:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PanelClickedHandler:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass5_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Bind>d__3:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PanelClickedHandler:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Bind>d__2:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass18_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PanelClickedHandler:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <LoadImageFromCache>d__6:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <LoadCrossPromo>d__32:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Open>d__21:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <StartLoadingPanels>d__23:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CrossPromoData:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CrossPromoResponse:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DeployTarget:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PromoData:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PromoResponse:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass7_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Bind>d__5:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PanelClickedHandler:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass7_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Bind>d__5:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PanelClickedHandler:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Bind>d__4:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CheckIsHakr>d__25:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass30_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <StartRestartEnabledTimeLimitCountdown>d__22:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CheckOnlineThenStartNewGame>d__44:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Open>d__32:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <RefreshRaceUI>d__34:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass24_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CheckIsHakr>d__23:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CheckOnlineThenStartNewGame>d__29:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Open>d__19:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <PopulateScreen>d__21:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <ReOpen>d__20:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <SubmitScores>d__24:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass40_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass5_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Initialise>d__27:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass10_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Initialise>d__7:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass5_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Initialise>d__0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass7_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <ShowEmote>d__7:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <WaitTimer>d__8:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass10_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass13_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Initialise>d__10:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AbilityHotkeyInfo:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PowerHotkeyInfo:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SpawnBloonHotkeyInfo:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TowerHotkeyInfo:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass102_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass102_1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass103_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass197_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass232_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass239_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass239_1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass252_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass261_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CheckForProfanity>d__234:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Initialise>d__102:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <InstantiateUiObject>d__103:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <InstantiateUiObject>d__104:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <ReturnToMainMenu>d__154:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <ShowEventPopup>d__239:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <ShowVictoryScreen>d__135:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class InGameMenuDef:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ProfanityFinish:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class UpdateUi:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class InGameOnLoseLevelDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class InGameTutorialRoundEnd:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class UpgradeScreenPurchasedUpgradeDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass118_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass118_1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass91_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BoolDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CursorMode:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PositionDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SelectedDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class StringDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass5_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Initialise>d__22:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SkullData:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Initialise>d__14:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass9_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <WaitForClose>d__16:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass7_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <OnEnable>d__15:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Initialise>d__8:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Initialise>d__1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Initialise>d__3:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MessageType:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Initialise>d__2:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Initialise>d__1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Initialise>d__2:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Initialise>d__2:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Initialise>d__4:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class OnPageSwipe:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <WaitForAnimationEnd>d__34:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass5_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Initialise>d__17:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass52_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass53_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass65_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Initialise>d__45:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass13_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <UpdateThemeAsync>d__13:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ThemeDictionary:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Initialise>d__40:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class UpgradeStatus:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Initialise>d__3:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ClickedEventHandler:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class LevelUpType:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <WaitForAnimationEnd>d__17:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ReturnCallback:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass6_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass15_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CheckOnlineThenPopulatePanel>d__13:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class GameObjectSortOrder:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <OnClick>d__9:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <PlayUnlockEffect>d__8:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass36_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CheckBlockedNkServers>d__44:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CheckForCompletedRaceRewards>d__43:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <QueuePopups>d__28:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <RefreshServerTimeAndSKUData>d__35:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <ReportGameModelAsync>d__22:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <TimedUnlock>d__31:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <TimedUnlock>d__13:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass42_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass53_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <LoadCollectionView>d__53:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <LoadInstaTowers>d__45:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SelectHander:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass5_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <BindImage>d__5:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CheckState>d__13:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class State:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Initialise>d__6:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Initialise>d__6:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <OnCopyToClipboard>d__63:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass83_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ProfanityFinish:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass169_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass170_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass174_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass178_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass179_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass200_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass202_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass222_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass224_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CheckForProfanity>d__187:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <ShareOdysseyConfirmed>d__226:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DataType:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ProfanityFinish:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass193_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass194_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass194_1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass197_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CheckOnlineThenStartNewGame>d__160:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <HideMinCrewNeededPopup>d__155:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <PlayVoyageAnimationToNextIsland>d__159:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ReturnCallback:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AssetUsePerMap:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class EmbarkedActiveOdyssey:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class OdysseyDifficultySaveData:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class OdysseyMapData:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SelectHander:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SelectHander:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <DoInSeconds>d__6:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass112_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass82_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass95_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass96_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass97_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CheckForProfanity>d__115:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Close>d__123:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <FollowToggled>d__78:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Open>d__73:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <SetDefaults>d__82:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <UpdateFollowersBank>d__79:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ProfanityFinish:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass9_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <OnRejoinClicked>d__9:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TransitionAnim:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass32_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass33_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass36_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass42_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass43_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass44_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass51_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass55_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass56_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass59_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass60_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass61_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass62_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass63_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass64_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass65_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass66_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass76_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass76_1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass86_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <AllActivePopups>d__57:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BackGround:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class HintData:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Placement:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ReturnCallback:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass13_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <LoadResults>d__13:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <UpdateUI>d__16:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <SwitchLanuage>d__9:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <BackUpData>d__38:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetDummyTask>d__29:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <OnCancelPollClicked>d__23:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <OnLogInClicked>d__19:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <OnLogOutClicked>d__20:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <OnPollsFailed>d__28:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <ProcessTwitchRequest>d__32:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <ProcessTwitchRequest>d__33<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TowerDetailsModelSort:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass27_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass35_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass47_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Open>d__34:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Purchase>d__55:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <SyncTrophyCountWithLiNK>d__39:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <TryPurchase>d__54:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Delay>d__26:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass35_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass35_1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass39_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass39_1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass10_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass11_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass14_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <LoadGame>d__14:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class UpgradeDetailsTheme:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AnimStateDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass1_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass2_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <CheckHorizontalSwipes>d__8:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class GestureSettings:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DragHandler:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass12_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <ActivateAfterLateBind>d__10:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class WeightedItem<T,U>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TestObject:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Shuffle>d__42<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class GameObjectPath:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class InGameData:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CustomJsonConverter:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass10_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass5_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass9_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <DownloadAndParse>d__11:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetRank>d__5:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetScores>d__10:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetScores>d__9:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Response:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ResponseData:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ResponseScores:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetEventPoolID>d__0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetEventPoolPlayerIds>d__1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class LockAction<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class LockActionAdd<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class LockActionAddRange<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class LockActionClear<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class LockActionPrune<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class LockActionRemove<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class LockActionRemoveAt<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class LockActionRemoveAtMultiple<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class LockActionSwapRemoveAt<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetBlockedHostnames>d__0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <HasInternetAccess>d__6:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <IsDnsBlocked>d__2:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Id:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass0_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <DownloadOnlineProfile>d__9:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <MigrateLocalData>d__16:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <MigrateRacePass>d__10:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <RunUpload>d__14:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Upload>d__13:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <RunRefresh>d__19:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <SyncOnlineProfile>d__20:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass12_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass12_1:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <FadeIn>d__14:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PooledSizedList<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SortFunction<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass12_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c__DisplayClass8_0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Get>d__6<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <UpdateCache>d__8:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <GetAllRootGameObjects>d__0:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ResourceUsage:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AudioJukeBox:

    offsets = {'trophyPrefix': 24, 'mainTitleBGM': 32, 'musicTrackData': 40}    
    def __init__(self, trophyPrefix: System.String, mainTitleBGM: System.String, musicTrackData: System.Collections.Generic.List<Assets.Scripts.Data.Music.MusicItem>, **kwargs):
        super().__init__(self, **kwargs)
		self.trophyPrefix = trophyPrefix
		self.mainTitleBGM = mainTitleBGM
		self.musicTrackData = musicTrackData


class <>c:
	<>9: AudioJukeBox.<>c
    offsets = {'<>9': 0, '<>9__3_0': 8}    
    def __init__(self, <>9: AudioJukeBox.<>c, <>9__3_0: System.Func<Assets.Scripts.Data.Music.MusicItem,System.Threading.Tasks.Task>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>9 = <>9
		self.<>9__3_0 = <>9__3_0


class <LoadAsync>d__3:

    offsets = {'<>1__state': 16, '<>t__builder': 24, '<>4__this': 48, '<>u__1': 56}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder, <>4__this: AudioJukeBox, <>u__1: System.Runtime.CompilerServices.TaskAwaiter, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.<>4__this = <>4__this
		self.<>u__1 = <>u__1


class AudioPreviewModule:

    offsets = {'equalizerAnimator': 24, 'currentAudioClip': 32}    
    def __init__(self, equalizerAnimator: UnityEngine.Animator, currentAudioClip: UnityEngine.AudioClip, **kwargs):
        super().__init__(self, **kwargs)
		self.equalizerAnimator = equalizerAnimator
		self.currentAudioClip = currentAudioClip


class BasicIAd:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BlockerZone:

    offsets = {'position': 16, 'radius': 28, 'inverse': 32}    
    def __init__(self, position: Assets.Scripts.Simulation.SMath.Vector3, radius: System.Single, inverse: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.position = position
		self.radius = radius
		self.inverse = inverse


class BloonProperties:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class BloonPropertyHelper:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BuildInfo:
	<BuildId>k__BackingField: System.String
    offsets = {'<BuildId>k__BackingField': 0}    
    def __init__(self, <BuildId>k__BackingField: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.<BuildId>k__BackingField = <BuildId>k__BackingField


class <Load>d__5:

    offsets = {'<>1__state': 16, '<>2__current': 24, '<loadOp>5__2': 32}    
    def __init__(self, <>1__state: System.Int32, <>2__current: System.Object, <loadOp>5__2: UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle<UnityEngine.TextAsset>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>2__current = <>2__current
		self.<loadOp>5__2 = <loadOp>5__2


class CameraSort:

    offsets = {'sortMode': 24}    
    def __init__(self, sortMode: UnityEngine.TransparencySortMode, **kwargs):
        super().__init__(self, **kwargs)
		self.sortMode = sortMode


class ChangeAreaTypeMutator:

    offsets = {'areaType': 112}    
    def __init__(self, areaType: Assets.Scripts.Models.Map.AreaType, **kwargs):
        super().__init__(self, **kwargs)
		self.areaType = areaType


class ClockTimeAnimator:

    offsets = {'hourHand': 24, 'minuteHand': 32, 'secondHand': 40, 'timeLastUpdated': 48, 'updateInterval': 52}    
    def __init__(self, hourHand: UnityEngine.GameObject, minuteHand: UnityEngine.GameObject, secondHand: UnityEngine.GameObject, timeLastUpdated: System.Single, updateInterval: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.hourHand = hourHand
		self.minuteHand = minuteHand
		self.secondHand = secondHand
		self.timeLastUpdated = timeLastUpdated
		self.updateInterval = updateInterval


class CommentAttribute:

    offsets = {'tooltip': 16, 'comment': 24, 'boxHeight': 32}    
    def __init__(self, tooltip: System.String, comment: System.String, boxHeight: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.tooltip = tooltip
		self.comment = comment
		self.boxHeight = boxHeight


class ContinueGamePanel:

    offsets = {'lblDetails': 24, 'settings': 32}    
    def __init__(self, lblDetails: TMPro.TMP_Text, settings: Assets.Scripts.Unity.Menu.GameMenuWithSettings, **kwargs):
        super().__init__(self, **kwargs)
		self.lblDetails = lblDetails
		self.settings = settings


class CoopMonkeyMoneyLabel:

    offsets = {'largeTxt': 24, 'monkeyMoneyIconLarge': 32, 'monkeyMoneyIconSmall': 40, 'smallTxt': 48, 'settings': 56}    
    def __init__(self, largeTxt: TMPro.TextMeshProUGUI, monkeyMoneyIconLarge: UnityEngine.GameObject, monkeyMoneyIconSmall: UnityEngine.GameObject, smallTxt: TMPro.TextMeshProUGUI, settings: Assets.Scripts.Unity.Menu.GameMenuWithSettings, **kwargs):
        super().__init__(self, **kwargs)
		self.largeTxt = largeTxt
		self.monkeyMoneyIconLarge = monkeyMoneyIconLarge
		self.monkeyMoneyIconSmall = monkeyMoneyIconSmall
		self.smallTxt = smallTxt
		self.settings = settings


class CosmeticHelper:
	ownPlayerId: System.Int32
    offsets = {'ownPlayerId': 0, 'coopPlayerCosmetics': 8, 'coopPlayerBloonMods': 16, 'coopPlayerIndices': 24, 'rootGameModel': 32, 'coopNamedMonkeys': 56}    
    def __init__(self, ownPlayerId: System.Int32, coopPlayerCosmetics: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Models.PlayerCosmeticInfo>, coopPlayerBloonMods: System.Collections.Generic.Dictionary<System.Int32,CosmeticHelper.PlayerBloonMods>, coopPlayerIndices: System.Collections.Generic.List<System.Int32>, rootGameModel: Assets.Scripts.Models.GameModel, coopNamedMonkeys: System.Collections.Generic.Dictionary<System.Int32,System.Collections.Generic.Dictionary<System.String,System.String>>, **kwargs):
        super().__init__(self, **kwargs)
		self.ownPlayerId = ownPlayerId
		self.coopPlayerCosmetics = coopPlayerCosmetics
		self.coopPlayerBloonMods = coopPlayerBloonMods
		self.coopPlayerIndices = coopPlayerIndices
		self.rootGameModel = rootGameModel
		self.coopNamedMonkeys = coopNamedMonkeys


class <>c:
	<>9: CosmeticHelper.<>c
    offsets = {'<>9': 0, '<>9__9_0': 8, '<>9__20_0': 16}    
    def __init__(self, <>9: CosmeticHelper.<>c, <>9__9_0: System.Func<Assets.Scripts.Data.TrophyStore.TrophyStoreItem,System.Single>, <>9__20_0: System.Func<Assets.Scripts.Models.Bloons.BloonModel,System.String>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>9 = <>9
		self.<>9__9_0 = <>9__9_0
		self.<>9__20_0 = <>9__20_0


class <>c__DisplayClass18_0:

    offsets = {'inputId': 16}    
    def __init__(self, inputId: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.inputId = inputId


class <>c__DisplayClass26_0:

    offsets = {'towerModel': 16}    
    def __init__(self, towerModel: Assets.Scripts.Models.Towers.TowerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.towerModel = towerModel


class <>c__DisplayClass27_0:

    offsets = {'powerModel': 16}    
    def __init__(self, powerModel: Assets.Scripts.Models.Powers.PowerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.powerModel = powerModel


class <>c__DisplayClass29_0:

    offsets = {'bs': 16}    
    def __init__(self, bs: System.Collections.Generic.KeyValuePair<System.String,System.String>, **kwargs):
        super().__init__(self, **kwargs)
		self.bs = bs


class <>c__DisplayClass29_1:

    offsets = {'b': 16}    
    def __init__(self, b: Assets.Scripts.Models.Bloons.BloonModel, **kwargs):
        super().__init__(self, **kwargs)
		self.b = b


class <>c__DisplayClass38_0:

    offsets = {'heroId': 16}    
    def __init__(self, heroId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.heroId = heroId


class <>c__DisplayClass41_0:

    offsets = {'str': 16}    
    def __init__(self, str: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.str = str


class <>c__DisplayClass42_0:

    offsets = {'reference': 16}    
    def __init__(self, reference: Assets.Scripts.Utils.SpriteReference, **kwargs):
        super().__init__(self, **kwargs)
		self.reference = reference


class PlayerBloonMods:

    offsets = {'bloonsByName': 16}    
    def __init__(self, bloonsByName: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Bloons.BloonModel>, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonsByName = bloonsByName


class CustomAnimationComponent:

    offsets = {'target': 24, 'duration': 32, 'curve': 40, 'isPlaying': 48, 'loop': 49, 'disableOnEnd': 50, 'stopPlayingOnEnd': 51, 'resetOnEnable': 52, 'updateAnimOnReset': 53, 'speedMultiplier': 56, 'useUnscaledTime': 60, 'targetTransform': 64, 'elapsed': 72}    
    def __init__(self, target: UnityEngine.GameObject, duration: System.Single, curve: UnityEngine.AnimationCurve, isPlaying: System.Boolean, loop: System.Boolean, disableOnEnd: System.Boolean, stopPlayingOnEnd: System.Boolean, resetOnEnable: System.Boolean, updateAnimOnReset: System.Boolean, speedMultiplier: System.Single, useUnscaledTime: System.Boolean, targetTransform: UnityEngine.Transform, elapsed: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.target = target
		self.duration = duration
		self.curve = curve
		self.isPlaying = isPlaying
		self.loop = loop
		self.disableOnEnd = disableOnEnd
		self.stopPlayingOnEnd = stopPlayingOnEnd
		self.resetOnEnable = resetOnEnable
		self.updateAnimOnReset = updateAnimOnReset
		self.speedMultiplier = speedMultiplier
		self.useUnscaledTime = useUnscaledTime
		self.targetTransform = targetTransform
		self.elapsed = elapsed


class CustomColorAnimator:

    offsets = {'color1': 80, 'color2': 96, 'targetSprite': 112, 'img': 120}    
    def __init__(self, color1: UnityEngine.Color, color2: UnityEngine.Color, targetSprite: UnityEngine.SpriteRenderer, img: UnityEngine.UI.Image, **kwargs):
        super().__init__(self, **kwargs)
		self.color1 = color1
		self.color2 = color2
		self.targetSprite = targetSprite
		self.img = img


class CustomFlyoverAnimator:

    offsets = {'startPoint': 80, 'endPoint': 92, 'approachDistance': 104}    
    def __init__(self, startPoint: UnityEngine.Vector3, endPoint: UnityEngine.Vector3, approachDistance: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.startPoint = startPoint
		self.endPoint = endPoint
		self.approachDistance = approachDistance


class CustomMoveAnimator:

    offsets = {'startOffset': 80, 'endOffset': 92, 'homePosition': 104}    
    def __init__(self, startOffset: UnityEngine.Vector3, endOffset: UnityEngine.Vector3, homePosition: UnityEngine.Vector3, **kwargs):
        super().__init__(self, **kwargs)
		self.startOffset = startOffset
		self.endOffset = endOffset
		self.homePosition = homePosition


class CustomPlayableAnimatorTest:

    offsets = {'playableAnimator': 24, 'clipConfigs': 32}    
    def __init__(self, playableAnimator: Assets.Scripts.Unity.Display.Animation.PlayableAnimator, clipConfigs: System.Collections.Generic.List<Assets.Scripts.Unity.Display.Animation.CustomAnimationClipConfig>, **kwargs):
        super().__init__(self, **kwargs)
		self.playableAnimator = playableAnimator
		self.clipConfigs = clipConfigs


class CustomRendererToggleAnimator:

    offsets = {'targetRenderer': 24, 'duration': 32, 'curve': 40, 'isPlaying': 48, 'loop': 49, 'elapsed': 52}    
    def __init__(self, targetRenderer: UnityEngine.Renderer, duration: System.Single, curve: UnityEngine.AnimationCurve, isPlaying: System.Boolean, loop: System.Boolean, elapsed: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.targetRenderer = targetRenderer
		self.duration = duration
		self.curve = curve
		self.isPlaying = isPlaying
		self.loop = loop
		self.elapsed = elapsed


class CustomRotationAnimator:

    offsets = {'rotationsPerDuration': 80, 'axis': 84, 'useLocalCoordinateSustem': 88, 'randomizeAngle': 89, 'randomizeSpeed': 90, 'randomSpeedMultiplierRange': 96, 'angleOffset': 104, 'rotationAxis': 108}    
    def __init__(self, rotationsPerDuration: System.Single, axis: CustomRotationAnimator.Axis, useLocalCoordinateSustem: System.Boolean, randomizeAngle: System.Boolean, randomizeSpeed: System.Boolean, randomSpeedMultiplierRange: RangeValue, angleOffset: System.Single, rotationAxis: UnityEngine.Vector3, **kwargs):
        super().__init__(self, **kwargs)
		self.rotationsPerDuration = rotationsPerDuration
		self.axis = axis
		self.useLocalCoordinateSustem = useLocalCoordinateSustem
		self.randomizeAngle = randomizeAngle
		self.randomizeSpeed = randomizeSpeed
		self.randomSpeedMultiplierRange = randomSpeedMultiplierRange
		self.angleOffset = angleOffset
		self.rotationAxis = rotationAxis


class Axis:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class CustomRotationSimple:

    offsets = {'target': 24, 'rotationAxis': 32, 'useLocalCoordinates': 44, 'speed': 48, 'minStartingOffset': 52, 'maxStartingOffset': 56, 'angle': 60, 'startingAngle': 64}    
    def __init__(self, target: UnityEngine.GameObject, rotationAxis: UnityEngine.Vector3, useLocalCoordinates: System.Boolean, speed: System.Single, minStartingOffset: System.Single, maxStartingOffset: System.Single, angle: System.Single, startingAngle: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.target = target
		self.rotationAxis = rotationAxis
		self.useLocalCoordinates = useLocalCoordinates
		self.speed = speed
		self.minStartingOffset = minStartingOffset
		self.maxStartingOffset = maxStartingOffset
		self.angle = angle
		self.startingAngle = startingAngle


class CustomScaleAnimator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DanceFloor:

    offsets = {'uvAnimationTileX': 24, 'uvAnimationTileY': 28, 'framesPerSecond': 32, 'currentTimeInt': 36, 'randomNumX': 40, 'randomNumY': 44, 'offset': 48, '_myRenderer': 56}    
    def __init__(self, uvAnimationTileX: System.Int32, uvAnimationTileY: System.Int32, framesPerSecond: System.Single, currentTimeInt: System.Int32, randomNumX: System.Int32, randomNumY: System.Int32, offset: UnityEngine.Vector2, _myRenderer: UnityEngine.Renderer, **kwargs):
        super().__init__(self, **kwargs)
		self.uvAnimationTileX = uvAnimationTileX
		self.uvAnimationTileY = uvAnimationTileY
		self.framesPerSecond = framesPerSecond
		self.currentTimeInt = currentTimeInt
		self.randomNumX = randomNumX
		self.randomNumY = randomNumY
		self.offset = offset
		self._myRenderer = _myRenderer


class DebugSetParagonLevel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DebugTemplePoints:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DeepCompare:

    offsets = {'bindFlags': 16, 'processedObjectsA': 24, 'processedObjectsB': 32}    
    def __init__(self, bindFlags: System.Reflection.BindingFlags, processedObjectsA: System.Collections.Generic.HashSet<System.Object>, processedObjectsB: System.Collections.Generic.HashSet<System.Object>, **kwargs):
        super().__init__(self, **kwargs)
		self.bindFlags = bindFlags
		self.processedObjectsA = processedObjectsA
		self.processedObjectsB = processedObjectsB


class DestroyComponent:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DifficultyCollectionEventItemLabel:

    offsets = {'difficultyType': 24, 'settings': 32}    
    def __init__(self, difficultyType: System.String, settings: Assets.Scripts.Unity.Menu.GameMenuWithSettings, **kwargs):
        super().__init__(self, **kwargs)
		self.difficultyType = difficultyType
		self.settings = settings


class DifficultyCollectionEventItems:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DifficultySelectMmItems:
	modeUnlocks: System.Collections.Generic.Dictionary<System.String,System.String>
    offsets = {'modeUnlocks': 0, 'monkeyMoneyIconLarge': 24, 'largeTxt': 32, 'monkeyMoneyIconSmall': 40, 'smallTxt': 48, 'difficulty': 56, 'settings': 64}    
    def __init__(self, modeUnlocks: System.Collections.Generic.Dictionary<System.String,System.String>, monkeyMoneyIconLarge: UnityEngine.GameObject, largeTxt: TMPro.TextMeshProUGUI, monkeyMoneyIconSmall: UnityEngine.GameObject, smallTxt: TMPro.TextMeshProUGUI, difficulty: System.String, settings: Assets.Scripts.Unity.Menu.GameMenuWithSettings, **kwargs):
        super().__init__(self, **kwargs)
		self.modeUnlocks = modeUnlocks
		self.monkeyMoneyIconLarge = monkeyMoneyIconLarge
		self.largeTxt = largeTxt
		self.monkeyMoneyIconSmall = monkeyMoneyIconSmall
		self.smallTxt = smallTxt
		self.difficulty = difficulty
		self.settings = settings


class DifficultySpritesAsset:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DigitalClockFaceAnimator:

    offsets = {'text': 24, 'time': 32, 'seconds': 36}    
    def __init__(self, text: TMPro.TextMeshPro, time: System.Single, seconds: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.text = text
		self.time = time
		self.seconds = seconds


class FXVolumeControl:

    offsets = {'muted': 56, 'volume': 60}    
    def __init__(self, muted: System.Boolean, volume: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.muted = muted
		self.volume = volume


class FlatFileCodeGen:

    offsets = {'bindFlags': 16, 'dataTypes': 24, 'dataTypesMap': 32, 'objMap': 40, 'sw': 48, 'br': 56, 'foundDataTypes': 64, 'tab': 72}    
    def __init__(self, bindFlags: System.Reflection.BindingFlags, dataTypes: System.Collections.Generic.Dictionary<System.Type,System.Collections.Generic.List<System.Object>>, dataTypesMap: System.Collections.Generic.Dictionary<System.Type,System.Collections.Generic.HashSet<System.Object>>, objMap: System.Collections.Generic.Dictionary<System.Object,System.Int32>, sw: System.IO.StreamWriter, br: System.IO.BinaryWriter, foundDataTypes: System.Collections.Generic.HashSet<System.Object>, tab: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.bindFlags = bindFlags
		self.dataTypes = dataTypes
		self.dataTypesMap = dataTypesMap
		self.objMap = objMap
		self.sw = sw
		self.br = br
		self.foundDataTypes = foundDataTypes
		self.tab = tab


class GameModelLoader:

    offsets = {'bindFlags': 16, 'br': 24, 'mIndex': 40}    
    def __init__(self, bindFlags: System.Reflection.BindingFlags, br: System.IO.BinaryReader, mIndex: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.bindFlags = bindFlags
		self.br = br
		self.mIndex = mIndex


class ButtonState:

    offsets = {'isPressed': 16, 'value': 20}    
    def __init__(self, isPressed: System.Boolean, value: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.isPressed = isPressed
		self.value = value


class Status:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class Builder:

    offsets = {'mDescriptionUpdated': 16, 'mNewDescription': 24, 'mCoverImageUpdated': 32, 'mNewPlayedTime': 48}    
    def __init__(self, mDescriptionUpdated: System.Boolean, mNewDescription: System.String, mCoverImageUpdated: System.Boolean, mNewPlayedTime: System.Nullable<System.TimeSpan>, **kwargs):
        super().__init__(self, **kwargs)
		self.mDescriptionUpdated = mDescriptionUpdated
		self.mNewDescription = mNewDescription
		self.mCoverImageUpdated = mCoverImageUpdated
		self.mNewPlayedTime = mNewPlayedTime


class <>c:
	<>9: GooglePlayGames.BasicApi.Video.VideoCapabilities.<>c
    offsets = {'<>9': 0, '<>9__14_0': 8, '<>9__14_1': 16}    
    def __init__(self, <>9: GooglePlayGames.BasicApi.Video.VideoCapabilities.<>c, <>9__14_0: System.Func<System.Boolean,System.String>, <>9__14_1: System.Func<System.Boolean,System.String>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>9 = <>9
		self.<>9__14_0 = <>9__14_0
		self.<>9__14_1 = <>9__14_1


class <>c:
	<>9: GooglePlayGames.OurUtils.Logger.<>c
    offsets = {'<>9': 0, '<>9__12_0': 8}    
    def __init__(self, <>9: GooglePlayGames.OurUtils.Logger.<>c, <>9__12_0: System.Action, **kwargs):
        super().__init__(self, **kwargs)
		self.<>9 = <>9
		self.<>9__12_0 = <>9__12_0


class <>c__DisplayClass10_0:

    offsets = {'msg': 16}    
    def __init__(self, msg: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.msg = msg


class <>c__DisplayClass8_0:

    offsets = {'msg': 16}    
    def __init__(self, msg: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.msg = msg


class <>c__DisplayClass9_0:

    offsets = {'msg': 16}    
    def __init__(self, msg: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.msg = msg


class <>c__DisplayClass10_0:

    offsets = {'action': 16}    
    def __init__(self, action: System.Collections.IEnumerator, **kwargs):
        super().__init__(self, **kwargs)
		self.action = action


class HQAnimationTester:

    offsets = {'monkeyAnimationController': 24, 'playableAnimator': 32}    
    def __init__(self, monkeyAnimationController: Assets.Scripts.Unity.Display.Animation.MonkeyAnimationController, playableAnimator: Assets.Scripts.Unity.Display.Animation.PlayableAnimator, **kwargs):
        super().__init__(self, **kwargs)
		self.monkeyAnimationController = monkeyAnimationController
		self.playableAnimator = playableAnimator


class HeroVoiceToggleControl:

    offsets = {'heroVoiceToggleButton': 24, 'heroVoiceToggleAnimator': 32, '<VoicesActive>k__BackingField': 40}    
    def __init__(self, heroVoiceToggleButton: UnityEngine.UI.Toggle, heroVoiceToggleAnimator: UnityEngine.Animator, <VoicesActive>k__BackingField: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.heroVoiceToggleButton = heroVoiceToggleButton
		self.heroVoiceToggleAnimator = heroVoiceToggleAnimator
		self.<VoicesActive>k__BackingField = <VoicesActive>k__BackingField


class ICustomAnimator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class IGameModelLoader:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class InGameMusicFactory:

    offsets = {'trackItemDataList': 16, 'bossTrackItemData': 24, 'audioFactory': 32, 'currentAudioSource': 40, 'currentTrackIndex': 48, 'currentTrackLength': 52, 'usePlayList': 56, 'mapName': 64, 'mapMusicName': 72, 'defaultClip': 80, 'bossMusicClip': 88, '<RepeatTrack>k__BackingField': 96, '<BossMusicIsPlaying>k__BackingField': 97}    
    def __init__(self, trackItemDataList: System.Collections.Generic.List<TrackItemData>, bossTrackItemData: TrackItemData, audioFactory: Assets.Scripts.Unity.Audio.AudioFactory, currentAudioSource: UnityEngine.AudioSource, currentTrackIndex: System.Int32, currentTrackLength: System.Single, usePlayList: System.Boolean, mapName: System.String, mapMusicName: System.String, defaultClip: UnityEngine.AudioClip, bossMusicClip: UnityEngine.AudioClip, <RepeatTrack>k__BackingField: System.Boolean, <BossMusicIsPlaying>k__BackingField: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.trackItemDataList = trackItemDataList
		self.bossTrackItemData = bossTrackItemData
		self.audioFactory = audioFactory
		self.currentAudioSource = currentAudioSource
		self.currentTrackIndex = currentTrackIndex
		self.currentTrackLength = currentTrackLength
		self.usePlayList = usePlayList
		self.mapName = mapName
		self.mapMusicName = mapMusicName
		self.defaultClip = defaultClip
		self.bossMusicClip = bossMusicClip
		self.<RepeatTrack>k__BackingField = <RepeatTrack>k__BackingField
		self.<BossMusicIsPlaying>k__BackingField = <BossMusicIsPlaying>k__BackingField


class IncludeMeshInBake:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class IntegerInputFieldLimit:

    offsets = {'minValue': 24, 'maxValue': 28, 'inputField': 32}    
    def __init__(self, minValue: System.Int32, maxValue: System.Int32, inputField: TMPro.TMP_InputField, **kwargs):
        super().__init__(self, **kwargs)
		self.minValue = minValue
		self.maxValue = maxValue
		self.inputField = inputField


class IsCreatedLog:

    offsets = {'spriteRenderer': 24}    
    def __init__(self, spriteRenderer: UnityEngine.SpriteRenderer, **kwargs):
        super().__init__(self, **kwargs)
		self.spriteRenderer = spriteRenderer


class LG:
	builder: System.Text.StringBuilder
    offsets = {'builder': 0}    
    def __init__(self, builder: System.Text.StringBuilder, **kwargs):
        super().__init__(self, **kwargs)
		self.builder = builder


class LiNKCurrencyFormat:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MapLerp:

    offsets = {'lerp0102': 24, 'lerp0203': 28, 'lerp0301': 32}    
    def __init__(self, lerp0102: System.Single, lerp0203: System.Single, lerp0301: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.lerp0102 = lerp0102
		self.lerp0203 = lerp0203
		self.lerp0301 = lerp0301


class ModeCollectionEventItemLabel:

    offsets = {'modeButton': 24, 'settings': 32}    
    def __init__(self, modeButton: Assets.Scripts.Unity.UI_New.Main.ModeSelect.ModeButton, settings: Assets.Scripts.Unity.Menu.GameMenuWithSettings, **kwargs):
        super().__init__(self, **kwargs)
		self.modeButton = modeButton
		self.settings = settings


class ModeCollectionEventItems:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ModeSelectMonkeyMoneyLabel:

    offsets = {'monkeyMoneyIconLarge': 24, 'largeTxt': 32, 'monkeyMoneyIconSmall': 40, 'smallTxt': 48, 'modeButton': 56, 'settings': 64}    
    def __init__(self, monkeyMoneyIconLarge: UnityEngine.GameObject, largeTxt: TMPro.TextMeshProUGUI, monkeyMoneyIconSmall: UnityEngine.GameObject, smallTxt: TMPro.TextMeshProUGUI, modeButton: Assets.Scripts.Unity.UI_New.Main.ModeSelect.ModeButton, settings: Assets.Scripts.Unity.Menu.GameMenuWithSettings, **kwargs):
        super().__init__(self, **kwargs)
		self.monkeyMoneyIconLarge = monkeyMoneyIconLarge
		self.largeTxt = largeTxt
		self.monkeyMoneyIconSmall = monkeyMoneyIconSmall
		self.smallTxt = smallTxt
		self.modeButton = modeButton
		self.settings = settings


class MusicLocalizationManager:

    offsets = {'locDictionary': 16}    
    def __init__(self, locDictionary: System.Collections.Generic.Dictionary<System.String,System.String>, **kwargs):
        super().__init__(self, **kwargs)
		self.locDictionary = locDictionary


class MusicVolumeControl:

    offsets = {'muted': 56, 'volume': 60}    
    def __init__(self, muted: System.Boolean, volume: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.muted = muted
		self.volume = volume


class NK_TextMeshProInputField:

    offsets = {'previousText': 752}    
    def __init__(self, previousText: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.previousText = previousText


class NestedPrefab:

    offsets = {'parentObject': 24, 'prefab': 32, 'prefabPath': 40}    
    def __init__(self, parentObject: UnityEngine.GameObject, prefab: UnityEngine.Object, prefabPath: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parentObject = parentObject
		self.prefab = prefab
		self.prefabPath = prefabPath


class <GetSamples>d__5:

    offsets = {'<>1__state': 16, '<>2__current': 20, '<>l__initialThreadId': 44, '<>4__this': 48, '<>3__<>4__this': 96, 'count': 144, '<>3__count': 148, '<t>5__2': 152}    
    def __init__(self, <>1__state: System.Int32, <>2__current: NinjaKiwi.CustomAnimation.CurveSample, <>l__initialThreadId: System.Int32, <>4__this: NinjaKiwi.CustomAnimation.CubicBezier, <>3__<>4__this: NinjaKiwi.CustomAnimation.CubicBezier, count: System.Int32, <>3__count: System.Int32, <t>5__2: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>2__current = <>2__current
		self.<>l__initialThreadId = <>l__initialThreadId
		self.<>4__this = <>4__this
		self.<>3__<>4__this = <>3__<>4__this
		self.count = count
		self.<>3__count = <>3__count
		self.<t>5__2 = <t>5__2


class LineSegmentInfo:

    offsets = {'length': 16}    
    def __init__(self, length: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.length = length


class OnCompleteBehaviour:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class <GetCubicBeziers>d__3:

    offsets = {'<>1__state': 16, '<>2__current': 20, '<>l__initialThreadId': 68, '<>4__this': 72, '<i>5__2': 80, '<curve>5__3': 84}    
    def __init__(self, <>1__state: System.Int32, <>2__current: NinjaKiwi.CustomAnimation.CubicBezier, <>l__initialThreadId: System.Int32, <>4__this: NinjaKiwi.CustomAnimation.CurvedPath, <i>5__2: System.Int32, <curve>5__3: NinjaKiwi.CustomAnimation.Curve, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>2__current = <>2__current
		self.<>l__initialThreadId = <>l__initialThreadId
		self.<>4__this = <>4__this
		self.<i>5__2 = <i>5__2
		self.<curve>5__3 = <curve>5__3


class <GetSamples>d__6:

    offsets = {'<>1__state': 16, '<>2__current': 24, '<>l__initialThreadId': 32, '<>4__this': 40, 'countPerSegment': 48, '<>3__countPerSegment': 52, '<>7__wrap1': 56, '<>7__wrap2': 64}    
    def __init__(self, <>1__state: System.Int32, <>2__current: NinjaKiwi.CustomAnimation.PathSample, <>l__initialThreadId: System.Int32, <>4__this: NinjaKiwi.CustomAnimation.CurvedPath, countPerSegment: System.Int32, <>3__countPerSegment: System.Int32, <>7__wrap1: System.Collections.Generic.IEnumerator<NinjaKiwi.CustomAnimation.CubicBezier>, <>7__wrap2: System.Collections.Generic.IEnumerator<NinjaKiwi.CustomAnimation.CurveSample>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>2__current = <>2__current
		self.<>l__initialThreadId = <>l__initialThreadId
		self.<>4__this = <>4__this
		self.countPerSegment = countPerSegment
		self.<>3__countPerSegment = <>3__countPerSegment
		self.<>7__wrap1 = <>7__wrap1
		self.<>7__wrap2 = <>7__wrap2


class <GetTileSamples>d__7:

    offsets = {'<>1__state': 16, '<>2__current': 24, '<>l__initialThreadId': 32, '<>4__this': 40, 'worldSize': 48, '<>3__worldSize': 60, 'worldTileSize': 72, '<>3__worldTileSize': 80, '<>7__wrap1': 88, '<>7__wrap2': 96, '<point>5__4': 104}    
    def __init__(self, <>1__state: System.Int32, <>2__current: NinjaKiwi.CustomAnimation.PathSample, <>l__initialThreadId: System.Int32, <>4__this: NinjaKiwi.CustomAnimation.CurvedPath, worldSize: UnityEngine.Vector3, <>3__worldSize: UnityEngine.Vector3, worldTileSize: Geom.Size, <>3__worldTileSize: Geom.Size, <>7__wrap1: System.Collections.Generic.IEnumerator<NinjaKiwi.CustomAnimation.CubicBezier>, <>7__wrap2: System.Collections.Generic.IEnumerator<NinjaKiwi.CustomAnimation.CurveSample>, <point>5__4: Geom.IntPoint, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>2__current = <>2__current
		self.<>l__initialThreadId = <>l__initialThreadId
		self.<>4__this = <>4__this
		self.worldSize = worldSize
		self.<>3__worldSize = <>3__worldSize
		self.worldTileSize = worldTileSize
		self.<>3__worldTileSize = <>3__worldTileSize
		self.<>7__wrap1 = <>7__wrap1
		self.<>7__wrap2 = <>7__wrap2
		self.<point>5__4 = <point>5__4


class AwolConfig:

    offsets = {'ToleranceFactor': 16, 'TimeTillDisconnect': 24, 'MaxOccurrences': 32, 'MaxRecentOccurrences': 36, 'RecentPeriod': 40}    
    def __init__(self, ToleranceFactor: System.Single, TimeTillDisconnect: System.TimeSpan, MaxOccurrences: System.Int32, MaxRecentOccurrences: System.Int32, RecentPeriod: System.TimeSpan, **kwargs):
        super().__init__(self, **kwargs)
		self.ToleranceFactor = ToleranceFactor
		self.TimeTillDisconnect = TimeTillDisconnect
		self.MaxOccurrences = MaxOccurrences
		self.MaxRecentOccurrences = MaxRecentOccurrences
		self.RecentPeriod = RecentPeriod


class LatencyConfig:

    offsets = {'MaxAllowed': 16, 'SampleCount': 24, 'SampleInterval': 32, 'MeasurementTimeout': 40}    
    def __init__(self, MaxAllowed: System.TimeSpan, SampleCount: System.Int32, SampleInterval: System.TimeSpan, MeasurementTimeout: System.TimeSpan, **kwargs):
        super().__init__(self, **kwargs)
		self.MaxAllowed = MaxAllowed
		self.SampleCount = SampleCount
		self.SampleInterval = SampleInterval
		self.MeasurementTimeout = MeasurementTimeout


class ReconnectConfig:

    offsets = {'MaxAttempts': 16, 'Interval': 24}    
    def __init__(self, MaxAttempts: System.Int32, Interval: System.TimeSpan, **kwargs):
        super().__init__(self, **kwargs)
		self.MaxAttempts = MaxAttempts
		self.Interval = Interval


class RejoinConfig:

    offsets = {'ConfirmationPeriod': 16}    
    def __init__(self, ConfirmationPeriod: System.TimeSpan, **kwargs):
        super().__init__(self, **kwargs)
		self.ConfirmationPeriod = ConfirmationPeriod


class <>c:
	<>9: NinjaKiwi.LiNK.Lobbies.DebugGameConnection.<>c
    offsets = {'<>9': 0, '<>9__8_0': 8, '<>9__13_1': 16}    
    def __init__(self, <>9: NinjaKiwi.LiNK.Lobbies.DebugGameConnection.<>c, <>9__8_0: System.Func<NinjaKiwi.LiNK.Lobbies.DebugGameConnection.DebugPlayer,NinjaKiwi.LiNK.Lobbies.DebugGameConnection.DebugPlayer,System.Boolean>, <>9__13_1: System.Func<System.Collections.Generic.KeyValuePair<System.Byte,NinjaKiwi.LiNK.Lobbies.OtherPlayerPrivate>,NinjaKiwi.LiNK.Lobbies.DebugGameConnection.DebugOtherPlayer>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>9 = <>9
		self.<>9__8_0 = <>9__8_0
		self.<>9__13_1 = <>9__13_1


class <>c__DisplayClass13_0:

    offsets = {'instance': 16}    
    def __init__(self, instance: System.Collections.ICollection, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance


class DebugOtherPlayer:

    offsets = {'BasePlayer': 16, '<PlayerNumber>k__BackingField': 24}    
    def __init__(self, BasePlayer: NinjaKiwi.LiNK.Lobbies.OtherPlayerPrivate, <PlayerNumber>k__BackingField: System.Byte, **kwargs):
        super().__init__(self, **kwargs)
		self.BasePlayer = BasePlayer
		self.<PlayerNumber>k__BackingField = <PlayerNumber>k__BackingField


class DebugPlayer:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DebugSelfPlayer:

    offsets = {'BasePlayer': 16}    
    def __init__(self, BasePlayer: NinjaKiwi.LiNK.Lobbies.SelfPlayer, **kwargs):
        super().__init__(self, **kwargs)
		self.BasePlayer = BasePlayer


class <>c:
	<>9: NinjaKiwi.LiNK.Lobbies.GameConnection.<>c
    offsets = {'<>9': 0, '<>9__5_0': 8, '<>9__7_0': 16, '<>9__55_0': 24, '<>9__55_1': 32, '<>9__55_2': 40, '<>9__68_0': 48, '<>9__71_0': 56, '<>9__71_1': 64, '<>9__79_0': 72, '<>9__81_2': 80, '<>9__81_3': 88, '<>9__87_0': 96}    
    def __init__(self, <>9: NinjaKiwi.LiNK.Lobbies.GameConnection.<>c, <>9__5_0: System.Func<System.Collections.Generic.KeyValuePair<System.Byte,NinjaKiwi.LiNK.Lobbies.OtherPlayerPrivate>,NinjaKiwi.LiNK.Lobbies.Player>, <>9__7_0: System.Func<NinjaKiwi.LiNK.Lobbies.Player,NinjaKiwi.LiNK.Lobbies.Player,System.Boolean>, <>9__55_0: System.Func<System.Collections.Generic.KeyValuePair<System.Byte,NinjaKiwi.LiNK.Lobbies.OtherPlayerPrivate>,System.Boolean>, <>9__55_1: System.Func<System.Collections.Generic.KeyValuePair<System.Byte,NinjaKiwi.LiNK.Lobbies.OtherPlayerPrivate>,System.Byte>, <>9__55_2: System.Func<System.Collections.Generic.KeyValuePair<System.Byte,NinjaKiwi.LiNK.Lobbies.OtherPlayerPrivate>,NinjaKiwi.LiNK.Lobbies.OtherPlayerPrivate>, <>9__68_0: System.Func<NinjaKiwi.LiNK.Lobbies.OtherPlayerPrivate,System.Int32>, <>9__71_0: System.Func<System.Collections.Generic.KeyValuePair<System.Byte,NinjaKiwi.LiNK.Lobbies.OtherPlayerPrivate>,System.Byte>, <>9__71_1: System.Func<System.Collections.Generic.KeyValuePair<System.Byte,NinjaKiwi.LiNK.Lobbies.OtherPlayerPrivate>,System.Int32>, <>9__79_0: System.Func<System.Boolean,NinjaKiwi.LiNK.Lobbies.OtherPlayerPrivate,System.Boolean>, <>9__81_2: System.Func<System.Collections.Generic.KeyValuePair<System.Byte,NinjaKiwi.LiNK.Lobbies.OtherPlayerPrivate>,System.Boolean>, <>9__81_3: System.Func<System.Collections.Generic.KeyValuePair<System.Byte,NinjaKiwi.LiNK.Lobbies.OtherPlayerPrivate>,System.Boolean>, <>9__87_0: System.Func<System.Boolean,NinjaKiwi.LiNK.Lobbies.OtherPlayerPrivate,System.Boolean>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>9 = <>9
		self.<>9__5_0 = <>9__5_0
		self.<>9__7_0 = <>9__7_0
		self.<>9__55_0 = <>9__55_0
		self.<>9__55_1 = <>9__55_1
		self.<>9__55_2 = <>9__55_2
		self.<>9__68_0 = <>9__68_0
		self.<>9__71_0 = <>9__71_0
		self.<>9__71_1 = <>9__71_1
		self.<>9__79_0 = <>9__79_0
		self.<>9__81_2 = <>9__81_2
		self.<>9__81_3 = <>9__81_3
		self.<>9__87_0 = <>9__87_0


class <>c__DisplayClass61_0:

    offsets = {'playerNumber': 16, '<>4__this': 24}    
    def __init__(self, playerNumber: System.Byte, <>4__this: NinjaKiwi.LiNK.Lobbies.GameConnection, **kwargs):
        super().__init__(self, **kwargs)
		self.playerNumber = playerNumber
		self.<>4__this = <>4__this


class <OnDisconnected>d__74:

    offsets = {'<>1__state': 16, '<>t__builder': 24, '<>4__this': 56, 'reason': 64, '<>7__wrap1': 72, '<countdown>5__3': 80, '<startTime>5__4': 88, '<>u__1': 96, '<>u__2': 104}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncVoidMethodBuilder, <>4__this: NinjaKiwi.LiNK.Lobbies.GameConnection, reason: System.Exception, <>7__wrap1: System.Threading.CancellationTokenSource, <countdown>5__3: NinjaKiwi.LiNK.Lobbies.ManualCountdown, <startTime>5__4: System.DateTime, <>u__1: System.Runtime.CompilerServices.TaskAwaiter<NinjaKiwi.LiNK.Lobbies.NKMultiConnection>, <>u__2: System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.<>4__this = <>4__this
		self.reason = reason
		self.<>7__wrap1 = <>7__wrap1
		self.<countdown>5__3 = <countdown>5__3
		self.<startTime>5__4 = <startTime>5__4
		self.<>u__1 = <>u__1
		self.<>u__2 = <>u__2


class <OnOtherPlayerAWOL>d__84:

    offsets = {'<>1__state': 16, '<>t__builder': 24, '<>4__this': 56, 'playerNumber': 64, '<>u__1': 72}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncVoidMethodBuilder, <>4__this: NinjaKiwi.LiNK.Lobbies.GameConnection, playerNumber: System.Byte, <>u__1: System.Runtime.CompilerServices.TaskAwaiter, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.<>4__this = <>4__this
		self.playerNumber = playerNumber
		self.<>u__1 = <>u__1


class <ReceiveAwolMessage>d__85:

    offsets = {'<>1__state': 16, '<>t__builder': 24, 'received': 56, '<>4__this': 64, '<>u__1': 72}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncVoidMethodBuilder, received: NinjaKiwi.LiNK.Lobbies.NKMultiConnection.ReceivedMessage, <>4__this: NinjaKiwi.LiNK.Lobbies.GameConnection, <>u__1: System.Runtime.CompilerServices.TaskAwaiter, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.received = received
		self.<>4__this = <>4__this
		self.<>u__1 = <>u__1


class <Reconnect>d__75:

    offsets = {'<>1__state': 16, '<>t__builder': 24, '<>4__this': 48, 'canceller': 56, '<>u__1': 64}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<NinjaKiwi.LiNK.Lobbies.NKMultiConnection>, <>4__this: NinjaKiwi.LiNK.Lobbies.GameConnection, canceller: System.Threading.CancellationToken, <>u__1: System.Runtime.CompilerServices.TaskAwaiter<NinjaKiwi.LiNK.Lobbies.NKMultiConnection>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.<>4__this = <>4__this
		self.canceller = canceller
		self.<>u__1 = <>u__1


class <Rejoin>d__80:

    offsets = {'<>1__state': 16, '<>t__builder': 24, 'connectionDetails': 48, 'canceller': 56, 'debugMode': 64, 'players': 72, '<result>5__2': 80, '<>u__1': 88, '<>u__2': 96}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<NinjaKiwi.LiNK.Lobbies.GameConnection>, connectionDetails: NinjaKiwi.LiNK.Lobbies.ConnectionDetails, canceller: System.Threading.CancellationToken, debugMode: System.Boolean, players: System.Collections.Generic.SortedDictionary<System.Byte,System.String>, <result>5__2: NinjaKiwi.LiNK.Lobbies.GameConnection, <>u__1: System.Runtime.CompilerServices.TaskAwaiter<NinjaKiwi.LiNK.Lobbies.NKMultiConnection>, <>u__2: System.Runtime.CompilerServices.TaskAwaiter, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.connectionDetails = connectionDetails
		self.canceller = canceller
		self.debugMode = debugMode
		self.players = players
		self.<result>5__2 = <result>5__2
		self.<>u__1 = <>u__1
		self.<>u__2 = <>u__2


class <Rejoin>d__81:

    offsets = {'<>1__state': 16, '<>t__builder': 24, '<>4__this': 48, 'canceller': 56, '<waitEndTime>5__2': 64, '<>u__1': 72, '<>u__2': 80}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder, <>4__this: NinjaKiwi.LiNK.Lobbies.GameConnection, canceller: System.Threading.CancellationToken, <waitEndTime>5__2: System.DateTime, <>u__1: System.Runtime.CompilerServices.TaskAwaiter<NinjaKiwi.LiNK.Lobbies.NKMultiConnection>, <>u__2: System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.<>4__this = <>4__this
		self.canceller = canceller
		self.<waitEndTime>5__2 = <waitEndTime>5__2
		self.<>u__1 = <>u__1
		self.<>u__2 = <>u__2


class <UpdateUntilDisposed>d__66:

    offsets = {'<>1__state': 16, '<>t__builder': 24, '<>4__this': 56, '<>u__1': 64}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncVoidMethodBuilder, <>4__this: NinjaKiwi.LiNK.Lobbies.GameConnection, <>u__1: System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.<>4__this = <>4__this
		self.<>u__1 = <>u__1


class <WaitAndKick>d__87:

    offsets = {'<>1__state': 16, '<>t__builder': 24, 'player': 48, '<>4__this': 56, 'playerNumber': 64, '<timeTillDisconnect>5__2': 72, '<countdown>5__3': 80, '<startTime>5__4': 88, '<>u__1': 96}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder, player: NinjaKiwi.LiNK.Lobbies.OtherPlayerPrivate, <>4__this: NinjaKiwi.LiNK.Lobbies.GameConnection, playerNumber: System.Byte, <timeTillDisconnect>5__2: System.TimeSpan, <countdown>5__3: NinjaKiwi.LiNK.Lobbies.SecondsCountdown, <startTime>5__4: System.DateTime, <>u__1: System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.player = player
		self.<>4__this = <>4__this
		self.playerNumber = playerNumber
		self.<timeTillDisconnect>5__2 = <timeTillDisconnect>5__2
		self.<countdown>5__3 = <countdown>5__3
		self.<startTime>5__4 = <startTime>5__4
		self.<>u__1 = <>u__1


class AwolMessage:

    offsets = {'PlayerNumber': 16}    
    def __init__(self, PlayerNumber: System.Byte, **kwargs):
        super().__init__(self, **kwargs)
		self.PlayerNumber = PlayerNumber


class ExternalMessageToSend:

    offsets = {'MessageNumber': 16, 'Content': 24}    
    def __init__(self, MessageNumber: System.Int32, Content: NinjaKiwi.LiNK.Lobbies.Writable, **kwargs):
        super().__init__(self, **kwargs)
		self.MessageNumber = MessageNumber
		self.Content = Content


class KickMessage:

    offsets = {'PlayerNumber': 16, 'Reason': 24}    
    def __init__(self, PlayerNumber: System.Byte, Reason: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.PlayerNumber = PlayerNumber
		self.Reason = Reason


class LeaveMessage:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MessageCode:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Byte, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class MessageToSend:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class NotAwolMessage:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ReconnectMessage:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RejoinConfirmMessage:

    offsets = {'CurrentMessageNumber': 16}    
    def __init__(self, CurrentMessageNumber: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.CurrentMessageNumber = CurrentMessageNumber


class RejoinMessage:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class StartedMessage:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class StatusMessage:

    offsets = {'Counter': 16, 'Latency': 24, 'IsDelayed': 32, 'LastReceived': 40}    
    def __init__(self, Counter: System.UInt32, Latency: System.TimeSpan, IsDelayed: System.Boolean, LastReceived: System.Collections.Generic.Dictionary<System.Byte,System.Int32>, **kwargs):
        super().__init__(self, **kwargs)
		self.Counter = Counter
		self.Latency = Latency
		self.IsDelayed = IsDelayed
		self.LastReceived = LastReceived


class <>c:
	<>9: NinjaKiwi.LiNK.Lobbies.GameDetails.<>c
    offsets = {'<>9': 0, '<>9__3_0': 8, '<>9__3_1': 16}    
    def __init__(self, <>9: NinjaKiwi.LiNK.Lobbies.GameDetails.<>c, <>9__3_0: System.Func<NinjaKiwi.LiNK.Lobbies.Player,System.Byte>, <>9__3_1: System.Func<NinjaKiwi.LiNK.Lobbies.Player,System.String>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>9 = <>9
		self.<>9__3_0 = <>9__3_0
		self.<>9__3_1 = <>9__3_1


class <InsertWhere>d__0<T>:

    offsets = {'<>1__state': 0, '<>2__current': 0, '<>l__initialThreadId': 0, 'original': 0, '<>3__original': 0, 'predicate': 0, '<>3__predicate': 0, 'itemToAdd': 0, '<>3__itemToAdd': 0, '<added>5__2': 0, '<>7__wrap2': 0, '<item>5__4': 0}    
    def __init__(self, <>1__state: System.Int32, <>2__current: T, <>l__initialThreadId: System.Int32, original: System.Collections.Generic.IEnumerable<T>, <>3__original: System.Collections.Generic.IEnumerable<T>, predicate: System.Func<T,T,System.Boolean>, <>3__predicate: System.Func<T,T,System.Boolean>, itemToAdd: T, <>3__itemToAdd: T, <added>5__2: System.Boolean, <>7__wrap2: System.Collections.Generic.IEnumerator<T>, <item>5__4: T, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>2__current = <>2__current
		self.<>l__initialThreadId = <>l__initialThreadId
		self.original = original
		self.<>3__original = <>3__original
		self.predicate = predicate
		self.<>3__predicate = <>3__predicate
		self.itemToAdd = itemToAdd
		self.<>3__itemToAdd = <>3__itemToAdd
		self.<added>5__2 = <added>5__2
		self.<>7__wrap2 = <>7__wrap2
		self.<item>5__4 = <item>5__4


class <>c:
	<>9: NinjaKiwi.LiNK.Lobbies.LatencyMeasurements.LatencyHistory.<>c
    offsets = {'<>9': 0, '<>9__8_0': 8}    
    def __init__(self, <>9: NinjaKiwi.LiNK.Lobbies.LatencyMeasurements.LatencyHistory.<>c, <>9__8_0: System.Func<NinjaKiwi.LiNK.Lobbies.LatencyMeasurements.LatencyMeasurement,System.Boolean>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>9 = <>9
		self.<>9__8_0 = <>9__8_0


class <>c:
	<>9: NinjaKiwi.LiNK.Lobbies.LatencyMeasurements.StatsExtensions.<>c
    offsets = {'<>9': 0, '<>9__0_0': 8, '<>9__1_0': 16, '<>9__2_0': 24}    
    def __init__(self, <>9: NinjaKiwi.LiNK.Lobbies.LatencyMeasurements.StatsExtensions.<>c, <>9__0_0: System.Func<NinjaKiwi.LiNK.Lobbies.LatencyMeasurements.LatencyMeasurement,System.TimeSpan>, <>9__1_0: System.Func<System.TimeSpan,System.Int64>, <>9__2_0: System.Func<System.DateTime,System.Int64>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>9 = <>9
		self.<>9__0_0 = <>9__0_0
		self.<>9__1_0 = <>9__1_0
		self.<>9__2_0 = <>9__2_0


class <Migrate>d__19:

    offsets = {'<>1__state': 16, '<>t__builder': 24, '<>4__this': 48, 'newBucket': 56, '<>u__1': 64}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder, <>4__this: NinjaKiwi.LiNK.Lobbies.LiNKLobby, newBucket: System.String, <>u__1: System.Runtime.CompilerServices.TaskAwaiter<System.Boolean>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.<>4__this = <>4__this
		self.newBucket = newBucket
		self.<>u__1 = <>u__1


class <Rejoin>d__20:

    offsets = {'<>1__state': 16, '<>t__builder': 24, '<>4__this': 48, '<>u__1': 56}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder, <>4__this: NinjaKiwi.LiNK.Lobbies.LiNKLobby, <>u__1: System.Runtime.CompilerServices.TaskAwaiter<NinjaKiwi.LiNK.DataModels.LobbyModel>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.<>4__this = <>4__this
		self.<>u__1 = <>u__1


class FullException:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class NotAvailableException:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class NotCompatibleException:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class NotFoundException:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Create>d__2:

    offsets = {'<>1__state': 16, '<>t__builder': 24, 'liNK': 48, 'parameters': 56, '<>u__1': 64}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<NinjaKiwi.LiNK.Lobbies.LiNKLobby>, liNK: NinjaKiwi.LiNK.Api, parameters: NinjaKiwi.LiNK.Lobbies.MatchMakingParameters, <>u__1: System.Runtime.CompilerServices.TaskAwaiter<NinjaKiwi.LiNK.DataModels.LobbyModel>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.liNK = liNK
		self.parameters = parameters
		self.<>u__1 = <>u__1


class <Find>d__1:

    offsets = {'<>1__state': 16, '<>t__builder': 24, 'liNK': 48, 'parameters': 56, 'canceller': 64, '<>u__1': 72, '<>u__2': 80}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<NinjaKiwi.LiNK.Lobbies.LiNKLobby>, liNK: NinjaKiwi.LiNK.Api, parameters: NinjaKiwi.LiNK.Lobbies.MatchMakingParameters, canceller: System.Threading.CancellationToken, <>u__1: System.Runtime.CompilerServices.TaskAwaiter<NinjaKiwi.LiNK.Endpoints.Matchmaking_Find.Response>, <>u__2: System.Runtime.CompilerServices.TaskAwaiter<NinjaKiwi.LiNK.DataModels.LobbyModel>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.liNK = liNK
		self.parameters = parameters
		self.canceller = canceller
		self.<>u__1 = <>u__1
		self.<>u__2 = <>u__2


class <FindOrCreate>d__3:

    offsets = {'<>1__state': 16, '<>t__builder': 24, 'liNK': 48, 'parameters': 56, 'canceller': 64, '<>u__1': 72}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<NinjaKiwi.LiNK.Lobbies.LiNKLobby>, liNK: NinjaKiwi.LiNK.Api, parameters: NinjaKiwi.LiNK.Lobbies.MatchMakingParameters, canceller: System.Threading.CancellationToken, <>u__1: System.Runtime.CompilerServices.TaskAwaiter<NinjaKiwi.LiNK.Lobbies.LiNKLobby>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.liNK = liNK
		self.parameters = parameters
		self.canceller = canceller
		self.<>u__1 = <>u__1


class <Join>d__0:

    offsets = {'<>1__state': 16, '<>t__builder': 24, 'liNK': 48, 'lobbyID': 56, 'canceller': 64, 'parameters': 72, '<>u__1': 80}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<NinjaKiwi.LiNK.Lobbies.LiNKLobby>, liNK: NinjaKiwi.LiNK.Api, lobbyID: System.String, canceller: System.Threading.CancellationToken, parameters: NinjaKiwi.LiNK.Lobbies.MatchMakingParameters, <>u__1: System.Runtime.CompilerServices.TaskAwaiter<NinjaKiwi.LiNK.DataModels.LobbyModel>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.liNK = liNK
		self.lobbyID = lobbyID
		self.canceller = canceller
		self.parameters = parameters
		self.<>u__1 = <>u__1


class <Construct>d__4:

    offsets = {'<>1__state': 16, '<>t__builder': 24, 'pendingLiNKLobby': 48, 'canceller': 56, 'playerInfo': 64, '<liNKLobby>5__2': 72, '<>u__1': 80, '<>u__2': 88, '<>7__wrap2': 96, '<>u__3': 104}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<NinjaKiwi.LiNK.Lobbies.LobbyConnection>, pendingLiNKLobby: System.Threading.Tasks.Task<NinjaKiwi.LiNK.Lobbies.LiNKLobby>, canceller: System.Threading.CancellationToken, playerInfo: System.String, <liNKLobby>5__2: NinjaKiwi.LiNK.Lobbies.LiNKLobby, <>u__1: System.Runtime.CompilerServices.TaskAwaiter<NinjaKiwi.LiNK.Lobbies.LiNKLobby>, <>u__2: System.Runtime.CompilerServices.TaskAwaiter, <>7__wrap2: System.Object, <>u__3: System.Runtime.CompilerServices.TaskAwaiter<NinjaKiwi.LiNK.Lobbies.LobbyConnection>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.pendingLiNKLobby = pendingLiNKLobby
		self.canceller = canceller
		self.playerInfo = playerInfo
		self.<liNKLobby>5__2 = <liNKLobby>5__2
		self.<>u__1 = <>u__1
		self.<>u__2 = <>u__2
		self.<>7__wrap2 = <>7__wrap2
		self.<>u__3 = <>u__3


class FullException:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class NotCompatibleException:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class NotFoundException:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <Connect>d__57:

    offsets = {'<>1__state': 16, '<>t__builder': 24, 'liNKLobby': 48, 'canceller': 56, 'playerInfo': 64, '<>u__1': 72}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<NinjaKiwi.LiNK.Lobbies.LobbyConnection>, liNKLobby: NinjaKiwi.LiNK.Lobbies.LiNKLobby, canceller: System.Threading.CancellationToken, playerInfo: System.String, <>u__1: System.Runtime.CompilerServices.TaskAwaiter<NinjaKiwi.LiNK.Lobbies.NKMultiConnection>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.liNKLobby = liNKLobby
		self.canceller = canceller
		self.playerInfo = playerInfo
		self.<>u__1 = <>u__1


class <OnDisconnected>d__71:

    offsets = {'<>1__state': 16, '<>t__builder': 24, '<>4__this': 56, 'reason': 64, '<retries>5__2': 72, '<startTime>5__3': 80, '<>u__1': 88, '<>u__2': 96}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncVoidMethodBuilder, <>4__this: NinjaKiwi.LiNK.Lobbies.LobbyConnection, reason: System.Exception, <retries>5__2: System.Int32, <startTime>5__3: System.DateTime, <>u__1: System.Runtime.CompilerServices.TaskAwaiter<NinjaKiwi.LiNK.Lobbies.NKMultiConnection>, <>u__2: System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.<>4__this = <>4__this
		self.reason = reason
		self.<retries>5__2 = <retries>5__2
		self.<startTime>5__3 = <startTime>5__3
		self.<>u__1 = <>u__1
		self.<>u__2 = <>u__2


class <Reconnect>d__72:

    offsets = {'<>1__state': 16, '<>t__builder': 24, '<>4__this': 48, 'canceller': 56, '<>u__1': 64, '<>u__2': 72}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<NinjaKiwi.LiNK.Lobbies.NKMultiConnection>, <>4__this: NinjaKiwi.LiNK.Lobbies.LobbyConnection, canceller: System.Threading.CancellationToken, <>u__1: System.Runtime.CompilerServices.TaskAwaiter, <>u__2: System.Runtime.CompilerServices.TaskAwaiter<NinjaKiwi.LiNK.Lobbies.NKMultiConnection>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.<>4__this = <>4__this
		self.canceller = canceller
		self.<>u__1 = <>u__1
		self.<>u__2 = <>u__2


class <UpdateTillDisposed>d__58:

    offsets = {'<>1__state': 16, '<>t__builder': 24, '<>4__this': 56, '<>u__1': 64}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncVoidMethodBuilder, <>4__this: NinjaKiwi.LiNK.Lobbies.LobbyConnection, <>u__1: System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.<>4__this = <>4__this
		self.<>u__1 = <>u__1


class ExternalMessageToSend:

    offsets = {'Content': 16}    
    def __init__(self, Content: NinjaKiwi.LiNK.Lobbies.Writable, **kwargs):
        super().__init__(self, **kwargs)
		self.Content = Content


class MessageCode:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Byte, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class MessageToSend:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PlayerInfoMessage:

    offsets = {'PlayerInfo': 16}    
    def __init__(self, PlayerInfo: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.PlayerInfo = PlayerInfo


class RequestStartMessage:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class StartMessage:

    offsets = {'Players': 16}    
    def __init__(self, Players: System.Collections.Generic.SortedDictionary<System.Byte,System.String>, **kwargs):
        super().__init__(self, **kwargs)
		self.Players = Players


class <GetEnumerator>d__6:

    offsets = {'<>1__state': 16, '<>2__current': 24, '<>4__this': 32}    
    def __init__(self, <>1__state: System.Int32, <>2__current: System.Threading.Tasks.Task<System.Int32>, <>4__this: NinjaKiwi.LiNK.Lobbies.ManualCountdown, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>2__current = <>2__current
		self.<>4__this = <>4__this


class <Connect>d__19:

    offsets = {'<>1__state': 16, '<>t__builder': 24, 'connectionDetails': 48, 'canceller': 56, '<connection>5__2': 64, '<>u__1': 72}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<NinjaKiwi.LiNK.Lobbies.NKMultiConnection>, connectionDetails: NinjaKiwi.LiNK.Lobbies.ConnectionDetails, canceller: System.Threading.CancellationToken, <connection>5__2: NinjaKiwi.LiNK.Lobbies.NKMultiConnection, <>u__1: System.Runtime.CompilerServices.TaskAwaiter, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.connectionDetails = connectionDetails
		self.canceller = canceller
		self.<connection>5__2 = <connection>5__2
		self.<>u__1 = <>u__1


class LatencyUpdate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ReceivedMessage:

    offsets = {'FromPlayer': 16, 'Content': 24}    
    def __init__(self, FromPlayer: System.Byte, Content: System.IO.BinaryReader, **kwargs):
        super().__init__(self, **kwargs)
		self.FromPlayer = FromPlayer
		self.Content = Content


class <>c:
	<>9: NinjaKiwi.LiNK.Lobbies.OtherPlayerPrivate.<>c
    offsets = {'<>9': 0, '<>9__49_0': 8, '<>9__55_1': 16, '<>9__55_2': 24}    
    def __init__(self, <>9: NinjaKiwi.LiNK.Lobbies.OtherPlayerPrivate.<>c, <>9__49_0: System.Func<NinjaKiwi.LiNK.Lobbies.LatencyMeasurements.LatencyMeasurement,System.Nullable<System.Int32>>, <>9__55_1: System.Func<System.DateTime,System.Int64>, <>9__55_2: System.Func<System.DateTime,System.Int64>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>9 = <>9
		self.<>9__49_0 = <>9__49_0
		self.<>9__55_1 = <>9__55_1
		self.<>9__55_2 = <>9__55_2


class NormalisedStats:

    offsets = {'Variance': 16, 'PredictedTime': 24}    
    def __init__(self, Variance: System.TimeSpan, PredictedTime: System.DateTime, **kwargs):
        super().__init__(self, **kwargs)
		self.Variance = Variance
		self.PredictedTime = PredictedTime


class <GetEnumerator>d__4:

    offsets = {'<>1__state': 16, '<>2__current': 24, '<>4__this': 32}    
    def __init__(self, <>1__state: System.Int32, <>2__current: System.Threading.Tasks.Task<System.Int32>, <>4__this: NinjaKiwi.LiNK.Lobbies.SecondsCountdown, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>2__current = <>2__current
		self.<>4__this = <>4__this


class <WaitUntil>d__5:

    offsets = {'<>1__state': 16, '<>t__builder': 24, '<>4__this': 48, 'endTime': 56, 'result': 64, '<>u__1': 68}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<System.Int32>, <>4__this: NinjaKiwi.LiNK.Lobbies.SecondsCountdown, endTime: System.DateTime, result: System.Int32, <>u__1: System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.<>4__this = <>4__this
		self.endTime = endTime
		self.result = result
		self.<>u__1 = <>u__1


class ByteLayer:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class IntLayer:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Layer<T>:

    offsets = {'Value': 0, 'Content': 0}    
    def __init__(self, Value: T, Content: NinjaKiwi.LiNK.Lobbies.Writable, **kwargs):
        super().__init__(self, **kwargs)
		self.Value = Value
		self.Content = Content


class Part:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class <>c:
	<>9: NinjaKiwi.NKMulti.NKMultiConnector.<>c
    offsets = {'<>9': 0, '<>9__0_0': 8}    
    def __init__(self, <>9: NinjaKiwi.NKMulti.NKMultiConnector.<>c, <>9__0_0: System.Func<System.Net.IPAddress,System.Net.Sockets.AddressFamily>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>9 = <>9
		self.<>9__0_0 = <>9__0_0


class <Connect>d__0:

    offsets = {'<>1__state': 16, '<>t__builder': 24, 'host': 48, 'canceller': 56, 'port': 64, '<>7__wrap1': 80, '<>u__2': 88}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<NinjaKiwi.NKMulti.NKMultiConnection>, host: System.String, canceller: System.Threading.CancellationToken, port: System.Int32, <>7__wrap1: System.Collections.Generic.IEnumerator<System.Net.IPAddress>, <>u__2: System.Runtime.CompilerServices.TaskAwaiter<System.Net.Sockets.Socket>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.host = host
		self.canceller = canceller
		self.port = port
		self.<>7__wrap1 = <>7__wrap1
		self.<>u__2 = <>u__2


class <ConnectTo>d__1:

    offsets = {'<>1__state': 16, '<>t__builder': 24, 'ip': 48, 'port': 56, '<socket>5__2': 64, '<>u__1': 72}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<System.Net.Sockets.Socket>, ip: System.Net.IPAddress, port: System.Int32, <socket>5__2: System.Net.Sockets.Socket, <>u__1: System.Runtime.CompilerServices.TaskAwaiter, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.ip = ip
		self.port = port
		self.<socket>5__2 = <socket>5__2
		self.<>u__1 = <>u__1


class <Connect>d__33:

    offsets = {'<>1__state': 16, '<>t__builder': 24, '<>4__this': 48, 'canceller': 56, '<>u__1': 64, '<>u__2': 72}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder, <>4__this: NinjaKiwi.NKMulti.NKMultiGameInterface, canceller: System.Threading.CancellationToken, <>u__1: System.Runtime.CompilerServices.TaskAwaiter<NinjaKiwi.NKMulti.NKMultiConnection>, <>u__2: System.Runtime.CompilerServices.TaskAwaiter, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.<>4__this = <>4__this
		self.canceller = canceller
		self.<>u__1 = <>u__1
		self.<>u__2 = <>u__2


class <GetFreshLatency>d__41:

    offsets = {'<>1__state': 16, '<>t__builder': 24, '<>4__this': 48, '<>u__1': 56, '<>u__2': 64}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<System.TimeSpan>, <>4__this: NinjaKiwi.NKMulti.NKMultiGameInterface, <>u__1: System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter, <>u__2: System.Runtime.CompilerServices.TaskAwaiter<System.TimeSpan>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.<>4__this = <>4__this
		self.<>u__1 = <>u__1
		self.<>u__2 = <>u__2


class <IsConnectionOk>d__42:

    offsets = {'<>1__state': 16, '<>t__builder': 24, '<>4__this': 48, 'thresholdMs': 56, '<>u__1': 64}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<System.Boolean>, <>4__this: NinjaKiwi.NKMulti.NKMultiGameInterface, thresholdMs: System.Int32, <>u__1: System.Runtime.CompilerServices.TaskAwaiter<System.TimeSpan>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.<>4__this = <>4__this
		self.thresholdMs = thresholdMs
		self.<>u__1 = <>u__1


class <Join>d__34:

    offsets = {'<>1__state': 16, '<>t__builder': 24, '<>4__this': 48, 'canceller': 56, '<>u__1': 64, '<>u__2': 72}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder, <>4__this: NinjaKiwi.NKMulti.NKMultiGameInterface, canceller: System.Threading.CancellationToken, <>u__1: System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter, <>u__2: System.Runtime.CompilerServices.TaskAwaiter<System.Boolean>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.<>4__this = <>4__this
		self.canceller = canceller
		self.<>u__1 = <>u__1
		self.<>u__2 = <>u__2


class <MeasureLatency>d__40:

    offsets = {'<>1__state': 16, '<>t__builder': 24, '<>4__this': 56, 'isDelayed': 64, 'measurementCount': 68, '<measurement>5__2': 72, '<timeBeforeYield>5__3': 80, '<>u__1': 88}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncVoidMethodBuilder, <>4__this: NinjaKiwi.NKMulti.NKMultiGameInterface, isDelayed: System.Boolean, measurementCount: System.UInt32, <measurement>5__2: System.Threading.Tasks.Task<System.TimeSpan>, <timeBeforeYield>5__3: System.DateTime, <>u__1: System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.<>4__this = <>4__this
		self.isDelayed = isDelayed
		self.measurementCount = measurementCount
		self.<measurement>5__2 = <measurement>5__2
		self.<timeBeforeYield>5__3 = <timeBeforeYield>5__3
		self.<>u__1 = <>u__1


class <SendPing>d__46:

    offsets = {'<>1__state': 16, '<>t__builder': 24, '<>4__this': 56, 'ping': 64, '<>u__1': 72}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncVoidMethodBuilder, <>4__this: NinjaKiwi.NKMulti.NKMultiGameInterface, ping: NinjaKiwi.NKMulti.NKMultiGameInterface.Ping, <>u__1: System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.<>4__this = <>4__this
		self.ping = ping
		self.<>u__1 = <>u__1


class Ping:

    offsets = {'SendTime': 24}    
    def __init__(self, SendTime: System.DateTime, **kwargs):
        super().__init__(self, **kwargs)
		self.SendTime = SendTime


class <>c:
	<>9: NinjaKiwi.Players.LiNKAccountControllers.MobileWebviewLiNKAccountController.<>c
    offsets = {'<>9': 0, '<>9__17_0': 8}    
    def __init__(self, <>9: NinjaKiwi.Players.LiNKAccountControllers.MobileWebviewLiNKAccountController.<>c, <>9__17_0: System.Action, **kwargs):
        super().__init__(self, **kwargs)
		self.<>9 = <>9
		self.<>9__17_0 = <>9__17_0


class <OpenAccountPanel>d__11:

    offsets = {'<>1__state': 16, '<>t__builder': 24, '<>4__this': 48, '<>u__1': 56}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder, <>4__this: NinjaKiwi.Players.LiNKAccountControllers.MobileWebviewLiNKAccountController, <>u__1: System.Runtime.CompilerServices.TaskAwaiter, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.<>4__this = <>4__this
		self.<>u__1 = <>u__1


class <PerformAccountTask>d__16:

    offsets = {'<>1__state': 16, '<>t__builder': 24, '<>4__this': 56, 'task': 64, 'provider': 72, '<>u__1': 80}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncVoidMethodBuilder, <>4__this: NinjaKiwi.Players.LiNKAccountControllers.MobileWebviewLiNKAccountController, task: System.Threading.Tasks.Task, provider: NinjaKiwi.LiNK.AuthenticationProviders.AuthProviderType, <>u__1: System.Runtime.CompilerServices.TaskAwaiter, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.<>4__this = <>4__this
		self.task = task
		self.provider = provider
		self.<>u__1 = <>u__1


class <PerformLoadTask>d__15:

    offsets = {'<>1__state': 16, '<>t__builder': 24, '<>4__this': 48, 'task': 56, '<>u__1': 64}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder, <>4__this: NinjaKiwi.Players.LiNKAccountControllers.MobileWebviewLiNKAccountController, task: System.Threading.Tasks.Task, <>u__1: System.Runtime.CompilerServices.TaskAwaiter, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.<>4__this = <>4__this
		self.task = task
		self.<>u__1 = <>u__1


class <createEverything>d__13:

    offsets = {'<>1__state': 16, '<>t__builder': 24, '<>4__this': 48, '<>u__1': 56}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder, <>4__this: NinjaKiwi.Players.LiNKAccountControllers.MobileWebviewLiNKAccountController, <>u__1: System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.<>4__this = <>4__this
		self.<>u__1 = <>u__1


class <LoadAsync>d__34:

    offsets = {'<>1__state': 16, '<>2__current': 24, '<>4__this': 32, 'url': 40}    
    def __init__(self, <>1__state: System.Int32, <>2__current: System.Object, <>4__this: NinjaKiwi.Players.LiNKAccountControllers.SteamWebView, url: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>2__current = <>2__current
		self.<>4__this = <>4__this
		self.url = url


class LoadCompleteDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class StartRequestDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class <>c:
	<>9: NinjaKiwi.Players.LiNKAccountControllers.WebviewFromPlugin.<>c
    offsets = {'<>9': 0, '<>9__35_0': 8}    
    def __init__(self, <>9: NinjaKiwi.Players.LiNKAccountControllers.WebviewFromPlugin.<>c, <>9__35_0: UniWebView.ShouldCloseDelegate, **kwargs):
        super().__init__(self, **kwargs)
		self.<>9 = <>9
		self.<>9__35_0 = <>9__35_0


class <>c__DisplayClass27_0:

    offsets = {'<>4__this': 16, 'OnPageFinished': 24, 'OnPageErrorReceived': 32, 'timeoutCanceller': 40, 'taskCompletionSource': 48, 'url': 56}    
    def __init__(self, <>4__this: NinjaKiwi.Players.LiNKAccountControllers.WebviewFromPlugin, OnPageFinished: UniWebView.PageFinishedDelegate, OnPageErrorReceived: UniWebView.PageErrorReceivedDelegate, timeoutCanceller: System.Threading.CancellationTokenSource, taskCompletionSource: System.Threading.Tasks.TaskCompletionSource<System.Boolean>, url: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.<>4__this = <>4__this
		self.OnPageFinished = OnPageFinished
		self.OnPageErrorReceived = OnPageErrorReceived
		self.timeoutCanceller = timeoutCanceller
		self.taskCompletionSource = taskCompletionSource
		self.url = url


class <startTimeout>d__28:

    offsets = {'<>1__state': 16, '<>2__current': 24, 'canceller': 32, '<>4__this': 40, 'taskCompletionSource': 48, 'url': 56, '<timeoutEnd>5__2': 64}    
    def __init__(self, <>1__state: System.Int32, <>2__current: System.Object, canceller: System.Threading.CancellationToken, <>4__this: NinjaKiwi.Players.LiNKAccountControllers.WebviewFromPlugin, taskCompletionSource: System.Threading.Tasks.TaskCompletionSource<System.Boolean>, url: System.String, <timeoutEnd>5__2: System.DateTime, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>2__current = <>2__current
		self.canceller = canceller
		self.<>4__this = <>4__this
		self.taskCompletionSource = taskCompletionSource
		self.url = url
		self.<timeoutEnd>5__2 = <timeoutEnd>5__2


class Response:

    offsets = {'error': 16, 'sig': 24, 'data': 32}    
    def __init__(self, error: NinjaKiwi.LiNK.Exceptions.InvalidRequestException, sig: System.String, data: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.error = error
		self.sig = sig
		self.data = data


class <>c:
	<>9: Ninjakiwi.BuildAutomation.BundleLoader.<>c
    offsets = {'<>9': 0, '<>9__14_0': 8, '<>9__18_1': 16, '<>9__18_2': 24}    
    def __init__(self, <>9: Ninjakiwi.BuildAutomation.BundleLoader.<>c, <>9__14_0: System.Func<System.String,System.Collections.Generic.IEnumerable<System.String>>, <>9__18_1: System.Func<System.Collections.Generic.KeyValuePair<System.String,Ninjakiwi.BuildAutomation.BundleInfo>,System.Int64>, <>9__18_2: System.Func<System.Collections.Generic.KeyValuePair<System.String,Ninjakiwi.BuildAutomation.BundleInfo>,System.Int64>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>9 = <>9
		self.<>9__14_0 = <>9__14_0
		self.<>9__18_1 = <>9__18_1
		self.<>9__18_2 = <>9__18_2


class <>c__DisplayClass15_0:

    offsets = {'hash': 16}    
    def __init__(self, hash: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.hash = hash


class <>c__DisplayClass16_0:

    offsets = {'tcs': 16}    
    def __init__(self, tcs: System.Threading.Tasks.TaskCompletionSource<UnityEngine.AddressableAssets.ResourceLocators.IResourceLocator>, **kwargs):
        super().__init__(self, **kwargs)
		self.tcs = tcs


class <>c__DisplayClass17_0:

    offsets = {'tcs': 16}    
    def __init__(self, tcs: System.Threading.Tasks.TaskCompletionSource<System.String>, **kwargs):
        super().__init__(self, **kwargs)
		self.tcs = tcs


class <>c__DisplayClass18_0:

    offsets = {'bundleInfos': 16, 'tcs': 24}    
    def __init__(self, bundleInfos: System.Collections.Generic.Dictionary<System.String,Ninjakiwi.BuildAutomation.BundleInfo>, tcs: System.Threading.Tasks.TaskCompletionSource<System.Int64>, **kwargs):
        super().__init__(self, **kwargs)
		self.bundleInfos = bundleInfos
		self.tcs = tcs


class <ClearBundleCacheAsync>d__15:

    offsets = {'<>1__state': 16, '<>t__builder': 24, 'bundleInfos': 48, '<>u__1': 56}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder, bundleInfos: System.Collections.Generic.Dictionary<System.String,Ninjakiwi.BuildAutomation.BundleInfo>, <>u__1: System.Runtime.CompilerServices.TaskAwaiter, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.bundleInfos = bundleInfos
		self.<>u__1 = <>u__1


class <DownloadDependenciesAsync>d__20:

    offsets = {'<>1__state': 16, '<>t__builder': 24, 'progressMessage': 48, 'keys': 56, '<downloadDependenciesReq>5__2': 64, '<>u__1': 88}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder, progressMessage: Assets.Main.ProgressMessageObject, keys: System.Collections.Generic.IEnumerable<System.Object>, <downloadDependenciesReq>5__2: UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle, <>u__1: System.Runtime.CompilerServices.TaskAwaiter, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.progressMessage = progressMessage
		self.keys = keys
		self.<downloadDependenciesReq>5__2 = <downloadDependenciesReq>5__2
		self.<>u__1 = <>u__1


class <GetBundleInfosAsync>d__17:

    offsets = {'<>1__state': 16, '<>t__builder': 24, 'path': 48, '<>u__1': 56}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<System.Collections.Generic.Dictionary<System.String,Ninjakiwi.BuildAutomation.BundleInfo>>, path: System.String, <>u__1: System.Runtime.CompilerServices.TaskAwaiter<System.String>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.path = path
		self.<>u__1 = <>u__1


class <GetDownloadSizeAsync>d__18:

    offsets = {'<>1__state': 16, '<>t__builder': 24, 'bundleInfos': 48, 'keys': 56, '<>u__1': 64}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<System.Int64>, bundleInfos: System.Collections.Generic.Dictionary<System.String,Ninjakiwi.BuildAutomation.BundleInfo>, keys: System.Collections.Generic.IEnumerable<System.Object>, <>u__1: System.Runtime.CompilerServices.TaskAwaiter<System.Int64>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.bundleInfos = bundleInfos
		self.keys = keys
		self.<>u__1 = <>u__1


class <InitialiseAddressablesAsync>d__16:

    offsets = {'<>1__state': 16, '<>t__builder': 24, '<>u__1': 48}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<UnityEngine.AddressableAssets.ResourceLocators.IResourceLocator>, <>u__1: System.Runtime.CompilerServices.TaskAwaiter<UnityEngine.AddressableAssets.ResourceLocators.IResourceLocator>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.<>u__1 = <>u__1


class <LoadBundlesAsync>d__21:

    offsets = {'<>1__state': 16, '<>t__builder': 24, 'initialLoadingScreen': 48, 'simpleMessage': 56, 'progressMessage': 64, '<currentSleepTimeout>5__2': 72, '<resourceLocator>5__3': 80, '<bytesToDownload>5__4': 88, '<>u__1': 96, '<bundleInfos>5__5': 104, '<>u__2': 112, '<>u__3': 120, '<>u__4': 128, '<ex>5__6': 136}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder, initialLoadingScreen: Assets.Main.Scenes.InitialLoadingScreen, simpleMessage: Assets.Main.SimpleMessageObject, progressMessage: Assets.Main.ProgressMessageObject, <currentSleepTimeout>5__2: System.Int32, <resourceLocator>5__3: UnityEngine.AddressableAssets.ResourceLocators.IResourceLocator, <bytesToDownload>5__4: System.Int64, <>u__1: System.Runtime.CompilerServices.TaskAwaiter<UnityEngine.AddressableAssets.ResourceLocators.IResourceLocator>, <bundleInfos>5__5: System.Collections.Generic.Dictionary<System.String,Ninjakiwi.BuildAutomation.BundleInfo>, <>u__2: System.Runtime.CompilerServices.TaskAwaiter<System.Collections.Generic.Dictionary<System.String,Ninjakiwi.BuildAutomation.BundleInfo>>, <>u__3: System.Runtime.CompilerServices.TaskAwaiter, <>u__4: System.Runtime.CompilerServices.TaskAwaiter<System.Int64>, <ex>5__6: System.Exception, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.initialLoadingScreen = initialLoadingScreen
		self.simpleMessage = simpleMessage
		self.progressMessage = progressMessage
		self.<currentSleepTimeout>5__2 = <currentSleepTimeout>5__2
		self.<resourceLocator>5__3 = <resourceLocator>5__3
		self.<bytesToDownload>5__4 = <bytesToDownload>5__4
		self.<>u__1 = <>u__1
		self.<bundleInfos>5__5 = <bundleInfos>5__5
		self.<>u__2 = <>u__2
		self.<>u__3 = <>u__3
		self.<>u__4 = <>u__4
		self.<ex>5__6 = <ex>5__6


class <WaitForSecondsAsync>d__9:

    offsets = {'<>1__state': 16, '<>t__builder': 24, 'seconds': 48, '<>u__1': 56}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder, seconds: System.Single, <>u__1: System.Runtime.CompilerServices.TaskAwaiter, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.seconds = seconds
		self.<>u__1 = <>u__1


class <WaitUntilUserIsOnlineAsync>d__19:

    offsets = {'<>1__state': 16, '<>t__builder': 24, 'simpleMessage': 48, '<>u__1': 56}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder, simpleMessage: Assets.Main.SimpleMessageObject, <>u__1: System.Runtime.CompilerServices.TaskAwaiter, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.simpleMessage = simpleMessage
		self.<>u__1 = <>u__1


class OnClickHandler:

    offsets = {'clicksBeforeActivate': 24, 'activationsTillDestroy': 28, 'clickInterval': 32, 'activationLockTime': 36, 'currentClicks': 40, 'currentActivations': 44, 'currentLockTime': 48, 'currentTime': 52, 'onActivated': 56}    
    def __init__(self, clicksBeforeActivate: System.Int32, activationsTillDestroy: System.Int32, clickInterval: System.Single, activationLockTime: System.Single, currentClicks: System.Int32, currentActivations: System.Int32, currentLockTime: System.Single, currentTime: System.Single, onActivated: System.Action<UnityEngine.GameObject>, **kwargs):
        super().__init__(self, **kwargs)
		self.clicksBeforeActivate = clicksBeforeActivate
		self.activationsTillDestroy = activationsTillDestroy
		self.clickInterval = clickInterval
		self.activationLockTime = activationLockTime
		self.currentClicks = currentClicks
		self.currentActivations = currentActivations
		self.currentLockTime = currentLockTime
		self.currentTime = currentTime
		self.onActivated = onActivated


class ParagonDegreeData:

    offsets = {'attackCooldownReductionX': 32, 'piercePercentPerDegree': 36, 'pierceIncreasePerDegree': 40, 'damagePercentPerDegree': 44, 'damageIncreasePerDegree': 48, 'damageIncreaseForDegrees': 52, 'degreeCount': 56, 'maxPowerFromPops': 60, 'maxPowerFromMoneySpent': 64, 'maxPowerFromNonTier5Count': 68, 'maxPowerFromTier5Count': 72, 'popsOverX': 76, 'moneySpentOverX': 80, 'nonTier5TowersMultByX': 84, 'tier5TowersMultByX': 88, 'bonusBossDamagePercent': 92, 'bonusBossDamagePerDegrees': 96}    
    def __init__(self, attackCooldownReductionX: System.Single, piercePercentPerDegree: System.Single, pierceIncreasePerDegree: System.Single, damagePercentPerDegree: System.Single, damageIncreasePerDegree: System.Single, damageIncreaseForDegrees: System.Single, degreeCount: System.Int32, maxPowerFromPops: System.Int32, maxPowerFromMoneySpent: System.Int32, maxPowerFromNonTier5Count: System.Int32, maxPowerFromTier5Count: System.Int32, popsOverX: System.Single, moneySpentOverX: System.Single, nonTier5TowersMultByX: System.Single, tier5TowersMultByX: System.Single, bonusBossDamagePercent: System.Single, bonusBossDamagePerDegrees: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.attackCooldownReductionX = attackCooldownReductionX
		self.piercePercentPerDegree = piercePercentPerDegree
		self.pierceIncreasePerDegree = pierceIncreasePerDegree
		self.damagePercentPerDegree = damagePercentPerDegree
		self.damageIncreasePerDegree = damageIncreasePerDegree
		self.damageIncreaseForDegrees = damageIncreaseForDegrees
		self.degreeCount = degreeCount
		self.maxPowerFromPops = maxPowerFromPops
		self.maxPowerFromMoneySpent = maxPowerFromMoneySpent
		self.maxPowerFromNonTier5Count = maxPowerFromNonTier5Count
		self.maxPowerFromTier5Count = maxPowerFromTier5Count
		self.popsOverX = popsOverX
		self.moneySpentOverX = moneySpentOverX
		self.nonTier5TowersMultByX = nonTier5TowersMultByX
		self.tier5TowersMultByX = tier5TowersMultByX
		self.bonusBossDamagePercent = bonusBossDamagePercent
		self.bonusBossDamagePerDegrees = bonusBossDamagePerDegrees


class ParagonDegreeDataModel:

    offsets = {'attackCooldownReductionX': 24, 'piercePercentPerDegree': 28, 'pierceIncreasePerDegree': 32, 'damagePercentPerDegree': 36, 'damageIncreasePerDegree': 40, 'damageIncreaseForDegrees': 44, 'degreeCount': 48, 'maxPowerFromPops': 52, 'maxPowerFromMoneySpent': 56, 'maxPowerFromNonTier5Count': 60, 'maxPowerFromTier5Count': 64, 'popsOverX': 68, 'moneySpentOverX': 72, 'nonTier5TowersMultByX': 76, 'tier5TowersMultByX': 80, 'bonusBossDamagePercent': 84, 'bonusBossDamagePerDegrees': 88}    
    def __init__(self, attackCooldownReductionX: System.Single, piercePercentPerDegree: System.Single, pierceIncreasePerDegree: System.Single, damagePercentPerDegree: System.Single, damageIncreasePerDegree: System.Single, damageIncreaseForDegrees: System.Single, degreeCount: System.Int32, maxPowerFromPops: System.Int32, maxPowerFromMoneySpent: System.Int32, maxPowerFromNonTier5Count: System.Int32, maxPowerFromTier5Count: System.Int32, popsOverX: System.Single, moneySpentOverX: System.Single, nonTier5TowersMultByX: System.Single, tier5TowersMultByX: System.Single, bonusBossDamagePercent: System.Single, bonusBossDamagePerDegrees: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.attackCooldownReductionX = attackCooldownReductionX
		self.piercePercentPerDegree = piercePercentPerDegree
		self.pierceIncreasePerDegree = pierceIncreasePerDegree
		self.damagePercentPerDegree = damagePercentPerDegree
		self.damageIncreasePerDegree = damageIncreasePerDegree
		self.damageIncreaseForDegrees = damageIncreaseForDegrees
		self.degreeCount = degreeCount
		self.maxPowerFromPops = maxPowerFromPops
		self.maxPowerFromMoneySpent = maxPowerFromMoneySpent
		self.maxPowerFromNonTier5Count = maxPowerFromNonTier5Count
		self.maxPowerFromTier5Count = maxPowerFromTier5Count
		self.popsOverX = popsOverX
		self.moneySpentOverX = moneySpentOverX
		self.nonTier5TowersMultByX = nonTier5TowersMultByX
		self.tier5TowersMultByX = tier5TowersMultByX
		self.bonusBossDamagePercent = bonusBossDamagePercent
		self.bonusBossDamagePerDegrees = bonusBossDamagePerDegrees


class PauseEditorOnAwake:

    offsets = {'pauseOnAwake': 24, 'pauseOnStart': 25, 'pauseOnEnable': 26, 'pauseOnDisable': 27}    
    def __init__(self, pauseOnAwake: System.Boolean, pauseOnStart: System.Boolean, pauseOnEnable: System.Boolean, pauseOnDisable: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.pauseOnAwake = pauseOnAwake
		self.pauseOnStart = pauseOnStart
		self.pauseOnEnable = pauseOnEnable
		self.pauseOnDisable = pauseOnDisable


class PlacementZone:

    offsets = {'towerAreaType': 16, 'canPlaceOnMapAreaType': 20, 'position': 24, 'radius': 36, 'mutator': 40}    
    def __init__(self, towerAreaType: Assets.Scripts.Models.Map.AreaType, canPlaceOnMapAreaType: Assets.Scripts.Models.Map.AreaType, position: Assets.Scripts.Simulation.SMath.Vector3, radius: System.Single, mutator: Assets.Scripts.Simulation.Objects.BehaviorMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.towerAreaType = towerAreaType
		self.canPlaceOnMapAreaType = canPlaceOnMapAreaType
		self.position = position
		self.radius = radius
		self.mutator = mutator


class PlayAnimationOnClick:

    offsets = {'trigger': 64}    
    def __init__(self, trigger: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.trigger = trigger


class PlayAnimationToEnd:

    offsets = {'paramaterName': 24}    
    def __init__(self, paramaterName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.paramaterName = paramaterName


class PlayEffectOnClick:

    offsets = {'effect': 64, 'particles': 72}    
    def __init__(self, effect: UnityEngine.Object, particles: System.Collections.Generic.List<UnityEngine.ParticleSystem>, **kwargs):
        super().__init__(self, **kwargs)
		self.effect = effect
		self.particles = particles


class PlaySoundOnDrag:

    offsets = {'sound': 24, 'isPlaying': 32}    
    def __init__(self, sound: UnityEngine.AudioClip, isPlaying: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.sound = sound
		self.isPlaying = isPlaying


class PlaySoundOnMapInteractableClick:

    offsets = {'soundClip1': 64, 'soundClip2': 72, 'soundClip3': 80, 'overrideLowQuality': 88, 'playInteractableAudio': 96}    
    def __init__(self, soundClip1: UnityEngine.AudioClip, soundClip2: UnityEngine.AudioClip, soundClip3: UnityEngine.AudioClip, overrideLowQuality: System.Boolean, playInteractableAudio: Assets.Scripts.Unity.UI_New.Main.WorldItems.PlayInteractableAudio, **kwargs):
        super().__init__(self, **kwargs)
		self.soundClip1 = soundClip1
		self.soundClip2 = soundClip2
		self.soundClip3 = soundClip3
		self.overrideLowQuality = overrideLowQuality
		self.playInteractableAudio = playInteractableAudio


class PlayableAnimationBenchmark:

    offsets = {'duplicateTarget': 24, 'itemCountField': 32, 'initialStress': 40, 'perAdd': 44, 'totalStress': 48, 'monkeysPerRow': 52, 'spacing': 56}    
    def __init__(self, duplicateTarget: UnityEngine.GameObject, itemCountField: UnityEngine.UI.Text, initialStress: System.Int32, perAdd: System.Int32, totalStress: System.Int32, monkeysPerRow: System.Int32, spacing: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.duplicateTarget = duplicateTarget
		self.itemCountField = itemCountField
		self.initialStress = initialStress
		self.perAdd = perAdd
		self.totalStress = totalStress
		self.monkeysPerRow = monkeysPerRow
		self.spacing = spacing


class PlayableAnimationClipInfo:

    offsets = {'playableClip': 16, 'animationClip': 32}    
    def __init__(self, playableClip: UnityEngine.Animations.AnimationClipPlayable, animationClip: UnityEngine.AnimationClip, **kwargs):
        super().__init__(self, **kwargs)
		self.playableClip = playableClip
		self.animationClip = animationClip


class PlayablesTest:

    offsets = {'clips': 24, 'animator': 32, 'playableGraph': 40, 'playableOutput': 56, 'clipInfos': 72, 'mixerPlayable': 80, 'clipIndex': 96, 'weight': 100}    
    def __init__(self, clips: System.Collections.Generic.List<UnityEngine.AnimationClip>, animator: UnityEngine.Animator, playableGraph: UnityEngine.Playables.PlayableGraph, playableOutput: UnityEngine.Animations.AnimationPlayableOutput, clipInfos: System.Collections.Generic.List<PlayableAnimationClipInfo>, mixerPlayable: UnityEngine.Animations.AnimationMixerPlayable, clipIndex: System.Int32, weight: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.clips = clips
		self.animator = animator
		self.playableGraph = playableGraph
		self.playableOutput = playableOutput
		self.clipInfos = clipInfos
		self.mixerPlayable = mixerPlayable
		self.clipIndex = clipIndex
		self.weight = weight


class PowerImageLoader:

    offsets = {'grayscaleMaterial': 24, 'image': 32, 'bg': 40, 'powerModel': 48}    
    def __init__(self, grayscaleMaterial: UnityEngine.Material, image: UnityEngine.UI.Image, bg: UnityEngine.UI.Image, powerModel: Assets.Scripts.Models.Powers.PowerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.grayscaleMaterial = grayscaleMaterial
		self.image = image
		self.bg = bg
		self.powerModel = powerModel


class ProfanityFilter:
	instance: ProfanityFilter
    offsets = {'instance': 0, 'blackList': 16, 'whiteList': 24, 'matchEvaluator': 32, 'isInit': 40}    
    def __init__(self, instance: ProfanityFilter, blackList: System.Collections.Generic.List<System.Text.RegularExpressions.Regex>, whiteList: System.Collections.Generic.List<System.Text.RegularExpressions.Regex>, matchEvaluator: System.Text.RegularExpressions.MatchEvaluator, isInit: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.blackList = blackList
		self.whiteList = whiteList
		self.matchEvaluator = matchEvaluator
		self.isInit = isInit


class <Init>d__9:

    offsets = {'<>1__state': 16, '<>t__builder': 24, '<>4__this': 48, '<>7__wrap1': 56, '<>u__1': 64, '<loadOp>5__3': 72, '<>u__2': 96}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder, <>4__this: ProfanityFilter, <>7__wrap1: System.Int32, <>u__1: System.Runtime.CompilerServices.TaskAwaiter, <loadOp>5__3: UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle<UnityEngine.TextAsset>, <>u__2: System.Runtime.CompilerServices.TaskAwaiter<UnityEngine.TextAsset>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.<>4__this = <>4__this
		self.<>7__wrap1 = <>7__wrap1
		self.<>u__1 = <>u__1
		self.<loadOp>5__3 = <loadOp>5__3
		self.<>u__2 = <>u__2


class <LoadOnlineFile>d__10:

    offsets = {'<>1__state': 16, '<>t__builder': 24, '<>4__this': 48}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder, <>4__this: ProfanityFilter, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.<>4__this = <>4__this


class <>c:
	<>9: RSG.Promise.<>c
    offsets = {'<>9': 0, '<>9__53_0': 8}    
    def __init__(self, <>9: RSG.Promise.<>c, <>9__53_0: System.Func<RSG.IPromise,System.Func<RSG.IPromise>,RSG.IPromise>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>9 = <>9
		self.<>9__53_0 = <>9__53_0


class <>c__DisplayClass23_0<PromisedT>:

    offsets = {'<>4__this': 0, 'ex': 0}    
    def __init__(self, <>4__this: RSG.Promise<PromisedT>, ex: System.Exception, **kwargs):
        super().__init__(self, **kwargs)
		self.<>4__this = <>4__this
		self.ex = ex


class <>c__DisplayClass29_0<PromisedT>:

    offsets = {'resultPromise': 0, 'onRejected': 0}    
    def __init__(self, resultPromise: RSG.Promise<PromisedT>, onRejected: System.Action<System.Exception>, **kwargs):
        super().__init__(self, **kwargs)
		self.resultPromise = resultPromise
		self.onRejected = onRejected


class <>c__DisplayClass31_0:

    offsets = {'<>4__this': 16, 'ex': 24}    
    def __init__(self, <>4__this: RSG.Promise, ex: System.Exception, **kwargs):
        super().__init__(self, **kwargs)
		self.<>4__this = <>4__this
		self.ex = ex


class <>c__DisplayClass31_0<PromisedT,ConvertedT>:

    offsets = {'resultPromise': 0, 'onResolved': 0, 'onRejected': 0}    
    def __init__(self, resultPromise: RSG.Promise<ConvertedT>, onResolved: System.Func<PromisedT,ConvertedT>, onRejected: System.Func<System.Exception,ConvertedT>, **kwargs):
        super().__init__(self, **kwargs)
		self.resultPromise = resultPromise
		self.onResolved = onResolved
		self.onRejected = onRejected


class <>c__DisplayClass33_0<PromisedT>:

    offsets = {'onResolved': 0, 'resultPromise': 0, 'onRejected': 0}    
    def __init__(self, onResolved: System.Action<PromisedT>, resultPromise: RSG.Promise, onRejected: System.Action<System.Exception>, **kwargs):
        super().__init__(self, **kwargs)
		self.onResolved = onResolved
		self.resultPromise = resultPromise
		self.onRejected = onRejected


class <>c__DisplayClass35_0<PromisedT,ConvertedT>:

    offsets = {'onResolved': 0, 'resultPromise': 0, 'onRejected': 0, '<>9__2': 0, '<>9__3': 0}    
    def __init__(self, onResolved: System.Func<PromisedT,RSG.IPromise<ConvertedT>>, resultPromise: RSG.Promise<ConvertedT>, onRejected: System.Func<System.Exception,ConvertedT>, <>9__2: System.Action<ConvertedT>, <>9__3: System.Action<System.Exception>, **kwargs):
        super().__init__(self, **kwargs)
		self.onResolved = onResolved
		self.resultPromise = resultPromise
		self.onRejected = onRejected
		self.<>9__2 = <>9__2
		self.<>9__3 = <>9__3


class <>c__DisplayClass37_0:

    offsets = {'resultPromise': 16, 'onRejected': 24}    
    def __init__(self, resultPromise: RSG.Promise, onRejected: System.Action<System.Exception>, **kwargs):
        super().__init__(self, **kwargs)
		self.resultPromise = resultPromise
		self.onRejected = onRejected


class <>c__DisplayClass37_0<PromisedT>:

    offsets = {'onResolved': 0, 'resultPromise': 0, 'onRejected': 0, '<>9__2': 0, '<>9__3': 0}    
    def __init__(self, onResolved: System.Func<PromisedT,RSG.IPromise>, resultPromise: RSG.Promise, onRejected: System.Action<System.Exception>, <>9__2: System.Action, <>9__3: System.Action<System.Exception>, **kwargs):
        super().__init__(self, **kwargs)
		self.onResolved = onResolved
		self.resultPromise = resultPromise
		self.onRejected = onRejected
		self.<>9__2 = <>9__2
		self.<>9__3 = <>9__3


class <>c__DisplayClass39_0<ConvertedT>:

    offsets = {'resultPromise': 0, 'onResolved': 0, 'onRejected': 0}    
    def __init__(self, resultPromise: RSG.Promise<ConvertedT>, onResolved: System.Func<ConvertedT>, onRejected: System.Func<System.Exception,ConvertedT>, **kwargs):
        super().__init__(self, **kwargs)
		self.resultPromise = resultPromise
		self.onResolved = onResolved
		self.onRejected = onRejected


class <>c__DisplayClass39_0<PromisedT,ConvertedT>:

    offsets = {'chain': 0}    
    def __init__(self, chain: System.Func<PromisedT,System.Collections.Generic.IEnumerable<RSG.IPromise<ConvertedT>>>, **kwargs):
        super().__init__(self, **kwargs)
		self.chain = chain


class <>c__DisplayClass40_0<PromisedT>:

    offsets = {'chain': 0}    
    def __init__(self, chain: System.Func<PromisedT,System.Collections.Generic.IEnumerable<RSG.IPromise>>, **kwargs):
        super().__init__(self, **kwargs)
		self.chain = chain


class <>c__DisplayClass41_0:

    offsets = {'onResolved': 16, 'resultPromise': 24, 'onRejected': 32}    
    def __init__(self, onResolved: System.Action, resultPromise: RSG.Promise, onRejected: System.Action<System.Exception>, **kwargs):
        super().__init__(self, **kwargs)
		self.onResolved = onResolved
		self.resultPromise = resultPromise
		self.onRejected = onRejected


class <>c__DisplayClass42_0<PromisedT>:

    offsets = {'resultPromise': 0, 'remainingCount': 0, '<>9__1': 0}    
    def __init__(self, resultPromise: RSG.Promise<System.Collections.Generic.IEnumerable<PromisedT>>, remainingCount: System.Int32, <>9__1: System.Action<System.Exception>, **kwargs):
        super().__init__(self, **kwargs)
		self.resultPromise = resultPromise
		self.remainingCount = remainingCount
		self.<>9__1 = <>9__1


class <>c__DisplayClass42_1<PromisedT>:

    offsets = {'index': 0, 'CS$<>8__locals1': 0}    
    def __init__(self, index: System.Int32, CS$<>8__locals1: RSG.Promise.<>c__DisplayClass42_0<PromisedT>, **kwargs):
        super().__init__(self, **kwargs)
		self.index = index
		self.CS$<>8__locals1 = CS$<>8__locals1


class <>c__DisplayClass43_0<ConvertedT>:

    offsets = {'onResolved': 0, 'resultPromise': 0, 'onRejected': 0, '<>9__2': 0, '<>9__3': 0}    
    def __init__(self, onResolved: System.Func<RSG.IPromise<ConvertedT>>, resultPromise: RSG.Promise<ConvertedT>, onRejected: System.Func<System.Exception,ConvertedT>, <>9__2: System.Action<ConvertedT>, <>9__3: System.Action<System.Exception>, **kwargs):
        super().__init__(self, **kwargs)
		self.onResolved = onResolved
		self.resultPromise = resultPromise
		self.onRejected = onRejected
		self.<>9__2 = <>9__2
		self.<>9__3 = <>9__3


class <>c__DisplayClass43_0<PromisedT,ConvertedT>:

    offsets = {'chain': 0}    
    def __init__(self, chain: System.Func<PromisedT,System.Collections.Generic.IEnumerable<RSG.IPromise<ConvertedT>>>, **kwargs):
        super().__init__(self, **kwargs)
		self.chain = chain


class <>c__DisplayClass44_0<PromisedT>:

    offsets = {'chain': 0}    
    def __init__(self, chain: System.Func<PromisedT,System.Collections.Generic.IEnumerable<RSG.IPromise>>, **kwargs):
        super().__init__(self, **kwargs)
		self.chain = chain


class <>c__DisplayClass45_0:

    offsets = {'onResolved': 16, 'resultPromise': 24, 'onRejected': 32, '<>9__2': 40, '<>9__3': 48}    
    def __init__(self, onResolved: System.Func<RSG.IPromise>, resultPromise: RSG.Promise, onRejected: System.Action<System.Exception>, <>9__2: System.Action, <>9__3: System.Action<System.Exception>, **kwargs):
        super().__init__(self, **kwargs)
		self.onResolved = onResolved
		self.resultPromise = resultPromise
		self.onRejected = onRejected
		self.<>9__2 = <>9__2
		self.<>9__3 = <>9__3


class <>c__DisplayClass46_0<PromisedT>:

    offsets = {'resultPromise': 0, '<>9__1': 0, '<>9__2': 0}    
    def __init__(self, resultPromise: RSG.Promise<PromisedT>, <>9__1: System.Action<System.Exception>, <>9__2: System.Action<PromisedT>, **kwargs):
        super().__init__(self, **kwargs)
		self.resultPromise = resultPromise
		self.<>9__1 = <>9__1
		self.<>9__2 = <>9__2


class <>c__DisplayClass47_0:

    offsets = {'chain': 16}    
    def __init__(self, chain: System.Func<System.Collections.Generic.IEnumerable<RSG.IPromise>>, **kwargs):
        super().__init__(self, **kwargs)
		self.chain = chain


class <>c__DisplayClass48_0<ConvertedT>:

    offsets = {'chain': 0}    
    def __init__(self, chain: System.Func<System.Collections.Generic.IEnumerable<RSG.IPromise<ConvertedT>>>, **kwargs):
        super().__init__(self, **kwargs)
		self.chain = chain


class <>c__DisplayClass50_0:

    offsets = {'resultPromise': 16, 'remainingCount': 24, '<>9__1': 32, '<>9__2': 40}    
    def __init__(self, resultPromise: RSG.Promise, remainingCount: System.Int32, <>9__1: System.Action<System.Exception>, <>9__2: System.Action, **kwargs):
        super().__init__(self, **kwargs)
		self.resultPromise = resultPromise
		self.remainingCount = remainingCount
		self.<>9__1 = <>9__1
		self.<>9__2 = <>9__2


class <>c__DisplayClass51_0:

    offsets = {'chain': 16}    
    def __init__(self, chain: System.Func<System.Collections.Generic.IEnumerable<System.Func<RSG.IPromise>>>, **kwargs):
        super().__init__(self, **kwargs)
		self.chain = chain


class <>c__DisplayClass53_0:

    offsets = {'fn': 16}    
    def __init__(self, fn: System.Func<RSG.IPromise>, **kwargs):
        super().__init__(self, **kwargs)
		self.fn = fn


class <>c__DisplayClass54_0:

    offsets = {'chain': 16}    
    def __init__(self, chain: System.Func<System.Collections.Generic.IEnumerable<RSG.IPromise>>, **kwargs):
        super().__init__(self, **kwargs)
		self.chain = chain


class <>c__DisplayClass55_0<ConvertedT>:

    offsets = {'chain': 0}    
    def __init__(self, chain: System.Func<System.Collections.Generic.IEnumerable<RSG.IPromise<ConvertedT>>>, **kwargs):
        super().__init__(self, **kwargs)
		self.chain = chain


class <>c__DisplayClass57_0:

    offsets = {'resultPromise': 16, '<>9__1': 24, '<>9__2': 32}    
    def __init__(self, resultPromise: RSG.Promise, <>9__1: System.Action<System.Exception>, <>9__2: System.Action, **kwargs):
        super().__init__(self, **kwargs)
		self.resultPromise = resultPromise
		self.<>9__1 = <>9__1
		self.<>9__2 = <>9__2


class ResolveHandler:

    offsets = {'callback': 16, 'rejectable': 24}    
    def __init__(self, callback: System.Action, rejectable: RSG.IRejectable, **kwargs):
        super().__init__(self, **kwargs)
		self.callback = callback
		self.rejectable = rejectable


class <>c__DisplayClass4_0<T>:

    offsets = {'result': 0, 'done': 0, 'ex': 0}    
    def __init__(self, result: T, done: System.Boolean, ex: System.Exception, **kwargs):
        super().__init__(self, **kwargs)
		self.result = result
		self.done = done
		self.ex = ex


class <>c__DisplayClass5_0:

    offsets = {'done': 16, 'ex': 24}    
    def __init__(self, done: System.Boolean, ex: System.Exception, **kwargs):
        super().__init__(self, **kwargs)
		self.done = done
		self.ex = ex


class <ResolveFrom>d__7:

    offsets = {'<>1__state': 16, '<>t__builder': 24, 'task': 56, 'promise': 64, '<>u__1': 72}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncVoidMethodBuilder, task: System.Threading.Tasks.Task, promise: RSG.Promise, <>u__1: System.Runtime.CompilerServices.TaskAwaiter, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.task = task
		self.promise = promise
		self.<>u__1 = <>u__1


class <ResolveFrom>d__9<T>:

    offsets = {'<>1__state': 0, '<>t__builder': 0, 'promise': 0, 'task': 0, '<>7__wrap1': 0, '<>u__1': 0}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncVoidMethodBuilder, promise: RSG.Promise<T>, task: System.Threading.Tasks.Task<T>, <>7__wrap1: RSG.Promise<T>, <>u__1: System.Runtime.CompilerServices.TaskAwaiter<T>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.promise = promise
		self.task = task
		self.<>7__wrap1 = <>7__wrap1
		self.<>u__1 = <>u__1


class <ToTask>d__4<T>:

    offsets = {'<>1__state': 0, '<>t__builder': 0, 'promise': 0, '<>8__1': 0, '<>u__1': 0}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<T>, promise: RSG.IPromise<T>, <>8__1: RSG.PromiseAsyncExtensions.<>c__DisplayClass4_0<T>, <>u__1: System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.promise = promise
		self.<>8__1 = <>8__1
		self.<>u__1 = <>u__1


class <ToTask>d__5:

    offsets = {'<>1__state': 16, '<>t__builder': 24, 'promise': 48, '<>8__1': 56, '<>u__1': 64}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncTaskMethodBuilder, promise: RSG.IPromise, <>8__1: RSG.PromiseAsyncExtensions.<>c__DisplayClass5_0, <>u__1: System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.promise = promise
		self.<>8__1 = <>8__1
		self.<>u__1 = <>u__1


class PromiseAwaiter:

    offsets = {'Promise': 16, 'Exception': 24, '<IsCompleted>k__BackingField': 32}    
    def __init__(self, Promise: RSG.IPromise, Exception: System.Exception, <IsCompleted>k__BackingField: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.Promise = Promise
		self.Exception = Exception
		self.<IsCompleted>k__BackingField = <IsCompleted>k__BackingField


class <>c__DisplayClass8_0:

    offsets = {'continuation': 16}    
    def __init__(self, continuation: System.Action, **kwargs):
        super().__init__(self, **kwargs)
		self.continuation = continuation


class <>c__DisplayClass9_0<T>:

    offsets = {'continuation': 0}    
    def __init__(self, continuation: System.Action, **kwargs):
        super().__init__(self, **kwargs)
		self.continuation = continuation


class PromiseAwaiter<T>:

    offsets = {'Promise': 0, 'Result': 0, 'Exception': 0, '<IsCompleted>k__BackingField': 0}    
    def __init__(self, Promise: RSG.IPromise, Result: T, Exception: System.Exception, <IsCompleted>k__BackingField: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.Promise = Promise
		self.Result = Result
		self.Exception = Exception
		self.<IsCompleted>k__BackingField = <IsCompleted>k__BackingField


class <>c:
	<>9: RSG.PromiseExtensions.<>c
    offsets = {'<>9': 0, '<>9__0_0': 8}    
    def __init__(self, <>9: RSG.PromiseExtensions.<>c, <>9__0_0: System.Action<System.Exception>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>9 = <>9
		self.<>9__0_0 = <>9__0_0


class <>c__DisplayClass2_0:

    offsets = {'seconds': 16}    
    def __init__(self, seconds: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.seconds = seconds


class <>c__DisplayClass3_0:

    offsets = {'predicate': 16}    
    def __init__(self, predicate: System.Func<RSG.TimeData,System.Boolean>, **kwargs):
        super().__init__(self, **kwargs)
		self.predicate = predicate


class <LazyEach>d__1<T>:

    offsets = {'<>1__state': 0, '<>2__current': 0, '<>l__initialThreadId': 0, 'source': 0, '<>3__source': 0, 'fn': 0, '<>3__fn': 0, '<>7__wrap1': 0}    
    def __init__(self, <>1__state: System.Int32, <>2__current: T, <>l__initialThreadId: System.Int32, source: System.Collections.Generic.IEnumerable<T>, <>3__source: System.Collections.Generic.IEnumerable<T>, fn: System.Action<T>, <>3__fn: System.Action<T>, <>7__wrap1: System.Collections.Generic.IEnumerator<T>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>2__current = <>2__current
		self.<>l__initialThreadId = <>l__initialThreadId
		self.source = source
		self.<>3__source = <>3__source
		self.fn = fn
		self.<>3__fn = <>3__fn
		self.<>7__wrap1 = <>7__wrap1


class RangeValue:

    offsets = {'min': 16, 'max': 20}    
    def __init__(self, min: System.Single, max: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.min = min
		self.max = max


class RatioFovSetter:

    offsets = {'ratio4_3': 24, 'ratio16_9': 28}    
    def __init__(self, ratio4_3: System.Single, ratio16_9: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.ratio4_3 = ratio4_3
		self.ratio16_9 = ratio16_9


class RotateDisplayModel:

    offsets = {'currentRotation': 24, 'rotationsPerSecond': 28}    
    def __init__(self, currentRotation: System.Single, rotationsPerSecond: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.currentRotation = currentRotation
		self.rotationsPerSecond = rotationsPerSecond


class RotateModelAction:

    offsets = {'rotationAxis': 24, 'speedOffset': 36}    
    def __init__(self, rotationAxis: UnityEngine.Vector3, speedOffset: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.rotationAxis = rotationAxis
		self.speedOffset = speedOffset


class RotateObjectOnClick:

    offsets = {'axis': 64, 'angle': 76, 'speed': 80, 'curve': 88, 'currentAngle': 96, 'current': 100, 'previous': 104}    
    def __init__(self, axis: UnityEngine.Vector3, angle: System.Single, speed: System.Single, curve: UnityEngine.AnimationCurve, currentAngle: System.Single, current: System.Single, previous: UnityEngine.Quaternion, **kwargs):
        super().__init__(self, **kwargs)
		self.axis = axis
		self.angle = angle
		self.speed = speed
		self.curve = curve
		self.currentAngle = currentAngle
		self.current = current
		self.previous = previous


class SetActiveCallback:

    offsets = {'target': 24}    
    def __init__(self, target: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.target = target


class SetOpenAnimationDuringRound:

    offsets = {'animator': 24}    
    def __init__(self, animator: UnityEngine.Animator, **kwargs):
        super().__init__(self, **kwargs)
		self.animator = animator


class SignInWithAppleTest:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SoulbindTowerMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SpinUpDisplayModel:

    offsets = {'axisStartingSpeeds': 24, 'axisMinSpeeds': 36, 'axisMaxSpeeds': 48, 'axisAccelerations': 60, 'axisSpeeds': 72, 'axisPositions': 84, 'spinningUp': 96, 'autoSpinDown': 97, 'autoSpinDownTime': 100, 'autoSpinDownTimer': 104}    
    def __init__(self, axisStartingSpeeds: UnityEngine.Vector3, axisMinSpeeds: UnityEngine.Vector3, axisMaxSpeeds: UnityEngine.Vector3, axisAccelerations: UnityEngine.Vector3, axisSpeeds: UnityEngine.Vector3, axisPositions: UnityEngine.Vector3, spinningUp: System.Boolean, autoSpinDown: System.Boolean, autoSpinDownTime: System.Single, autoSpinDownTimer: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.axisStartingSpeeds = axisStartingSpeeds
		self.axisMinSpeeds = axisMinSpeeds
		self.axisMaxSpeeds = axisMaxSpeeds
		self.axisAccelerations = axisAccelerations
		self.axisSpeeds = axisSpeeds
		self.axisPositions = axisPositions
		self.spinningUp = spinningUp
		self.autoSpinDown = autoSpinDown
		self.autoSpinDownTime = autoSpinDownTime
		self.autoSpinDownTimer = autoSpinDownTimer


class SteamPurchasingModule:
	instance: SteamPurchasingModule
    offsets = {'instance': 0, 'currentStore': 8}    
    def __init__(self, instance: SteamPurchasingModule, currentStore: SteamStore, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.currentStore = currentStore


class SteamStore:

    offsets = {'storeCallback': 16, 'currencyCode': 24}    
    def __init__(self, storeCallback: UnityEngine.Purchasing.Extension.IStoreCallback, currencyCode: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.storeCallback = storeCallback
		self.currencyCode = currencyCode


class <>c__DisplayClass8_0:

    offsets = {'client': 16, '<>4__this': 24}    
    def __init__(self, client: Facepunch.Steamworks.Client, <>4__this: SteamStore, **kwargs):
        super().__init__(self, **kwargs)
		self.client = client
		self.<>4__this = <>4__this


class <OnSteamworksAuthorizationResponseAsync>d__13:

    offsets = {'<>1__state': 16, '<>t__builder': 24, 'purchaser': 56, 'authorized': 64, '<>4__this': 72, 'orderId': 80, '<processingPurchases>5__2': 88, '<i>5__3': 96, '<processingPurchase>5__4': 104, '<>u__1': 112}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncVoidMethodBuilder, purchaser: Assets.Scripts.Unity.UI_New.Store.Purchaser, authorized: System.Boolean, <>4__this: SteamStore, orderId: System.UInt64, <processingPurchases>5__2: System.Collections.Generic.List<UnityEngine.Purchasing.Product>, <i>5__3: System.Int32, <processingPurchase>5__4: UnityEngine.Purchasing.Product, <>u__1: System.Runtime.CompilerServices.TaskAwaiter<System.Boolean>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.purchaser = purchaser
		self.authorized = authorized
		self.<>4__this = <>4__this
		self.orderId = orderId
		self.<processingPurchases>5__2 = <processingPurchases>5__2
		self.<i>5__3 = <i>5__3
		self.<processingPurchase>5__4 = <processingPurchase>5__4
		self.<>u__1 = <>u__1


class <PurchaseAsync>d__10:

    offsets = {'<>1__state': 16, '<>t__builder': 24, 'product': 56, '<>4__this': 64, '<>u__1': 72}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncVoidMethodBuilder, product: UnityEngine.Purchasing.ProductDefinition, <>4__this: SteamStore, <>u__1: System.Runtime.CompilerServices.TaskAwaiter<NinjaKiwi.LiNK.DataModels.SteamOrderModel>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.product = product
		self.<>4__this = <>4__this
		self.<>u__1 = <>u__1


class <RetrieveProductsAsync>d__7:

    offsets = {'<>1__state': 16, '<>t__builder': 24, '<>4__this': 56, 'productDefinitions': 64, '<nfi>5__2': 72, '<productPrices>5__3': 80, '<productPricesRaw>5__4': 88, '<>u__1': 96}    
    def __init__(self, <>1__state: System.Int32, <>t__builder: System.Runtime.CompilerServices.AsyncVoidMethodBuilder, <>4__this: SteamStore, productDefinitions: System.Collections.ObjectModel.ReadOnlyCollection<UnityEngine.Purchasing.ProductDefinition>, <nfi>5__2: System.Globalization.NumberFormatInfo, <productPrices>5__3: System.Collections.Generic.Dictionary<System.String,System.String>, <productPricesRaw>5__4: System.Collections.Generic.Dictionary<System.String,System.Decimal>, <>u__1: System.Runtime.CompilerServices.TaskAwaiter<NinjaKiwi.LiNK.DataModels.SteamIapsModel>, **kwargs):
        super().__init__(self, **kwargs)
		self.<>1__state = <>1__state
		self.<>t__builder = <>t__builder
		self.<>4__this = <>4__this
		self.productDefinitions = productDefinitions
		self.<nfi>5__2 = <nfi>5__2
		self.<productPrices>5__3 = <productPrices>5__3
		self.<productPricesRaw>5__4 = <productPricesRaw>5__4
		self.<>u__1 = <>u__1


class SyncIndicator:

    offsets = {'SyncCooldown': 24, 'SyncOverdue': 32}    
    def __init__(self, SyncCooldown: UnityEngine.UI.Image, SyncOverdue: UnityEngine.UI.Image, **kwargs):
        super().__init__(self, **kwargs)
		self.SyncCooldown = SyncCooldown
		self.SyncOverdue = SyncOverdue


class TestBlendsPlayableAnimator:

    offsets = {'monkeyAnimationController': 24}    
    def __init__(self, monkeyAnimationController: Assets.Scripts.Unity.Display.Animation.MonkeyAnimationController, **kwargs):
        super().__init__(self, **kwargs)
		self.monkeyAnimationController = monkeyAnimationController


class TestPlayableSerialization:

    offsets = {'testTarget': 24, 'animationClip': 32, 'playableAnimator': 40}    
    def __init__(self, testTarget: UnityEngine.GameObject, animationClip: UnityEngine.AnimationClip, playableAnimator: Assets.Scripts.Unity.Display.Animation.PlayableAnimatorSimple, **kwargs):
        super().__init__(self, **kwargs)
		self.testTarget = testTarget
		self.animationClip = animationClip
		self.playableAnimator = playableAnimator


class ToggleImageSwap:

    offsets = {'imageOn': 24, 'imageOff': 32, 'theToggle': 40}    
    def __init__(self, imageOn: UnityEngine.UI.Image, imageOff: UnityEngine.UI.Image, theToggle: UnityEngine.UI.Toggle, **kwargs):
        super().__init__(self, **kwargs)
		self.imageOn = imageOn
		self.imageOff = imageOff
		self.theToggle = theToggle


class TowerContainerSpritesAsset:

    offsets = {'standard': 24, 'large': 32}    
    def __init__(self, standard: TowerSetBgSprites, large: TowerSetBgSprites, **kwargs):
        super().__init__(self, **kwargs)
		self.standard = standard
		self.large = large


class TowerImageLoader:

    offsets = {'grayscaleMaterial': 24, 'image': 32, 'bg': 40, '<TowerModel>k__BackingField': 48, 'instaTower': 56}    
    def __init__(self, grayscaleMaterial: UnityEngine.Material, image: UnityEngine.UI.Image, bg: UnityEngine.UI.Image, <TowerModel>k__BackingField: Assets.Scripts.Models.Towers.TowerModel, instaTower: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.grayscaleMaterial = grayscaleMaterial
		self.image = image
		self.bg = bg
		self.<TowerModel>k__BackingField = <TowerModel>k__BackingField
		self.instaTower = instaTower


class TowerSetBgSprites:

    offsets = {'primary': 16, 'hero': 24, 'paragon': 32, 'military': 40, 'magic': 48, 'support': 56}    
    def __init__(self, primary: UnityEngine.Sprite, hero: UnityEngine.Sprite, paragon: UnityEngine.Sprite, military: UnityEngine.Sprite, magic: UnityEngine.Sprite, support: UnityEngine.Sprite, **kwargs):
        super().__init__(self, **kwargs)
		self.primary = primary
		self.hero = hero
		self.paragon = paragon
		self.military = military
		self.magic = magic
		self.support = support


class TrackItem:

    offsets = {'trackNameField': 24, 'selectTrackBtn': 32, 'addBtn': 40, 'minusBtn': 48, 'trophyStoreBtn': 56, 'selectBGImg': 64, 'trackItemBGImg': 72, 'equalizerAnimator': 80, 'trackItemData': 88, 'normalTrackBGColor': 96, 'trophyTrackBGColor': 112, 'normalSelectBGColor': 128, 'trophySelectBGColor': 144, 'isTrophyItem': 160, 'jukeBoxScreen': 168, 'inPlaylist': 176}    
    def __init__(self, trackNameField: NK_TextMeshProUGUI, selectTrackBtn: UnityEngine.UI.Button, addBtn: UnityEngine.UI.Button, minusBtn: UnityEngine.UI.Button, trophyStoreBtn: UnityEngine.UI.Button, selectBGImg: UnityEngine.UI.Image, trackItemBGImg: UnityEngine.UI.Image, equalizerAnimator: UnityEngine.Animator, trackItemData: TrackItemData, normalTrackBGColor: UnityEngine.Color, trophyTrackBGColor: UnityEngine.Color, normalSelectBGColor: UnityEngine.Color, trophySelectBGColor: UnityEngine.Color, isTrophyItem: System.Boolean, jukeBoxScreen: Assets.Scripts.Unity.Audio.JukeBoxScreen, inPlaylist: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.trackNameField = trackNameField
		self.selectTrackBtn = selectTrackBtn
		self.addBtn = addBtn
		self.minusBtn = minusBtn
		self.trophyStoreBtn = trophyStoreBtn
		self.selectBGImg = selectBGImg
		self.trackItemBGImg = trackItemBGImg
		self.equalizerAnimator = equalizerAnimator
		self.trackItemData = trackItemData
		self.normalTrackBGColor = normalTrackBGColor
		self.trophyTrackBGColor = trophyTrackBGColor
		self.normalSelectBGColor = normalSelectBGColor
		self.trophySelectBGColor = trophySelectBGColor
		self.isTrophyItem = isTrophyItem
		self.jukeBoxScreen = jukeBoxScreen
		self.inPlaylist = inPlaylist


class TrackItemData:

    offsets = {'trackId': 16, 'trackIndex': 20, 'trackName': 24, 'isBossTrack': 32}    
    def __init__(self, trackId: System.Int32, trackIndex: System.Int32, trackName: System.String, isBossTrack: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.trackId = trackId
		self.trackIndex = trackIndex
		self.trackName = trackName
		self.isBossTrack = isBossTrack


class TwitchSettingsButton:

    offsets = {'alwaysVisible': 24, 'buttonContainer': 32, 'button': 40}    
    def __init__(self, alwaysVisible: System.Boolean, buttonContainer: UnityEngine.GameObject, button: UnityEngine.UI.Button, **kwargs):
        super().__init__(self, **kwargs)
		self.alwaysVisible = alwaysVisible
		self.buttonContainer = buttonContainer
		self.button = button


class <>c:
	<>9: TwitchSettingsButton.<>c
    offsets = {'<>9': 0, '<>9__3_0': 8}    
    def __init__(self, <>9: TwitchSettingsButton.<>c, <>9__3_0: UnityEngine.Events.UnityAction, **kwargs):
        super().__init__(self, **kwargs)
		self.<>9 = <>9
		self.<>9__3_0 = <>9__3_0


class UniWebView:

    offsets = {'OnPageStarted': 24, 'OnPageFinished': 32, 'OnPageErrorReceived': 40, 'OnMessageReceived': 48, 'OnShouldClose': 56, 'OnKeyCodeReceived': 64, 'OnOrientationChanged': 72, 'OnWebContentProcessTerminated': 80, 'id': 88, 'listener': 96, 'isPortrait': 104, 'urlOnStart': 112, 'showOnStart': 120, 'fullScreen': 121, 'useToolbar': 122, 'toolbarPosition': 124, 'actions': 128, 'payloadActions': 136, 'frame': 144, 'referenceRectTransform': 160, 'started': 168, 'backgroundColor': 172, 'OnOreintationChanged': 192}    
    def __init__(self, OnPageStarted: UniWebView.PageStartedDelegate, OnPageFinished: UniWebView.PageFinishedDelegate, OnPageErrorReceived: UniWebView.PageErrorReceivedDelegate, OnMessageReceived: UniWebView.MessageReceivedDelegate, OnShouldClose: UniWebView.ShouldCloseDelegate, OnKeyCodeReceived: UniWebView.KeyCodeReceivedDelegate, OnOrientationChanged: UniWebView.OrientationChangedDelegate, OnWebContentProcessTerminated: UniWebView.OnWebContentProcessTerminatedDelegate, id: System.String, listener: UniWebViewNativeListener, isPortrait: System.Boolean, urlOnStart: System.String, showOnStart: System.Boolean, fullScreen: System.Boolean, useToolbar: System.Boolean, toolbarPosition: UniWebViewToolbarPosition, actions: System.Collections.Generic.Dictionary<System.String,System.Action>, payloadActions: System.Collections.Generic.Dictionary<System.String,System.Action<UniWebViewNativeResultPayload>>, frame: UnityEngine.Rect, referenceRectTransform: UnityEngine.RectTransform, started: System.Boolean, backgroundColor: UnityEngine.Color, OnOreintationChanged: UniWebView.OrientationChangedDelegate, **kwargs):
        super().__init__(self, **kwargs)
		self.OnPageStarted = OnPageStarted
		self.OnPageFinished = OnPageFinished
		self.OnPageErrorReceived = OnPageErrorReceived
		self.OnMessageReceived = OnMessageReceived
		self.OnShouldClose = OnShouldClose
		self.OnKeyCodeReceived = OnKeyCodeReceived
		self.OnOrientationChanged = OnOrientationChanged
		self.OnWebContentProcessTerminated = OnWebContentProcessTerminated
		self.id = id
		self.listener = listener
		self.isPortrait = isPortrait
		self.urlOnStart = urlOnStart
		self.showOnStart = showOnStart
		self.fullScreen = fullScreen
		self.useToolbar = useToolbar
		self.toolbarPosition = toolbarPosition
		self.actions = actions
		self.payloadActions = payloadActions
		self.frame = frame
		self.referenceRectTransform = referenceRectTransform
		self.started = started
		self.backgroundColor = backgroundColor
		self.OnOreintationChanged = OnOreintationChanged


class <>c__DisplayClass118_0:

    offsets = {'handler': 16}    
    def __init__(self, handler: System.Action<System.String>, **kwargs):
        super().__init__(self, **kwargs)
		self.handler = handler


class KeyCodeReceivedDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MessageReceivedDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class OnWebContentProcessTerminatedDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class OreintationChangedDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class OrientationChangedDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PageErrorReceivedDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PageFinishedDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PageStartedDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ShouldCloseDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class UniWebViewAndroidStaticListener:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class UniWebViewContentInsetAdjustmentBehavior:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class UniWebViewHelper:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class UniWebViewInterface:
	alreadyLoggedWarning: System.Boolean
    offsets = {'alreadyLoggedWarning': 0}    
    def __init__(self, alreadyLoggedWarning: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.alreadyLoggedWarning = alreadyLoggedWarning


class UniWebViewLogger:
	instance: UniWebViewLogger
    offsets = {'instance': 0, 'level': 16}    
    def __init__(self, instance: UniWebViewLogger, level: UniWebViewLogger.Level, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.level = level


class Level:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class UniWebViewMessage:

    offsets = {'<RawMessage>k__BackingField': 16, '<Scheme>k__BackingField': 24, '<Path>k__BackingField': 32, '<Args>k__BackingField': 40}    
    def __init__(self, <RawMessage>k__BackingField: System.String, <Scheme>k__BackingField: System.String, <Path>k__BackingField: System.String, <Args>k__BackingField: System.Collections.Generic.Dictionary<System.String,System.String>, **kwargs):
        super().__init__(self, **kwargs)
		self.<RawMessage>k__BackingField = <RawMessage>k__BackingField
		self.<Scheme>k__BackingField = <Scheme>k__BackingField
		self.<Path>k__BackingField = <Path>k__BackingField
		self.<Args>k__BackingField = <Args>k__BackingField


class UniWebViewNativeListener:
	listeners: System.Collections.Generic.Dictionary<System.String,UniWebViewNativeListener>
    offsets = {'listeners': 0, 'webView': 24}    
    def __init__(self, listeners: System.Collections.Generic.Dictionary<System.String,UniWebViewNativeListener>, webView: UniWebView, **kwargs):
        super().__init__(self, **kwargs)
		self.listeners = listeners
		self.webView = webView


class UniWebViewNativeResultPayload:

    offsets = {'identifier': 16, 'resultCode': 24, 'data': 32}    
    def __init__(self, identifier: System.String, resultCode: System.String, data: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.identifier = identifier
		self.resultCode = resultCode
		self.data = data


class UniWebViewToolbarPosition:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class UniWebViewTransitionEdge:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class <>c__DisplayClass18_0:

    offsets = {'<>4__this': 16, 'args': 24}    
    def __init__(self, <>4__this: UnityEngine.SignInWithApple.SignInWithApple, args: UnityEngine.SignInWithApple.SignInWithApple.CallbackArgs, **kwargs):
        super().__init__(self, **kwargs)
		self.<>4__this = <>4__this
		self.args = args


class <>c__DisplayClass19_0:

    offsets = {'<>4__this': 16, 'args': 24}    
    def __init__(self, <>4__this: UnityEngine.SignInWithApple.SignInWithApple, args: UnityEngine.SignInWithApple.SignInWithApple.CallbackArgs, **kwargs):
        super().__init__(self, **kwargs)
		self.<>4__this = <>4__this
		self.args = args


class <>c__DisplayClass20_0:

    offsets = {'<>4__this': 16, 'args': 24}    
    def __init__(self, <>4__this: UnityEngine.SignInWithApple.SignInWithApple, args: UnityEngine.SignInWithApple.SignInWithApple.CallbackArgs, **kwargs):
        super().__init__(self, **kwargs)
		self.<>4__this = <>4__this
		self.args = args


class Callback:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CallbackArgs:

    offsets = {'credentialState': 16, 'userInfo': 24, 'error': 72}    
    def __init__(self, credentialState: UnityEngine.SignInWithApple.UserCredentialState, userInfo: UnityEngine.SignInWithApple.UserInfo, error: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.credentialState = credentialState
		self.userInfo = userInfo
		self.error = error


class GetCredentialStateCompleted:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class LoginCompleted:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class UpgradePathGeneric:

    offsets = {'last': 24, 'lastUpgrade': 32, '_cache': 40}    
    def __init__(self, last: Assets.Scripts.Unity.Towers.Upgradeable, lastUpgrade: UnityEngine.MonoBehaviour, _cache: Assets.Scripts.Utils.Cache<Assets.Scripts.Unity.Towers.Upgradeable>, **kwargs):
        super().__init__(self, **kwargs)
		self.last = last
		self.lastUpgrade = lastUpgrade
		self._cache = _cache


class UpgradePopup:

    offsets = {'text': 24, 'animationController': 32}    
    def __init__(self, text: TMPro.TMP_Text, animationController: UnityEngine.Animator, **kwargs):
        super().__init__(self, **kwargs)
		self.text = text
		self.animationController = animationController


class VolumeControl:

    offsets = {'slider': 24, 'buttonImage': 32, 'mutedImage': 40, 'unMutedImage': 48}    
    def __init__(self, slider: UnityEngine.UI.Slider, buttonImage: UnityEngine.UI.Image, mutedImage: Assets.Scripts.Utils.SpriteReference, unMutedImage: Assets.Scripts.Utils.SpriteReference, **kwargs):
        super().__init__(self, **kwargs)
		self.slider = slider
		self.buttonImage = buttonImage
		self.mutedImage = mutedImage
		self.unMutedImage = unMutedImage


class WebviewBackground:

    offsets = {'CloseButton': 24, 'BackButtonEvent': 32}    
    def __init__(self, CloseButton: UnityEngine.UI.Button, BackButtonEvent: System.Action, **kwargs):
        super().__init__(self, **kwargs)
		self.CloseButton = CloseButton
		self.BackButtonEvent = BackButtonEvent


class Cursor:

    offsets = {'textureUp': 24, 'textureDown': 32, 'hotspot': 40, 'showingCursorDown': 48}    
    def __init__(self, textureUp: UnityEngine.Texture2D, textureDown: UnityEngine.Texture2D, hotspot: UnityEngine.Vector2, showingCursorDown: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.textureUp = textureUp
		self.textureDown = textureDown
		self.hotspot = hotspot
		self.showingCursorDown = showingCursorDown


class AnimatedSceneLoader<T>:

    offsets = {'<Component>k__BackingField': 0, 'sceneName': 0, 'loadOperation': 0}    
    def __init__(self, <Component>k__BackingField: T, sceneName: System.String, loadOperation: UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle<UnityEngine.ResourceManagement.ResourceProviders.SceneInstance>, **kwargs):
        super().__init__(self, **kwargs)
		self.<Component>k__BackingField = <Component>k__BackingField
		self.sceneName = sceneName
		self.loadOperation = loadOperation


class GenericAnimatedScene:

    offsets = {'SkipAnimations': 24, 'CloseAnimationFinished': 25, 'OpenAnimationFinished': 26}    
    def __init__(self, SkipAnimations: System.Boolean, CloseAnimationFinished: System.Boolean, OpenAnimationFinished: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.SkipAnimations = SkipAnimations
		self.CloseAnimationFinished = CloseAnimationFinished
		self.OpenAnimationFinished = OpenAnimationFinished


class Main:
	<KEYBOARD_SUPPORT>k__BackingField: System.Boolean
    offsets = {'<KEYBOARD_SUPPORT>k__BackingField': 0, '<CURSOR_SUPPORT>k__BackingField': 1, '<TOUCH_SUPPORT>k__BackingField': 2, '<RESOLUTION_SUPPORT>k__BackingField': 3, '<CHROMEBOOK>k__BackingField': 4, '<WINDOWS>k__BackingField': 5, '<SteamworksClient>k__BackingField': 8, 'skuSettingsHelper': 16, 'resetExploitableDataOnStart': 24, 'localizationManager': 24, 'analyticsManager': 32}    
    def __init__(self, <KEYBOARD_SUPPORT>k__BackingField: System.Boolean, <CURSOR_SUPPORT>k__BackingField: System.Boolean, <TOUCH_SUPPORT>k__BackingField: System.Boolean, <RESOLUTION_SUPPORT>k__BackingField: System.Boolean, <CHROMEBOOK>k__BackingField: System.Boolean, <WINDOWS>k__BackingField: System.Boolean, <SteamworksClient>k__BackingField: Facepunch.Steamworks.Client, skuSettingsHelper: NinjaKiwi.Players.Utils.SkuSettingsHelper, resetExploitableDataOnStart: System.Boolean, localizationManager: NinjaKiwi.Common.LocalizationManager, analyticsManager: NinjaKiwi.Common.Analytics.NKAnalytics, **kwargs):
        super().__init__(self, **kwargs)
		self.<KEYBOARD_SUPPORT>k__BackingField = <KEYBOARD_SUPPORT>k__BackingField
		self.<CURSOR_SUPPORT>k__BackingField = <CURSOR_SUPPORT>k__BackingField
		self.<TOUCH_SUPPORT>k__BackingField = <TOUCH_SUPPORT>k__BackingField
		self.<RESOLUTION_SUPPORT>k__BackingField = <RESOLUTION_SUPPORT>k__BackingField
		self.<CHROMEBOOK>k__BackingField = <CHROMEBOOK>k__BackingField
		self.<WINDOWS>k__BackingField = <WINDOWS>k__BackingField
		self.<SteamworksClient>k__BackingField = <SteamworksClient>k__BackingField
		self.skuSettingsHelper = skuSettingsHelper
		self.resetExploitableDataOnStart = resetExploitableDataOnStart
		self.localizationManager = localizationManager
		self.analyticsManager = analyticsManager


class ProgressMessageObject:

    offsets = {'isValid': 16, '<Progress>k__BackingField': 20, '<SubMessage>k__BackingField': 24}    
    def __init__(self, isValid: System.Boolean, <Progress>k__BackingField: System.Single, <SubMessage>k__BackingField: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.isValid = isValid
		self.<Progress>k__BackingField = <Progress>k__BackingField
		self.<SubMessage>k__BackingField = <SubMessage>k__BackingField


class SimpleMessageObject:

    offsets = {'isValid': 16, '<Message>k__BackingField': 24}    
    def __init__(self, isValid: System.Boolean, <Message>k__BackingField: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.isValid = isValid
		self.<Message>k__BackingField = <Message>k__BackingField


class ErrorHandler:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DataConflictScreen:

    offsets = {'LocalDataDisplay': 32, 'RemoteDataDisplay': 40}    
    def __init__(self, LocalDataDisplay: Assets.Main.Scenes.DataConflictScreen.DataDisplay, RemoteDataDisplay: Assets.Main.Scenes.DataConflictScreen.DataDisplay, **kwargs):
        super().__init__(self, **kwargs)
		self.LocalDataDisplay = LocalDataDisplay
		self.RemoteDataDisplay = RemoteDataDisplay


class InitialLoadingScreen:

    offsets = {'MainText': 32, 'SubText': 40, 'progressBar': 48, 'progressImage': 56, 'UiAnimator': 64, 'downloadConfirmObj': 72, 'downloadConfirmBtn': 80, 'downloadDescTxt': 88, 'downloadClicked': 96}    
    def __init__(self, MainText: TMPro.TMP_Text, SubText: TMPro.TMP_Text, progressBar: UnityEngine.GameObject, progressImage: UnityEngine.UI.Image, UiAnimator: UnityEngine.Animator, downloadConfirmObj: UnityEngine.GameObject, downloadConfirmBtn: UnityEngine.UI.Button, downloadDescTxt: TMPro.TextMeshProUGUI, downloadClicked: System.Threading.Tasks.TaskCompletionSource<System.Boolean>, **kwargs):
        super().__init__(self, **kwargs)
		self.MainText = MainText
		self.SubText = SubText
		self.progressBar = progressBar
		self.progressImage = progressImage
		self.UiAnimator = UiAnimator
		self.downloadConfirmObj = downloadConfirmObj
		self.downloadConfirmBtn = downloadConfirmBtn
		self.downloadDescTxt = downloadDescTxt
		self.downloadClicked = downloadClicked


class LoadingScreen:

    offsets = {'UiAnimator': 32}    
    def __init__(self, UiAnimator: UnityEngine.Animator, **kwargs):
        super().__init__(self, **kwargs)
		self.UiAnimator = UiAnimator


class NinjaKiwiSplashScreen:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TitleScreen:

    offsets = {'titleMusic': 32, 'welcomeTo': 40, 'anEpicAdventureOf': 48, 'buildInfo': 56, 'buttonClickSound': 64, 'buttonClick2Sound': 72, 'UiAnimator': 80, 'BgAnimator': 88, 'PlayButtonClicked': 96, 'PlayerName': 104, 'IvePlayedBeforeButton': 112}    
    def __init__(self, titleMusic: UnityEngine.AudioClip, welcomeTo: TMPro.TextMeshProUGUI, anEpicAdventureOf: TMPro.TextMeshProUGUI, buildInfo: TMPro.TextMeshProUGUI, buttonClickSound: UnityEngine.AudioClip, buttonClick2Sound: UnityEngine.AudioClip, UiAnimator: UnityEngine.Animator, BgAnimator: UnityEngine.Animator, PlayButtonClicked: System.Boolean, PlayerName: TMPro.TMP_Text, IvePlayedBeforeButton: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.titleMusic = titleMusic
		self.welcomeTo = welcomeTo
		self.anEpicAdventureOf = anEpicAdventureOf
		self.buildInfo = buildInfo
		self.buttonClickSound = buttonClickSound
		self.buttonClick2Sound = buttonClick2Sound
		self.UiAnimator = UiAnimator
		self.BgAnimator = BgAnimator
		self.PlayButtonClicked = PlayButtonClicked
		self.PlayerName = PlayerName
		self.IvePlayedBeforeButton = IvePlayedBeforeButton


class MainMenuWorldChoreographer:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MonkeyStatue:

    offsets = {'animator': 24}    
    def __init__(self, animator: UnityEngine.Animator, **kwargs):
        super().__init__(self, **kwargs)
		self.animator = animator


class Constants:
	fixedUpdateTime: System.Single
    offsets = {'fixedUpdateTime': 0, 'bucketExtent': 4, 'catchUpRate': 8, 'invalidButtonHighlightColor': 12, 'replaysEnabled': 28, 'debugFastForwardScale': 40}    
    def __init__(self, fixedUpdateTime: System.Single, bucketExtent: System.Single, catchUpRate: System.Single, invalidButtonHighlightColor: UnityEngine.Color, replaysEnabled: System.Boolean, debugFastForwardScale: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.fixedUpdateTime = fixedUpdateTime
		self.bucketExtent = bucketExtent
		self.catchUpRate = catchUpRate
		self.invalidButtonHighlightColor = invalidButtonHighlightColor
		self.replaysEnabled = replaysEnabled
		self.debugFastForwardScale = debugFastForwardScale


class SceneNames:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class GameData:

    offsets = {'storeItems': 24, 'trophyStoreItems': 32, 'profileAvatars': 40, 'profileBanners': 48, 'bloonIconSprites': 56, 'achievements': 64, 'emoteData': 72, 'lootIconSprites': 80, 'towerBackgroundSprites': 88, 'buffIconSprites': 96, 'rankInfo': 104, 'mapSet': 112, 'audioJukeBox': 120, 'darkTempleAssetChanges': 128, 'bosses': 136, 'animCurves': 144}    
    def __init__(self, storeItems: Assets.Scripts.Data.Store.StoreItems, trophyStoreItems: Assets.Scripts.Data.TrophyStore.TrophyStoreItems, profileAvatars: Assets.Scripts.Data.ProfileAvatarsNS.ProfileAvatars, profileBanners: Assets.Scripts.Data.ProfileAvatarsNS.ProfileBanners, bloonIconSprites: Assets.Scripts.Data.Global.BloonIconSprites, achievements: Assets.Scripts.Data.Achievements.AchievementData, emoteData: Assets.Scripts.Data.EmotesNS.Emotes, lootIconSprites: Assets.Scripts.Data.Global.LootIconSprites, towerBackgroundSprites: Assets.Scripts.Data.Global.TowerBackgroundSprites, buffIconSprites: Assets.Scripts.Data.Global.BuffIconSprites, rankInfo: Assets.Scripts.Data.Global.RankInfo, mapSet: Assets.Scripts.Data.MapSets.MapSet, audioJukeBox: AudioJukeBox, darkTempleAssetChanges: Assets.Scripts.Data.Cosmetics.DarkTempleAssetChanges.DarkTempleAssetChange, bosses: Assets.Scripts.Data.Boss.Bosses, animCurves: Assets.Scripts.Data.AnimCurves.AnimCurve, **kwargs):
        super().__init__(self, **kwargs)
		self.storeItems = storeItems
		self.trophyStoreItems = trophyStoreItems
		self.profileAvatars = profileAvatars
		self.profileBanners = profileBanners
		self.bloonIconSprites = bloonIconSprites
		self.achievements = achievements
		self.emoteData = emoteData
		self.lootIconSprites = lootIconSprites
		self.towerBackgroundSprites = towerBackgroundSprites
		self.buffIconSprites = buffIconSprites
		self.rankInfo = rankInfo
		self.mapSet = mapSet
		self.audioJukeBox = audioJukeBox
		self.darkTempleAssetChanges = darkTempleAssetChanges
		self.bosses = bosses
		self.animCurves = animCurves


class Achievement:

    offsets = {'achievementId': 24, 'achievementIcon': 32, 'hiddenAchievementIcon': 40, 'subscript': 48, 'achievementGoal': 56, 'loot': 64, 'isCoop': 72, 'steamStatName': 80, 'hidden': 88, 'type': 96, 'googlePlayId': 104}    
    def __init__(self, achievementId: System.Int32, achievementIcon: Assets.Scripts.Utils.SpriteReference, hiddenAchievementIcon: Assets.Scripts.Utils.SpriteReference, subscript: System.String, achievementGoal: System.Single, loot: System.String, isCoop: System.Boolean, steamStatName: System.String, hidden: System.Boolean, type: System.String, googlePlayId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.achievementId = achievementId
		self.achievementIcon = achievementIcon
		self.hiddenAchievementIcon = hiddenAchievementIcon
		self.subscript = subscript
		self.achievementGoal = achievementGoal
		self.loot = loot
		self.isCoop = isCoop
		self.steamStatName = steamStatName
		self.hidden = hidden
		self.type = type
		self.googlePlayId = googlePlayId


class AchievementData:

    offsets = {'achievements': 24}    
    def __init__(self, achievements: System.Collections.Generic.List<Assets.Scripts.Data.Achievements.Achievement>, **kwargs):
        super().__init__(self, **kwargs)
		self.achievements = achievements


class AnimCurve:

    offsets = {'list': 24}    
    def __init__(self, list: Assets.Scripts.Data.AnimCurves.AnimCurveContainer, **kwargs):
        super().__init__(self, **kwargs)
		self.list = list


class AnimCurveContainer:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AnimCurveData:

    offsets = {'id': 16, 'animClip': 24, 'curvePosX': 32, 'curvePosY': 40, 'curvePosZ': 48, 'curveScale': 56}    
    def __init__(self, id: System.String, animClip: UnityEngine.AnimationClip, curvePosX: UnityEngine.AnimationCurve, curvePosY: UnityEngine.AnimationCurve, curvePosZ: UnityEngine.AnimationCurve, curveScale: UnityEngine.AnimationCurve, **kwargs):
        super().__init__(self, **kwargs)
		self.id = id
		self.animClip = animClip
		self.curvePosX = curvePosX
		self.curvePosY = curvePosY
		self.curvePosZ = curvePosZ
		self.curveScale = curveScale


class BossChildren:

    offsets = {'list': 24}    
    def __init__(self, list: Assets.Scripts.Data.Boss.BossChildrenDataContainer, **kwargs):
        super().__init__(self, **kwargs)
		self.list = list


class BossChildrenData:

    offsets = {'bloonType': 16, 'decalPrefab': 24, 'regrowDecalPrefab': 32}    
    def __init__(self, bloonType: System.String, decalPrefab: Assets.Scripts.Utils.PrefabReference, regrowDecalPrefab: Assets.Scripts.Utils.PrefabReference, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonType = bloonType
		self.decalPrefab = decalPrefab
		self.regrowDecalPrefab = regrowDecalPrefab


class BossChildrenDataContainer:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BossData:

    offsets = {'id': 16, 'eventBtn': 24, 'worldScene': 32, 'titlePrefab': 40, 'trackFXPrefab': 48, 'ambientMapFXPrefab': 56, 'normalBtn': 64, 'eliteBtn': 72, 'normalPortrait': 80, 'elitePortrait': 88, 'normalDefeatPortrait': 96, 'eliteDefeatPortrait': 104, 'normalHudIcon': 112, 'eliteHudIcon': 120, 'bossChildren': 128}    
    def __init__(self, id: System.String, eventBtn: Assets.Scripts.Utils.PrefabReference, worldScene: Assets.Scripts.Utils.PrefabReference, titlePrefab: Assets.Scripts.Utils.PrefabReference, trackFXPrefab: Assets.Scripts.Utils.PrefabReference, ambientMapFXPrefab: Assets.Scripts.Utils.PrefabReference, normalBtn: Assets.Scripts.Utils.SpriteReference, eliteBtn: Assets.Scripts.Utils.SpriteReference, normalPortrait: Assets.Scripts.Utils.SpriteReference, elitePortrait: Assets.Scripts.Utils.SpriteReference, normalDefeatPortrait: Assets.Scripts.Utils.SpriteReference, eliteDefeatPortrait: Assets.Scripts.Utils.SpriteReference, normalHudIcon: Assets.Scripts.Utils.SpriteReference, eliteHudIcon: Assets.Scripts.Utils.SpriteReference, bossChildren: Assets.Scripts.Data.Boss.BossChildren, **kwargs):
        super().__init__(self, **kwargs)
		self.id = id
		self.eventBtn = eventBtn
		self.worldScene = worldScene
		self.titlePrefab = titlePrefab
		self.trackFXPrefab = trackFXPrefab
		self.ambientMapFXPrefab = ambientMapFXPrefab
		self.normalBtn = normalBtn
		self.eliteBtn = eliteBtn
		self.normalPortrait = normalPortrait
		self.elitePortrait = elitePortrait
		self.normalDefeatPortrait = normalDefeatPortrait
		self.eliteDefeatPortrait = eliteDefeatPortrait
		self.normalHudIcon = normalHudIcon
		self.eliteHudIcon = eliteHudIcon
		self.bossChildren = bossChildren


class BossDetailsContainer:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Bosses:

    offsets = {'BossList': 24}    
    def __init__(self, BossList: Assets.Scripts.Data.Boss.BossDetailsContainer, **kwargs):
        super().__init__(self, **kwargs)
		self.BossList = BossList


class AssetChangeItem:

    offsets = {'id': 24}    
    def __init__(self, id: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.id = id


class BloonAssetChange:

    offsets = {'bloonId': 32, 'prefabSwaps': 40}    
    def __init__(self, bloonId: System.String, prefabSwaps: System.Collections.Generic.List<Assets.Scripts.Data.Cosmetics.BloonAssetChanges.PrefabSwap>, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonId = bloonId
		self.prefabSwaps = prefabSwaps


class PrefabSwap:

    offsets = {'original': 16, 'swapToo': 24}    
    def __init__(self, original: Assets.Scripts.Utils.PrefabReference, swapToo: Assets.Scripts.Utils.PrefabReference, **kwargs):
        super().__init__(self, **kwargs)
		self.original = original
		self.swapToo = swapToo


class BloonDecal:

    offsets = {'layer': 32, 'bloonOverlayLayers': 40}    
    def __init__(self, layer: System.Int32, bloonOverlayLayers: System.Collections.Generic.List<Assets.Scripts.Data.Cosmetics.BloonDecals.BloonDecalSwap>, **kwargs):
        super().__init__(self, **kwargs)
		self.layer = layer
		self.bloonOverlayLayers = bloonOverlayLayers


class BloonDecalSwap:

    offsets = {'bloonOverlayLayer': 16, 'decal': 24}    
    def __init__(self, bloonOverlayLayer: System.String, decal: Assets.Scripts.Utils.PrefabReference, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonOverlayLayer = bloonOverlayLayer
		self.decal = decal


class BloonPopFX:

    offsets = {'applyGlobal': 32, 'bloonIds': 40, 'popFX': 48, 'popSound1': 56, 'popSound2': 64, 'popSound3': 72, 'popSound4': 80, 'soundEffectTimeDelay': 88, 'soundEffectTimeDelayFF': 92}    
    def __init__(self, applyGlobal: System.Boolean, bloonIds: System.String, popFX: Assets.Scripts.Utils.PrefabReference, popSound1: Assets.Scripts.Utils.AudioSourceReference, popSound2: Assets.Scripts.Utils.AudioSourceReference, popSound3: Assets.Scripts.Utils.AudioSourceReference, popSound4: Assets.Scripts.Utils.AudioSourceReference, soundEffectTimeDelay: System.Int32, soundEffectTimeDelayFF: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.applyGlobal = applyGlobal
		self.bloonIds = bloonIds
		self.popFX = popFX
		self.popSound1 = popSound1
		self.popSound2 = popSound2
		self.popSound3 = popSound3
		self.popSound4 = popSound4
		self.soundEffectTimeDelay = soundEffectTimeDelay
		self.soundEffectTimeDelayFF = soundEffectTimeDelayFF


class DarkTempleAssetChange:

    offsets = {'prefabSwaps': 32, 'spriteSwaps': 40}    
    def __init__(self, prefabSwaps: System.Collections.Generic.List<Assets.Scripts.Data.Cosmetics.DarkTempleAssetChanges.PrefabSwap>, spriteSwaps: System.Collections.Generic.List<Assets.Scripts.Data.Cosmetics.DarkTempleAssetChanges.SpriteSwap>, **kwargs):
        super().__init__(self, **kwargs)
		self.prefabSwaps = prefabSwaps
		self.spriteSwaps = spriteSwaps


class PrefabSwap:

    offsets = {'original': 16, 'swapToo': 24}    
    def __init__(self, original: Assets.Scripts.Utils.PrefabReference, swapToo: Assets.Scripts.Utils.PrefabReference, **kwargs):
        super().__init__(self, **kwargs)
		self.original = original
		self.swapToo = swapToo


class SpriteSwap:

    offsets = {'original': 16, 'swapToo': 24}    
    def __init__(self, original: Assets.Scripts.Utils.SpriteReference, swapToo: Assets.Scripts.Utils.SpriteReference, **kwargs):
        super().__init__(self, **kwargs)
		self.original = original
		self.swapToo = swapToo


class Pet:

    offsets = {'towerId': 32, 'skinId': 40, 'isFlying': 48, 'display': 56, 'def': 72}    
    def __init__(self, towerId: System.String, skinId: System.String, isFlying: System.Boolean, display: Assets.Scripts.Utils.PrefabReference, def: Assets.Scripts.Models.Towers.Pets.PetModel, **kwargs):
        super().__init__(self, **kwargs)
		self.towerId = towerId
		self.skinId = skinId
		self.isFlying = isFlying
		self.display = display
		self.def = def


class AudioSwap:

    offsets = {'original': 16, 'swapToo': 24}    
    def __init__(self, original: Assets.Scripts.Utils.AudioSourceReference, swapToo: Assets.Scripts.Utils.AudioSourceReference, **kwargs):
        super().__init__(self, **kwargs)
		self.original = original
		self.swapToo = swapToo


class PowerAssetChange:

    offsets = {'powerId': 32, 'prefabSwaps': 40, 'spriteSwaps': 48, 'audioSwaps': 56}    
    def __init__(self, powerId: System.String, prefabSwaps: System.Collections.Generic.List<Assets.Scripts.Data.Cosmetics.PowerAssetChanges.PrefabSwap>, spriteSwaps: System.Collections.Generic.List<Assets.Scripts.Data.Cosmetics.PowerAssetChanges.SpriteSwap>, audioSwaps: System.Collections.Generic.List<Assets.Scripts.Data.Cosmetics.PowerAssetChanges.AudioSwap>, **kwargs):
        super().__init__(self, **kwargs)
		self.powerId = powerId
		self.prefabSwaps = prefabSwaps
		self.spriteSwaps = spriteSwaps
		self.audioSwaps = audioSwaps


class PrefabSwap:

    offsets = {'original': 16, 'swapToo': 24}    
    def __init__(self, original: Assets.Scripts.Utils.PrefabReference, swapToo: Assets.Scripts.Utils.PrefabReference, **kwargs):
        super().__init__(self, **kwargs)
		self.original = original
		self.swapToo = swapToo


class SpriteSwap:

    offsets = {'original': 16, 'swapToo': 24}    
    def __init__(self, original: Assets.Scripts.Utils.SpriteReference, swapToo: Assets.Scripts.Utils.SpriteReference, **kwargs):
        super().__init__(self, **kwargs)
		self.original = original
		self.swapToo = swapToo


class Prop:

    offsets = {'towerId': 32, 'skinId': 40, 'display': 48, 'displayOffsets': 56, 'def': 72}    
    def __init__(self, towerId: System.String, skinId: System.String, display: Assets.Scripts.Utils.PrefabReference, displayOffsets: Assets.Scripts.Data.Cosmetics.Props.Prop.OffsetDictionary, def: Assets.Scripts.Models.Towers.Props.PropModel, **kwargs):
        super().__init__(self, **kwargs)
		self.towerId = towerId
		self.skinId = skinId
		self.display = display
		self.displayOffsets = displayOffsets
		self.def = def


class AnimationSwap:

    offsets = {'original': 16, 'swapToo': 24}    
    def __init__(self, original: Assets.Scripts.Utils.AnimationClipReference, swapToo: Assets.Scripts.Utils.AnimationClipReference, **kwargs):
        super().__init__(self, **kwargs)
		self.original = original
		self.swapToo = swapToo


class AudioSwap:

    offsets = {'original': 16, 'swapToo': 24}    
    def __init__(self, original: Assets.Scripts.Utils.AudioSourceReference, swapToo: Assets.Scripts.Utils.AudioSourceReference, **kwargs):
        super().__init__(self, **kwargs)
		self.original = original
		self.swapToo = swapToo


class PrefabSwap:

    offsets = {'original': 16, 'swapToo': 24}    
    def __init__(self, original: Assets.Scripts.Utils.PrefabReference, swapToo: Assets.Scripts.Utils.PrefabReference, **kwargs):
        super().__init__(self, **kwargs)
		self.original = original
		self.swapToo = swapToo


class TowerAssetChange:

    offsets = {'applyGlobal': 32, 'applyTowerSets': 40, 'towerId': 48, 'skinId': 56, 'delayedReveal': 64, 'animationSwaps': 72, 'prefabSwaps': 80, 'audioSwaps': 88}    
    def __init__(self, applyGlobal: System.Boolean, applyTowerSets: System.String, towerId: System.String, skinId: System.String, delayedReveal: System.Single, animationSwaps: System.Collections.Generic.List<Assets.Scripts.Data.Cosmetics.TowerAssetChanges.AnimationSwap>, prefabSwaps: System.Collections.Generic.List<Assets.Scripts.Data.Cosmetics.TowerAssetChanges.PrefabSwap>, audioSwaps: System.Collections.Generic.List<Assets.Scripts.Data.Cosmetics.TowerAssetChanges.AudioSwap>, **kwargs):
        super().__init__(self, **kwargs)
		self.applyGlobal = applyGlobal
		self.applyTowerSets = applyTowerSets
		self.towerId = towerId
		self.skinId = skinId
		self.delayedReveal = delayedReveal
		self.animationSwaps = animationSwaps
		self.prefabSwaps = prefabSwaps
		self.audioSwaps = audioSwaps


class Emote:

    offsets = {'uiPrefab': 32, 'prefab': 40, 'displayDuration': 48, 'standardEmote': 52, 'textEmote': 53, 'textLocString': 56, 'canvasEmote': 64, 'fullscreenEmote': 65}    
    def __init__(self, uiPrefab: Assets.Scripts.Utils.PrefabReference, prefab: Assets.Scripts.Utils.PrefabReference, displayDuration: System.Single, standardEmote: System.Boolean, textEmote: System.Boolean, textLocString: System.String, canvasEmote: System.Boolean, fullscreenEmote: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.uiPrefab = uiPrefab
		self.prefab = prefab
		self.displayDuration = displayDuration
		self.standardEmote = standardEmote
		self.textEmote = textEmote
		self.textLocString = textLocString
		self.canvasEmote = canvasEmote
		self.fullscreenEmote = fullscreenEmote


class Emotes:

    offsets = {'standardHeroEmote': 24, 'emotes': 32}    
    def __init__(self, standardHeroEmote: Assets.Scripts.Data.EmotesNS.Emote, emotes: System.Collections.Generic.List<Assets.Scripts.Data.EmotesNS.Emote>, **kwargs):
        super().__init__(self, **kwargs)
		self.standardHeroEmote = standardHeroEmote
		self.emotes = emotes


class BloonIconSprite:

    offsets = {'id': 16, 'icon': 24}    
    def __init__(self, id: System.String, icon: Assets.Scripts.Utils.SpriteReference, **kwargs):
        super().__init__(self, **kwargs)
		self.id = id
		self.icon = icon


class BloonIconSprites:

    offsets = {'bloonIconSprites': 24}    
    def __init__(self, bloonIconSprites: System.Collections.Generic.List<Assets.Scripts.Data.Global.BloonIconSprite>, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonIconSprites = bloonIconSprites


class BuffIconSprite:

    offsets = {'buffId': 16, 'icon': 24}    
    def __init__(self, buffId: System.String, icon: Assets.Scripts.Utils.SpriteReference, **kwargs):
        super().__init__(self, **kwargs)
		self.buffId = buffId
		self.icon = icon


class BuffIconSprites:

    offsets = {'buffIconSprites': 24}    
    def __init__(self, buffIconSprites: System.Collections.Generic.List<Assets.Scripts.Data.Global.BuffIconSprite>, **kwargs):
        super().__init__(self, **kwargs)
		self.buffIconSprites = buffIconSprites


class LootIconSprites:

    offsets = {'monkeyMoneyIconR': 24, 'doubleCashModeIconR': 32, 'instaRankIconR': 40, 'instaTowerPacksIconR': 48, 'knowledgePointsIconR': 56, 'powerPacksIconR': 64, 'randomPowerIconR': 72, 'fullTowerUnlockIconR': 88, 'towerXPIconR': 96, 'trophyIconR': 120, 'bigBloonsIconR': 128, 'smallBloonsIconR': 136, 'bigTowersIconR': 144, 'smallTowersIconR': 152, 'resetDailyChestIconR': 160, 'racesPassIconR': 176, 'doubleCashModeIcon': 184, 'knowledgePointsIcon': 192, 'monkeyMoneyIcon': 200, 'bigBloonsModeIcon': 208, 'smallBloonsModeIcon': 216, 'resetDailyChestModeIcon': 224, 'bigTowersModeIcon': 232, 'smallTowersModeIcon': 240, 'racesPassIcon': 248}    
    def __init__(self, monkeyMoneyIconR: Assets.Scripts.Utils.SpriteReference, doubleCashModeIconR: Assets.Scripts.Utils.SpriteReference, instaRankIconR: Assets.Scripts.Utils.SpriteReference, instaTowerPacksIconR: Assets.Scripts.Utils.SpriteReference, knowledgePointsIconR: Assets.Scripts.Utils.SpriteReference, powerPacksIconR: Assets.Scripts.Utils.SpriteReference, randomPowerIconR: Assets.Scripts.Utils.SpriteReference, fullTowerUnlockIconR: Assets.Scripts.Utils.SpriteReference, towerXPIconR: Assets.Scripts.Utils.SpriteReference, trophyIconR: Assets.Scripts.Utils.SpriteReference, bigBloonsIconR: Assets.Scripts.Utils.SpriteReference, smallBloonsIconR: Assets.Scripts.Utils.SpriteReference, bigTowersIconR: Assets.Scripts.Utils.SpriteReference, smallTowersIconR: Assets.Scripts.Utils.SpriteReference, resetDailyChestIconR: Assets.Scripts.Utils.SpriteReference, racesPassIconR: Assets.Scripts.Utils.SpriteReference, doubleCashModeIcon: Assets.Scripts.Utils.SpriteReference, knowledgePointsIcon: Assets.Scripts.Utils.SpriteReference, monkeyMoneyIcon: Assets.Scripts.Utils.SpriteReference, bigBloonsModeIcon: Assets.Scripts.Utils.SpriteReference, smallBloonsModeIcon: Assets.Scripts.Utils.SpriteReference, resetDailyChestModeIcon: Assets.Scripts.Utils.SpriteReference, bigTowersModeIcon: Assets.Scripts.Utils.SpriteReference, smallTowersModeIcon: Assets.Scripts.Utils.SpriteReference, racesPassIcon: Assets.Scripts.Utils.SpriteReference, **kwargs):
        super().__init__(self, **kwargs)
		self.monkeyMoneyIconR = monkeyMoneyIconR
		self.doubleCashModeIconR = doubleCashModeIconR
		self.instaRankIconR = instaRankIconR
		self.instaTowerPacksIconR = instaTowerPacksIconR
		self.knowledgePointsIconR = knowledgePointsIconR
		self.powerPacksIconR = powerPacksIconR
		self.randomPowerIconR = randomPowerIconR
		self.fullTowerUnlockIconR = fullTowerUnlockIconR
		self.towerXPIconR = towerXPIconR
		self.trophyIconR = trophyIconR
		self.bigBloonsIconR = bigBloonsIconR
		self.smallBloonsIconR = smallBloonsIconR
		self.bigTowersIconR = bigTowersIconR
		self.smallTowersIconR = smallTowersIconR
		self.resetDailyChestIconR = resetDailyChestIconR
		self.racesPassIconR = racesPassIconR
		self.doubleCashModeIcon = doubleCashModeIcon
		self.knowledgePointsIcon = knowledgePointsIcon
		self.monkeyMoneyIcon = monkeyMoneyIcon
		self.bigBloonsModeIcon = bigBloonsModeIcon
		self.smallBloonsModeIcon = smallBloonsModeIcon
		self.resetDailyChestModeIcon = resetDailyChestModeIcon
		self.bigTowersModeIcon = bigTowersModeIcon
		self.smallTowersModeIcon = smallTowersModeIcon
		self.racesPassIcon = racesPassIcon


class Rank:

    offsets = {'totalXpNeeded': 16, 'levelUnlockString': 24}    
    def __init__(self, totalXpNeeded: System.Int64, levelUnlockString: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.totalXpNeeded = totalXpNeeded
		self.levelUnlockString = levelUnlockString


class RankInfo:

    offsets = {'rankInfo': 24, 'xpNeededPerVeteranRank': 32}    
    def __init__(self, rankInfo: System.Collections.Generic.List<Assets.Scripts.Data.Global.Rank>, xpNeededPerVeteranRank: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.rankInfo = rankInfo
		self.xpNeededPerVeteranRank = xpNeededPerVeteranRank


class TowerBackgroundSprites:

    offsets = {'primarySprite': 24, 'militarySprite': 32, 'magicSprite': 40, 'supportSprite': 48, 'heroSprite': 56, 'primarySpriteRound': 64, 'militarySpriteRound': 72, 'magicSpriteRound': 80, 'supportSpriteRound': 88}    
    def __init__(self, primarySprite: Assets.Scripts.Utils.SpriteReference, militarySprite: Assets.Scripts.Utils.SpriteReference, magicSprite: Assets.Scripts.Utils.SpriteReference, supportSprite: Assets.Scripts.Utils.SpriteReference, heroSprite: Assets.Scripts.Utils.SpriteReference, primarySpriteRound: Assets.Scripts.Utils.SpriteReference, militarySpriteRound: Assets.Scripts.Utils.SpriteReference, magicSpriteRound: Assets.Scripts.Utils.SpriteReference, supportSpriteRound: Assets.Scripts.Utils.SpriteReference, **kwargs):
        super().__init__(self, **kwargs)
		self.primarySprite = primarySprite
		self.militarySprite = militarySprite
		self.magicSprite = magicSprite
		self.supportSprite = supportSprite
		self.heroSprite = heroSprite
		self.primarySpriteRound = primarySpriteRound
		self.militarySpriteRound = militarySpriteRound
		self.magicSpriteRound = magicSpriteRound
		self.supportSpriteRound = supportSpriteRound


class CoopDivision:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class MapDetails:

    offsets = {'id': 16, 'difficulty': 24, 'coopMapDivisionType': 28, 'unlockDifficulty': 32, 'mapMusic': 40, 'mapSprite': 48, 'odysseyStatue': 56, 'isDebug': 64, 'isBrowserOnly': 65}    
    def __init__(self, id: System.String, difficulty: Assets.Scripts.Data.MapSets.MapDifficulty, coopMapDivisionType: Assets.Scripts.Data.MapSets.CoopDivision, unlockDifficulty: Assets.Scripts.Data.MapSets.MapDifficulty, mapMusic: System.String, mapSprite: Assets.Scripts.Utils.SpriteReference, odysseyStatue: Assets.Scripts.Utils.PrefabReference, isDebug: System.Boolean, isBrowserOnly: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.id = id
		self.difficulty = difficulty
		self.coopMapDivisionType = coopMapDivisionType
		self.unlockDifficulty = unlockDifficulty
		self.mapMusic = mapMusic
		self.mapSprite = mapSprite
		self.odysseyStatue = odysseyStatue
		self.isDebug = isDebug
		self.isBrowserOnly = isBrowserOnly


class MapDetailsContainer:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MapDifficulty:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class MapSet:

    offsets = {'Maps': 24}    
    def __init__(self, Maps: Assets.Scripts.Data.MapSets.MapDetailsContainer, **kwargs):
        super().__init__(self, **kwargs)
		self.Maps = Maps


class MapSetExtensions:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BossMusicTrack:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class MusicItem:

    offsets = {'<Clip>k__BackingField': 32, 'clip': 40, 'index': 48, 'freeTrack': 52, 'bossTrack': 56}    
    def __init__(self, <Clip>k__BackingField: UnityEngine.AudioClip, clip: Assets.Scripts.Utils.AudioClipReference, index: System.Int32, freeTrack: System.Boolean, bossTrack: Assets.Scripts.Data.Music.BossMusicTrack, **kwargs):
        super().__init__(self, **kwargs)
		self.<Clip>k__BackingField = <Clip>k__BackingField
		self.clip = clip
		self.index = index
		self.freeTrack = freeTrack
		self.bossTrack = bossTrack


class ProfileAvatar:

    offsets = {'icon': 32, 'trophyStoreId': 40}    
    def __init__(self, icon: Assets.Scripts.Utils.SpriteReference, trophyStoreId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.icon = icon
		self.trophyStoreId = trophyStoreId


class ProfileAvatars:

    offsets = {'profileAvatars': 24}    
    def __init__(self, profileAvatars: System.Collections.Generic.List<Assets.Scripts.Data.ProfileAvatarsNS.ProfileAvatar>, **kwargs):
        super().__init__(self, **kwargs)
		self.profileAvatars = profileAvatars


class ProfileBanner:

    offsets = {'icon': 32, 'iconSmall': 40, 'trophyStoreId': 48}    
    def __init__(self, icon: Assets.Scripts.Utils.SpriteReference, iconSmall: Assets.Scripts.Utils.SpriteReference, trophyStoreId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.icon = icon
		self.iconSmall = iconSmall
		self.trophyStoreId = trophyStoreId


class ProfileBanners:

    offsets = {'profileBanners': 24}    
    def __init__(self, profileBanners: System.Collections.Generic.List<Assets.Scripts.Data.ProfileAvatarsNS.ProfileBanner>, **kwargs):
        super().__init__(self, **kwargs)
		self.profileBanners = profileBanners


class BloonGroup:

    offsets = {'bloon': 16, 'count': 24, 'start': 28, 'duration': 32}    
    def __init__(self, bloon: System.String, count: System.Int32, start: System.Single, duration: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.bloon = bloon
		self.count = count
		self.start = start
		self.duration = duration


class IRoundSet:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RoundData:

    offsets = {'bloonGroups': 16}    
    def __init__(self, bloonGroups: System.Collections.Generic.List<Assets.Scripts.Data.Rounds.BloonGroup>, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonGroups = bloonGroups


class RoundSet:

    offsets = {'rounds': 24}    
    def __init__(self, rounds: System.Collections.Generic.List<Assets.Scripts.Data.Rounds.RoundData>, **kwargs):
        super().__init__(self, **kwargs)
		self.rounds = rounds


class ProductModelType:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class StoreFilter:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class StoreItem:

    offsets = {'productID': 24, 'productType': 32, 'loot': 40, 'viewableInStore': 48, 'availableInGame': 49, 'viewableInHeroes': 50, 'associatedHeroes': 56, 'notAvailableIfRankOver': 64, 'onlyAvailableIfRankOver': 68, 'stores': 72, 'overridesProductID': 80, 'icon': 88, 'icon2': 96, 'endDate': 104, 'showTimer': 112}    
    def __init__(self, productID: System.String, productType: Assets.Scripts.Data.Store.ProductModelType, loot: System.String, viewableInStore: System.Boolean, availableInGame: System.Boolean, viewableInHeroes: System.Boolean, associatedHeroes: System.String, notAvailableIfRankOver: System.Int32, onlyAvailableIfRankOver: System.Int32, stores: System.Collections.Generic.List<Assets.Scripts.Data.Store.StoreFilter>, overridesProductID: System.String, icon: Assets.Scripts.Utils.SpriteReference, icon2: Assets.Scripts.Utils.SpriteReference, endDate: System.DateTime, showTimer: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.productID = productID
		self.productType = productType
		self.loot = loot
		self.viewableInStore = viewableInStore
		self.availableInGame = availableInGame
		self.viewableInHeroes = viewableInHeroes
		self.associatedHeroes = associatedHeroes
		self.notAvailableIfRankOver = notAvailableIfRankOver
		self.onlyAvailableIfRankOver = onlyAvailableIfRankOver
		self.stores = stores
		self.overridesProductID = overridesProductID
		self.icon = icon
		self.icon2 = icon2
		self.endDate = endDate
		self.showTimer = showTimer


class StoreItems:

    offsets = {'storeItems': 24}    
    def __init__(self, storeItems: System.Collections.Generic.List<Assets.Scripts.Data.Store.StoreItem>, **kwargs):
        super().__init__(self, **kwargs)
		self.storeItems = storeItems


class TrophyItemType:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class TrophyItemTypeData:

    offsets = {'itemType': 16, 'itemTarget': 24}    
    def __init__(self, itemType: Assets.Scripts.Data.TrophyStore.TrophyItemType, itemTarget: Assets.Scripts.Data.Cosmetics.AssetChangeItem, **kwargs):
        super().__init__(self, **kwargs)
		self.itemType = itemType
		self.itemTarget = itemTarget


class TrophyStoreBankData:

    offsets = {'items': 16}    
    def __init__(self, items: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Data.TrophyStore.TrophyStoreBankData.TrophyStoreItem>, **kwargs):
        super().__init__(self, **kwargs)
		self.items = items


class TrophyStoreFilter:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class TrophyStoreItem:

    offsets = {'id': 24, 'storeFilter': 32, 'icon': 48, 'cosmeticPriority': 56, 'exclusivity': 64}    
    def __init__(self, id: System.String, storeFilter: Assets.Scripts.Data.TrophyStore.TrophyStoreFilter, icon: Assets.Scripts.Utils.SpriteReference, cosmeticPriority: System.Single, exclusivity: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.id = id
		self.storeFilter = storeFilter
		self.icon = icon
		self.cosmeticPriority = cosmeticPriority
		self.exclusivity = exclusivity


class TrophyStoreItems:

    offsets = {'trophyStoreTypeToIcon': 24, 'storeItems': 32}    
    def __init__(self, trophyStoreTypeToIcon: System.Collections.Generic.List<Assets.Scripts.Data.TrophyStore.TrophyStoreTypeIcon>, storeItems: System.Collections.Generic.List<Assets.Scripts.Data.TrophyStore.TrophyStoreItem>, **kwargs):
        super().__init__(self, **kwargs)
		self.trophyStoreTypeToIcon = trophyStoreTypeToIcon
		self.storeItems = storeItems


class TrophyStoreTypeIcon:

    offsets = {'tab': 16, 'icon': 24}    
    def __init__(self, tab: Assets.Scripts.Data.TrophyStore.TrophyStoreFilter, icon: Assets.Scripts.Utils.SpriteReference, **kwargs):
        super().__init__(self, **kwargs)
		self.tab = tab
		self.icon = icon


class EnableFlag:

    offsets = {'isEnabled': 16}    
    def __init__(self, isEnabled: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isEnabled = isEnabled


class FormerlyExpressedAs:

    offsets = {'name': 16}    
    def __init__(self, name: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.name = name


class GameModel:

    offsets = {'cash': 48, 'startingHealth': 52, 'maxHealth': 56, 'startingShield': 60, 'maxShield': 64, 'sellMultiplier': 68, 'selectedDifficultyRating': 72, 'maxSoftcapHealth': 76, 'softcapHealthPercentModifier': 80, 'difficultyId': 88, 'startRound': 96, 'endRound': 100, 'bloonSet': 104, 'towerSellEnabled': 112, 'powersEnabled': 113, 'maxTowerCount': 116, 'maxPowerCount': 120, 'continueEnabled': 124, 'doubleCashAllowed': 125, 'gameMode': 128, 'gameType': 136, 'randomSeed': 140, 'distributeInventory': 144, 'usePreSelectedHeroes': 145, 'reverseMode': 146, 'raceSendRoundDelay': 148, 'collectionEventItems': 152, 'goldenBloonActive': 156, 'bossBloonType': 160, 'bossEliteMode': 168, 'map': 280, 'trackArrowModel': 288, 'paragonDegreeDataModel': 320, 'globalBloonScale': 328, 'globalTowerScale': 332, 'bloonsByName': 336, 'upgradesByName': 344, 'roundSetsByName': 352, 'searchCache': 360}    
    def __init__(self, cash: System.Single, startingHealth: System.Single, maxHealth: System.Single, startingShield: System.Single, maxShield: System.Single, sellMultiplier: System.Single, selectedDifficultyRating: System.Single, maxSoftcapHealth: System.Single, softcapHealthPercentModifier: System.Single, difficultyId: System.String, startRound: System.Int32, endRound: System.Int32, bloonSet: System.String, towerSellEnabled: System.Boolean, powersEnabled: System.Boolean, maxTowerCount: System.Int32, maxPowerCount: System.Int32, continueEnabled: System.Boolean, doubleCashAllowed: System.Boolean, gameMode: System.String, gameType: System.Int32, randomSeed: System.Int32, distributeInventory: System.Boolean, usePreSelectedHeroes: System.Boolean, reverseMode: System.Boolean, raceSendRoundDelay: System.Int32, collectionEventItems: System.Int32, goldenBloonActive: System.Boolean, bossBloonType: System.String, bossEliteMode: System.Boolean, map: Assets.Scripts.Models.Map.MapModel, trackArrowModel: Assets.Scripts.Models.Map.TrackArrowModel, paragonDegreeDataModel: ParagonDegreeDataModel, globalBloonScale: System.Single, globalTowerScale: System.Single, bloonsByName: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Bloons.BloonModel>, upgradesByName: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Towers.Upgrades.UpgradeModel>, roundSetsByName: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Rounds.RoundSetModel>, searchCache: System.Collections.Generic.Dictionary<System.Type,System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Model>>, **kwargs):
        super().__init__(self, **kwargs)
		self.cash = cash
		self.startingHealth = startingHealth
		self.maxHealth = maxHealth
		self.startingShield = startingShield
		self.maxShield = maxShield
		self.sellMultiplier = sellMultiplier
		self.selectedDifficultyRating = selectedDifficultyRating
		self.maxSoftcapHealth = maxSoftcapHealth
		self.softcapHealthPercentModifier = softcapHealthPercentModifier
		self.difficultyId = difficultyId
		self.startRound = startRound
		self.endRound = endRound
		self.bloonSet = bloonSet
		self.towerSellEnabled = towerSellEnabled
		self.powersEnabled = powersEnabled
		self.maxTowerCount = maxTowerCount
		self.maxPowerCount = maxPowerCount
		self.continueEnabled = continueEnabled
		self.doubleCashAllowed = doubleCashAllowed
		self.gameMode = gameMode
		self.gameType = gameType
		self.randomSeed = randomSeed
		self.distributeInventory = distributeInventory
		self.usePreSelectedHeroes = usePreSelectedHeroes
		self.reverseMode = reverseMode
		self.raceSendRoundDelay = raceSendRoundDelay
		self.collectionEventItems = collectionEventItems
		self.goldenBloonActive = goldenBloonActive
		self.bossBloonType = bossBloonType
		self.bossEliteMode = bossEliteMode
		self.map = map
		self.trackArrowModel = trackArrowModel
		self.paragonDegreeDataModel = paragonDegreeDataModel
		self.globalBloonScale = globalBloonScale
		self.globalTowerScale = globalTowerScale
		self.bloonsByName = bloonsByName
		self.upgradesByName = upgradesByName
		self.roundSetsByName = roundSetsByName
		self.searchCache = searchCache


class GameModelUtil:
	cachedModel: Assets.Scripts.Models.GameModel
    offsets = {'cachedModel': 0, '<GameModelSize>k__BackingField': 8, 'gameModelHashTask': 16, 'gameModelHash': 24}    
    def __init__(self, cachedModel: Assets.Scripts.Models.GameModel, <GameModelSize>k__BackingField: System.Int32, gameModelHashTask: System.Threading.Tasks.Task<System.String>, gameModelHash: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.cachedModel = cachedModel
		self.<GameModelSize>k__BackingField = <GameModelSize>k__BackingField
		self.gameModelHashTask = gameModelHashTask
		self.gameModelHash = gameModelHash


class Implementation:

    offsets = {'type': 16, 'boxInEntity': 24}    
    def __init__(self, type: System.Type, boxInEntity: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.type = type
		self.boxInEntity = boxInEntity


class Model:
	typePrefix: System.Collections.Generic.Dictionary<System.Type,System.String>
    offsets = {'typePrefix': 0, '_name': 16, 'checkedImplementationType': 24, 'implementationType': 32, 'childDependants': 40}    
    def __init__(self, typePrefix: System.Collections.Generic.Dictionary<System.Type,System.String>, _name: System.String, checkedImplementationType: System.Boolean, implementationType: System.Type, childDependants: System.Collections.Generic.List<Assets.Scripts.Models.Model>, **kwargs):
        super().__init__(self, **kwargs)
		self.typePrefix = typePrefix
		self._name = _name
		self.checkedImplementationType = checkedImplementationType
		self.implementationType = implementationType
		self.childDependants = childDependants


class Model_StaticFields:
	implementationTypes: System.Collections.Generic.Dictionary<System.Type,System.Type>
    offsets = {'implementationTypes': 0}    
    def __init__(self, implementationTypes: System.Collections.Generic.Dictionary<System.Type,System.Type>, **kwargs):
        super().__init__(self, **kwargs)
		self.implementationTypes = implementationTypes


class Outdated:

    offsets = {'osVersion': 16}    
    def __init__(self, osVersion: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.osVersion = osVersion


class PlayerCosmeticInfo:

    offsets = {'towerCosmetics': 16, 'towerSetCosmetics': 24, 'globalTowerCosmetics': 32, 'bloonAssetChanges': 40, 'bloonDecals': 48, 'bloonPopFX': 56, 'globalBloonPopFX': 64, 'powerAssetChanges': 72}    
    def __init__(self, towerCosmetics: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.TowerCosmetics>, towerSetCosmetics: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.List<System.String>>, globalTowerCosmetics: System.Collections.Generic.List<System.String>, bloonAssetChanges: System.Collections.Generic.Dictionary<System.String,System.String>, bloonDecals: System.Collections.Generic.Dictionary<System.String,System.String>, bloonPopFX: System.Collections.Generic.Dictionary<System.String,System.String>, globalBloonPopFX: System.String, powerAssetChanges: System.Collections.Generic.Dictionary<System.String,System.String>, **kwargs):
        super().__init__(self, **kwargs)
		self.towerCosmetics = towerCosmetics
		self.towerSetCosmetics = towerSetCosmetics
		self.globalTowerCosmetics = globalTowerCosmetics
		self.bloonAssetChanges = bloonAssetChanges
		self.bloonDecals = bloonDecals
		self.bloonPopFX = bloonPopFX
		self.globalBloonPopFX = globalBloonPopFX
		self.powerAssetChanges = powerAssetChanges


class PlayerInfo:

    offsets = {'displayName': 16, 'rank': 24, 'isVeteran': 28, 'hero': 32, 'requestedMods': 40, 'medalIndex': 48, 'medalCount': 52, 'cosmetics': 56, 'stats': 64, 'namedMonkeyNames': 72, 'doubleCash': 80, 'haXXor': 81, 'goldenBloonActive': 82, 'monkeyTeamsActive': 83, 'banner': 96}    
    def __init__(self, displayName: System.String, rank: System.Int32, isVeteran: System.Boolean, hero: System.String, requestedMods: System.Collections.Generic.List<System.String>, medalIndex: System.Int32, medalCount: System.Int32, cosmetics: Assets.Scripts.Models.PlayerCosmeticInfo, stats: Assets.Scripts.Unity.Player.Btd6PlayerStats, namedMonkeyNames: System.Collections.Generic.Dictionary<System.String,System.String>, doubleCash: System.Boolean, haXXor: System.Boolean, goldenBloonActive: System.Boolean, monkeyTeamsActive: System.Boolean, banner: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.displayName = displayName
		self.rank = rank
		self.isVeteran = isVeteran
		self.hero = hero
		self.requestedMods = requestedMods
		self.medalIndex = medalIndex
		self.medalCount = medalCount
		self.cosmetics = cosmetics
		self.stats = stats
		self.namedMonkeyNames = namedMonkeyNames
		self.doubleCash = doubleCash
		self.haXXor = haXXor
		self.goldenBloonActive = goldenBloonActive
		self.monkeyTeamsActive = monkeyTeamsActive
		self.banner = banner


class Sku:

    offsets = {'settings': 24, 'gameEvents': 32, 'trophyStore': 40, 'testing': 48, 'versions': 56}    
    def __init__(self, settings: Assets.Scripts.Models.ServerEvents.ServerSettings, gameEvents: Assets.Scripts.Models.ServerEvents.GameEvents, trophyStore: Assets.Scripts.Models.TrophyStoreSKU, testing: Assets.Scripts.Models.TestingSettings, versions: Assets.Scripts.Models.VersionSettings, **kwargs):
        super().__init__(self, **kwargs)
		self.settings = settings
		self.gameEvents = gameEvents
		self.trophyStore = trophyStore
		self.testing = testing
		self.versions = versions


class TestingSettings:

    offsets = {'unlockIAP': 16}    
    def __init__(self, unlockIAP: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.unlockIAP = unlockIAP


class TowerCosmetics:

    offsets = {'fullSkin': 16, 'assetChangeIds': 24, 'pet': 32, 'props': 40}    
    def __init__(self, fullSkin: System.String, assetChangeIds: System.Collections.Generic.List<System.String>, pet: System.String, props: System.Collections.Generic.List<System.String>, **kwargs):
        super().__init__(self, **kwargs)
		self.fullSkin = fullSkin
		self.assetChangeIds = assetChangeIds
		self.pet = pet
		self.props = props


class TrophyStoreSKU:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class VersionSettings:

    offsets = {'minimum': 16, 'current': 24, 'popupInterval': 32, 'update_url': 40, 'outdated': 48}    
    def __init__(self, minimum: System.Version, current: System.Version, popupInterval: System.TimeSpan, update_url: System.String, outdated: Assets.Scripts.Models.Outdated, **kwargs):
        super().__init__(self, **kwargs)
		self.minimum = minimum
		self.current = current
		self.popupInterval = popupInterval
		self.update_url = update_url
		self.outdated = outdated


class BlankSoundModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SoundModel:
	blank: Assets.Scripts.Models.Audio.SoundModel
    offsets = {'blank': 0, 'assetId': 48}    
    def __init__(self, blank: Assets.Scripts.Models.Audio.SoundModel, assetId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.blank = blank
		self.assetId = assetId


class AgeingDestroyModel:

    offsets = {'time': 48, 'timeFrames': 52, 'useRoundTime': 56}    
    def __init__(self, time: System.Single, timeFrames: System.Int32, useRoundTime: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.time = time
		self.timeFrames = timeFrames
		self.useRoundTime = useRoundTime


class DestroyOnAbilityEndModel:

    offsets = {'ability': 48}    
    def __init__(self, ability: Assets.Scripts.Simulation.Towers.Behaviors.Abilities.Ability, **kwargs):
        super().__init__(self, **kwargs)
		self.ability = ability


class HeliGroupOffsetModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TransformModel:

    offsets = {'position': 48, 'rotation': 60}    
    def __init__(self, position: Assets.Scripts.Simulation.SMath.Vector3, rotation: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.position = position
		self.rotation = rotation


class BloonBehaviorModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BloonBehaviorModelWithTowerTracking:

    offsets = {'tower': 48}    
    def __init__(self, tower: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.tower = tower


class BloonModel:

    offsets = {'id': 48, 'baseId': 56, 'display': 64, 'icon': 72, 'overlayClass': 80, 'collisionGroup': 120, 'bloonProperties': 128, 'rotate': 144, 'isMoab': 145, 'isBoss': 146, 'isCamo': 147, 'isGrow': 148, 'isFortified': 149, 'hasChildrenWithDifferentTotalHealths': 150, 'isInvulnerable': 151, 'distributeDamageToChildren': 152, 'rotateToFollowPath': 153, 'disallowCosmetics': 154, 'totalLeakDamage': 156, 'storedLayers': 160, 'radius': 164, 'danger': 168, 'speedFrames': 172, 'maxHealth': 176, 'leakDamage': 180, 'layerNumber': 184, 'bonusDamagePerHit': 200, 'speed': 204, 'updateChildBloonModels': 208, 'childBloonModels': 216}    
    def __init__(self, id: System.String, baseId: System.String, display: System.String, icon: Assets.Scripts.Utils.SpriteReference, overlayClass: System.String, collisionGroup: Assets.Scripts.Models.Physics.CollisionGroupModel, bloonProperties: BloonProperties, rotate: System.Boolean, isMoab: System.Boolean, isBoss: System.Boolean, isCamo: System.Boolean, isGrow: System.Boolean, isFortified: System.Boolean, hasChildrenWithDifferentTotalHealths: System.Boolean, isInvulnerable: System.Boolean, distributeDamageToChildren: System.Boolean, rotateToFollowPath: System.Boolean, disallowCosmetics: System.Boolean, totalLeakDamage: System.Single, storedLayers: System.Single, radius: System.Single, danger: System.Single, speedFrames: System.Single, maxHealth: System.Single, leakDamage: System.Single, layerNumber: System.Int32, bonusDamagePerHit: System.Single, speed: System.Single, updateChildBloonModels: System.Boolean, childBloonModels: System.Collections.Generic.List<Assets.Scripts.Models.Bloons.BloonModel>, **kwargs):
        super().__init__(self, **kwargs)
		self.id = id
		self.baseId = baseId
		self.display = display
		self.icon = icon
		self.overlayClass = overlayClass
		self.collisionGroup = collisionGroup
		self.bloonProperties = bloonProperties
		self.rotate = rotate
		self.isMoab = isMoab
		self.isBoss = isBoss
		self.isCamo = isCamo
		self.isGrow = isGrow
		self.isFortified = isFortified
		self.hasChildrenWithDifferentTotalHealths = hasChildrenWithDifferentTotalHealths
		self.isInvulnerable = isInvulnerable
		self.distributeDamageToChildren = distributeDamageToChildren
		self.rotateToFollowPath = rotateToFollowPath
		self.disallowCosmetics = disallowCosmetics
		self.totalLeakDamage = totalLeakDamage
		self.storedLayers = storedLayers
		self.radius = radius
		self.danger = danger
		self.speedFrames = speedFrames
		self.maxHealth = maxHealth
		self.leakDamage = leakDamage
		self.layerNumber = layerNumber
		self.bonusDamagePerHit = bonusDamagePerHit
		self.speed = speed
		self.updateChildBloonModels = updateChildBloonModels
		self.childBloonModels = childBloonModels


class OverlayClass:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class AnimDamageStateModel:

    offsets = {'numOfAnimStates': 48}    
    def __init__(self, numOfAnimStates: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.numOfAnimStates = numOfAnimStates


class BadImmunityModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CarryProjectileModel:

    offsets = {'projectile': 56, 'emission': 64}    
    def __init__(self, projectile: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, emission: Assets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.projectile = projectile
		self.emission = emission


class ChangeGrowTypeModel:

    offsets = {'bloon': 48, 'regenTo': 56}    
    def __init__(self, bloon: Assets.Scripts.Models.Bloons.BloonModel, regenTo: Assets.Scripts.Models.Bloons.BloonModel, **kwargs):
        super().__init__(self, **kwargs)
		self.bloon = bloon
		self.regenTo = regenTo


class ColorModel:

    offsets = {'red': 48, 'green': 52, 'blue': 56, 'alpha': 60}    
    def __init__(self, red: System.Single, green: System.Single, blue: System.Single, alpha: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.red = red
		self.green = green
		self.blue = blue
		self.alpha = alpha


class CreateEffectOnBloonOverTimeModel:

    offsets = {'intervalFrames': 56, 'interval': 60, 'displayPath': 64, 'displayLifetime': 72, 'triggerImmediate': 76, 'rotateEffectWithBloon': 77, 'initialDelay': 80, 'initialDelayFrames': 84, 'sound1': 88, 'sound2': 96, 'sound3': 104, 'sound4': 112, 'sound5': 120}    
    def __init__(self, intervalFrames: System.Int32, interval: System.Single, displayPath: System.String, displayLifetime: System.Single, triggerImmediate: System.Boolean, rotateEffectWithBloon: System.Boolean, initialDelay: System.Single, initialDelayFrames: System.Int32, sound1: System.String, sound2: System.String, sound3: System.String, sound4: System.String, sound5: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.intervalFrames = intervalFrames
		self.interval = interval
		self.displayPath = displayPath
		self.displayLifetime = displayLifetime
		self.triggerImmediate = triggerImmediate
		self.rotateEffectWithBloon = rotateEffectWithBloon
		self.initialDelay = initialDelay
		self.initialDelayFrames = initialDelayFrames
		self.sound1 = sound1
		self.sound2 = sound2
		self.sound3 = sound3
		self.sound4 = sound4
		self.sound5 = sound5


class CreateSoundOnBloonDegradeModel:

    offsets = {'sound1': 48, 'sound2': 56, 'tag': 64}    
    def __init__(self, sound1: Assets.Scripts.Models.Audio.SoundModel, sound2: Assets.Scripts.Models.Audio.SoundModel, tag: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.sound1 = sound1
		self.sound2 = sound2
		self.tag = tag


class CreateSoundOnDamageBloonModel:

    offsets = {'sound1': 48, 'sound2': 56, 'sound3': 64, 'sound4': 72, 'sound5': 80, 'sound6': 88, 'sound7': 96, 'sound8': 104}    
    def __init__(self, sound1: System.String, sound2: System.String, sound3: System.String, sound4: System.String, sound5: System.String, sound6: System.String, sound7: System.String, sound8: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.sound1 = sound1
		self.sound2 = sound2
		self.sound3 = sound3
		self.sound4 = sound4
		self.sound5 = sound5
		self.sound6 = sound6
		self.sound7 = sound7
		self.sound8 = sound8


class CreateSoundOnSpawnBloonModel:

    offsets = {'sound': 48}    
    def __init__(self, sound: Assets.Scripts.Models.Audio.SoundModel, **kwargs):
        super().__init__(self, **kwargs)
		self.sound = sound


class DamageOverTimeCustomModel:

    offsets = {'multiplier': 120, 'additive': 124}    
    def __init__(self, multiplier: System.Single, additive: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.additive = additive


class DamageOverTimeForTagModel:

    offsets = {'damage': 56, 'payloadCount': 60, 'interval': 64, 'immuneBloonProperties': 68, 'tag': 72, 'intervalFrames': 80}    
    def __init__(self, damage: System.Int32, payloadCount: System.Int32, interval: System.Single, immuneBloonProperties: BloonProperties, tag: System.String, intervalFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.damage = damage
		self.payloadCount = payloadCount
		self.interval = interval
		self.immuneBloonProperties = immuneBloonProperties
		self.tag = tag
		self.intervalFrames = intervalFrames


class DamageOverTimeModel:

    offsets = {'damage': 56, 'payloadCount': 60, 'immuneBloonProperties': 64, 'intervalFrames': 68, 'interval': 72, 'displayPath': 80, 'displayLifetime': 88, 'triggerImmediate': 92, 'rotateEffectWithBloon': 93, 'initialDelay': 96, 'initialDelayFrames': 100, 'damageOnDestroy': 104}    
    def __init__(self, damage: System.Int32, payloadCount: System.Int32, immuneBloonProperties: BloonProperties, intervalFrames: System.Int32, interval: System.Single, displayPath: System.String, displayLifetime: System.Single, triggerImmediate: System.Boolean, rotateEffectWithBloon: System.Boolean, initialDelay: System.Single, initialDelayFrames: System.Int32, damageOnDestroy: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.damage = damage
		self.payloadCount = payloadCount
		self.immuneBloonProperties = immuneBloonProperties
		self.intervalFrames = intervalFrames
		self.interval = interval
		self.displayPath = displayPath
		self.displayLifetime = displayLifetime
		self.triggerImmediate = triggerImmediate
		self.rotateEffectWithBloon = rotateEffectWithBloon
		self.initialDelay = initialDelay
		self.initialDelayFrames = initialDelayFrames
		self.damageOnDestroy = damageOnDestroy


class DamageStateModel:

    offsets = {'displayPath': 48, 'healthPercent': 56}    
    def __init__(self, displayPath: System.String, healthPercent: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.displayPath = displayPath
		self.healthPercent = healthPercent


class DartTimeBloonBehaviorModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DestroyOnDegradeModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DisableDisplaysOnBloonModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DistributeCashModel:

    offsets = {'cash': 48, 'multiplier': 52, 'additive': 56, 'additionalCash': 60, 'giveNoCash': 64}    
    def __init__(self, cash: System.Single, multiplier: System.Single, additive: System.Single, additionalCash: System.Single, giveNoCash: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.cash = cash
		self.multiplier = multiplier
		self.additive = additive
		self.additionalCash = additionalCash
		self.giveNoCash = giveNoCash


class EffectOnPopModel:

    offsets = {'effect': 48}    
    def __init__(self, effect: Assets.Scripts.Models.Effects.EffectModel, **kwargs):
        super().__init__(self, **kwargs)
		self.effect = effect


class EmitOnDestroyModel:

    offsets = {'projectile': 56, 'emission': 64}    
    def __init__(self, projectile: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, emission: Assets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.projectile = projectile
		self.emission = emission


class EmitOnPopModel:

    offsets = {'projectile': 56, 'emission': 64, 'pierceOverride': 72, 'ignoreSameFrameDegrade': 76}    
    def __init__(self, projectile: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, emission: Assets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel, pierceOverride: System.Single, ignoreSameFrameDegrade: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.projectile = projectile
		self.emission = emission
		self.pierceOverride = pierceOverride
		self.ignoreSameFrameDegrade = ignoreSameFrameDegrade


class FollowCursorModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class FreezeImmunityRemovalModel:

    offsets = {'mutators': 48, 'damageModel': 64}    
    def __init__(self, mutators: System.String, damageModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.DamageModel, **kwargs):
        super().__init__(self, **kwargs)
		self.mutators = mutators
		self.damageModel = damageModel


class GiveLifeModel:

    offsets = {'lifeToGive': 48}    
    def __init__(self, lifeToGive: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.lifeToGive = lifeToGive


class GoldenBloonModel:

    offsets = {'damageFX': 48, 'rewardTextAssetId': 56, 'rewardTextLifeTime': 64, 'invulnerableTime': 68, 'cantJumpTime': 72, 'speedIncreaseWhenDamaged': 76, 'speedIncreaseTime': 80, 'jumpChanceTotal': 84, 'jumpChanceForward': 88, 'jumpChanceBackward': 92, 'minJumpDist': 96, 'maxJumpDistPercOfTrack': 100, 'jumpSpeedMultiplier': 104, 'invulnerableTimeFrames': 108, 'cantJumpTimeFrames': 112, 'speedIncreaseTimeFrames': 116}    
    def __init__(self, damageFX: Assets.Scripts.Models.Effects.EffectModel, rewardTextAssetId: System.String, rewardTextLifeTime: System.Single, invulnerableTime: System.Single, cantJumpTime: System.Single, speedIncreaseWhenDamaged: System.Single, speedIncreaseTime: System.Single, jumpChanceTotal: System.Int32, jumpChanceForward: System.Int32, jumpChanceBackward: System.Int32, minJumpDist: System.Single, maxJumpDistPercOfTrack: System.Single, jumpSpeedMultiplier: System.Single, invulnerableTimeFrames: System.Int32, cantJumpTimeFrames: System.Int32, speedIncreaseTimeFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.damageFX = damageFX
		self.rewardTextAssetId = rewardTextAssetId
		self.rewardTextLifeTime = rewardTextLifeTime
		self.invulnerableTime = invulnerableTime
		self.cantJumpTime = cantJumpTime
		self.speedIncreaseWhenDamaged = speedIncreaseWhenDamaged
		self.speedIncreaseTime = speedIncreaseTime
		self.jumpChanceTotal = jumpChanceTotal
		self.jumpChanceForward = jumpChanceForward
		self.jumpChanceBackward = jumpChanceBackward
		self.minJumpDist = minJumpDist
		self.maxJumpDistPercOfTrack = maxJumpDistPercOfTrack
		self.jumpSpeedMultiplier = jumpSpeedMultiplier
		self.invulnerableTimeFrames = invulnerableTimeFrames
		self.cantJumpTimeFrames = cantJumpTimeFrames
		self.speedIncreaseTimeFrames = speedIncreaseTimeFrames


class GrappleSlotModel:

    offsets = {'parent': 48}    
    def __init__(self, parent: Assets.Scripts.Models.Bloons.Behaviors.GrappleSlotModel, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class GrowBlockModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class GrowModel:

    offsets = {'rate': 48, 'growToId': 56}    
    def __init__(self, rate: System.Single, growToId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.rate = rate
		self.growToId = growToId


class HealthPercentTriggerModel:

    offsets = {'repeatFirst': 48}    
    def __init__(self, repeatFirst: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.repeatFirst = repeatFirst


class HexModel:

    offsets = {'damagePercentOfMax': 56, 'payloadCount': 60, 'interval': 64, 'intervalFrames': 68, 'totalDuration': 72, 'totalIntervalFrames': 76}    
    def __init__(self, damagePercentOfMax: System.Single, payloadCount: System.Int32, interval: System.Single, intervalFrames: System.Int32, totalDuration: System.Single, totalIntervalFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.damagePercentOfMax = damagePercentOfMax
		self.payloadCount = payloadCount
		self.interval = interval
		self.intervalFrames = intervalFrames
		self.totalDuration = totalDuration
		self.totalIntervalFrames = totalIntervalFrames


class IgnoreDmgImmunityModel:

    offsets = {'removeBloonProperties': 48, 'chance': 52}    
    def __init__(self, removeBloonProperties: BloonProperties, chance: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.removeBloonProperties = removeBloonProperties
		self.chance = chance


class IncreaseWorthTextEffectModel:

    offsets = {'assetId': 48, 'lifespan': 56, 'displayFullPayout': 60}    
    def __init__(self, assetId: System.String, lifespan: System.Single, displayFullPayout: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.assetId = assetId
		self.lifespan = lifespan
		self.displayFullPayout = displayFullPayout


class MoabBarrageBloonBehaviorModel:

    offsets = {'damage': 56, 'immuneBloonProperties': 72, 'initialDelayFrames': 76, 'initialDelay': 80, 'intervalFrames': 84, 'interval': 88, 'missileDisplayPath': 96, 'missileDisplayLifespan': 104, 'explosionDisplayPath': 112, 'explosionDisplayLifespan': 120, 'rotateEffectWithBloon': 124, 'randomDelayMax': 128, 'randomDelayMaxFrames': 132, 'numOfMissiles': 136, 'sound1': 144, 'sound2': 152, 'sound3': 160, 'sound4': 168, 'sound5': 176}    
    def __init__(self, damage: System.Int32, immuneBloonProperties: BloonProperties, initialDelayFrames: System.Int32, initialDelay: System.Single, intervalFrames: System.Int32, interval: System.Single, missileDisplayPath: Assets.Scripts.Models.Effects.AssetPathModel, missileDisplayLifespan: System.Single, explosionDisplayPath: Assets.Scripts.Models.Effects.AssetPathModel, explosionDisplayLifespan: System.Single, rotateEffectWithBloon: System.Boolean, randomDelayMax: System.Single, randomDelayMaxFrames: System.Int32, numOfMissiles: System.Int32, sound1: System.String, sound2: System.String, sound3: System.String, sound4: System.String, sound5: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.damage = damage
		self.immuneBloonProperties = immuneBloonProperties
		self.initialDelayFrames = initialDelayFrames
		self.initialDelay = initialDelay
		self.intervalFrames = intervalFrames
		self.interval = interval
		self.missileDisplayPath = missileDisplayPath
		self.missileDisplayLifespan = missileDisplayLifespan
		self.explosionDisplayPath = explosionDisplayPath
		self.explosionDisplayLifespan = explosionDisplayLifespan
		self.rotateEffectWithBloon = rotateEffectWithBloon
		self.randomDelayMax = randomDelayMax
		self.randomDelayMaxFrames = randomDelayMaxFrames
		self.numOfMissiles = numOfMissiles
		self.sound1 = sound1
		self.sound2 = sound2
		self.sound3 = sound3
		self.sound4 = sound4
		self.sound5 = sound5


class MoveWithAnimatorModel:

    offsets = {'startPos': 48, 'startRotation': 60, 'animCurveId': 64, 'animationLength': 72, 'animateToTrackPosition': 76}    
    def __init__(self, startPos: Assets.Scripts.Simulation.SMath.Vector3, startRotation: System.Single, animCurveId: System.String, animationLength: System.Single, animateToTrackPosition: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.startPos = startPos
		self.startRotation = startRotation
		self.animCurveId = animCurveId
		self.animationLength = animationLength
		self.animateToTrackPosition = animateToTrackPosition


class MoveWithWindModel:

    offsets = {'distanceMin': 48, 'distanceMax': 52}    
    def __init__(self, distanceMin: System.Single, distanceMax: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.distanceMin = distanceMin
		self.distanceMax = distanceMax


class MutationImunityDef:

    offsets = {'effectScale': 56, 'durationScale': 60, 'modifyEffectScale': 64, 'modifyDurationScale': 65, 'preventMutation': 66}    
    def __init__(self, effectScale: System.Single, durationScale: System.Single, modifyEffectScale: System.Boolean, modifyDurationScale: System.Boolean, preventMutation: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.effectScale = effectScale
		self.durationScale = durationScale
		self.modifyEffectScale = modifyEffectScale
		self.modifyDurationScale = modifyDurationScale
		self.preventMutation = preventMutation


class PatsBigSqueezeWindModel:

    offsets = {'startLocation': 48, 'framesToWait': 60, 'mutatorId': 64}    
    def __init__(self, startLocation: Assets.Scripts.Simulation.SMath.Vector3, framesToWait: System.Int32, mutatorId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.startLocation = startLocation
		self.framesToWait = framesToWait
		self.mutatorId = mutatorId


class PlayAnimTriggerActionModel:

    offsets = {'triggerName': 48, 'pauseMovementDuration': 56}    
    def __init__(self, triggerName: System.String, pauseMovementDuration: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.triggerName = triggerName
		self.pauseMovementDuration = pauseMovementDuration


class PopEffectModel:

    offsets = {'displayAssetId': 48, 'soundEffect1Id': 56, 'soundEffect2Id': 64, 'soundEffect3Id': 72, 'soundEffect4Id': 80, 'soundEffectGroupID': 88, 'soundEffectGroupLimit': 96, 'soundEffectTimeDelay': 100, 'soundEffectTimeDelayFF': 104}    
    def __init__(self, displayAssetId: System.String, soundEffect1Id: System.String, soundEffect2Id: System.String, soundEffect3Id: System.String, soundEffect4Id: System.String, soundEffectGroupID: System.String, soundEffectGroupLimit: System.Int32, soundEffectTimeDelay: System.Int32, soundEffectTimeDelayFF: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.displayAssetId = displayAssetId
		self.soundEffect1Id = soundEffect1Id
		self.soundEffect2Id = soundEffect2Id
		self.soundEffect3Id = soundEffect3Id
		self.soundEffect4Id = soundEffect4Id
		self.soundEffectGroupID = soundEffectGroupID
		self.soundEffectGroupLimit = soundEffectGroupLimit
		self.soundEffectTimeDelay = soundEffectTimeDelay
		self.soundEffectTimeDelayFF = soundEffectTimeDelayFF


class ProjectileOverTimeModel:

    offsets = {'projectileModel': 56, 'emissionModel': 64, 'intervalFrames': 72, 'interval': 76, 'displayPath': 80, 'displayLifetime': 88, 'triggerImmediate': 92, 'rotateEffectWithBloon': 93, 'initialDelay': 96, 'initialDelayFrames': 100, 'emitOnDestroy': 104, 'collideWithSelf': 105}    
    def __init__(self, projectileModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, emissionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel, intervalFrames: System.Int32, interval: System.Single, displayPath: System.String, displayLifetime: System.Single, triggerImmediate: System.Boolean, rotateEffectWithBloon: System.Boolean, initialDelay: System.Single, initialDelayFrames: System.Int32, emitOnDestroy: System.Boolean, collideWithSelf: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.projectileModel = projectileModel
		self.emissionModel = emissionModel
		self.intervalFrames = intervalFrames
		self.interval = interval
		self.displayPath = displayPath
		self.displayLifetime = displayLifetime
		self.triggerImmediate = triggerImmediate
		self.rotateEffectWithBloon = rotateEffectWithBloon
		self.initialDelay = initialDelay
		self.initialDelayFrames = initialDelayFrames
		self.emitOnDestroy = emitOnDestroy
		self.collideWithSelf = collideWithSelf


class PsiBloonBehaviorModel:

    offsets = {'overlays': 56, 'overlayLayer': 64, 'damagePerTick': 68, 'tickRate': 72, 'tickRateFrames': 76, 'displayAgeingDestroyModel': 80, 'trembleSpeed': 88, 'trembleSpeedFrames': 92, 'trembleDistanceMin': 96, 'trembleDistanceMax': 100, 'trembleTimeThresholdMin': 104, 'trembleFramesThresholdMin': 108, 'trembleTimeThresholdMax': 112, 'trembleFramesThresholdMax': 116, 'projectileOnBloonDestroyModel': 120, 'emissionModel': 128, 'effectOnBloonDestroyModel': 136, 'createSoundOnBloonDegradeModel': 144}    
    def __init__(self, overlays: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Effects.AssetPathModel>, overlayLayer: System.Int32, damagePerTick: System.Int32, tickRate: System.Single, tickRateFrames: System.Int32, displayAgeingDestroyModel: Assets.Scripts.Models.Behaviors.AgeingDestroyModel, trembleSpeed: System.Single, trembleSpeedFrames: System.Single, trembleDistanceMin: System.Single, trembleDistanceMax: System.Single, trembleTimeThresholdMin: System.Single, trembleFramesThresholdMin: System.Int32, trembleTimeThresholdMax: System.Single, trembleFramesThresholdMax: System.Int32, projectileOnBloonDestroyModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, emissionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel, effectOnBloonDestroyModel: Assets.Scripts.Models.Effects.EffectModel, createSoundOnBloonDegradeModel: Assets.Scripts.Models.Bloons.Behaviors.CreateSoundOnBloonDegradeModel, **kwargs):
        super().__init__(self, **kwargs)
		self.overlays = overlays
		self.overlayLayer = overlayLayer
		self.damagePerTick = damagePerTick
		self.tickRate = tickRate
		self.tickRateFrames = tickRateFrames
		self.displayAgeingDestroyModel = displayAgeingDestroyModel
		self.trembleSpeed = trembleSpeed
		self.trembleSpeedFrames = trembleSpeedFrames
		self.trembleDistanceMin = trembleDistanceMin
		self.trembleDistanceMax = trembleDistanceMax
		self.trembleTimeThresholdMin = trembleTimeThresholdMin
		self.trembleFramesThresholdMin = trembleFramesThresholdMin
		self.trembleTimeThresholdMax = trembleTimeThresholdMax
		self.trembleFramesThresholdMax = trembleFramesThresholdMax
		self.projectileOnBloonDestroyModel = projectileOnBloonDestroyModel
		self.emissionModel = emissionModel
		self.effectOnBloonDestroyModel = effectOnBloonDestroyModel
		self.createSoundOnBloonDegradeModel = createSoundOnBloonDegradeModel


class SetGrowToOnChildrenModel:

    offsets = {'bloonBaseId': 48, 'growToBaseId': 56}    
    def __init__(self, bloonBaseId: System.String, growToBaseId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonBaseId = bloonBaseId
		self.growToBaseId = growToBaseId


class ShowDamageTextModel:

    offsets = {'assetId': 48, 'lifespan': 56, 'showText': 60}    
    def __init__(self, assetId: System.String, lifespan: System.Single, showText: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.assetId = assetId
		self.lifespan = lifespan
		self.showText = showText


class SpawnBloonsActionModel:

    offsets = {'bloonType': 48, 'spawnCount': 56, 'spawnOverTime': 60, 'spawnDistAhead': 64, 'spawnTrackMin': 68, 'spawnTrackMax': 72, 'animationLength': 96, 'invulnerableWhileAnimating': 100, 'bossName': 104}    
    def __init__(self, bloonType: System.String, spawnCount: System.Int32, spawnOverTime: System.Single, spawnDistAhead: System.Single, spawnTrackMin: System.Single, spawnTrackMax: System.Single, animationLength: System.Single, invulnerableWhileAnimating: System.Boolean, bossName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonType = bloonType
		self.spawnCount = spawnCount
		self.spawnOverTime = spawnOverTime
		self.spawnDistAhead = spawnDistAhead
		self.spawnTrackMin = spawnTrackMin
		self.spawnTrackMax = spawnTrackMax
		self.animationLength = animationLength
		self.invulnerableWhileAnimating = invulnerableWhileAnimating
		self.bossName = bossName


class SpawnChildrenModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SpawnDeathAnimModel:

    offsets = {'spawnAnimTrigLabel': 48, 'spawnAnimLength': 56, 'deathAnimTrigLabel': 64, 'deathAnimLength': 72}    
    def __init__(self, spawnAnimTrigLabel: System.String, spawnAnimLength: System.Single, deathAnimTrigLabel: System.String, deathAnimLength: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.spawnAnimTrigLabel = spawnAnimTrigLabel
		self.spawnAnimLength = spawnAnimLength
		self.deathAnimTrigLabel = deathAnimTrigLabel
		self.deathAnimLength = deathAnimLength


class UnstableConcoctionSplashModel:

    offsets = {'baseIdToBloonDmg': 80, 'defaultBloonDmg': 88, 'baseIdToMoabDmg': 96, 'bossToMoabDmg': 104, 'defaultMoabDmg': 108}    
    def __init__(self, baseIdToBloonDmg: System.Collections.Generic.Dictionary<System.String,System.Single>, defaultBloonDmg: System.Single, baseIdToMoabDmg: System.Collections.Generic.Dictionary<System.String,System.Single>, bossToMoabDmg: System.Single, defaultMoabDmg: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.baseIdToBloonDmg = baseIdToBloonDmg
		self.defaultBloonDmg = defaultBloonDmg
		self.baseIdToMoabDmg = baseIdToMoabDmg
		self.bossToMoabDmg = bossToMoabDmg
		self.defaultMoabDmg = defaultMoabDmg


class DifficultyModel:

    offsets = {'id': 48, 'startRound': 56, 'endRound': 60, 'monkeyMoney': 64, 'intermediateMonkeyMoneyScale': 68, 'advancedMonkeyMoneyScale': 72, 'expertMonkeyMoneyScale': 76}    
    def __init__(self, id: System.String, startRound: System.Int32, endRound: System.Int32, monkeyMoney: System.Single, intermediateMonkeyMoneyScale: System.Single, advancedMonkeyMoneyScale: System.Single, expertMonkeyMoneyScale: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.id = id
		self.startRound = startRound
		self.endRound = endRound
		self.monkeyMoney = monkeyMoney
		self.intermediateMonkeyMoneyScale = intermediateMonkeyMoneyScale
		self.advancedMonkeyMoneyScale = advancedMonkeyMoneyScale
		self.expertMonkeyMoneyScale = expertMonkeyMoneyScale


class DifficultyType:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ModeType:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AssetPathModel:

    offsets = {'assetPath': 48}    
    def __init__(self, assetPath: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.assetPath = assetPath


class EffectModel:

    offsets = {'assetId': 48, 'scale': 56, 'lifespan': 60, 'fullscreen': 64, 'useCenterPosition': 65, 'useTransformPosition': 66, 'useTransfromRotation': 67, 'destroyOnTransformDestroy': 68, 'alwaysUseAge': 69, 'useRoundTime': 70}    
    def __init__(self, assetId: System.String, scale: System.Single, lifespan: System.Single, fullscreen: System.Boolean, useCenterPosition: System.Boolean, useTransformPosition: System.Boolean, useTransfromRotation: System.Boolean, destroyOnTransformDestroy: System.Boolean, alwaysUseAge: System.Boolean, useRoundTime: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.assetId = assetId
		self.scale = scale
		self.lifespan = lifespan
		self.fullscreen = fullscreen
		self.useCenterPosition = useCenterPosition
		self.useTransformPosition = useTransformPosition
		self.useTransfromRotation = useTransfromRotation
		self.destroyOnTransformDestroy = destroyOnTransformDestroy
		self.alwaysUseAge = alwaysUseAge
		self.useRoundTime = useRoundTime


class CandyEventManagerModel:

    offsets = {'candyNeededToActivate': 56, 'candyModel': 64, 'candyFallRadius': 72, 'ghostModel': 88, 'numberGhosts': 96, 'timeBetweenGhosts': 100, 'ghostSpawnOffset': 104, 'ghostTrackOffset': 108, 'collectedCandySound': 112, 'activatedCandySound': 120}    
    def __init__(self, candyNeededToActivate: System.Int32, candyModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, candyFallRadius: Assets.Scripts.Simulation.SMath.Vector3, ghostModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, numberGhosts: System.Int32, timeBetweenGhosts: System.Single, ghostSpawnOffset: System.Single, ghostTrackOffset: System.Single, collectedCandySound: Assets.Scripts.Models.Audio.SoundModel, activatedCandySound: Assets.Scripts.Models.Audio.SoundModel, **kwargs):
        super().__init__(self, **kwargs)
		self.candyNeededToActivate = candyNeededToActivate
		self.candyModel = candyModel
		self.candyFallRadius = candyFallRadius
		self.ghostModel = ghostModel
		self.numberGhosts = numberGhosts
		self.timeBetweenGhosts = timeBetweenGhosts
		self.ghostSpawnOffset = ghostSpawnOffset
		self.ghostTrackOffset = ghostTrackOffset
		self.collectedCandySound = collectedCandySound
		self.activatedCandySound = activatedCandySound


class CandyEventModModel:

    offsets = {'managerModelHalloween': 48, 'managerModelChristmas': 56, 'managerModelEaster': 64}    
    def __init__(self, managerModelHalloween: Assets.Scripts.Models.Events.CandyEvent.CandyEventManagerModel, managerModelChristmas: Assets.Scripts.Models.Events.CandyEvent.CandyEventManagerModel, managerModelEaster: Assets.Scripts.Models.Events.CandyEvent.CandyEventManagerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.managerModelHalloween = managerModelHalloween
		self.managerModelChristmas = managerModelChristmas
		self.managerModelEaster = managerModelEaster


class AnimationChange:

    offsets = {'original': 16, 'swapToo': 24}    
    def __init__(self, original: Assets.Scripts.Utils.AnimationClipReference, swapToo: Assets.Scripts.Utils.AnimationClipReference, **kwargs):
        super().__init__(self, **kwargs)
		self.original = original
		self.swapToo = swapToo


class BuffIndicatorModel:

    offsets = {'buffName': 48, 'iconName': 56, 'stackable': 64, 'maxStackSize': 68, 'globalRange': 72, 'onlyShowBuffIfMutated': 73, '_fullName': 80}    
    def __init__(self, buffName: System.String, iconName: System.String, stackable: System.Boolean, maxStackSize: System.Int32, globalRange: System.Boolean, onlyShowBuffIfMutated: System.Boolean, _fullName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.buffName = buffName
		self.iconName = iconName
		self.stackable = stackable
		self.maxStackSize = maxStackSize
		self.globalRange = globalRange
		self.onlyShowBuffIfMutated = onlyShowBuffIfMutated
		self._fullName = _fullName


class DisplayModel:

    offsets = {'display': 48, 'layer': 56, 'positionOffset': 60, 'scale': 72, 'ignoreRotation': 76, 'animationChanges': 80, 'delayedReveal': 88}    
    def __init__(self, display: System.String, layer: System.Int32, positionOffset: Assets.Scripts.Simulation.SMath.Vector3, scale: System.Single, ignoreRotation: System.Boolean, animationChanges: System.Collections.Generic.List<Assets.Scripts.Models.GenericBehaviors.AnimationChange>, delayedReveal: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.display = display
		self.layer = layer
		self.positionOffset = positionOffset
		self.scale = scale
		self.ignoreRotation = ignoreRotation
		self.animationChanges = animationChanges
		self.delayedReveal = delayedReveal


class AreaModel:

    offsets = {'id': 48, 'polygon': 56, 'height': 64, 'type': 68, 'renderHeightOffset': 72, 'isBlocker': 104, 'isDisabled': 105, 'ignoreZAxisTowerCollision': 106, 'pivotPoint': 108}    
    def __init__(self, id: System.Int32, polygon: Assets.Scripts.Simulation.SMath.Polygon, height: System.Single, type: Assets.Scripts.Models.Map.AreaType, renderHeightOffset: System.Single, isBlocker: System.Boolean, isDisabled: System.Boolean, ignoreZAxisTowerCollision: System.Boolean, pivotPoint: Assets.Scripts.Simulation.SMath.Vector2, **kwargs):
        super().__init__(self, **kwargs)
		self.id = id
		self.polygon = polygon
		self.height = height
		self.type = type
		self.renderHeightOffset = renderHeightOffset
		self.isBlocker = isBlocker
		self.isDisabled = isDisabled
		self.ignoreZAxisTowerCollision = ignoreZAxisTowerCollision
		self.pivotPoint = pivotPoint


class AreaType:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class BlockerModel:

    offsets = {'parentId': 48, 'circle': 56, 'isDisabled': 64}    
    def __init__(self, parentId: System.Int32, circle: Assets.Scripts.Simulation.SMath.Circle, isDisabled: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.parentId = parentId
		self.circle = circle
		self.isDisabled = isDisabled


class CoopAreaLayoutModel:

    offsets = {'areaLayoutType': 64}    
    def __init__(self, areaLayoutType: Assets.Scripts.Unity.Map.AreaLayoutType, **kwargs):
        super().__init__(self, **kwargs)
		self.areaLayoutType = areaLayoutType


class CoopAreaModel:

    offsets = {'areaIndex': 48, 'marker': 52, 'polygon': 64}    
    def __init__(self, areaIndex: System.Int32, marker: Assets.Scripts.Simulation.SMath.Vector2, polygon: Assets.Scripts.Simulation.SMath.Polygon, **kwargs):
        super().__init__(self, **kwargs)
		self.areaIndex = areaIndex
		self.marker = marker
		self.polygon = polygon


class CoopAreaWhiteLineModel:

    offsets = {'position': 48, 'rotation': 56}    
    def __init__(self, position: Assets.Scripts.Simulation.SMath.Vector2, rotation: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.position = position
		self.rotation = rotation


class CoopPlayerIndicatorModel:

    offsets = {'displayModel': 48}    
    def __init__(self, displayModel: Assets.Scripts.Models.GenericBehaviors.DisplayModel, **kwargs):
        super().__init__(self, **kwargs)
		self.displayModel = displayModel


class MapModel:

    offsets = {'spawner': 96, 'mapDifficulty': 104, 'mapName': 112, 'mapWideBloonSpeed': 128}    
    def __init__(self, spawner: Assets.Scripts.Models.Map.Spawners.PathSpawnerModel, mapDifficulty: System.Int32, mapName: System.String, mapWideBloonSpeed: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.spawner = spawner
		self.mapDifficulty = mapDifficulty
		self.mapName = mapName
		self.mapWideBloonSpeed = mapWideBloonSpeed


class MusicModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PathModel:

    offsets = {'pathId': 48, 'isActive': 64, 'isHidden': 65, 'entryModel': 72, 'exitModel': 80, 'spawnPoint': 88, 'leakPoint': 100}    
    def __init__(self, pathId: System.String, isActive: System.Boolean, isHidden: System.Boolean, entryModel: Assets.Scripts.Models.Map.SplitterModel, exitModel: Assets.Scripts.Models.Map.SplitterModel, spawnPoint: Assets.Scripts.Simulation.SMath.Vector3, leakPoint: Assets.Scripts.Simulation.SMath.Vector3, **kwargs):
        super().__init__(self, **kwargs)
		self.pathId = pathId
		self.isActive = isActive
		self.isHidden = isHidden
		self.entryModel = entryModel
		self.exitModel = exitModel
		self.spawnPoint = spawnPoint
		self.leakPoint = leakPoint


class PointInfo:

    offsets = {'id': 16, 'point': 24, 'rotation': 36, 'distance': 40, 'bloonScale': 44, 'moabScale': 48, 'bloonsInvulnerable': 52, 'moabsInvulnerable': 53}    
    def __init__(self, id: System.String, point: Assets.Scripts.Simulation.SMath.Vector3, rotation: System.Single, distance: System.Single, bloonScale: System.Single, moabScale: System.Single, bloonsInvulnerable: System.Boolean, moabsInvulnerable: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.id = id
		self.point = point
		self.rotation = rotation
		self.distance = distance
		self.bloonScale = bloonScale
		self.moabScale = moabScale
		self.bloonsInvulnerable = bloonsInvulnerable
		self.moabsInvulnerable = moabsInvulnerable


class QuickPointInfo:

    offsets = {'pointIndex': 16, 'point': 20, 'rotation': 32}    
    def __init__(self, pointIndex: System.Int32, point: Assets.Scripts.Simulation.SMath.Vector3, rotation: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.pointIndex = pointIndex
		self.point = point
		self.rotation = rotation


class RemoveableModel:

    offsets = {'isActive': 48, 'defaultType': 52, 'objecName': 56, 'menuName': 64, 'textKey': 72, 'menuDescription': 80, 'removealCost': 88, 'position': 92, 'denySellIfStackedTowers': 104, 'destroyArea': 105, 'modPathId': 112, 'modPathBloonHeightOffset': 120, 'modPathMoabHeightOffset': 128, 'modPathBloonScale': 136, 'modPathMoabScale': 144, 'modPathBloonInvulnerability': 152, 'modPathMoabInvulnerability': 154, 'ids': 160}    
    def __init__(self, isActive: System.Boolean, defaultType: Assets.Scripts.Models.Map.AreaType, objecName: System.String, menuName: System.String, textKey: System.String, menuDescription: System.String, removealCost: System.Int32, position: Assets.Scripts.Simulation.SMath.Vector3, denySellIfStackedTowers: System.Boolean, destroyArea: System.Boolean, modPathId: System.String, modPathBloonHeightOffset: System.Nullable<System.Single>, modPathMoabHeightOffset: System.Nullable<System.Single>, modPathBloonScale: System.Nullable<System.Single>, modPathMoabScale: System.Nullable<System.Single>, modPathBloonInvulnerability: System.Nullable<System.Boolean>, modPathMoabInvulnerability: System.Nullable<System.Boolean>, ids: System.Collections.Generic.List<System.Int32>, **kwargs):
        super().__init__(self, **kwargs)
		self.isActive = isActive
		self.defaultType = defaultType
		self.objecName = objecName
		self.menuName = menuName
		self.textKey = textKey
		self.menuDescription = menuDescription
		self.removealCost = removealCost
		self.position = position
		self.denySellIfStackedTowers = denySellIfStackedTowers
		self.destroyArea = destroyArea
		self.modPathId = modPathId
		self.modPathBloonHeightOffset = modPathBloonHeightOffset
		self.modPathMoabHeightOffset = modPathMoabHeightOffset
		self.modPathBloonScale = modPathBloonScale
		self.modPathMoabScale = modPathMoabScale
		self.modPathBloonInvulnerability = modPathBloonInvulnerability
		self.modPathMoabInvulnerability = modPathMoabInvulnerability
		self.ids = ids


class SplitterModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TrackArrowModel:

    offsets = {'displayModel': 48, 'speed': 56, 'speedFrames': 60, 'firstCoveragePercent': 64, 'secondCoveragePercent': 68, 'enterAndExitBuffer': 72, 'rate': 76, 'rateFrames': 80, 'subRate': 84, 'subRateFrames': 88, 'numOfArrows': 92, 'firstColorStart': 96, 'firstColorEnd': 104, 'secondColorStart': 112, 'secondColorEnd': 120}    
    def __init__(self, displayModel: Assets.Scripts.Models.GenericBehaviors.DisplayModel, speed: System.Single, speedFrames: System.Int32, firstCoveragePercent: System.Single, secondCoveragePercent: System.Single, enterAndExitBuffer: System.Single, rate: System.Single, rateFrames: System.Int32, subRate: System.Single, subRateFrames: System.Int32, numOfArrows: System.Int32, firstColorStart: Assets.Scripts.Models.Bloons.Behaviors.ColorModel, firstColorEnd: Assets.Scripts.Models.Bloons.Behaviors.ColorModel, secondColorStart: Assets.Scripts.Models.Bloons.Behaviors.ColorModel, secondColorEnd: Assets.Scripts.Models.Bloons.Behaviors.ColorModel, **kwargs):
        super().__init__(self, **kwargs)
		self.displayModel = displayModel
		self.speed = speed
		self.speedFrames = speedFrames
		self.firstCoveragePercent = firstCoveragePercent
		self.secondCoveragePercent = secondCoveragePercent
		self.enterAndExitBuffer = enterAndExitBuffer
		self.rate = rate
		self.rateFrames = rateFrames
		self.subRate = subRate
		self.subRateFrames = subRateFrames
		self.numOfArrows = numOfArrows
		self.firstColorStart = firstColorStart
		self.firstColorEnd = firstColorEnd
		self.secondColorStart = secondColorStart
		self.secondColorEnd = secondColorEnd


class ChangeEmitProjectileActionModel:

    offsets = {'mapEventName': 56, 'newProjectileModel': 64}    
    def __init__(self, mapEventName: System.String, newProjectileModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, **kwargs):
        super().__init__(self, **kwargs)
		self.mapEventName = mapEventName
		self.newProjectileModel = newProjectileModel


class ChangeSimTimeElapsedTriggerActionModel:

    offsets = {'mapEventName': 56, 'timeReduction': 64, 'timeReductionFrames': 68}    
    def __init__(self, mapEventName: System.String, timeReduction: System.Single, timeReductionFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.mapEventName = mapEventName
		self.timeReduction = timeReduction
		self.timeReductionFrames = timeReductionFrames


class CreateAreaActionModel:

    offsets = {'areaName': 56}    
    def __init__(self, areaName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.areaName = areaName


class CreateTowerActionModel:

    offsets = {'releaseOriginX': 56, 'releaseOriginY': 60, 'reverseReleaseOriginX': 64, 'reverseReleaseOriginY': 68, 'towerId': 72, 'minDistance': 80, 'maxDistance': 84, 'pointDistance': 88, 'idealDistanceWithinTrack': 92, 'delay': 96}    
    def __init__(self, releaseOriginX: System.Single, releaseOriginY: System.Single, reverseReleaseOriginX: System.Single, reverseReleaseOriginY: System.Single, towerId: System.String, minDistance: System.Single, maxDistance: System.Single, pointDistance: System.Single, idealDistanceWithinTrack: System.Single, delay: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.releaseOriginX = releaseOriginX
		self.releaseOriginY = releaseOriginY
		self.reverseReleaseOriginX = reverseReleaseOriginX
		self.reverseReleaseOriginY = reverseReleaseOriginY
		self.towerId = towerId
		self.minDistance = minDistance
		self.maxDistance = maxDistance
		self.pointDistance = pointDistance
		self.idealDistanceWithinTrack = idealDistanceWithinTrack
		self.delay = delay


class DestroyAreaActionModel:

    offsets = {'areaName': 56}    
    def __init__(self, areaName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.areaName = areaName


class EmitProjectileActionModel:

    offsets = {'projectileModel': 56, 'emissionModel': 64, 'positionX': 72, 'positionY': 76, 'positionZ': 80, 'delay': 84, 'delayFrames': 88, 'setDirection': 92, 'emitRotationDegrees': 96, 'targetPriority': 104, 'targetRange': 112}    
    def __init__(self, projectileModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, emissionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel, positionX: System.Single, positionY: System.Single, positionZ: System.Single, delay: System.Single, delayFrames: System.Int32, setDirection: System.Boolean, emitRotationDegrees: System.Single, targetPriority: System.String, targetRange: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.projectileModel = projectileModel
		self.emissionModel = emissionModel
		self.positionX = positionX
		self.positionY = positionY
		self.positionZ = positionZ
		self.delay = delay
		self.delayFrames = delayFrames
		self.setDirection = setDirection
		self.emitRotationDegrees = emitRotationDegrees
		self.targetPriority = targetPriority
		self.targetRange = targetRange


class MapActionModel:

    offsets = {'saveId': 48}    
    def __init__(self, saveId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.saveId = saveId


class MapEventActiveActionModel:

    offsets = {'setToActive': 56, 'mapEventName': 64}    
    def __init__(self, setToActive: System.Boolean, mapEventName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.setToActive = setToActive
		self.mapEventName = mapEventName


class MovingPlatformActionModel:

    offsets = {'animator': 64, 'animClip': 72, 'startingState': 80, 'xPosCurve': 104, 'zPosCurve': 112, 'yRotCurve': 120}    
    def __init__(self, animator: UnityEngine.Animator, animClip: UnityEngine.AnimationClip, startingState: System.Int32, xPosCurve: UnityEngine.AnimationCurve, zPosCurve: UnityEngine.AnimationCurve, yRotCurve: UnityEngine.AnimationCurve, **kwargs):
        super().__init__(self, **kwargs)
		self.animator = animator
		self.animClip = animClip
		self.startingState = startingState
		self.xPosCurve = xPosCurve
		self.zPosCurve = zPosCurve
		self.yRotCurve = yRotCurve


class PathActiveActionModel:

    offsets = {'setActiveToo': 56, 'pathName': 64}    
    def __init__(self, setActiveToo: System.Boolean, pathName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.setActiveToo = setActiveToo
		self.pathName = pathName


class RemovableActiveActionModel:

    offsets = {'setActiveToo': 56, 'removeableName': 64}    
    def __init__(self, setActiveToo: System.Boolean, removeableName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.setActiveToo = setActiveToo
		self.removeableName = removeableName


class RotateAreaActionModel:

    offsets = {'areaName': 56, 'rotation': 64, 'duration': 68, 'startSound': 80, 'stopSound': 88}    
    def __init__(self, areaName: System.String, rotation: System.Single, duration: System.Single, startSound: UnityEngine.AudioClip, stopSound: UnityEngine.AudioClip, **kwargs):
        super().__init__(self, **kwargs)
		self.areaName = areaName
		self.rotation = rotation
		self.duration = duration
		self.startSound = startSound
		self.stopSound = stopSound


class SellRemoveableActionModel:

    offsets = {'removeableName': 56}    
    def __init__(self, removeableName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.removeableName = removeableName


class MapGizmoBehaviorModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MapGizmoModel:

    offsets = {'areaName': 48, 'position': 56, 'timeDisplay': 96}    
    def __init__(self, areaName: System.String, position: UnityEngine.Vector3, timeDisplay: Assets.Scripts.Unity.Map.Gizmos.GizmoTimeDisplay, **kwargs):
        super().__init__(self, **kwargs)
		self.areaName = areaName
		self.position = position
		self.timeDisplay = timeDisplay


class WorkshopPowerCoreModel:

    offsets = {'duration': 48, 'firstUseCost': 52, 'roundCost': 56, 'roundsPerCostTier': 60, 'costPerTimesUsed': 64}    
    def __init__(self, duration: System.Single, firstUseCost: System.Int32, roundCost: System.Int32, roundsPerCostTier: System.Int32, costPerTimesUsed: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.duration = duration
		self.firstUseCost = firstUseCost
		self.roundCost = roundCost
		self.roundsPerCostTier = roundsPerCostTier
		self.costPerTimesUsed = costPerTimesUsed


class WorkshopReverseMotorModel:

    offsets = {'duration': 48, 'firstUseCost': 52, 'roundCost': 56, 'roundsPerCostTier': 60, 'costPerTimesUsed': 64, 'globalMapSpeedSet': 68}    
    def __init__(self, duration: System.Single, firstUseCost: System.Int32, roundCost: System.Int32, roundsPerCostTier: System.Int32, costPerTimesUsed: System.Int32, globalMapSpeedSet: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.duration = duration
		self.firstUseCost = firstUseCost
		self.roundCost = roundCost
		self.roundsPerCostTier = roundsPerCostTier
		self.costPerTimesUsed = costPerTimesUsed
		self.globalMapSpeedSet = globalMapSpeedSet


class AlternateBloonsSplitterModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AlternateRoundMultiPathSplitterModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AlternateRoundSplitterModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MoabOnlySplitterModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PathSpawnerModel:

    offsets = {'forwardSplitter': 48, 'reverseSplitter': 56}    
    def __init__(self, forwardSplitter: Assets.Scripts.Models.Map.SplitterModel, reverseSplitter: Assets.Scripts.Models.Map.SplitterModel, **kwargs):
        super().__init__(self, **kwargs)
		self.forwardSplitter = forwardSplitter
		self.reverseSplitter = reverseSplitter


class RuleSplitterModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AdoraSunGodDarkMapTriggerModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AfterRoundTriggerModel:

    offsets = {'round': 56, 'everyNthRound': 60, 'usePrimeNumbers': 64}    
    def __init__(self, round: System.Int32, everyNthRound: System.Int32, usePrimeNumbers: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.round = round
		self.everyNthRound = everyNthRound
		self.usePrimeNumbers = usePrimeNumbers


class InteractableClickSequenceTriggerModel:

    offsets = {'interactableClickSequenceName': 56}    
    def __init__(self, interactableClickSequenceName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.interactableClickSequenceName = interactableClickSequenceName


class InteractableClickTriggerModel:

    offsets = {'interactableName': 56}    
    def __init__(self, interactableName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.interactableName = interactableName


class MapEventModel:

    offsets = {'saveId': 48, 'oneTimeEvent': 56, 'allTriggersRequired': 57, 'inactiveByDefault': 58}    
    def __init__(self, saveId: System.String, oneTimeEvent: System.Boolean, allTriggersRequired: System.Boolean, inactiveByDefault: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.saveId = saveId
		self.oneTimeEvent = oneTimeEvent
		self.allTriggersRequired = allTriggersRequired
		self.inactiveByDefault = inactiveByDefault


class MapTriggerModel:

    offsets = {'saveId': 48}    
    def __init__(self, saveId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.saveId = saveId


class OnProjectileHitTriggerModel:

    offsets = {'collisionMarkerX': 56, 'collisionMarkerY': 60, 'collisionRadius': 64, 'hitRangeMin': 68, 'hitRangeMax': 72, 'projectileChipTag': 80}    
    def __init__(self, collisionMarkerX: System.Single, collisionMarkerY: System.Single, collisionRadius: System.Single, hitRangeMin: System.Int32, hitRangeMax: System.Int32, projectileChipTag: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.collisionMarkerX = collisionMarkerX
		self.collisionMarkerY = collisionMarkerY
		self.collisionRadius = collisionRadius
		self.hitRangeMin = hitRangeMin
		self.hitRangeMax = hitRangeMax
		self.projectileChipTag = projectileChipTag


class PreBloonSpawnTriggerModel:

    offsets = {'bloonTag': 56}    
    def __init__(self, bloonTag: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonTag = bloonTag


class RemoveableSoldTriggerModel:

    offsets = {'removableName': 56}    
    def __init__(self, removableName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.removableName = removableName


class ReverseModeTriggerModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SimTimeElapsedTriggerModel:

    offsets = {'time': 56, 'timeFrames': 60, 'rounds': 64, 'useRoundTime': 68}    
    def __init__(self, time: System.Single, timeFrames: System.Int32, rounds: System.Int32, useRoundTime: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.time = time
		self.timeFrames = timeFrames
		self.rounds = rounds
		self.useRoundTime = useRoundTime


class StartMapTriggerModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class StartRoundTriggerModel:

    offsets = {'round': 56, 'everyNthRound': 60, 'usePrimeNumbers': 64}    
    def __init__(self, round: System.Int32, everyNthRound: System.Int32, usePrimeNumbers: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.round = round
		self.everyNthRound = everyNthRound
		self.usePrimeNumbers = usePrimeNumbers


class TowerInAreaTriggerModel:

    offsets = {'areaModel': 56, 'towerId': 64, 'mustIncludeAllMutators': 88}    
    def __init__(self, areaModel: Assets.Scripts.Models.Map.AreaModel, towerId: System.String, mustIncludeAllMutators: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.areaModel = areaModel
		self.towerId = towerId
		self.mustIncludeAllMutators = mustIncludeAllMutators


class CollisionGroupModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ShopPowerDetailsModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PowerDetailsModel:

    offsets = {'powerId': 48, 'powerIndex': 56, 'powerCount': 60}    
    def __init__(self, powerId: System.String, powerIndex: System.Int32, powerCount: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.powerId = powerId
		self.powerIndex = powerIndex
		self.powerCount = powerCount


class CamoTrapModel:

    offsets = {'projectileModel': 48}    
    def __init__(self, projectileModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, **kwargs):
        super().__init__(self, **kwargs)
		self.projectileModel = projectileModel


class CashDropModel:

    offsets = {'projectileModel': 48}    
    def __init__(self, projectileModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, **kwargs):
        super().__init__(self, **kwargs)
		self.projectileModel = projectileModel


class DamageAllModel:

    offsets = {'amount': 48}    
    def __init__(self, amount: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.amount = amount


class DartTimeModel:

    offsets = {'bloonSpeed': 48, 'towerAttackSpeed': 52, 'duration': 56, 'dartTimeBloonBehaviorModel': 64, 'bloonTimeSlowMutator': 72, 'towerTimeSlowMutator': 80}    
    def __init__(self, bloonSpeed: System.Single, towerAttackSpeed: System.Single, duration: System.Single, dartTimeBloonBehaviorModel: Assets.Scripts.Models.Bloons.Behaviors.DartTimeBloonBehaviorModel, bloonTimeSlowMutator: Assets.Scripts.Models.Powers.DartTimeModel.BloonTimeSlowMutatorClass, towerTimeSlowMutator: Assets.Scripts.Models.Powers.DartTimeModel.TowerTimeSlowMutatorClass, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonSpeed = bloonSpeed
		self.towerAttackSpeed = towerAttackSpeed
		self.duration = duration
		self.dartTimeBloonBehaviorModel = dartTimeBloonBehaviorModel
		self.bloonTimeSlowMutator = bloonTimeSlowMutator
		self.towerTimeSlowMutator = towerTimeSlowMutator


class GlueTrapModel:

    offsets = {'projectileModel': 48}    
    def __init__(self, projectileModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, **kwargs):
        super().__init__(self, **kwargs)
		self.projectileModel = projectileModel


class InstaTowerModel:

    offsets = {'towerModel': 48, 'baseTowerModel': 56}    
    def __init__(self, towerModel: Assets.Scripts.Models.Towers.TowerModel, baseTowerModel: Assets.Scripts.Models.Towers.TowerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.towerModel = towerModel
		self.baseTowerModel = baseTowerModel


class MoabMineModel:

    offsets = {'projectileModel': 48}    
    def __init__(self, projectileModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, **kwargs):
        super().__init__(self, **kwargs)
		self.projectileModel = projectileModel


class MonkeyBoostModel:

    offsets = {'rateScale': 48, 'duration': 52, 'durationFrames': 56}    
    def __init__(self, rateScale: System.Single, duration: System.Single, durationFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.rateScale = rateScale
		self.duration = duration
		self.durationFrames = durationFrames


class PowerBehaviorModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PowerModel:

    offsets = {'cost': 48, 'canBeActivatedBetweenRounds': 52, 'icon': 56, 'tower': 80, 'isDisabledByGameMode': 88, 'isHidden': 89, 'showBuffsForTower': 90, 'quantity': 92, 'isInstaMonkey': 96}    
    def __init__(self, cost: System.Int32, canBeActivatedBetweenRounds: System.Boolean, icon: Assets.Scripts.Utils.SpriteReference, tower: Assets.Scripts.Models.Towers.TowerModel, isDisabledByGameMode: System.Boolean, isHidden: System.Boolean, showBuffsForTower: System.Boolean, quantity: System.Int32, isInstaMonkey: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.cost = cost
		self.canBeActivatedBetweenRounds = canBeActivatedBetweenRounds
		self.icon = icon
		self.tower = tower
		self.isDisabledByGameMode = isDisabledByGameMode
		self.isHidden = isHidden
		self.showBuffsForTower = showBuffsForTower
		self.quantity = quantity
		self.isInstaMonkey = isInstaMonkey


class RoadSpikesModel:

    offsets = {'projectileModel': 48}    
    def __init__(self, projectileModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, **kwargs):
        super().__init__(self, **kwargs)
		self.projectileModel = projectileModel


class ThriveModel:

    offsets = {'cashScale': 48, 'increaseBloonWorthSimBehaviorModel': 56}    
    def __init__(self, cashScale: System.Single, increaseBloonWorthSimBehaviorModel: Assets.Scripts.Models.SimulationBehaviors.IncreaseBloonWorthSimBehaviorModel, **kwargs):
        super().__init__(self, **kwargs)
		self.cashScale = cashScale
		self.increaseBloonWorthSimBehaviorModel = increaseBloonWorthSimBehaviorModel


class CreateEffectOnPowerModel:

    offsets = {'effectModel': 48}    
    def __init__(self, effectModel: Assets.Scripts.Models.Effects.EffectModel, **kwargs):
        super().__init__(self, **kwargs)
		self.effectModel = effectModel


class CreateSoundOnPowerModel:

    offsets = {'sound': 48}    
    def __init__(self, sound: Assets.Scripts.Models.Audio.SoundModel, **kwargs):
        super().__init__(self, **kwargs)
		self.sound = sound


class BananaFarmerModModel:

    offsets = {'rangeMultiplier': 48}    
    def __init__(self, rangeMultiplier: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.rangeMultiplier = rangeMultiplier


class CamoTrapModModel:

    offsets = {'pierceIncrease': 48}    
    def __init__(self, pierceIncrease: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.pierceIncrease = pierceIncrease


class DartTimeModModel:

    offsets = {'durationIncrease': 48}    
    def __init__(self, durationIncrease: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.durationIncrease = durationIncrease


class FreePowerModModel:

    offsets = {'basePowerID': 48, 'charges': 56}    
    def __init__(self, basePowerID: System.String, charges: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.basePowerID = basePowerID
		self.charges = charges


class GlueTrapModModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MoabMineModModel:

    offsets = {'damageIncrease': 48}    
    def __init__(self, damageIncrease: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.damageIncrease = damageIncrease


class MonkeyBoostModModel:

    offsets = {'durationIncrease': 48}    
    def __init__(self, durationIncrease: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.durationIncrease = durationIncrease


class PowerModModel:

    offsets = {'costDecrease': 48}    
    def __init__(self, costDecrease: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.costDecrease = costDecrease


class PreGamePrepModModel:

    offsets = {'distFromEdgeOfMap': 48, 'projectileModel': 56, 'projectileModelOriginal': 64}    
    def __init__(self, distFromEdgeOfMap: System.Single, projectileModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, projectileModelOriginal: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, **kwargs):
        super().__init__(self, **kwargs)
		self.distFromEdgeOfMap = distFromEdgeOfMap
		self.projectileModel = projectileModel
		self.projectileModelOriginal = projectileModelOriginal


class RoadSpikesPierceModModel:

    offsets = {'addition': 48}    
    def __init__(self, addition: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.addition = addition


class SimPowerDiscountModModel:

    offsets = {'power': 48, 'multiplier': 56, 'subtraction': 60, 'charges': 64}    
    def __init__(self, power: System.String, multiplier: System.Single, subtraction: System.Single, charges: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.power = power
		self.multiplier = multiplier
		self.subtraction = subtraction
		self.charges = charges


class SuperMonkeyStormModModel:

    offsets = {'damageIncrease': 48}    
    def __init__(self, damageIncrease: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.damageIncrease = damageIncrease


class ThriveModModel:

    offsets = {'cashMultiplierIncrease': 48}    
    def __init__(self, cashMultiplierIncrease: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.cashMultiplierIncrease = cashMultiplierIncrease


class AnalyticsKonFuze:

    offsets = {'heroesPlacedByName': 16, 'towersPlacedByBaseName': 24, 'upgradesPurchasedByTier': 32, 'heroUpgradesPurchasedByTier': 40, 'abilitiesActivatedByName': 48, 'heroLevelsByName': 56, 'heroWonCount': 64, 'powerHistory': 72, 'monkeyTypeWins': 80, 'gameID': 88, 'gamesPlayed': 96, 'bloonsPopped': 104, 'moabsPopped': 112, 'bfbsPopped': 120, 'zomgsPopped': 128, 'ddtsPopped': 136, 'badsPopped': 144, 'fortifiedPopped': 152, 'purplesPopped': 160, 'camosPopped': 168, 'bossesPopped': 176, 'ceramicsPopped': 184, 'regrowPopped': 192, 'leadPopped': 200, 'coopCashRecieved': 208, 'coopCashSent': 216, 'totalTowersPlaced': 224, 'totalTowersSold': 232, 'totalPowersActivated': 240, 'totalUpgradesPurchased': 248, 'totalAbilitiesActivated': 256, 'timesHeroPlaced': 264, 'timesHeroSold': 272, 'timesGameRestarted': 280, 'thirdLevelHeroAbilityUsed': 288, 'tenthLevelHeroAbilityUsed': 296, 'reportedFirstSession': 304, 'reportedFirstPurchase': 312, 'monkeyMoneyEarned': 320, 'cashEarned': 328, 'ecoEarned': 336, 'instaMonkeysUsed': 344, 'bloonsLeaked': 352, 'coopMaxHeroesPlacedOnScreen': 360, 'coopBloonsPopped': 368, 'coopPowersUsed': 376, 'coopInstaMonkeysUsed': 384, 'coopCashGiven': 392, 'coopMapsBeaten': 400, 'coop2PlayerMapsBeaten': 408, 'coop3PlayerMapsBeaten': 416, 'coop4PlayerMapsBeaten': 424, 'bloonPopsOnPeninsula': 432, 'bloonPopsMasterAlchemist': 440, 'bloonsRevealedByShimmer': 448, 'masterOfLife': 456, 'rainbowBloonsPoppedWithMagic': 464, 'whatDidItCostTowers': 472, 'adoraDarkTempleTransformed': 480, 'axisOfHavok': 488, 'kaliMaa': 496, 'namedMonkeyStats': 504, 'necroBloonsReanimated': 512, 'toolsToDarwinUpgradeCount': 520, 'instaCenturyTowerCount': 528, 'tier5InstasUsed': 536, 'dartlingGunnerPops': 544, 'crashOfTheTitansCount': 552, 'moabTakedownsCount': 560, 'redeployChinookCount': 568, 'paragonsPurchasedByName': 576}    
    def __init__(self, heroesPlacedByName: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Utils.KonFuze>, towersPlacedByBaseName: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Utils.KonFuze>, upgradesPurchasedByTier: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Utils.KonFuze>, heroUpgradesPurchasedByTier: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Utils.KonFuze>, abilitiesActivatedByName: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Utils.KonFuze>, heroLevelsByName: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Utils.KonFuze>, heroWonCount: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Utils.KonFuze>, powerHistory: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Utils.KonFuze>, monkeyTypeWins: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Utils.KonFuze>, gameID: Assets.Scripts.Utils.KonFuze, gamesPlayed: Assets.Scripts.Utils.KonFuze, bloonsPopped: Assets.Scripts.Utils.KonFuze, moabsPopped: Assets.Scripts.Utils.KonFuze, bfbsPopped: Assets.Scripts.Utils.KonFuze, zomgsPopped: Assets.Scripts.Utils.KonFuze, ddtsPopped: Assets.Scripts.Utils.KonFuze, badsPopped: Assets.Scripts.Utils.KonFuze, fortifiedPopped: Assets.Scripts.Utils.KonFuze, purplesPopped: Assets.Scripts.Utils.KonFuze, camosPopped: Assets.Scripts.Utils.KonFuze, bossesPopped: Assets.Scripts.Utils.KonFuze, ceramicsPopped: Assets.Scripts.Utils.KonFuze, regrowPopped: Assets.Scripts.Utils.KonFuze, leadPopped: Assets.Scripts.Utils.KonFuze, coopCashRecieved: Assets.Scripts.Utils.KonFuze, coopCashSent: Assets.Scripts.Utils.KonFuze, totalTowersPlaced: Assets.Scripts.Utils.KonFuze, totalTowersSold: Assets.Scripts.Utils.KonFuze, totalPowersActivated: Assets.Scripts.Utils.KonFuze, totalUpgradesPurchased: Assets.Scripts.Utils.KonFuze, totalAbilitiesActivated: Assets.Scripts.Utils.KonFuze, timesHeroPlaced: Assets.Scripts.Utils.KonFuze, timesHeroSold: Assets.Scripts.Utils.KonFuze, timesGameRestarted: Assets.Scripts.Utils.KonFuze, thirdLevelHeroAbilityUsed: Assets.Scripts.Utils.KonFuze, tenthLevelHeroAbilityUsed: Assets.Scripts.Utils.KonFuze, reportedFirstSession: Assets.Scripts.Utils.KonFuze, reportedFirstPurchase: Assets.Scripts.Utils.KonFuze, monkeyMoneyEarned: Assets.Scripts.Utils.KonFuze, cashEarned: Assets.Scripts.Utils.KonFuze, ecoEarned: Assets.Scripts.Utils.KonFuze, instaMonkeysUsed: Assets.Scripts.Utils.KonFuze, bloonsLeaked: Assets.Scripts.Utils.KonFuze, coopMaxHeroesPlacedOnScreen: Assets.Scripts.Utils.KonFuze, coopBloonsPopped: Assets.Scripts.Utils.KonFuze, coopPowersUsed: Assets.Scripts.Utils.KonFuze, coopInstaMonkeysUsed: Assets.Scripts.Utils.KonFuze, coopCashGiven: Assets.Scripts.Utils.KonFuze, coopMapsBeaten: Assets.Scripts.Utils.KonFuze, coop2PlayerMapsBeaten: Assets.Scripts.Utils.KonFuze, coop3PlayerMapsBeaten: Assets.Scripts.Utils.KonFuze, coop4PlayerMapsBeaten: Assets.Scripts.Utils.KonFuze, bloonPopsOnPeninsula: Assets.Scripts.Utils.KonFuze, bloonPopsMasterAlchemist: Assets.Scripts.Utils.KonFuze, bloonsRevealedByShimmer: Assets.Scripts.Utils.KonFuze, masterOfLife: Assets.Scripts.Utils.KonFuze, rainbowBloonsPoppedWithMagic: Assets.Scripts.Utils.KonFuze, whatDidItCostTowers: System.Collections.Generic.List<System.String>, adoraDarkTempleTransformed: Assets.Scripts.Utils.KonFuze, axisOfHavok: Assets.Scripts.Utils.KonFuze, kaliMaa: Assets.Scripts.Utils.KonFuze, namedMonkeyStats: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Profile.NamedMonkeyStats>, necroBloonsReanimated: Assets.Scripts.Utils.KonFuze, toolsToDarwinUpgradeCount: Assets.Scripts.Utils.KonFuze, instaCenturyTowerCount: Assets.Scripts.Utils.KonFuze, tier5InstasUsed: Assets.Scripts.Utils.KonFuze, dartlingGunnerPops: Assets.Scripts.Utils.KonFuze, crashOfTheTitansCount: Assets.Scripts.Utils.KonFuze, moabTakedownsCount: Assets.Scripts.Utils.KonFuze, redeployChinookCount: Assets.Scripts.Utils.KonFuze, paragonsPurchasedByName: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Utils.KonFuze>, **kwargs):
        super().__init__(self, **kwargs)
		self.heroesPlacedByName = heroesPlacedByName
		self.towersPlacedByBaseName = towersPlacedByBaseName
		self.upgradesPurchasedByTier = upgradesPurchasedByTier
		self.heroUpgradesPurchasedByTier = heroUpgradesPurchasedByTier
		self.abilitiesActivatedByName = abilitiesActivatedByName
		self.heroLevelsByName = heroLevelsByName
		self.heroWonCount = heroWonCount
		self.powerHistory = powerHistory
		self.monkeyTypeWins = monkeyTypeWins
		self.gameID = gameID
		self.gamesPlayed = gamesPlayed
		self.bloonsPopped = bloonsPopped
		self.moabsPopped = moabsPopped
		self.bfbsPopped = bfbsPopped
		self.zomgsPopped = zomgsPopped
		self.ddtsPopped = ddtsPopped
		self.badsPopped = badsPopped
		self.fortifiedPopped = fortifiedPopped
		self.purplesPopped = purplesPopped
		self.camosPopped = camosPopped
		self.bossesPopped = bossesPopped
		self.ceramicsPopped = ceramicsPopped
		self.regrowPopped = regrowPopped
		self.leadPopped = leadPopped
		self.coopCashRecieved = coopCashRecieved
		self.coopCashSent = coopCashSent
		self.totalTowersPlaced = totalTowersPlaced
		self.totalTowersSold = totalTowersSold
		self.totalPowersActivated = totalPowersActivated
		self.totalUpgradesPurchased = totalUpgradesPurchased
		self.totalAbilitiesActivated = totalAbilitiesActivated
		self.timesHeroPlaced = timesHeroPlaced
		self.timesHeroSold = timesHeroSold
		self.timesGameRestarted = timesGameRestarted
		self.thirdLevelHeroAbilityUsed = thirdLevelHeroAbilityUsed
		self.tenthLevelHeroAbilityUsed = tenthLevelHeroAbilityUsed
		self.reportedFirstSession = reportedFirstSession
		self.reportedFirstPurchase = reportedFirstPurchase
		self.monkeyMoneyEarned = monkeyMoneyEarned
		self.cashEarned = cashEarned
		self.ecoEarned = ecoEarned
		self.instaMonkeysUsed = instaMonkeysUsed
		self.bloonsLeaked = bloonsLeaked
		self.coopMaxHeroesPlacedOnScreen = coopMaxHeroesPlacedOnScreen
		self.coopBloonsPopped = coopBloonsPopped
		self.coopPowersUsed = coopPowersUsed
		self.coopInstaMonkeysUsed = coopInstaMonkeysUsed
		self.coopCashGiven = coopCashGiven
		self.coopMapsBeaten = coopMapsBeaten
		self.coop2PlayerMapsBeaten = coop2PlayerMapsBeaten
		self.coop3PlayerMapsBeaten = coop3PlayerMapsBeaten
		self.coop4PlayerMapsBeaten = coop4PlayerMapsBeaten
		self.bloonPopsOnPeninsula = bloonPopsOnPeninsula
		self.bloonPopsMasterAlchemist = bloonPopsMasterAlchemist
		self.bloonsRevealedByShimmer = bloonsRevealedByShimmer
		self.masterOfLife = masterOfLife
		self.rainbowBloonsPoppedWithMagic = rainbowBloonsPoppedWithMagic
		self.whatDidItCostTowers = whatDidItCostTowers
		self.adoraDarkTempleTransformed = adoraDarkTempleTransformed
		self.axisOfHavok = axisOfHavok
		self.kaliMaa = kaliMaa
		self.namedMonkeyStats = namedMonkeyStats
		self.necroBloonsReanimated = necroBloonsReanimated
		self.toolsToDarwinUpgradeCount = toolsToDarwinUpgradeCount
		self.instaCenturyTowerCount = instaCenturyTowerCount
		self.tier5InstasUsed = tier5InstasUsed
		self.dartlingGunnerPops = dartlingGunnerPops
		self.crashOfTheTitansCount = crashOfTheTitansCount
		self.moabTakedownsCount = moabTakedownsCount
		self.redeployChinookCount = redeployChinookCount
		self.paragonsPurchasedByName = paragonsPurchasedByName


class AnalyticsProfileInfo:

    offsets = {'heroesPlacedByName': 16, 'upgradesPurchasedByTier': 24, 'heroUpgradesPurchasedByTier': 32, 'abilitiesActivatedByName': 40, 'heroLevelsByName': 48, 'heroWonCount': 56, 'powerHistory': 64, 'monkeyTypeWins': 72, 'gameID': 80, 'bloonsPopped': 84, 'moabsPopped': 88, 'bfbsPopped': 92, 'zomgsPopped': 96, 'ddtsPopped': 100, 'badsPopped': 104, 'fortifiedPopped': 108, 'purplesPopped': 112, 'camosPopped': 116, 'ceramicsPopped': 120, 'regrowPopped': 124, 'leadPopped': 128, 'coopCashRecieved': 132, 'coopCashSent': 136, 'totalTowersPlaced': 140, 'totalTowersSold': 144, 'totalPowersActivated': 148, 'totalUpgradesPurchased': 152, 'totalAbilitiesActivated': 156, 'timesHeroPlaced': 160, 'timesHeroSold': 164, 'timesGameRestarted': 168, 'thirdLevelHeroAbilityUsed': 172, 'tenthLevelHeroAbilityUsed': 173, 'reportedFirstSession': 174, 'reportedFirstPurchase': 175}    
    def __init__(self, heroesPlacedByName: System.Collections.Generic.Dictionary<System.String,System.Int32>, upgradesPurchasedByTier: System.Collections.Generic.Dictionary<System.Int32,System.Int32>, heroUpgradesPurchasedByTier: System.Collections.Generic.Dictionary<System.Int32,System.Int32>, abilitiesActivatedByName: System.Collections.Generic.Dictionary<System.String,System.Int32>, heroLevelsByName: System.Collections.Generic.Dictionary<System.String,System.Int32>, heroWonCount: System.Collections.Generic.Dictionary<System.String,System.Int32>, powerHistory: System.Collections.Generic.Dictionary<System.String,System.Int32>, monkeyTypeWins: System.Collections.Generic.Dictionary<System.String,System.Int32>, gameID: System.Int32, bloonsPopped: System.Int32, moabsPopped: System.Int32, bfbsPopped: System.Int32, zomgsPopped: System.Int32, ddtsPopped: System.Int32, badsPopped: System.Int32, fortifiedPopped: System.Int32, purplesPopped: System.Int32, camosPopped: System.Int32, ceramicsPopped: System.Int32, regrowPopped: System.Int32, leadPopped: System.Int32, coopCashRecieved: System.Int32, coopCashSent: System.Int32, totalTowersPlaced: System.Int32, totalTowersSold: System.Int32, totalPowersActivated: System.Int32, totalUpgradesPurchased: System.Int32, totalAbilitiesActivated: System.Int32, timesHeroPlaced: System.Int32, timesHeroSold: System.Int32, timesGameRestarted: System.Int32, thirdLevelHeroAbilityUsed: System.Boolean, tenthLevelHeroAbilityUsed: System.Boolean, reportedFirstSession: System.Boolean, reportedFirstPurchase: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.heroesPlacedByName = heroesPlacedByName
		self.upgradesPurchasedByTier = upgradesPurchasedByTier
		self.heroUpgradesPurchasedByTier = heroUpgradesPurchasedByTier
		self.abilitiesActivatedByName = abilitiesActivatedByName
		self.heroLevelsByName = heroLevelsByName
		self.heroWonCount = heroWonCount
		self.powerHistory = powerHistory
		self.monkeyTypeWins = monkeyTypeWins
		self.gameID = gameID
		self.bloonsPopped = bloonsPopped
		self.moabsPopped = moabsPopped
		self.bfbsPopped = bfbsPopped
		self.zomgsPopped = zomgsPopped
		self.ddtsPopped = ddtsPopped
		self.badsPopped = badsPopped
		self.fortifiedPopped = fortifiedPopped
		self.purplesPopped = purplesPopped
		self.camosPopped = camosPopped
		self.ceramicsPopped = ceramicsPopped
		self.regrowPopped = regrowPopped
		self.leadPopped = leadPopped
		self.coopCashRecieved = coopCashRecieved
		self.coopCashSent = coopCashSent
		self.totalTowersPlaced = totalTowersPlaced
		self.totalTowersSold = totalTowersSold
		self.totalPowersActivated = totalPowersActivated
		self.totalUpgradesPurchased = totalUpgradesPurchased
		self.totalAbilitiesActivated = totalAbilitiesActivated
		self.timesHeroPlaced = timesHeroPlaced
		self.timesHeroSold = timesHeroSold
		self.timesGameRestarted = timesGameRestarted
		self.thirdLevelHeroAbilityUsed = thirdLevelHeroAbilityUsed
		self.tenthLevelHeroAbilityUsed = tenthLevelHeroAbilityUsed
		self.reportedFirstSession = reportedFirstSession
		self.reportedFirstPurchase = reportedFirstPurchase


class BaseSaveDataModel:

    offsets = {'playerChallengeId': 16, 'playerChallengeType': 24, 'dailyChallengeEventID': 32}    
    def __init__(self, playerChallengeId: System.String, playerChallengeType: System.Nullable<Assets.Scripts.Unity.UI_New.ChallengeEditor.ContentType>, dailyChallengeEventID: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.playerChallengeId = playerChallengeId
		self.playerChallengeType = playerChallengeType
		self.dailyChallengeEventID = dailyChallengeEventID


class BloonSaveDataModel:

    offsets = {'modelId': 16, 'hp': 24, 'emissionIndex': 28, 'spawnRound': 32, 'pathId': 40, 'distanceTraveled': 48, 'lowestLayerNumber': 52}    
    def __init__(self, modelId: System.String, hp: System.Single, emissionIndex: System.Int32, spawnRound: System.Int32, pathId: System.String, distanceTraveled: System.Single, lowestLayerNumber: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.modelId = modelId
		self.hp = hp
		self.emissionIndex = emissionIndex
		self.spawnRound = spawnRound
		self.pathId = pathId
		self.distanceTraveled = distanceTraveled
		self.lowestLayerNumber = lowestLayerNumber


class BossEventData:

    offsets = {'eventId': 16, 'normal': 24, 'elite': 32}    
    def __init__(self, eventId: System.String, normal: Assets.Scripts.Models.Profile.BossModeData, elite: Assets.Scripts.Models.Profile.BossModeData, **kwargs):
        super().__init__(self, **kwargs)
		self.eventId = eventId
		self.normal = normal
		self.elite = elite


class BossModeData:

    offsets = {'bestRound': 16, 'newBestRound': 20, 'tierBeaten': 24, 'hasCompleted': 28, 'seenCompletion': 29, 'bestTime': 32, 'poolId': 40, 'hasClaimedRewards': 48}    
    def __init__(self, bestRound: System.Int32, newBestRound: System.Boolean, tierBeaten: System.Int32, hasCompleted: System.Boolean, seenCompletion: System.Boolean, bestTime: Assets.Scripts.Utils.KonFuze, poolId: System.String, hasClaimedRewards: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.bestRound = bestRound
		self.newBestRound = newBestRound
		self.tierBeaten = tierBeaten
		self.hasCompleted = hasCompleted
		self.seenCompletion = seenCompletion
		self.bestTime = bestTime
		self.poolId = poolId
		self.hasClaimedRewards = hasClaimedRewards


class CollectionEventDataModel:

    offsets = {'eventId': 16, 'amountCollected': 24, 'amountRewardedFor': 32, 'amountLastSeen': 40, 'seed': 48, 'lastFeaturedInstasPageSeen': 64}    
    def __init__(self, eventId: System.String, amountCollected: Assets.Scripts.Utils.KonFuze, amountRewardedFor: Assets.Scripts.Utils.KonFuze, amountLastSeen: Assets.Scripts.Utils.KonFuze, seed: Assets.Scripts.Utils.KonFuze, lastFeaturedInstasPageSeen: Assets.Scripts.Utils.KonFuze, **kwargs):
        super().__init__(self, **kwargs)
		self.eventId = eventId
		self.amountCollected = amountCollected
		self.amountRewardedFor = amountRewardedFor
		self.amountLastSeen = amountLastSeen
		self.seed = seed
		self.lastFeaturedInstasPageSeen = lastFeaturedInstasPageSeen


class ContentTypeSaveData:

    offsets = {'playedIds': 16, 'favoriteIds': 24, 'upvotedIds': 32, 'wonIds': 40, 'lostIds': 48, 'created': 56, 'saveData': 64}    
    def __init__(self, playedIds: System.Collections.Generic.List<System.String>, favoriteIds: System.Collections.Generic.List<System.String>, upvotedIds: System.Collections.Generic.List<System.String>, wonIds: System.Collections.Generic.List<System.String>, lostIds: System.Collections.Generic.List<System.String>, created: System.Collections.Generic.List<System.String>, saveData: System.Collections.Generic.List<Assets.Scripts.Models.Profile.BaseSaveDataModel>, **kwargs):
        super().__init__(self, **kwargs)
		self.playedIds = playedIds
		self.favoriteIds = favoriteIds
		self.upvotedIds = upvotedIds
		self.wonIds = wonIds
		self.lostIds = lostIds
		self.created = created
		self.saveData = saveData


class FreePowerSaveDataModel:

    offsets = {'basePowerID': 16, 'charges': 24}    
    def __init__(self, basePowerID: System.String, charges: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.basePowerID = basePowerID
		self.charges = charges


class FreeTowerSaveDataModel:

    offsets = {'baseTowerID': 16, 'charges': 24}    
    def __init__(self, baseTowerID: System.String, charges: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.baseTowerID = baseTowerID
		self.charges = charges


class GoldenBloonMapData:

    offsets = {'currentMapId': 16, 'endTime': 24}    
    def __init__(self, currentMapId: System.String, endTime: System.DateTime, **kwargs):
        super().__init__(self, **kwargs)
		self.currentMapId = currentMapId
		self.endTime = endTime


class InGameSettings:

    offsets = {'doubleCash': 16, 'autoPlay': 17, 'lineOfSight': 18, 'dropAndLock': 19, 'gameHints': 20}    
    def __init__(self, doubleCash: System.Boolean, autoPlay: System.Boolean, lineOfSight: System.Boolean, dropAndLock: System.Boolean, gameHints: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.doubleCash = doubleCash
		self.autoPlay = autoPlay
		self.lineOfSight = lineOfSight
		self.dropAndLock = dropAndLock
		self.gameHints = gameHints


class InstaTowerModel:

    offsets = {'quantity': 24, 'isNew': 32}    
    def __init__(self, quantity: Assets.Scripts.Utils.KonFuze_NoShuffle, isNew: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.quantity = quantity
		self.isNew = isNew


class LoanSaveDataModel:

    offsets = {'towerId': 16, 'inputId': 20, 'amount': 24, 'collectionRate': 28}    
    def __init__(self, towerId: System.Int32, inputId: System.Int32, amount: System.Single, collectionRate: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.towerId = towerId
		self.inputId = inputId
		self.amount = amount
		self.collectionRate = collectionRate


class MapCompleteInfo:

    offsets = {'mapName': 16, 'difficultyName': 24, 'mapDifficultyName': 32, 'modeName': 40, 'timesCompleted': 48}    
    def __init__(self, mapName: System.String, difficultyName: System.String, mapDifficultyName: System.String, modeName: System.String, timesCompleted: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.mapName = mapName
		self.difficultyName = difficultyName
		self.mapDifficultyName = mapDifficultyName
		self.modeName = modeName
		self.timesCompleted = timesCompleted


class MapDifficultyInfo:

    offsets = {'modes': 16, 'coopModes': 24}    
    def __init__(self, modes: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Profile.MapModeInfo>, coopModes: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Profile.MapModeInfo>, **kwargs):
        super().__init__(self, **kwargs)
		self.modes = modes
		self.coopModes = coopModes


class MapEventActionSaveData:

    offsets = {'float1': 16, 'int1': 20}    
    def __init__(self, float1: System.Single, int1: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.float1 = float1
		self.int1 = int1


class MapEventSaveData:

    offsets = {'triggerCount': 16, 'isActive': 20, 'triggerSaveData': 24, 'actionSaveData': 32}    
    def __init__(self, triggerCount: System.Int32, isActive: System.Boolean, triggerSaveData: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Profile.MapEventTriggerSaveData>, actionSaveData: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Profile.MapEventActionSaveData>, **kwargs):
        super().__init__(self, **kwargs)
		self.triggerCount = triggerCount
		self.isActive = isActive
		self.triggerSaveData = triggerSaveData
		self.actionSaveData = actionSaveData


class MapEventTriggerSaveData:

    offsets = {'bool1': 16, 'bool2': 17, 'int1': 20, 'int2': 24}    
    def __init__(self, bool1: System.Boolean, bool2: System.Boolean, int1: System.Int32, int2: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.bool1 = bool1
		self.bool2 = bool2
		self.int1 = int1
		self.int2 = int2


class MapGizmoBehaviorSaveData:

    offsets = {'name': 16, 'int1': 24, 'int2': 28}    
    def __init__(self, name: System.String, int1: System.Int32, int2: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.name = name
		self.int1 = int1
		self.int2 = int2


class MapGizmoSaveData:

    offsets = {'name': 16, 'data': 24}    
    def __init__(self, name: System.String, data: System.Collections.Generic.List<Assets.Scripts.Models.Profile.MapGizmoBehaviorSaveData>, **kwargs):
        super().__init__(self, **kwargs)
		self.name = name
		self.data = data


class MapInfo:

    offsets = {'seen': 16, 'seenNew': 17, 'seenNewDifficulty': 18, 'completed': 19, 'difficult': 24}    
    def __init__(self, seen: System.Boolean, seenNew: System.Boolean, seenNewDifficulty: System.Boolean, completed: System.Boolean, difficult: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Profile.MapDifficultyInfo>, **kwargs):
        super().__init__(self, **kwargs)
		self.seen = seen
		self.seenNew = seenNew
		self.seenNewDifficulty = seenNewDifficulty
		self.completed = completed
		self.difficult = difficult


class MapInfoManager:

    offsets = {'maps': 16}    
    def __init__(self, maps: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Profile.MapInfo>, **kwargs):
        super().__init__(self, **kwargs)
		self.maps = maps


class MapModeInfo:

    offsets = {'seen': 16, 'seenCompleted': 17, 'seenMedal': 18, 'bestRound': 20, 'timesCompleted': 24, 'dailyChallengeTimesCompleted': 28, 'completedWithoutLoadingSave': 32}    
    def __init__(self, seen: System.Boolean, seenCompleted: System.Boolean, seenMedal: System.Boolean, bestRound: System.Int32, timesCompleted: System.Int32, dailyChallengeTimesCompleted: System.Int32, completedWithoutLoadingSave: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.seen = seen
		self.seenCompleted = seenCompleted
		self.seenMedal = seenMedal
		self.bestRound = bestRound
		self.timesCompleted = timesCompleted
		self.dailyChallengeTimesCompleted = dailyChallengeTimesCompleted
		self.completedWithoutLoadingSave = completedWithoutLoadingSave


class MapSaveDataModel:

    offsets = {'version': 40, 'round': 44, 'timeStep': 48, 'roundTimeStep': 52, 'matchWon': 56, 'gameVersion': 64, 'cash': 72, 'health': 80, 'shield': 84, 'prevShields': 88, 'prevHp': 92, 'eventInt1': 96, 'claimedFreeplayLoot': 100, 'savedMapsId': 104, 'mapName': 112, 'mapDifficulty': 120, 'modeName': 128, 'trackType': 136, 'gameType': 144, 'primaryHero': 152, 'freeplayRoundSeed': 160, 'imfLoanAmounts': 168, 'loans': 176, 'placedTowers': 184, 'powerPlaceHistory': 192, 'placedProjectiles': 200, 'bloons': 208, 'activeRemoveablesByName': 216, 'gizmoSaveData': 224, 'mapEventSaveData': 232, 'freeTowers': 240, 'towerDiscounts': 248, 'players': 256, 'collectionEventItems': 264, 'mostTowersAtOnce': 268, 'damageDone': 272, 'moabsPopped': 280, 'badsPopped': 284, 'bfbsPopped': 288, 'ddtsPopped': 292, 'zomgsPopped': 296, 'bossesPopped': 300, 'ecoEarned': 304, 'powersActivated': 308, 'abilitiesActivated': 312, 'instaMonkeysUsed': 316, 'towersPlaced': 320, 'towerPlaceHistoryBySet': 328, 'towerTypeMaxPlacedHistory': 336, 'activeMutators': 344, 'emergencyUnlockActivatedAt': 352, 'goldenBloonsPopped': 360, 'gameId': 364, 'metaData': 376, 'roundInstaRewardAwarded': 384, 'cashStartedWith': 392}    
    def __init__(self, version: System.Int32, round: System.Int32, timeStep: System.Int32, roundTimeStep: System.Int32, matchWon: System.Boolean, gameVersion: System.String, cash: System.Double, health: System.Single, shield: System.Single, prevShields: System.Single, prevHp: System.Single, eventInt1: System.Int32, claimedFreeplayLoot: System.Boolean, savedMapsId: System.String, mapName: System.String, mapDifficulty: System.String, modeName: System.String, trackType: System.String, gameType: Assets.Scripts.Unity.Bridge.GameType, primaryHero: System.String, freeplayRoundSeed: System.Int32, imfLoanAmounts: System.Collections.Generic.Dictionary<System.Single,System.Single>, loans: System.Collections.Generic.List<Assets.Scripts.Models.Profile.LoanSaveDataModel>, placedTowers: System.Collections.Generic.List<Assets.Scripts.Models.Profile.TowerSaveDataModel>, powerPlaceHistory: System.Collections.Generic.List<Assets.Scripts.Models.Profile.PowerSaveDataModel>, placedProjectiles: System.Collections.Generic.List<Assets.Scripts.Models.Profile.ProjectileSaveDataModel>, bloons: System.Collections.Generic.List<Assets.Scripts.Models.Profile.BloonSaveDataModel>, activeRemoveablesByName: System.Collections.Generic.List<System.String>, gizmoSaveData: System.Collections.Generic.List<Assets.Scripts.Models.Profile.MapGizmoSaveData>, mapEventSaveData: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Profile.MapEventSaveData>, freeTowers: System.Collections.Generic.List<Assets.Scripts.Models.Profile.FreeTowerSaveDataModel>, towerDiscounts: System.Collections.Generic.List<Assets.Scripts.Models.Profile.TowerDiscountSaveDataModel>, players: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Models.Profile.PlayerSaveData>, collectionEventItems: System.Int32, mostTowersAtOnce: System.Int32, damageDone: System.Int64, moabsPopped: System.Int32, badsPopped: System.Int32, bfbsPopped: System.Int32, ddtsPopped: System.Int32, zomgsPopped: System.Int32, bossesPopped: System.Int32, ecoEarned: System.Int32, powersActivated: System.Int32, abilitiesActivated: System.Int32, instaMonkeysUsed: System.Int32, towersPlaced: System.Int32, towerPlaceHistoryBySet: System.Collections.Generic.Dictionary<System.String,System.Int32>, towerTypeMaxPlacedHistory: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Profile.TowerMaxCountPlacedHistory>, activeMutators: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.List<Assets.Scripts.Models.Profile.MutatorSaveDataModel>>, emergencyUnlockActivatedAt: System.Collections.Generic.Dictionary<System.Int32,System.Int32>, goldenBloonsPopped: System.Int32, gameId: System.Nullable<System.Int32>, metaData: System.Collections.Generic.Dictionary<System.String,System.String>, roundInstaRewardAwarded: System.Collections.Generic.Dictionary<System.Int32,System.Boolean>, cashStartedWith: System.Collections.Generic.Dictionary<System.Int32,System.Int32>, **kwargs):
        super().__init__(self, **kwargs)
		self.version = version
		self.round = round
		self.timeStep = timeStep
		self.roundTimeStep = roundTimeStep
		self.matchWon = matchWon
		self.gameVersion = gameVersion
		self.cash = cash
		self.health = health
		self.shield = shield
		self.prevShields = prevShields
		self.prevHp = prevHp
		self.eventInt1 = eventInt1
		self.claimedFreeplayLoot = claimedFreeplayLoot
		self.savedMapsId = savedMapsId
		self.mapName = mapName
		self.mapDifficulty = mapDifficulty
		self.modeName = modeName
		self.trackType = trackType
		self.gameType = gameType
		self.primaryHero = primaryHero
		self.freeplayRoundSeed = freeplayRoundSeed
		self.imfLoanAmounts = imfLoanAmounts
		self.loans = loans
		self.placedTowers = placedTowers
		self.powerPlaceHistory = powerPlaceHistory
		self.placedProjectiles = placedProjectiles
		self.bloons = bloons
		self.activeRemoveablesByName = activeRemoveablesByName
		self.gizmoSaveData = gizmoSaveData
		self.mapEventSaveData = mapEventSaveData
		self.freeTowers = freeTowers
		self.towerDiscounts = towerDiscounts
		self.players = players
		self.collectionEventItems = collectionEventItems
		self.mostTowersAtOnce = mostTowersAtOnce
		self.damageDone = damageDone
		self.moabsPopped = moabsPopped
		self.badsPopped = badsPopped
		self.bfbsPopped = bfbsPopped
		self.ddtsPopped = ddtsPopped
		self.zomgsPopped = zomgsPopped
		self.bossesPopped = bossesPopped
		self.ecoEarned = ecoEarned
		self.powersActivated = powersActivated
		self.abilitiesActivated = abilitiesActivated
		self.instaMonkeysUsed = instaMonkeysUsed
		self.towersPlaced = towersPlaced
		self.towerPlaceHistoryBySet = towerPlaceHistoryBySet
		self.towerTypeMaxPlacedHistory = towerTypeMaxPlacedHistory
		self.activeMutators = activeMutators
		self.emergencyUnlockActivatedAt = emergencyUnlockActivatedAt
		self.goldenBloonsPopped = goldenBloonsPopped
		self.gameId = gameId
		self.metaData = metaData
		self.roundInstaRewardAwarded = roundInstaRewardAwarded
		self.cashStartedWith = cashStartedWith


class MonkeyTeamMapData:

    offsets = {'currentMapId': 16, 'endTime': 24}    
    def __init__(self, currentMapId: System.String, endTime: System.DateTime, **kwargs):
        super().__init__(self, **kwargs)
		self.currentMapId = currentMapId
		self.endTime = endTime


class MutatorSaveDataModel:

    offsets = {'mutatorSaveId': 16, 'towerId': 24, 'framesLeft': 28, 'counter': 32}    
    def __init__(self, mutatorSaveId: System.String, towerId: System.Int32, framesLeft: System.Int32, counter: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.mutatorSaveId = mutatorSaveId
		self.towerId = towerId
		self.framesLeft = framesLeft
		self.counter = counter


class NamedMonkeyStats:

    offsets = {'name': 16, '<BaseTower>k__BackingField': 24, 'gamesWon': 32, 'highestRound': 40, 'timesPlaced': 48, 'totalPopCount': 56, 'totalCoopPopCount': 64, 'camoBloonsPopped': 72, 'leadBloonsPopped': 80, 'purpleBloonsPopped': 88, 'regrowBloonsPopped': 96, 'ceramicBloonsPopped': 104, 'moabsPopped': 112, 'bfbsPopped': 120, 'zomgsPopped': 128, 'ddtsPopped': 136, 'badsPopped': 144, 'cashGenerated': 152, 'abilitiesUsed': 160, 'timesUpgraded': 168, 'timesSacrificed': 176}    
    def __init__(self, name: System.String, <BaseTower>k__BackingField: System.String, gamesWon: Assets.Scripts.Utils.KonFuze, highestRound: Assets.Scripts.Utils.KonFuze, timesPlaced: Assets.Scripts.Utils.KonFuze, totalPopCount: Assets.Scripts.Utils.KonFuze, totalCoopPopCount: Assets.Scripts.Utils.KonFuze, camoBloonsPopped: Assets.Scripts.Utils.KonFuze, leadBloonsPopped: Assets.Scripts.Utils.KonFuze, purpleBloonsPopped: Assets.Scripts.Utils.KonFuze, regrowBloonsPopped: Assets.Scripts.Utils.KonFuze, ceramicBloonsPopped: Assets.Scripts.Utils.KonFuze, moabsPopped: Assets.Scripts.Utils.KonFuze, bfbsPopped: Assets.Scripts.Utils.KonFuze, zomgsPopped: Assets.Scripts.Utils.KonFuze, ddtsPopped: Assets.Scripts.Utils.KonFuze, badsPopped: Assets.Scripts.Utils.KonFuze, cashGenerated: Assets.Scripts.Utils.KonFuze, abilitiesUsed: Assets.Scripts.Utils.KonFuze, timesUpgraded: Assets.Scripts.Utils.KonFuze, timesSacrificed: Assets.Scripts.Utils.KonFuze, **kwargs):
        super().__init__(self, **kwargs)
		self.name = name
		self.<BaseTower>k__BackingField = <BaseTower>k__BackingField
		self.gamesWon = gamesWon
		self.highestRound = highestRound
		self.timesPlaced = timesPlaced
		self.totalPopCount = totalPopCount
		self.totalCoopPopCount = totalCoopPopCount
		self.camoBloonsPopped = camoBloonsPopped
		self.leadBloonsPopped = leadBloonsPopped
		self.purpleBloonsPopped = purpleBloonsPopped
		self.regrowBloonsPopped = regrowBloonsPopped
		self.ceramicBloonsPopped = ceramicBloonsPopped
		self.moabsPopped = moabsPopped
		self.bfbsPopped = bfbsPopped
		self.zomgsPopped = zomgsPopped
		self.ddtsPopped = ddtsPopped
		self.badsPopped = badsPopped
		self.cashGenerated = cashGenerated
		self.abilitiesUsed = abilitiesUsed
		self.timesUpgraded = timesUpgraded
		self.timesSacrificed = timesSacrificed


class OnlineProfileModel:

    offsets = {'playerChallenges': 16, 'raceEventEntryTime': 24, 'raceEventEntryID': 32, 'raceFreeEntries': 40, 'raceFreeId': 48, 'racesPass': 56, 'completedRaceEventIds': 64, 'completedRaceEventPoolIds': 72, 'racesData': 80, 'timeStamp': 88, 'raceEventBestTime': 96, 'bestRaceEventTimeRounds': 104, 'followingPlayerIds': 112, 'contentBrowserData': 120, 'bossEventData': 128}    
    def __init__(self, playerChallenges: Assets.Scripts.Models.Profile.PlayerChallenges, raceEventEntryTime: System.DateTime, raceEventEntryID: System.String, raceFreeEntries: Assets.Scripts.Utils.KonFuze, raceFreeId: System.String, racesPass: Assets.Scripts.Utils.KonFuze, completedRaceEventIds: System.Collections.Generic.List<System.String>, completedRaceEventPoolIds: System.Collections.Generic.Dictionary<System.String,System.String>, racesData: System.Collections.Generic.List<Assets.Scripts.Models.Profile.RaceEventData>, timeStamp: System.DateTime, raceEventBestTime: Assets.Scripts.Utils.KonFuze, bestRaceEventTimeRounds: System.Collections.Generic.Dictionary<System.Int32,System.Single>, followingPlayerIds: System.Collections.Generic.HashSet<System.String>, contentBrowserData: System.Collections.Generic.Dictionary<Assets.Scripts.Unity.UI_New.ChallengeEditor.ContentType,Assets.Scripts.Models.Profile.ContentTypeSaveData>, bossEventData: Assets.Scripts.Models.Profile.BossEventData, **kwargs):
        super().__init__(self, **kwargs)
		self.playerChallenges = playerChallenges
		self.raceEventEntryTime = raceEventEntryTime
		self.raceEventEntryID = raceEventEntryID
		self.raceFreeEntries = raceFreeEntries
		self.raceFreeId = raceFreeId
		self.racesPass = racesPass
		self.completedRaceEventIds = completedRaceEventIds
		self.completedRaceEventPoolIds = completedRaceEventPoolIds
		self.racesData = racesData
		self.timeStamp = timeStamp
		self.raceEventBestTime = raceEventBestTime
		self.bestRaceEventTimeRounds = bestRaceEventTimeRounds
		self.followingPlayerIds = followingPlayerIds
		self.contentBrowserData = contentBrowserData
		self.bossEventData = bossEventData


class PlayerChallenges:

    offsets = {'playedIds': 16, 'favoriteIds': 24, 'upvotedIds': 32, 'wonIds': 40, 'lostIds': 48, 'created': 56, 'mapSaves': 64, 'followingPlayerIds': 72}    
    def __init__(self, playedIds: System.Collections.Generic.List<System.String>, favoriteIds: System.Collections.Generic.List<System.String>, upvotedIds: System.Collections.Generic.List<System.String>, wonIds: System.Collections.Generic.List<System.String>, lostIds: System.Collections.Generic.List<System.String>, created: System.Collections.Generic.List<System.String>, mapSaves: System.Collections.Generic.List<Assets.Scripts.Models.Profile.MapSaveDataModel>, followingPlayerIds: System.Collections.Generic.List<System.String>, **kwargs):
        super().__init__(self, **kwargs)
		self.playedIds = playedIds
		self.favoriteIds = favoriteIds
		self.upvotedIds = upvotedIds
		self.wonIds = wonIds
		self.lostIds = lostIds
		self.created = created
		self.mapSaves = mapSaves
		self.followingPlayerIds = followingPlayerIds


class PlayerSaveData:

    offsets = {'index': 16, 'cash': 24, 'hero': 32, 'freeTowers': 40, 'towerDiscounts': 48}    
    def __init__(self, index: System.Int32, cash: System.Double, hero: System.String, freeTowers: System.Collections.Generic.List<Assets.Scripts.Models.Profile.FreeTowerSaveDataModel>, towerDiscounts: System.Collections.Generic.List<Assets.Scripts.Models.Profile.TowerDiscountSaveDataModel>, **kwargs):
        super().__init__(self, **kwargs)
		self.index = index
		self.cash = cash
		self.hero = hero
		self.freeTowers = freeTowers
		self.towerDiscounts = towerDiscounts


class PowerData:

    offsets = {'quantity': 16, 'isNew': 24}    
    def __init__(self, quantity: Assets.Scripts.Utils.KonFuze_NoShuffle, isNew: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.quantity = quantity
		self.isNew = isNew


class PowerDiscountSaveDataModel:

    offsets = {'discountName': 16, 'charges': 24, 'multiplier': 40, 'subtraction': 44}    
    def __init__(self, discountName: System.String, charges: System.Int32, multiplier: System.Single, subtraction: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.discountName = discountName
		self.charges = charges
		self.multiplier = multiplier
		self.subtraction = subtraction


class PowerSaveDataModel:

    offsets = {'powerId': 16, 'owner': 24}    
    def __init__(self, powerId: System.String, owner: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.powerId = powerId
		self.owner = owner


class ProfileModel:

    offsets = {'version': 16, 'savedByGameVersion': 24, 'towerXp': 32, 'acquiredUpgrades': 40, 'viewedUpgrades': 48, 'acquiredKnowledge': 56, 'paidForKnowledge': 64, 'knowledgeDisabled': 72, 'newKnowledgePoints': 73, 'unlockedTowers': 80, 'unlockedHeroes': 88, 'unlockedTowerSkins': 96, 'seenUnlockedNotification': 104, 'seenUnlockedHeroes': 112, 'seenNewHeroNotification': 120, 'seenNewTowerSkinNotification': 128, 'mapInfo': 136, 'seenEvents': 144, 'paidUserStatus': 152, 'rateMeSkuVersionNumber': 160, 'countGamesSinceSkuRateMeChange': 168, 'completedGamesSinceSkuRateMeChange': 172, 'completedGame': 176, 'seenPopUpEventIds': 184, 'selectedTowerSkinData': 192, 'powers': 200, 'powersData': 208, 'instaTowers': 216, 'savedMaps': 224, '<HasCompletedTutorial>k__BackingField': 232, 'guid': 236, 'deviceID': 256, 'ownerID': 264, 'trophiesWalletId': 272, 'unclaimedTrophies': 280, 'timeStamp': 288, 'monkeyMoney': 296, 'xp': 304, 'rank': 312, 'veteranXp': 320, 'veteranRank': 328, 'seenVeteranRankInfo': 336, 'levelCapWas': 340, 'trophies': 344, 'lifetimeTrophies': 352, 'knowledgePoints': 360, 'primaryHero': 368, 'secondaryHero': 376, 'achievementsProgress': 384, 'achievementsClaimed': 392, 'achievementsSeen': 400, 'achievementsPostedToXBoxLive': 408, 'achievementsPostedToGooglePlay': 416, 'analyticsInfo': 424, 'analyticsKonFuze': 432, 'highestSeenRound': 440, 'purchase': 448, 'giftsReceived': 456, 'dailyRewardIndex': 464, 'lastSavedUTCTime': 472, 'nextDailyRewardDateTime': 480, 'totalDailyChallengesCompleted': 488, 'consecutiveDailyChallengesCompleted': 492, 'uniqueCompletedDailyChallengeIds': 496, 'raceMedalData': 504, 'bossBadgeData': 512, 'seenMiniRace': 520, 'totalRacesEntered': 528, 'raceBestTimeForAchievements': 536, 'challengeEditorModel': 544, 'completedCreatedChallenge': 552, 'submittedChallengeEditorID': 560, 'submittedOdysseyEditorID': 568, 'seenChallengeModifiedPopup': 576, 'lastSubmittedContentTime': 584, 'inGameSettings': 592, 'sentAttribution': 600, 'languageCode': 608, 'challengesPlayed': 616, 'challengesShared': 624, 'winsWithCustomHeroSkin': 632, 'billGreates': 640, 'aCrateTime': 648, 'collectionEventMapBonusData': 656, 'odysseySaveData': 664, 'odysseyEditorSaveData': 672, 'odysseysEditorData': 680, 'embarkedOdysseyEditorDcm': 688, 'completedOdysseys': 696, 'totalCompletedOdysseys': 704, 'cancelledFacebookFriendsPopup': 712, 'coopQuickMatchSetting': 716, 'coopMatchSetToPrivate': 720, 'currentCoopGameDetails': 728, 'hotkeysData': 736, 'hasSeenNewDoubleCash': 744, 'seenBigBloons': 745, 'unlockedBigBloons': 746, 'bigBloonsActive': 747, 'seenSmallBloons': 748, 'unlockedSmallBloons': 749, 'smallBloonsActive': 750, 'seenBigTowers': 751, 'unlockedBigTowers': 752, 'bigTowersActive': 753, 'seenSmallTowers': 754, 'unlockedSmallTowers': 755, 'smallTowersActive': 756, 'patWinsOn10Release': 760, 'oompaLoompad': 764, 'collectionEventData': 768, 'savedPlayList': 776, 'useJukeBox': 784, 'trophyStorePurchasedItems': 792, 'namedMonkeyNames': 800, 'savedStats': 808, 'profileAvatar': 816, 'profileAvatarFrame': 824, 'profileBanner': 832, 'seenProfileStats': 840, 'savedNamedMonkeyStats': 848, 'statsVersion': 856, 'trophyStoreSeen': 860, 'noStoneUnturned': 864, 'moProblems': 872, 'fullSpeed': 880, 'transformicTonicUsesOn20Release': 888, 'playerChallenges': 896, 'currentTowerGiftUnlockIndex': 904, 'currentTowerGiftProgress': 912, 'trophiesSpent': 920, 'hostedCoopGames': 924, 'collectionEventCratesOpened': 928, 'collectionEventCratesTypesOpened': 936, 'continuesUsed': 944, 'blockedHostnames': 952, 'bronzeKeys': 960, 'silverKeys': 964, 'goldKeys': 968, 'seenIntermediateUnlock': 972, 'seenAdvancedUnlock': 973, 'seenExpertUnlock': 974, 'selectedContentTab': 976, 'goldenBloonData': 984, 'goldenBloonsPopped': 992, 'monkeyTeamsWins': 996, 'monkeyTeamsData': 1000, 'giftedAchievements': 1008, 'racePassCount': 1016, 'unverifiedRacePassClaims': 1024}    
    def __init__(self, version: System.Int32, savedByGameVersion: System.Version, towerXp: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Utils.KonFuze_NoShuffle>, acquiredUpgrades: System.Collections.Generic.HashSet<System.String>, viewedUpgrades: System.Collections.Generic.HashSet<System.String>, acquiredKnowledge: System.Collections.Generic.HashSet<System.String>, paidForKnowledge: System.Collections.Generic.HashSet<System.String>, knowledgeDisabled: System.Boolean, newKnowledgePoints: System.Boolean, unlockedTowers: System.Collections.Generic.HashSet<System.String>, unlockedHeroes: System.Collections.Generic.HashSet<System.String>, unlockedTowerSkins: System.Collections.Generic.HashSet<System.String>, seenUnlockedNotification: System.Collections.Generic.HashSet<System.String>, seenUnlockedHeroes: System.Collections.Generic.HashSet<System.String>, seenNewHeroNotification: System.Collections.Generic.HashSet<System.String>, seenNewTowerSkinNotification: System.Collections.Generic.HashSet<System.String>, mapInfo: Assets.Scripts.Models.Profile.MapInfoManager, seenEvents: System.Collections.Generic.HashSet<System.String>, paidUserStatus: Assets.Scripts.Utils.KonFuze, rateMeSkuVersionNumber: System.String, countGamesSinceSkuRateMeChange: System.Boolean, completedGamesSinceSkuRateMeChange: System.Int32, completedGame: System.Int32, seenPopUpEventIds: System.Collections.Generic.HashSet<System.String>, selectedTowerSkinData: System.Collections.Generic.Dictionary<System.String,System.String>, powers: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Utils.KonFuze>, powersData: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Profile.PowerData>, instaTowers: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.List<Assets.Scripts.Models.Profile.InstaTowerModel>>, savedMaps: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Profile.MapSaveDataModel>, <HasCompletedTutorial>k__BackingField: System.Boolean, guid: System.Guid, deviceID: System.String, ownerID: System.String, trophiesWalletId: System.String, unclaimedTrophies: System.Collections.Generic.List<Assets.Scripts.Models.Profile.UnclaimedTrophies>, timeStamp: System.DateTime, monkeyMoney: Assets.Scripts.Utils.KonFuze, xp: Assets.Scripts.Utils.KonFuze, rank: Assets.Scripts.Utils.KonFuze, veteranXp: Assets.Scripts.Utils.KonFuze, veteranRank: Assets.Scripts.Utils.KonFuze, seenVeteranRankInfo: System.Boolean, levelCapWas: System.Int32, trophies: Assets.Scripts.Utils.KonFuze, lifetimeTrophies: Assets.Scripts.Utils.KonFuze, knowledgePoints: Assets.Scripts.Utils.KonFuze, primaryHero: System.String, secondaryHero: System.String, achievementsProgress: System.Collections.Generic.Dictionary<System.Int32,System.Single>, achievementsClaimed: System.Collections.Generic.HashSet<System.Int32>, achievementsSeen: System.Collections.Generic.HashSet<System.Int32>, achievementsPostedToXBoxLive: System.Collections.Generic.HashSet<System.Int32>, achievementsPostedToGooglePlay: System.Collections.Generic.HashSet<System.Int32>, analyticsInfo: Assets.Scripts.Models.Profile.AnalyticsProfileInfo, analyticsKonFuze: Assets.Scripts.Models.Profile.AnalyticsKonFuze, highestSeenRound: System.Int32, purchase: Assets.Scripts.Models.Profile.PurchaseModel, giftsReceived: System.Collections.Generic.HashSet<System.String>, dailyRewardIndex: System.Int32, lastSavedUTCTime: System.DateTime, nextDailyRewardDateTime: System.DateTime, totalDailyChallengesCompleted: System.Int32, consecutiveDailyChallengesCompleted: System.Int32, uniqueCompletedDailyChallengeIds: System.Collections.Generic.List<System.String>, raceMedalData: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Utils.KonFuze>, bossBadgeData: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Utils.KonFuze>, seenMiniRace: System.Boolean, totalRacesEntered: Assets.Scripts.Utils.KonFuze, raceBestTimeForAchievements: Assets.Scripts.Utils.KonFuze, challengeEditorModel: Assets.Scripts.Models.ServerEvents.DailyChallengeModel, completedCreatedChallenge: System.Boolean, submittedChallengeEditorID: System.String, submittedOdysseyEditorID: System.String, seenChallengeModifiedPopup: System.Boolean, lastSubmittedContentTime: System.Collections.Generic.Dictionary<Assets.Scripts.Unity.UI_New.ChallengeEditor.ContentType,Assets.Scripts.Utils.KonFuze>, inGameSettings: Assets.Scripts.Models.Profile.InGameSettings, sentAttribution: System.Boolean, languageCode: System.String, challengesPlayed: Assets.Scripts.Utils.KonFuze, challengesShared: Assets.Scripts.Utils.KonFuze, winsWithCustomHeroSkin: Assets.Scripts.Utils.KonFuze, billGreates: Assets.Scripts.Utils.KonFuze, aCrateTime: Assets.Scripts.Utils.KonFuze, collectionEventMapBonusData: Assets.Scripts.Unity.CollectionEvent.CollectionEventMapBonusSaveData, odysseySaveData: Assets.Scripts.Unity.UI_New.Odyssey.SubScripts.OdysseySaveData, odysseyEditorSaveData: Assets.Scripts.Unity.UI_New.Odyssey.SubScripts.OdysseySaveData, odysseysEditorData: Assets.Scripts.Models.ServerEvents.OdysseyData, embarkedOdysseyEditorDcm: Assets.Scripts.Models.ServerEvents.OdysseyData, completedOdysseys: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Utils.KonFuze>, totalCompletedOdysseys: Assets.Scripts.Utils.KonFuze, cancelledFacebookFriendsPopup: System.Boolean, coopQuickMatchSetting: System.Int32, coopMatchSetToPrivate: System.Boolean, currentCoopGameDetails: Assets.Scripts.Unity.UI_New.Coop.CoopGameDetails, hotkeysData: Assets.Scripts.Unity.UI_New.InGame.HotkeysData, hasSeenNewDoubleCash: System.Boolean, seenBigBloons: System.Boolean, unlockedBigBloons: System.Boolean, bigBloonsActive: System.Boolean, seenSmallBloons: System.Boolean, unlockedSmallBloons: System.Boolean, smallBloonsActive: System.Boolean, seenBigTowers: System.Boolean, unlockedBigTowers: System.Boolean, bigTowersActive: System.Boolean, seenSmallTowers: System.Boolean, unlockedSmallTowers: System.Boolean, smallTowersActive: System.Boolean, patWinsOn10Release: System.Int32, oompaLoompad: System.Boolean, collectionEventData: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Profile.CollectionEventDataModel>, savedPlayList: System.Collections.Generic.List<TrackItemData>, useJukeBox: System.Boolean, trophyStorePurchasedItems: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Profile.TrophyStoreSD>, namedMonkeyNames: System.Collections.Generic.Dictionary<System.String,System.String>, savedStats: System.Collections.Generic.Dictionary<System.String,System.Boolean>, profileAvatar: System.String, profileAvatarFrame: System.String, profileBanner: System.String, seenProfileStats: System.Boolean, savedNamedMonkeyStats: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.Dictionary<System.String,System.Boolean>>, statsVersion: System.Int32, trophyStoreSeen: System.Boolean, noStoneUnturned: Assets.Scripts.Utils.KonFuze, moProblems: Assets.Scripts.Utils.KonFuze, fullSpeed: Assets.Scripts.Utils.KonFuze, transformicTonicUsesOn20Release: System.Int32, playerChallenges: Assets.Scripts.Models.Profile.PlayerChallenges, currentTowerGiftUnlockIndex: Assets.Scripts.Utils.KonFuze, currentTowerGiftProgress: Assets.Scripts.Utils.KonFuze, trophiesSpent: System.Int32, hostedCoopGames: System.Int32, collectionEventCratesOpened: System.Int32, collectionEventCratesTypesOpened: System.Collections.Generic.Dictionary<System.Int32,System.Int32>, continuesUsed: Assets.Scripts.Utils.KonFuze, blockedHostnames: System.Collections.Generic.List<System.String>, bronzeKeys: System.Int32, silverKeys: System.Int32, goldKeys: System.Int32, seenIntermediateUnlock: System.Boolean, seenAdvancedUnlock: System.Boolean, seenExpertUnlock: System.Boolean, selectedContentTab: Assets.Scripts.Unity.UI_New.ChallengeEditor.ContentType, goldenBloonData: System.Collections.Generic.Dictionary<Assets.Scripts.Data.MapSets.MapDifficulty,Assets.Scripts.Models.Profile.GoldenBloonMapData>, goldenBloonsPopped: System.Int32, monkeyTeamsWins: System.Int32, monkeyTeamsData: System.Collections.Generic.Dictionary<Assets.Scripts.Data.MapSets.MapDifficulty,Assets.Scripts.Models.Profile.MonkeyTeamMapData>, giftedAchievements: System.Collections.Generic.HashSet<System.Int32>, racePassCount: Assets.Scripts.Utils.KonFuze, unverifiedRacePassClaims: System.Collections.Generic.List<Assets.Scripts.Models.Profile.RacePassClaim>, **kwargs):
        super().__init__(self, **kwargs)
		self.version = version
		self.savedByGameVersion = savedByGameVersion
		self.towerXp = towerXp
		self.acquiredUpgrades = acquiredUpgrades
		self.viewedUpgrades = viewedUpgrades
		self.acquiredKnowledge = acquiredKnowledge
		self.paidForKnowledge = paidForKnowledge
		self.knowledgeDisabled = knowledgeDisabled
		self.newKnowledgePoints = newKnowledgePoints
		self.unlockedTowers = unlockedTowers
		self.unlockedHeroes = unlockedHeroes
		self.unlockedTowerSkins = unlockedTowerSkins
		self.seenUnlockedNotification = seenUnlockedNotification
		self.seenUnlockedHeroes = seenUnlockedHeroes
		self.seenNewHeroNotification = seenNewHeroNotification
		self.seenNewTowerSkinNotification = seenNewTowerSkinNotification
		self.mapInfo = mapInfo
		self.seenEvents = seenEvents
		self.paidUserStatus = paidUserStatus
		self.rateMeSkuVersionNumber = rateMeSkuVersionNumber
		self.countGamesSinceSkuRateMeChange = countGamesSinceSkuRateMeChange
		self.completedGamesSinceSkuRateMeChange = completedGamesSinceSkuRateMeChange
		self.completedGame = completedGame
		self.seenPopUpEventIds = seenPopUpEventIds
		self.selectedTowerSkinData = selectedTowerSkinData
		self.powers = powers
		self.powersData = powersData
		self.instaTowers = instaTowers
		self.savedMaps = savedMaps
		self.<HasCompletedTutorial>k__BackingField = <HasCompletedTutorial>k__BackingField
		self.guid = guid
		self.deviceID = deviceID
		self.ownerID = ownerID
		self.trophiesWalletId = trophiesWalletId
		self.unclaimedTrophies = unclaimedTrophies
		self.timeStamp = timeStamp
		self.monkeyMoney = monkeyMoney
		self.xp = xp
		self.rank = rank
		self.veteranXp = veteranXp
		self.veteranRank = veteranRank
		self.seenVeteranRankInfo = seenVeteranRankInfo
		self.levelCapWas = levelCapWas
		self.trophies = trophies
		self.lifetimeTrophies = lifetimeTrophies
		self.knowledgePoints = knowledgePoints
		self.primaryHero = primaryHero
		self.secondaryHero = secondaryHero
		self.achievementsProgress = achievementsProgress
		self.achievementsClaimed = achievementsClaimed
		self.achievementsSeen = achievementsSeen
		self.achievementsPostedToXBoxLive = achievementsPostedToXBoxLive
		self.achievementsPostedToGooglePlay = achievementsPostedToGooglePlay
		self.analyticsInfo = analyticsInfo
		self.analyticsKonFuze = analyticsKonFuze
		self.highestSeenRound = highestSeenRound
		self.purchase = purchase
		self.giftsReceived = giftsReceived
		self.dailyRewardIndex = dailyRewardIndex
		self.lastSavedUTCTime = lastSavedUTCTime
		self.nextDailyRewardDateTime = nextDailyRewardDateTime
		self.totalDailyChallengesCompleted = totalDailyChallengesCompleted
		self.consecutiveDailyChallengesCompleted = consecutiveDailyChallengesCompleted
		self.uniqueCompletedDailyChallengeIds = uniqueCompletedDailyChallengeIds
		self.raceMedalData = raceMedalData
		self.bossBadgeData = bossBadgeData
		self.seenMiniRace = seenMiniRace
		self.totalRacesEntered = totalRacesEntered
		self.raceBestTimeForAchievements = raceBestTimeForAchievements
		self.challengeEditorModel = challengeEditorModel
		self.completedCreatedChallenge = completedCreatedChallenge
		self.submittedChallengeEditorID = submittedChallengeEditorID
		self.submittedOdysseyEditorID = submittedOdysseyEditorID
		self.seenChallengeModifiedPopup = seenChallengeModifiedPopup
		self.lastSubmittedContentTime = lastSubmittedContentTime
		self.inGameSettings = inGameSettings
		self.sentAttribution = sentAttribution
		self.languageCode = languageCode
		self.challengesPlayed = challengesPlayed
		self.challengesShared = challengesShared
		self.winsWithCustomHeroSkin = winsWithCustomHeroSkin
		self.billGreates = billGreates
		self.aCrateTime = aCrateTime
		self.collectionEventMapBonusData = collectionEventMapBonusData
		self.odysseySaveData = odysseySaveData
		self.odysseyEditorSaveData = odysseyEditorSaveData
		self.odysseysEditorData = odysseysEditorData
		self.embarkedOdysseyEditorDcm = embarkedOdysseyEditorDcm
		self.completedOdysseys = completedOdysseys
		self.totalCompletedOdysseys = totalCompletedOdysseys
		self.cancelledFacebookFriendsPopup = cancelledFacebookFriendsPopup
		self.coopQuickMatchSetting = coopQuickMatchSetting
		self.coopMatchSetToPrivate = coopMatchSetToPrivate
		self.currentCoopGameDetails = currentCoopGameDetails
		self.hotkeysData = hotkeysData
		self.hasSeenNewDoubleCash = hasSeenNewDoubleCash
		self.seenBigBloons = seenBigBloons
		self.unlockedBigBloons = unlockedBigBloons
		self.bigBloonsActive = bigBloonsActive
		self.seenSmallBloons = seenSmallBloons
		self.unlockedSmallBloons = unlockedSmallBloons
		self.smallBloonsActive = smallBloonsActive
		self.seenBigTowers = seenBigTowers
		self.unlockedBigTowers = unlockedBigTowers
		self.bigTowersActive = bigTowersActive
		self.seenSmallTowers = seenSmallTowers
		self.unlockedSmallTowers = unlockedSmallTowers
		self.smallTowersActive = smallTowersActive
		self.patWinsOn10Release = patWinsOn10Release
		self.oompaLoompad = oompaLoompad
		self.collectionEventData = collectionEventData
		self.savedPlayList = savedPlayList
		self.useJukeBox = useJukeBox
		self.trophyStorePurchasedItems = trophyStorePurchasedItems
		self.namedMonkeyNames = namedMonkeyNames
		self.savedStats = savedStats
		self.profileAvatar = profileAvatar
		self.profileAvatarFrame = profileAvatarFrame
		self.profileBanner = profileBanner
		self.seenProfileStats = seenProfileStats
		self.savedNamedMonkeyStats = savedNamedMonkeyStats
		self.statsVersion = statsVersion
		self.trophyStoreSeen = trophyStoreSeen
		self.noStoneUnturned = noStoneUnturned
		self.moProblems = moProblems
		self.fullSpeed = fullSpeed
		self.transformicTonicUsesOn20Release = transformicTonicUsesOn20Release
		self.playerChallenges = playerChallenges
		self.currentTowerGiftUnlockIndex = currentTowerGiftUnlockIndex
		self.currentTowerGiftProgress = currentTowerGiftProgress
		self.trophiesSpent = trophiesSpent
		self.hostedCoopGames = hostedCoopGames
		self.collectionEventCratesOpened = collectionEventCratesOpened
		self.collectionEventCratesTypesOpened = collectionEventCratesTypesOpened
		self.continuesUsed = continuesUsed
		self.blockedHostnames = blockedHostnames
		self.bronzeKeys = bronzeKeys
		self.silverKeys = silverKeys
		self.goldKeys = goldKeys
		self.seenIntermediateUnlock = seenIntermediateUnlock
		self.seenAdvancedUnlock = seenAdvancedUnlock
		self.seenExpertUnlock = seenExpertUnlock
		self.selectedContentTab = selectedContentTab
		self.goldenBloonData = goldenBloonData
		self.goldenBloonsPopped = goldenBloonsPopped
		self.monkeyTeamsWins = monkeyTeamsWins
		self.monkeyTeamsData = monkeyTeamsData
		self.giftedAchievements = giftedAchievements
		self.racePassCount = racePassCount
		self.unverifiedRacePassClaims = unverifiedRacePassClaims


class ProjectileSaveDataModel:

    offsets = {'pierce': 16, 'baseId': 24, 'position': 32, 'rotation': 44, 'metaData': 48, 'owner': 56, 'emittedByTowerId': 60, 'emittedFrom': 64}    
    def __init__(self, pierce: System.Single, baseId: System.String, position: UnityEngine.Vector3, rotation: System.Single, metaData: System.Collections.Generic.Dictionary<System.String,System.String>, owner: System.Int32, emittedByTowerId: System.Int32, emittedFrom: UnityEngine.Vector3, **kwargs):
        super().__init__(self, **kwargs)
		self.pierce = pierce
		self.baseId = baseId
		self.position = position
		self.rotation = rotation
		self.metaData = metaData
		self.owner = owner
		self.emittedByTowerId = emittedByTowerId
		self.emittedFrom = emittedFrom


class PublicNamedMonkeyStats:

    offsets = {'name': 16, 'BaseTower': 24, 'gamesWon': 32, 'highestRound': 36, 'timesPlaced': 40, 'totalPopCount': 48, 'totalCoopPopCount': 56, 'camoBloonsPopped': 64, 'leadBloonsPopped': 72, 'purpleBloonsPopped': 80, 'regrowBloonsPopped': 88, 'ceramicBloonsPopped': 96, 'moabsPopped': 104, 'bfbsPopped': 112, 'zomgsPopped': 120, 'ddtsPopped': 128, 'badsPopped': 136, 'cashGenerated': 144, 'abilitiesUsed': 152, 'timesUpgraded': 160, 'timesSacrificed': 168}    
    def __init__(self, name: System.String, BaseTower: System.String, gamesWon: System.Int32, highestRound: System.Int32, timesPlaced: System.Int32, totalPopCount: System.Int64, totalCoopPopCount: System.Int64, camoBloonsPopped: System.Int64, leadBloonsPopped: System.Int64, purpleBloonsPopped: System.Int64, regrowBloonsPopped: System.Int64, ceramicBloonsPopped: System.Int64, moabsPopped: System.Int64, bfbsPopped: System.Int64, zomgsPopped: System.Int64, ddtsPopped: System.Int64, badsPopped: System.Int64, cashGenerated: System.Int64, abilitiesUsed: System.Int64, timesUpgraded: System.Int64, timesSacrificed: System.Int64, **kwargs):
        super().__init__(self, **kwargs)
		self.name = name
		self.BaseTower = BaseTower
		self.gamesWon = gamesWon
		self.highestRound = highestRound
		self.timesPlaced = timesPlaced
		self.totalPopCount = totalPopCount
		self.totalCoopPopCount = totalCoopPopCount
		self.camoBloonsPopped = camoBloonsPopped
		self.leadBloonsPopped = leadBloonsPopped
		self.purpleBloonsPopped = purpleBloonsPopped
		self.regrowBloonsPopped = regrowBloonsPopped
		self.ceramicBloonsPopped = ceramicBloonsPopped
		self.moabsPopped = moabsPopped
		self.bfbsPopped = bfbsPopped
		self.zomgsPopped = zomgsPopped
		self.ddtsPopped = ddtsPopped
		self.badsPopped = badsPopped
		self.cashGenerated = cashGenerated
		self.abilitiesUsed = abilitiesUsed
		self.timesUpgraded = timesUpgraded
		self.timesSacrificed = timesSacrificed


class PurchaseLootMeta:

    offsets = {'productID': 16, 'loot': 24}    
    def __init__(self, productID: System.String, loot: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.productID = productID
		self.loot = loot


class PurchaseModel:

    offsets = {'purchaseLoot': 16, 'purchasedDoubleCashMode': 24, 'purchasedNonConsumables': 32, 'consumedValidations': 40, 'validationVerion': 48}    
    def __init__(self, purchaseLoot: System.Collections.Generic.List<Assets.Scripts.Models.Profile.PurchaseLootMeta>, purchasedDoubleCashMode: System.Boolean, purchasedNonConsumables: System.Collections.Generic.List<System.String>, consumedValidations: System.Collections.Generic.List<System.String>, validationVerion: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.purchaseLoot = purchaseLoot
		self.purchasedDoubleCashMode = purchasedDoubleCashMode
		self.purchasedNonConsumables = purchasedNonConsumables
		self.consumedValidations = consumedValidations
		self.validationVerion = validationVerion


class PurchaseModelExtensions:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RaceEventData:

    offsets = {'id': 16, 'hasCompletedOneRun': 24, 'hasClaimedRewards': 25, 'poolId': 32}    
    def __init__(self, id: System.String, hasCompletedOneRun: System.Boolean, hasClaimedRewards: System.Boolean, poolId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.id = id
		self.hasCompletedOneRun = hasCompletedOneRun
		self.hasClaimedRewards = hasClaimedRewards
		self.poolId = poolId


class RacePassClaim:

    offsets = {'transactionId': 16, 'source': 24, 'konFuzedAmount': 32}    
    def __init__(self, transactionId: System.String, source: Assets.Scripts.Models.Store.LootFrom, konFuzedAmount: Assets.Scripts.Utils.KonFuze, **kwargs):
        super().__init__(self, **kwargs)
		self.transactionId = transactionId
		self.source = source
		self.konFuzedAmount = konFuzedAmount


class TowerCount:

    offsets = {'tower': 16, 'count': 24}    
    def __init__(self, tower: System.String, count: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.tower = tower
		self.count = count


class TowerDiscountSaveDataModel:

    offsets = {'discountName': 16, 'charges': 24, 'multiplier': 40, 'subtraction': 44}    
    def __init__(self, discountName: System.String, charges: System.Int32, multiplier: System.Single, subtraction: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.discountName = discountName
		self.charges = charges
		self.multiplier = multiplier
		self.subtraction = subtraction


class TowerMaxCountPlacedHistory:

    offsets = {'currentCount': 16, 'maxCount': 20}    
    def __init__(self, currentCount: System.Int32, maxCount: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.currentCount = currentCount
		self.maxCount = maxCount


class TowerSaveDataModel:

    offsets = {'damageDealt': 16, 'cashEarned': 24, 'worth': 32, 'IdLastSave': 36, 'createdAt': 40, 'targetType': 48, 'position': 64, 'rotation': 76, 'baseId': 80, 'heroId': 88, 'heroXpInCurrentLevel': 96, 'pathOneTier': 100, 'pathTwoTier': 104, 'pathThreeTier': 108, 'metaData': 112, 'owner': 120, 'createdAtRoundTime': 124, 'parentTowerId': 128, 'areaPlacedOn': 132, 'isParagon': 136}    
    def __init__(self, damageDealt: System.Int64, cashEarned: System.Int64, worth: System.Single, IdLastSave: System.Int32, createdAt: System.Int32, targetType: Assets.Scripts.Models.Towers.TargetType, position: UnityEngine.Vector3, rotation: System.Single, baseId: System.String, heroId: System.String, heroXpInCurrentLevel: System.Single, pathOneTier: System.Int32, pathTwoTier: System.Int32, pathThreeTier: System.Int32, metaData: System.Collections.Generic.Dictionary<System.String,System.String>, owner: System.Int32, createdAtRoundTime: System.Int32, parentTowerId: System.Int32, areaPlacedOn: System.Int32, isParagon: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.damageDealt = damageDealt
		self.cashEarned = cashEarned
		self.worth = worth
		self.IdLastSave = IdLastSave
		self.createdAt = createdAt
		self.targetType = targetType
		self.position = position
		self.rotation = rotation
		self.baseId = baseId
		self.heroId = heroId
		self.heroXpInCurrentLevel = heroXpInCurrentLevel
		self.pathOneTier = pathOneTier
		self.pathTwoTier = pathTwoTier
		self.pathThreeTier = pathThreeTier
		self.metaData = metaData
		self.owner = owner
		self.createdAtRoundTime = createdAtRoundTime
		self.parentTowerId = parentTowerId
		self.areaPlacedOn = areaPlacedOn
		self.isParagon = isParagon


class TrophyStoreSD:

    offsets = {'enabled': 16}    
    def __init__(self, enabled: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.enabled = enabled


class UnclaimedTrophies:

    offsets = {'transactionId': 16, 'konFuzedAmount': 24}    
    def __init__(self, transactionId: System.String, konFuzedAmount: Assets.Scripts.Utils.KonFuze, **kwargs):
        super().__init__(self, **kwargs)
		self.transactionId = transactionId
		self.konFuzedAmount = konFuzedAmount


class BloonEmissionModel:

    offsets = {'bloon': 48, 'time': 56, 'emissionIndex': 60}    
    def __init__(self, bloon: System.String, time: System.Single, emissionIndex: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.bloon = bloon
		self.time = time
		self.emissionIndex = emissionIndex


class BloonGroupModel:

    offsets = {'bloon': 48, 'start': 56, 'end': 60, 'count': 64}    
    def __init__(self, bloon: System.String, start: System.Single, end: System.Single, count: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.bloon = bloon
		self.start = start
		self.end = end
		self.count = count


class CustomRoundSetModel:

    offsets = {'roundSetType': 56}    
    def __init__(self, roundSetType: Assets.Scripts.Models.ServerEvents.CustomRoundSet, **kwargs):
        super().__init__(self, **kwargs)
		self.roundSetType = roundSetType


class FreeplayBloonGroupModel:

    offsets = {'score': 56, 'group': 72}    
    def __init__(self, score: System.Single, group: Assets.Scripts.Models.Rounds.BloonGroupModel, **kwargs):
        super().__init__(self, **kwargs)
		self.score = score
		self.group = group


class HintMessageModel:

    offsets = {'hint': 48}    
    def __init__(self, hint: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.hint = hint


class RoundModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RoundSetModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AnalyticsDamage:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AnalyticsSku:

    offsets = {'ignoreHkxr': 16, 'disabledPeriod': 24, 'damage': 32, 'eventRetries': 40, 'useMultiEndpoint': 44, 'serverUrls': 48}    
    def __init__(self, ignoreHkxr: System.Boolean, disabledPeriod: System.TimeSpan, damage: Assets.Scripts.Models.ServerEvents.AnalyticsDamage, eventRetries: System.Int32, useMultiEndpoint: System.Boolean, serverUrls: System.Collections.Generic.List<System.String>, **kwargs):
        super().__init__(self, **kwargs)
		self.ignoreHkxr = ignoreHkxr
		self.disabledPeriod = disabledPeriod
		self.damage = damage
		self.eventRetries = eventRetries
		self.useMultiEndpoint = useMultiEndpoint
		self.serverUrls = serverUrls


class BannerEvent:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BannerEventMetadata:

    offsets = {'action': 32, 'url': 40}    
    def __init__(self, action: System.String, url: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.action = action
		self.url = url


class BaseServerEvent:

    offsets = {'id': 16, 'startDate': 24, 'endDate': 32}    
    def __init__(self, id: System.String, startDate: System.DateTime, endDate: System.DateTime, **kwargs):
        super().__init__(self, **kwargs)
		self.id = id
		self.startDate = startDate
		self.endDate = endDate


class BloonHealthMultipliers:

    offsets = {'bloons': 16, 'moabs': 20}    
    def __init__(self, bloons: System.Single, moabs: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.bloons = bloons
		self.moabs = moabs


class BloonModifiers:

    offsets = {'speedMultiplier': 16, 'moabSpeedMultiplier': 20, 'regrowRateMultiplier': 24, 'healthMultipliers': 32, 'allCamo': 40, 'allRegen': 41}    
    def __init__(self, speedMultiplier: System.Single, moabSpeedMultiplier: System.Single, regrowRateMultiplier: System.Single, healthMultipliers: Assets.Scripts.Models.ServerEvents.BloonHealthMultipliers, allCamo: System.Boolean, allRegen: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.speedMultiplier = speedMultiplier
		self.moabSpeedMultiplier = moabSpeedMultiplier
		self.regrowRateMultiplier = regrowRateMultiplier
		self.healthMultipliers = healthMultipliers
		self.allCamo = allCamo
		self.allRegen = allRegen


class BobsUncle:

    offsets = {'lives': 16, 'cash': 20, 'time': 24}    
    def __init__(self, lives: System.Int32, cash: System.Int32, time: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.lives = lives
		self.cash = cash
		self.time = time


class BossDataModel:

    offsets = {'normalDcm': 16, 'eliteDcm': 24}    
    def __init__(self, normalDcm: Assets.Scripts.Models.ServerEvents.DailyChallengeModel, eliteDcm: Assets.Scripts.Models.ServerEvents.DailyChallengeModel, **kwargs):
        super().__init__(self, **kwargs)
		self.normalDcm = normalDcm
		self.eliteDcm = eliteDcm


class BossEvent:

    offsets = {'dataId': 48}    
    def __init__(self, dataId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.dataId = dataId


class BossEventMetadata:

    offsets = {'bossType': 24, 'rewards': 32}    
    def __init__(self, bossType: Assets.Scripts.Models.ServerEvents.BossType, rewards: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.bossType = bossType
		self.rewards = rewards


class BossRewards:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BossSettings:

    offsets = {'rewards': 16}    
    def __init__(self, rewards: Assets.Scripts.Models.ServerEvents.BossRewards, **kwargs):
        super().__init__(self, **kwargs)
		self.rewards = rewards


class BossTierModifiers:

    offsets = {'speed': 16, 'health': 20}    
    def __init__(self, speed: System.Single, health: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.speed = speed
		self.health = health


class BossType:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class CEMod:

    offsets = {'max': 16, 'min': 20, 'chanceToMod': 24}    
    def __init__(self, max: System.Single, min: System.Single, chanceToMod: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.max = max
		self.min = min
		self.chanceToMod = chanceToMod


class CacheDebug:

    offsets = {'isEnabled': 16}    
    def __init__(self, isEnabled: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isEnabled = isEnabled


class CandyServerEvent:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ChallengeBrowserTabSettings:

    offsets = {'casual': 16, 'expert': 24, 'mostLiked': 32, 'trending': 40, 'newest': 48, 'favorite': 56, 'following': 64, 'saved': 72, 'created': 80, 'played': 88, 'custom': 96}    
    def __init__(self, casual: Assets.Scripts.Models.ServerEvents.TabSettings, expert: Assets.Scripts.Models.ServerEvents.TabSettings, mostLiked: Assets.Scripts.Models.ServerEvents.TabSettings, trending: Assets.Scripts.Models.ServerEvents.TabSettingsTrending, newest: Assets.Scripts.Models.ServerEvents.TabSettings, favorite: Assets.Scripts.Models.ServerEvents.TabSettings, following: Assets.Scripts.Models.ServerEvents.TabSettings, saved: Assets.Scripts.Models.ServerEvents.TabSettings, created: Assets.Scripts.Models.ServerEvents.TabSettings, played: Assets.Scripts.Models.ServerEvents.TabSettings, custom: Assets.Scripts.Models.ServerEvents.TabSettings, **kwargs):
        super().__init__(self, **kwargs)
		self.casual = casual
		self.expert = expert
		self.mostLiked = mostLiked
		self.trending = trending
		self.newest = newest
		self.favorite = favorite
		self.following = following
		self.saved = saved
		self.created = created
		self.played = played
		self.custom = custom


class ChallengeEditorSettings:

    offsets = {'isEnabled': 16, 'restrictions': 24, 'randomGenerator': 32}    
    def __init__(self, isEnabled: System.Boolean, restrictions: Assets.Scripts.Models.ServerEvents.Restrictions, randomGenerator: Assets.Scripts.Models.ServerEvents.RandomGenerator, **kwargs):
        super().__init__(self, **kwargs)
		self.isEnabled = isEnabled
		self.restrictions = restrictions
		self.randomGenerator = randomGenerator


class ChallengeModifiers:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class ChallengeType:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class CollectablesEvent:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CollectablesMetadata:

    offsets = {'mapBonusActive': 24, 'featuredInstas': 32}    
    def __init__(self, mapBonusActive: System.Boolean, featuredInstas: System.Collections.Generic.Dictionary<System.String,System.Boolean>, **kwargs):
        super().__init__(self, **kwargs)
		self.mapBonusActive = mapBonusActive
		self.featuredInstas = featuredInstas


class Collection:

    offsets = {'<crateRewards>k__BackingField': 24, '<crateCosts>k__BackingField': 32, '<winRewards>k__BackingField': 40, '<featuredInsta>k__BackingField': 48, '<mapBonusRefreshInHours>k__BackingField': 56}    
    def __init__(self, <crateRewards>k__BackingField: Assets.Scripts.Models.ServerEvents.CrateRewards, <crateCosts>k__BackingField: Assets.Scripts.Models.ServerEvents.CrateCosts, <winRewards>k__BackingField: Assets.Scripts.Models.ServerEvents.WinRewards, <featuredInsta>k__BackingField: Assets.Scripts.Models.ServerEvents.FeaturedInsta, <mapBonusRefreshInHours>k__BackingField: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.<crateRewards>k__BackingField = <crateRewards>k__BackingField
		self.<crateCosts>k__BackingField = <crateCosts>k__BackingField
		self.<winRewards>k__BackingField = <winRewards>k__BackingField
		self.<featuredInsta>k__BackingField = <featuredInsta>k__BackingField
		self.<mapBonusRefreshInHours>k__BackingField = <mapBonusRefreshInHours>k__BackingField


class ContentBrowserSettings:

    offsets = {'maxPanels': 16, 'maxSaves': 20, 'canHkrsCreate': 32, 'requireAcctToLike': 33, 'tabSettings': 40, 'contentSettings': 48, 'minSearchInterval': 56, 'minPageLoadInterval': 64, 'defaultChallengeName': 72, 'defaultPlayerName': 80, 'newsBanner': 88, 'editor': 96, 'title': 104, 'filterSettings': 112, 'statsCache': 120, 'cacheDebug': 128, 'maxFilterCount': 136, 'maxListSize': 140}    
    def __init__(self, maxPanels: System.Int32, maxSaves: System.Int32, canHkrsCreate: System.Boolean, requireAcctToLike: System.Boolean, tabSettings: System.Collections.Generic.Dictionary<Assets.Scripts.Unity.UI_New.ChallengeEditor.ContentType,Assets.Scripts.Models.ServerEvents.ChallengeBrowserTabSettings>, contentSettings: System.Collections.Generic.Dictionary<Assets.Scripts.Unity.UI_New.ChallengeEditor.ContentType,Assets.Scripts.Models.ServerEvents.ContentSettings>, minSearchInterval: System.TimeSpan, minPageLoadInterval: System.TimeSpan, defaultChallengeName: System.String, defaultPlayerName: System.String, newsBanner: System.String, editor: Assets.Scripts.Models.ServerEvents.ChallengeEditorSettings, title: Assets.Scripts.Models.ServerEvents.TitleSettings, filterSettings: Assets.Scripts.Models.ServerEvents.FilterSettings, statsCache: Assets.Scripts.Models.ServerEvents.StatsCacheSettings, cacheDebug: Assets.Scripts.Models.ServerEvents.CacheDebug, maxFilterCount: System.Int32, maxListSize: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.maxPanels = maxPanels
		self.maxSaves = maxSaves
		self.canHkrsCreate = canHkrsCreate
		self.requireAcctToLike = requireAcctToLike
		self.tabSettings = tabSettings
		self.contentSettings = contentSettings
		self.minSearchInterval = minSearchInterval
		self.minPageLoadInterval = minPageLoadInterval
		self.defaultChallengeName = defaultChallengeName
		self.defaultPlayerName = defaultPlayerName
		self.newsBanner = newsBanner
		self.editor = editor
		self.title = title
		self.filterSettings = filterSettings
		self.statsCache = statsCache
		self.cacheDebug = cacheDebug
		self.maxFilterCount = maxFilterCount
		self.maxListSize = maxListSize


class ContentSettings:

    offsets = {'creationTimeout': 24, 'defaultPage': 32}    
    def __init__(self, creationTimeout: System.TimeSpan, defaultPage: Assets.Scripts.Unity.UI_New.ChallengeEditor.SelectionType, **kwargs):
        super().__init__(self, **kwargs)
		self.creationTimeout = creationTimeout
		self.defaultPage = defaultPage


class Coop:

    offsets = {'quickMatch': 24, 'timerSettings': 32, 'networkVariables': 40, 'connection': 48, 'coopUnlockLevel': 64}    
    def __init__(self, quickMatch: Assets.Scripts.Models.ServerEvents.QuickMatchSkuSettings, timerSettings: Assets.Scripts.Models.ServerEvents.TimerSkuSettings, networkVariables: Assets.Scripts.Models.ServerEvents.NetworkVariables, connection: Assets.Scripts.Models.ServerEvents.Coop.ConnectionSettings, coopUnlockLevel: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.quickMatch = quickMatch
		self.timerSettings = timerSettings
		self.networkVariables = networkVariables
		self.connection = connection
		self.coopUnlockLevel = coopUnlockLevel


class CoopChallenge:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CrateCosts:

    offsets = {'<wood>k__BackingField': 16, '<bronze>k__BackingField': 20, '<silver>k__BackingField': 24, '<gold>k__BackingField': 28, '<diamond>k__BackingField': 32}    
    def __init__(self, <wood>k__BackingField: System.Int32, <bronze>k__BackingField: System.Int32, <silver>k__BackingField: System.Int32, <gold>k__BackingField: System.Int32, <diamond>k__BackingField: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.<wood>k__BackingField = <wood>k__BackingField
		self.<bronze>k__BackingField = <bronze>k__BackingField
		self.<silver>k__BackingField = <silver>k__BackingField
		self.<gold>k__BackingField = <gold>k__BackingField
		self.<diamond>k__BackingField = <diamond>k__BackingField


class CrateRewards:

    offsets = {'<instaMonkey>k__BackingField': 16}    
    def __init__(self, <instaMonkey>k__BackingField: Assets.Scripts.Models.ServerEvents.InstaMonkey, **kwargs):
        super().__init__(self, **kwargs)
		self.<instaMonkey>k__BackingField = <instaMonkey>k__BackingField


class CustomRoundSet:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class DailyChallengeExtensions:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DailyChallengeModel:
	CHOSENPRIMARYHERO: System.String
    offsets = {'CHOSENPRIMARYHERO': 0, 'CHOSENSECONDARYHERO': 8, 'validCamoRegenBloons': 16, 'towers': 16, 'powers': 24, 'map': 32, 'difficulty': 40, 'rewards': 48, 'mode': 56, 'id': 64, 'maxTowers': 68, 'maxPowers': 72, 'bloonModifiers': 80, 'roundSets': 88, 'disableMK': 96, 'disableSelling': 97, 'disablePowers': 98, 'disableDoubleCash': 99, 'noContinues': 100, 'noInstaReward': 101, 'startRules': 104, 'name': 112, 'displayIncludedTowers': 120, 'displayIncludedPowers': 121, 'seed': 124, 'numberOfPlayers': 128, 'coopDivisionType': 132, 'eventID': 136, 'chalType': 144, 'endTimeUTC': 152, 'startTimeUTC': 160, 'validatedTowerSet': 168, 'validatedPowerSet': 169, '_uniqueDCId': 176}    
    def __init__(self, CHOSENPRIMARYHERO: System.String, CHOSENSECONDARYHERO: System.String, validCamoRegenBloons: System.Collections.Generic.List<System.String>, towers: System.Collections.Generic.List<Assets.Scripts.Models.ServerEvents.TowerData>, powers: System.Collections.Generic.List<Assets.Scripts.Models.ServerEvents.PowerData>, map: System.String, difficulty: System.String, rewards: System.String, mode: System.String, id: System.Int32, maxTowers: System.Int32, maxPowers: System.Int32, bloonModifiers: Assets.Scripts.Models.ServerEvents.BloonModifiers, roundSets: System.Collections.Generic.List<System.String>, disableMK: System.Boolean, disableSelling: System.Boolean, disablePowers: System.Boolean, disableDoubleCash: System.Boolean, noContinues: System.Boolean, noInstaReward: System.Boolean, startRules: Assets.Scripts.Models.ServerEvents.StartRules, name: System.String, displayIncludedTowers: System.Boolean, displayIncludedPowers: System.Boolean, seed: System.Int32, numberOfPlayers: System.Int32, coopDivisionType: Assets.Scripts.Data.MapSets.CoopDivision, eventID: System.String, chalType: Assets.Scripts.Models.ServerEvents.ChallengeType, endTimeUTC: System.DateTime, startTimeUTC: System.DateTime, validatedTowerSet: System.Boolean, validatedPowerSet: System.Boolean, _uniqueDCId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.CHOSENPRIMARYHERO = CHOSENPRIMARYHERO
		self.CHOSENSECONDARYHERO = CHOSENSECONDARYHERO
		self.validCamoRegenBloons = validCamoRegenBloons
		self.towers = towers
		self.powers = powers
		self.map = map
		self.difficulty = difficulty
		self.rewards = rewards
		self.mode = mode
		self.id = id
		self.maxTowers = maxTowers
		self.maxPowers = maxPowers
		self.bloonModifiers = bloonModifiers
		self.roundSets = roundSets
		self.disableMK = disableMK
		self.disableSelling = disableSelling
		self.disablePowers = disablePowers
		self.disableDoubleCash = disableDoubleCash
		self.noContinues = noContinues
		self.noInstaReward = noInstaReward
		self.startRules = startRules
		self.name = name
		self.displayIncludedTowers = displayIncludedTowers
		self.displayIncludedPowers = displayIncludedPowers
		self.seed = seed
		self.numberOfPlayers = numberOfPlayers
		self.coopDivisionType = coopDivisionType
		self.eventID = eventID
		self.chalType = chalType
		self.endTimeUTC = endTimeUTC
		self.startTimeUTC = startTimeUTC
		self.validatedTowerSet = validatedTowerSet
		self.validatedPowerSet = validatedPowerSet
		self._uniqueDCId = _uniqueDCId


class DailyChallenges:
	idRotationCache: Assets.Scripts.Models.ServerEvents.DailyChallenges.IdRotationCache
    offsets = {'idRotationCache': 0, 'idRotationCacheAdvanced': 8, 'standard': 16, 'advanced': 24, 'availableOffline': 32}    
    def __init__(self, idRotationCache: Assets.Scripts.Models.ServerEvents.DailyChallenges.IdRotationCache, idRotationCacheAdvanced: Assets.Scripts.Models.ServerEvents.DailyChallenges.IdRotationCache, standard: Assets.Scripts.Models.ServerEvents.DailyChallenges.RotationInfo, advanced: Assets.Scripts.Models.ServerEvents.DailyChallenges.RotationInfo, availableOffline: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.idRotationCache = idRotationCache
		self.idRotationCacheAdvanced = idRotationCacheAdvanced
		self.standard = standard
		self.advanced = advanced
		self.availableOffline = availableOffline


class DefaultData:

    offsets = {'name': 16, 'quantity': 24}    
    def __init__(self, name: System.String, quantity: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.name = name
		self.quantity = quantity


class DisableEventObjects:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class EmptyMetadata:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class EnableEventObjects:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class EventName:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class FeaturedInsta:

    offsets = {'<useCount>k__BackingField': 16, '<refreshInHours>k__BackingField': 20}    
    def __init__(self, <useCount>k__BackingField: System.Int32, <refreshInHours>k__BackingField: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.<useCount>k__BackingField = <useCount>k__BackingField
		self.<refreshInHours>k__BackingField = <refreshInHours>k__BackingField


class FilterSettings:

    offsets = {'minRounds': 16, 'maxRounds': 24}    
    def __init__(self, minRounds: Assets.Scripts.Models.ServerEvents.SliderSettings, maxRounds: Assets.Scripts.Models.ServerEvents.SliderSettings, **kwargs):
        super().__init__(self, **kwargs)
		self.minRounds = minRounds
		self.maxRounds = maxRounds


class GameEvents:

    offsets = {'dailyChallenges': 24, 'races': 32, 'collection': 40, 'roundSets': 48, 'goldenBloon': 56, 'monkeyTeams': 64, 'bosses': 72}    
    def __init__(self, dailyChallenges: Assets.Scripts.Models.ServerEvents.DailyChallenges, races: Assets.Scripts.Models.ServerEvents.Races, collection: Assets.Scripts.Models.ServerEvents.Collection, roundSets: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.ServerEvents.GameEvents.RoundsContainer>, goldenBloon: Assets.Scripts.Models.ServerEvents.GoldenBloon, monkeyTeams: Assets.Scripts.Models.ServerEvents.MonkeyTeams, bosses: Assets.Scripts.Models.ServerEvents.BossSettings, **kwargs):
        super().__init__(self, **kwargs)
		self.dailyChallenges = dailyChallenges
		self.races = races
		self.collection = collection
		self.roundSets = roundSets
		self.goldenBloon = goldenBloon
		self.monkeyTeams = monkeyTeams
		self.bosses = bosses


class GoldenBloon:

    offsets = {'rotationTime': 16}    
    def __init__(self, rotationTime: System.TimeSpan, **kwargs):
        super().__init__(self, **kwargs)
		self.rotationTime = rotationTime


class GoldenBloonEvent:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class HolidayEvent:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class HolidaySkin:

    offsets = {'eventNames': 24}    
    def __init__(self, eventNames: System.Collections.Generic.List<Assets.Scripts.Models.ServerEvents.EventName>, **kwargs):
        super().__init__(self, **kwargs)
		self.eventNames = eventNames


class IEventMetadata:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class IapEvent:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class IapEventMetaData:

    offsets = {'productIDs': 32}    
    def __init__(self, productIDs: System.Collections.Generic.Dictionary<System.String,System.Boolean>, **kwargs):
        super().__init__(self, **kwargs)
		self.productIDs = productIDs


class InstaMonkey:

    offsets = {'<wood>k__BackingField': 16, '<bronze>k__BackingField': 24, '<silver>k__BackingField': 32, '<gold>k__BackingField': 40, '<diamond>k__BackingField': 48}    
    def __init__(self, <wood>k__BackingField: Assets.Scripts.Models.ServerEvents.InstaMonkeyReward, <bronze>k__BackingField: Assets.Scripts.Models.ServerEvents.InstaMonkeyReward, <silver>k__BackingField: Assets.Scripts.Models.ServerEvents.InstaMonkeyReward, <gold>k__BackingField: Assets.Scripts.Models.ServerEvents.InstaMonkeyReward, <diamond>k__BackingField: Assets.Scripts.Models.ServerEvents.InstaMonkeyReward, **kwargs):
        super().__init__(self, **kwargs)
		self.<wood>k__BackingField = <wood>k__BackingField
		self.<bronze>k__BackingField = <bronze>k__BackingField
		self.<silver>k__BackingField = <silver>k__BackingField
		self.<gold>k__BackingField = <gold>k__BackingField
		self.<diamond>k__BackingField = <diamond>k__BackingField


class InstaMonkeyReward:

    offsets = {'<quantityChance>k__BackingField': 16, '<tierChance>k__BackingField': 24}    
    def __init__(self, <quantityChance>k__BackingField: System.Collections.Generic.Dictionary<System.Int32,System.Single>, <tierChance>k__BackingField: System.Collections.Generic.Dictionary<System.Int32,System.Single>, **kwargs):
        super().__init__(self, **kwargs)
		self.<quantityChance>k__BackingField = <quantityChance>k__BackingField
		self.<tierChance>k__BackingField = <tierChance>k__BackingField


class LeaderboardReward:

    offsets = {'reward': 16, 'position': 24}    
    def __init__(self, reward: System.String, position: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.reward = reward
		self.position = position


class LeaderboardRewardExtensions:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class LeaderboardSettings:

    offsets = {'cacheLife': 16, 'graceTime': 24}    
    def __init__(self, cacheLife: System.TimeSpan, graceTime: System.TimeSpan, **kwargs):
        super().__init__(self, **kwargs)
		self.cacheLife = cacheLife
		self.graceTime = graceTime


class MainMenuPriority:

    offsets = {'collection': 16, 'odyssey': 20, 'race': 24, 'boss': 28}    
    def __init__(self, collection: System.Int32, odyssey: System.Int32, race: System.Int32, boss: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.collection = collection
		self.odyssey = odyssey
		self.race = race
		self.boss = boss


class MonkeyTeamEvent:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MonkeyTeams:

    offsets = {'mapRotationTime': 16, 'teamRotationTime': 24, 'rewards': 32}    
    def __init__(self, mapRotationTime: System.TimeSpan, teamRotationTime: System.TimeSpan, rewards: System.Collections.Generic.Dictionary<Assets.Scripts.Data.MapSets.MapDifficulty,System.Collections.Generic.Dictionary<System.Int32,System.Int32>>, **kwargs):
        super().__init__(self, **kwargs)
		self.mapRotationTime = mapRotationTime
		self.teamRotationTime = teamRotationTime
		self.rewards = rewards


class NetworkVariables:

    offsets = {'<inputDelayLatencyMultiplier>k__BackingField': 16, '<inputDelayMin>k__BackingField': 20, '<inputDelayMax>k__BackingField': 24, '<signoffIntervalAsInputDelayMultiplier>k__BackingField': 28, '<timeScaleMin>k__BackingField': 32, '<timeScaleMax>k__BackingField': 36, '<timeScaleThresholdToStart>k__BackingField': 40, '<timeScaleThresholdToStopAsMultiplierOfStart>k__BackingField': 44, '<timeScaleTargetRatio>k__BackingField': 48, '<timeScaleChangePerSecond>k__BackingField': 52, '<cursorUpdateInterval>k__BackingField': 56, '<syncCheckInterval>k__BackingField': 60, '<allowResync>k__BackingField': 64, '<timeScaleDeclareSampleRange>k__BackingField': 68, '<timeScaleDeclareThresholdRatio>k__BackingField': 72, '<timeScaleDeclareReductionMultiplier>k__BackingField': 76, '<timeScaleDeclareRecoveryThresholdRatio>k__BackingField': 80, '<timeScaleDeclareRecoveryMultiplier>k__BackingField': 84}    
    def __init__(self, <inputDelayLatencyMultiplier>k__BackingField: System.Single, <inputDelayMin>k__BackingField: System.Single, <inputDelayMax>k__BackingField: System.Single, <signoffIntervalAsInputDelayMultiplier>k__BackingField: System.Single, <timeScaleMin>k__BackingField: System.Single, <timeScaleMax>k__BackingField: System.Single, <timeScaleThresholdToStart>k__BackingField: System.Single, <timeScaleThresholdToStopAsMultiplierOfStart>k__BackingField: System.Single, <timeScaleTargetRatio>k__BackingField: System.Single, <timeScaleChangePerSecond>k__BackingField: System.Single, <cursorUpdateInterval>k__BackingField: System.Single, <syncCheckInterval>k__BackingField: System.Single, <allowResync>k__BackingField: System.Boolean, <timeScaleDeclareSampleRange>k__BackingField: System.Single, <timeScaleDeclareThresholdRatio>k__BackingField: System.Single, <timeScaleDeclareReductionMultiplier>k__BackingField: System.Single, <timeScaleDeclareRecoveryThresholdRatio>k__BackingField: System.Single, <timeScaleDeclareRecoveryMultiplier>k__BackingField: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.<inputDelayLatencyMultiplier>k__BackingField = <inputDelayLatencyMultiplier>k__BackingField
		self.<inputDelayMin>k__BackingField = <inputDelayMin>k__BackingField
		self.<inputDelayMax>k__BackingField = <inputDelayMax>k__BackingField
		self.<signoffIntervalAsInputDelayMultiplier>k__BackingField = <signoffIntervalAsInputDelayMultiplier>k__BackingField
		self.<timeScaleMin>k__BackingField = <timeScaleMin>k__BackingField
		self.<timeScaleMax>k__BackingField = <timeScaleMax>k__BackingField
		self.<timeScaleThresholdToStart>k__BackingField = <timeScaleThresholdToStart>k__BackingField
		self.<timeScaleThresholdToStopAsMultiplierOfStart>k__BackingField = <timeScaleThresholdToStopAsMultiplierOfStart>k__BackingField
		self.<timeScaleTargetRatio>k__BackingField = <timeScaleTargetRatio>k__BackingField
		self.<timeScaleChangePerSecond>k__BackingField = <timeScaleChangePerSecond>k__BackingField
		self.<cursorUpdateInterval>k__BackingField = <cursorUpdateInterval>k__BackingField
		self.<syncCheckInterval>k__BackingField = <syncCheckInterval>k__BackingField
		self.<allowResync>k__BackingField = <allowResync>k__BackingField
		self.<timeScaleDeclareSampleRange>k__BackingField = <timeScaleDeclareSampleRange>k__BackingField
		self.<timeScaleDeclareThresholdRatio>k__BackingField = <timeScaleDeclareThresholdRatio>k__BackingField
		self.<timeScaleDeclareReductionMultiplier>k__BackingField = <timeScaleDeclareReductionMultiplier>k__BackingField
		self.<timeScaleDeclareRecoveryThresholdRatio>k__BackingField = <timeScaleDeclareRecoveryThresholdRatio>k__BackingField
		self.<timeScaleDeclareRecoveryMultiplier>k__BackingField = <timeScaleDeclareRecoveryMultiplier>k__BackingField


class NewsBannerMetadata:

    offsets = {'banner': 16, 'bannerPriority': 24, 'showTimer': 28}    
    def __init__(self, banner: System.String, bannerPriority: System.Int32, showTimer: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.banner = banner
		self.bannerPriority = bannerPriority
		self.showTimer = showTimer


class NewsPanel:

    offsets = {'crossPromo': 16, 'dailyChallenge': 20, 'advancedChallenge': 24, 'race': 28, 'odyssey': 32, 'coopChallenge': 36, 'challengeBrowser': 40, 'boss': 44}    
    def __init__(self, crossPromo: System.Int32, dailyChallenge: System.Int32, advancedChallenge: System.Int32, race: System.Int32, odyssey: System.Int32, coopChallenge: System.Int32, challengeBrowser: System.Int32, boss: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.crossPromo = crossPromo
		self.dailyChallenge = dailyChallenge
		self.advancedChallenge = advancedChallenge
		self.race = race
		self.odyssey = odyssey
		self.coopChallenge = coopChallenge
		self.challengeBrowser = challengeBrowser
		self.boss = boss


class NewsPanelBackgroundMetadata:

    offsets = {'newsPanelBackground': 16}    
    def __init__(self, newsPanelBackground: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.newsPanelBackground = newsPanelBackground


class OdysseyData:

    offsets = {'rules': 16, 'name': 24, 'description': 32, 'descriptionLoc': 40, 'descriptionFlavorLoc': 48}    
    def __init__(self, rules: System.Collections.Generic.Dictionary<Assets.Scripts.Models.ServerEvents.OdysseyDifficulty,Assets.Scripts.Models.ServerEvents.Rules>, name: System.String, description: System.String, descriptionLoc: System.String, descriptionFlavorLoc: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.rules = rules
		self.name = name
		self.description = description
		self.descriptionLoc = descriptionLoc
		self.descriptionFlavorLoc = descriptionFlavorLoc


class OdysseyDifficulty:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class OdysseyDifficultyExtensions:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class OdysseyEvent:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class OnlineProfile:

    offsets = {'uploadTimeout': 16, 'refreshTimeout': 24}    
    def __init__(self, uploadTimeout: System.TimeSpan, refreshTimeout: System.TimeSpan, **kwargs):
        super().__init__(self, **kwargs)
		self.uploadTimeout = uploadTimeout
		self.refreshTimeout = refreshTimeout


class PowerData:

    offsets = {'power': 16, 'max': 24}    
    def __init__(self, power: System.String, max: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.power = power
		self.max = max


class Quality:

    offsets = {'renderQuality': 16, 'resolution': 24}    
    def __init__(self, renderQuality: Assets.Scripts.Models.ServerEvents.RenderQualityData, resolution: Assets.Scripts.Models.ServerEvents.ResolutionData, **kwargs):
        super().__init__(self, **kwargs)
		self.renderQuality = renderQuality
		self.resolution = resolution


class QuickMatchSkuSettings:

    offsets = {'<buckets>k__BackingField': 16, 'matchByDeviceSpec': 24}    
    def __init__(self, <buckets>k__BackingField: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.ServerEvents.QuickMatchSkuSettings.Bucket>, matchByDeviceSpec: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.<buckets>k__BackingField = <buckets>k__BackingField
		self.matchByDeviceSpec = matchByDeviceSpec


class Race:

    offsets = {'challenge': 16, 'price': 24, 'waitTime': 28, 'freeEntries': 32, 'rewards': 40, 'detectionThreshold': 48}    
    def __init__(self, challenge: Assets.Scripts.Models.ServerEvents.DailyChallengeModel, price: System.Int32, waitTime: System.Int32, freeEntries: System.Int32, rewards: System.String, detectionThreshold: Assets.Scripts.Models.ServerEvents.BobsUncle, **kwargs):
        super().__init__(self, **kwargs)
		self.challenge = challenge
		self.price = price
		self.waitTime = waitTime
		self.freeEntries = freeEntries
		self.rewards = rewards
		self.detectionThreshold = detectionThreshold


class RaceEvent:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RaceSettings:

    offsets = {'roundSendDelay': 16, 'miniRacePlayers': 20, 'gamesPlayedMM': 24}    
    def __init__(self, roundSendDelay: System.Single, miniRacePlayers: System.Int32, gamesPlayedMM: System.Collections.Generic.Dictionary<System.Int32,System.Int32>, **kwargs):
        super().__init__(self, **kwargs)
		self.roundSendDelay = roundSendDelay
		self.miniRacePlayers = miniRacePlayers
		self.gamesPlayedMM = gamesPlayedMM


class Races:

    offsets = {'settings': 32, 'useLinkLeaderboardsOnly': 40}    
    def __init__(self, settings: Assets.Scripts.Models.ServerEvents.RaceSettings, useLinkLeaderboardsOnly: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.settings = settings
		self.useLinkLeaderboardsOnly = useLinkLeaderboardsOnly


class RandomGenerator:

    offsets = {'maxTowers': 16, 'towerCount': 24, 'chanceForTower': 32, 'chanceForHero': 40, 'bloonSpeed': 48, 'moabSpeed': 56, 'ceramicHealth': 64, 'moabHealth': 72, 'regrowSpeed': 80, 'disableMK': 88, 'disableSelling': 96, 'disablePowers': 104, 'noContinues': 112, 'startLives': 120, 'maxLives': 128, 'startRound': 136, 'endRound': 144, 'startCash': 152, 'noLivesLost': 160, 'allCamo': 168, 'allRegen': 176}    
    def __init__(self, maxTowers: Assets.Scripts.Models.ServerEvents.CEMod, towerCount: Assets.Scripts.Models.ServerEvents.CEMod, chanceForTower: Assets.Scripts.Models.ServerEvents.CEMod, chanceForHero: Assets.Scripts.Models.ServerEvents.CEMod, bloonSpeed: Assets.Scripts.Models.ServerEvents.CEMod, moabSpeed: Assets.Scripts.Models.ServerEvents.CEMod, ceramicHealth: Assets.Scripts.Models.ServerEvents.CEMod, moabHealth: Assets.Scripts.Models.ServerEvents.CEMod, regrowSpeed: Assets.Scripts.Models.ServerEvents.CEMod, disableMK: Assets.Scripts.Models.ServerEvents.CEMod, disableSelling: Assets.Scripts.Models.ServerEvents.CEMod, disablePowers: Assets.Scripts.Models.ServerEvents.CEMod, noContinues: Assets.Scripts.Models.ServerEvents.CEMod, startLives: Assets.Scripts.Models.ServerEvents.CEMod, maxLives: Assets.Scripts.Models.ServerEvents.CEMod, startRound: Assets.Scripts.Models.ServerEvents.CEMod, endRound: Assets.Scripts.Models.ServerEvents.CEMod, startCash: Assets.Scripts.Models.ServerEvents.CEMod, noLivesLost: Assets.Scripts.Models.ServerEvents.CEMod, allCamo: Assets.Scripts.Models.ServerEvents.CEMod, allRegen: Assets.Scripts.Models.ServerEvents.CEMod, **kwargs):
        super().__init__(self, **kwargs)
		self.maxTowers = maxTowers
		self.towerCount = towerCount
		self.chanceForTower = chanceForTower
		self.chanceForHero = chanceForHero
		self.bloonSpeed = bloonSpeed
		self.moabSpeed = moabSpeed
		self.ceramicHealth = ceramicHealth
		self.moabHealth = moabHealth
		self.regrowSpeed = regrowSpeed
		self.disableMK = disableMK
		self.disableSelling = disableSelling
		self.disablePowers = disablePowers
		self.noContinues = noContinues
		self.startLives = startLives
		self.maxLives = maxLives
		self.startRound = startRound
		self.endRound = endRound
		self.startCash = startCash
		self.noLivesLost = noLivesLost
		self.allCamo = allCamo
		self.allRegen = allRegen


class RemoteDataServerEvent:

    offsets = {'dataId': 48}    
    def __init__(self, dataId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.dataId = dataId


class RenderQualityData:

    offsets = {'high': 16, 'low': 24}    
    def __init__(self, high: System.Collections.Generic.List<System.Collections.Generic.List<System.String>>, low: System.Collections.Generic.List<System.Collections.Generic.List<System.String>>, **kwargs):
        super().__init__(self, **kwargs)
		self.high = high
		self.low = low


class ResolutionData:

    offsets = {'half': 16, 'quarter': 24}    
    def __init__(self, half: System.Collections.Generic.List<System.Collections.Generic.List<System.String>>, quarter: System.Collections.Generic.List<System.Collections.Generic.List<System.String>>, **kwargs):
        super().__init__(self, **kwargs)
		self.half = half
		self.quarter = quarter


class RestrictedPathTierValue:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class Restrictions:

    offsets = {'endRound': 16, 'bloonSpeed': 24, 'moabSpeed': 32, 'ceramicHealth': 40, 'moabHealth': 48, 'regrowSpeed': 56, 'startLives': 64, 'maxLives': 72, 'cash': 80}    
    def __init__(self, endRound: Assets.Scripts.Models.ServerEvents.CEMod, bloonSpeed: Assets.Scripts.Models.ServerEvents.CEMod, moabSpeed: Assets.Scripts.Models.ServerEvents.CEMod, ceramicHealth: Assets.Scripts.Models.ServerEvents.CEMod, moabHealth: Assets.Scripts.Models.ServerEvents.CEMod, regrowSpeed: Assets.Scripts.Models.ServerEvents.CEMod, startLives: Assets.Scripts.Models.ServerEvents.CEMod, maxLives: Assets.Scripts.Models.ServerEvents.CEMod, cash: Assets.Scripts.Models.ServerEvents.CEMod, **kwargs):
        super().__init__(self, **kwargs)
		self.endRound = endRound
		self.bloonSpeed = bloonSpeed
		self.moabSpeed = moabSpeed
		self.ceramicHealth = ceramicHealth
		self.moabHealth = moabHealth
		self.regrowSpeed = regrowSpeed
		self.startLives = startLives
		self.maxLives = maxLives
		self.cash = cash


class RoundInfo:

    offsets = {'roundNumber': 24, 'addToRound': 28}    
    def __init__(self, roundNumber: System.Int32, addToRound: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.roundNumber = roundNumber
		self.addToRound = addToRound


class RoundInfoSet:

    offsets = {'rounds': 24}    
    def __init__(self, rounds: System.Collections.Generic.List<Assets.Scripts.Models.ServerEvents.RoundInfo>, **kwargs):
        super().__init__(self, **kwargs)
		self.rounds = rounds


class Rules:

    offsets = {'rewards': 16, 'trophies': 24, 'maxMonkeySeats': 28, 'maxPowerSlots': 32, 'maxPowersOnBoat': 36, 'maxMonkeysOnBoat': 48, 'startingHealth': 52, 'isExtreme': 56, 'difficultyEnabled': 57, 'defaultTowers': 64, 'defaultPowers': 72, 'availableTowers': 80, 'availablePowers': 88, 'minStartTowers': 96, 'modifiedCrew': 100}    
    def __init__(self, rewards: System.String, trophies: System.Int32, maxMonkeySeats: System.Int32, maxPowerSlots: System.Int32, maxPowersOnBoat: System.Int32, maxMonkeysOnBoat: System.Int32, startingHealth: System.Int32, isExtreme: System.Boolean, difficultyEnabled: System.Boolean, defaultTowers: System.Collections.Generic.List<Assets.Scripts.Models.ServerEvents.DefaultData>, defaultPowers: System.Collections.Generic.List<Assets.Scripts.Models.ServerEvents.DefaultData>, availableTowers: System.Collections.Generic.List<Assets.Scripts.Models.ServerEvents.TowerData>, availablePowers: System.Collections.Generic.List<Assets.Scripts.Models.ServerEvents.PowerData>, minStartTowers: System.Int32, modifiedCrew: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.rewards = rewards
		self.trophies = trophies
		self.maxMonkeySeats = maxMonkeySeats
		self.maxPowerSlots = maxPowerSlots
		self.maxPowersOnBoat = maxPowersOnBoat
		self.maxMonkeysOnBoat = maxMonkeysOnBoat
		self.startingHealth = startingHealth
		self.isExtreme = isExtreme
		self.difficultyEnabled = difficultyEnabled
		self.defaultTowers = defaultTowers
		self.defaultPowers = defaultPowers
		self.availableTowers = availableTowers
		self.availablePowers = availablePowers
		self.minStartTowers = minStartTowers
		self.modifiedCrew = modifiedCrew


class SaveFile:

    offsets = {'ignoreCorrupted': 16, 'latestCompatibleVersion': 24}    
    def __init__(self, ignoreCorrupted: System.Boolean, latestCompatibleVersion: System.Version, **kwargs):
        super().__init__(self, **kwargs)
		self.ignoreCorrupted = ignoreCorrupted
		self.latestCompatibleVersion = latestCompatibleVersion


class ServerEvent<T>:

    offsets = {'metadata': 0}    
    def __init__(self, metadata: T, **kwargs):
        super().__init__(self, **kwargs)
		self.metadata = metadata


class ServerSettings:

    offsets = {'imageUrlPrefix': 16, 'quality': 24, 'newMapIcon': 32, 'newsPanelPriority': 40, 'dailyResetUTCOffset': 48, 'mkFullRespecCost': 52, 'rateMePopupVersion': 56, 'playSessionCheckPeriodSeconds': 64, 'dataBackupPeriodSeconds': 68, 'coop': 72, 'skuCacheLife': 80, 'saveFile': 88, 'forceQuitOnException': 96, 'heroBoosterLevel': 100, 'mainMenuPriority': 104, 'analytics': 120, 'reportModelHash': 128, 'contentBrowser': 136, 'towerUnlock': 144, 'conflictScreen': 152, 'leaderboards': 160, 'richPresence': 168, 'onlineProfile': 176}    
    def __init__(self, imageUrlPrefix: System.String, quality: Assets.Scripts.Models.ServerEvents.Quality, newMapIcon: System.Collections.Generic.Dictionary<System.String,System.Boolean>, newsPanelPriority: Assets.Scripts.Models.ServerEvents.NewsPanel, dailyResetUTCOffset: System.Int32, mkFullRespecCost: System.Int32, rateMePopupVersion: System.String, playSessionCheckPeriodSeconds: System.Int32, dataBackupPeriodSeconds: System.Int32, coop: Assets.Scripts.Models.ServerEvents.Coop, skuCacheLife: System.TimeSpan, saveFile: Assets.Scripts.Models.ServerEvents.SaveFile, forceQuitOnException: System.Boolean, heroBoosterLevel: System.Int32, mainMenuPriority: Assets.Scripts.Models.ServerEvents.MainMenuPriority, analytics: Assets.Scripts.Models.ServerEvents.AnalyticsSku, reportModelHash: System.Boolean, contentBrowser: Assets.Scripts.Models.ServerEvents.ContentBrowserSettings, towerUnlock: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.Dictionary<Assets.Scripts.Unity.TowerGiftUnlockGoals.TowerUnlockGoalType,System.Int32>>, conflictScreen: Assets.Scripts.Models.EnableFlag, leaderboards: Assets.Scripts.Models.ServerEvents.LeaderboardSettings, richPresence: Assets.Scripts.Models.EnableFlag, onlineProfile: Assets.Scripts.Models.ServerEvents.OnlineProfile, **kwargs):
        super().__init__(self, **kwargs)
		self.imageUrlPrefix = imageUrlPrefix
		self.quality = quality
		self.newMapIcon = newMapIcon
		self.newsPanelPriority = newsPanelPriority
		self.dailyResetUTCOffset = dailyResetUTCOffset
		self.mkFullRespecCost = mkFullRespecCost
		self.rateMePopupVersion = rateMePopupVersion
		self.playSessionCheckPeriodSeconds = playSessionCheckPeriodSeconds
		self.dataBackupPeriodSeconds = dataBackupPeriodSeconds
		self.coop = coop
		self.skuCacheLife = skuCacheLife
		self.saveFile = saveFile
		self.forceQuitOnException = forceQuitOnException
		self.heroBoosterLevel = heroBoosterLevel
		self.mainMenuPriority = mainMenuPriority
		self.analytics = analytics
		self.reportModelHash = reportModelHash
		self.contentBrowser = contentBrowser
		self.towerUnlock = towerUnlock
		self.conflictScreen = conflictScreen
		self.leaderboards = leaderboards
		self.richPresence = richPresence
		self.onlineProfile = onlineProfile


class SliderSettings:

    offsets = {'defaultValue': 16, 'minValue': 20, 'maxValue': 24}    
    def __init__(self, defaultValue: System.Int32, minValue: System.Int32, maxValue: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.defaultValue = defaultValue
		self.minValue = minValue
		self.maxValue = maxValue


class StartRules:

    offsets = {'lives': 16, 'maxLives': 20, 'cash': 24, 'round': 28, 'endRound': 32}    
    def __init__(self, lives: System.Int32, maxLives: System.Int32, cash: System.Int32, round: System.Int32, endRound: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.lives = lives
		self.maxLives = maxLives
		self.cash = cash
		self.round = round
		self.endRound = endRound


class StatsCacheSettings:

    offsets = {'isEnabled': 16, 'cacheLife': 24, 'waitTimeout': 32}    
    def __init__(self, isEnabled: System.Boolean, cacheLife: System.TimeSpan, waitTimeout: System.TimeSpan, **kwargs):
        super().__init__(self, **kwargs)
		self.isEnabled = isEnabled
		self.cacheLife = cacheLife
		self.waitTimeout = waitTimeout


class SwapEventObject:

    offsets = {'display': 32}    
    def __init__(self, display: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.display = display


class SwapEventSprite:

    offsets = {'sprite': 32}    
    def __init__(self, sprite: UnityEngine.Sprite, **kwargs):
        super().__init__(self, **kwargs)
		self.sprite = sprite


class SwapEventTexture:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TabSettings:

    offsets = {'minLikes': 16, 'minWins': 20, 'maxWins': 24, 'minLosses': 28, 'maxLosses': 32, 'minPlays': 36, 'minPlaysUnique': 40, 'minAttempts': 44, 'maxPages': 48, 'minWinRate': 52, 'maxWinRate': 56, 'includeOldVersions': 60, 'morePlaysThanLikes': 61, 'sorting': 64, 'maxAttempts': 72, 'maxLossesUnique': 76, 'minLossesUnique': 80, 'maxWinsUnique': 84, 'minWinsUnique': 88, 'minRestarts': 92, 'maxLikes': 96, 'maxPlays': 100, 'maxPlaysUnique': 104, 'maxRestarts': 108, 'customQuery': 112, 'searchType': 120, 'winRateDisplayType': 124, 'hideCompleted': 128}    
    def __init__(self, minLikes: System.Int32, minWins: System.Int32, maxWins: System.Int32, minLosses: System.Int32, maxLosses: System.Int32, minPlays: System.Int32, minPlaysUnique: System.Int32, minAttempts: System.Int32, maxPages: System.Int32, minWinRate: System.Single, maxWinRate: System.Single, includeOldVersions: System.Boolean, morePlaysThanLikes: System.Boolean, sorting: Assets.Scripts.Models.ServerEvents.TabSettingsSorting, maxAttempts: System.Int32, maxLossesUnique: System.Int32, minLossesUnique: System.Int32, maxWinsUnique: System.Int32, minWinsUnique: System.Int32, minRestarts: System.Int32, maxLikes: System.Int32, maxPlays: System.Int32, maxPlaysUnique: System.Int32, maxRestarts: System.Int32, customQuery: System.String, searchType: Assets.Scripts.Unity.Utils.ElasticSearch.SearchType, winRateDisplayType: Assets.Scripts.Unity.UI_New.ChallengeEditor.WinRateDisplayType, hideCompleted: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.minLikes = minLikes
		self.minWins = minWins
		self.maxWins = maxWins
		self.minLosses = minLosses
		self.maxLosses = maxLosses
		self.minPlays = minPlays
		self.minPlaysUnique = minPlaysUnique
		self.minAttempts = minAttempts
		self.maxPages = maxPages
		self.minWinRate = minWinRate
		self.maxWinRate = maxWinRate
		self.includeOldVersions = includeOldVersions
		self.morePlaysThanLikes = morePlaysThanLikes
		self.sorting = sorting
		self.maxAttempts = maxAttempts
		self.maxLossesUnique = maxLossesUnique
		self.minLossesUnique = minLossesUnique
		self.maxWinsUnique = maxWinsUnique
		self.minWinsUnique = minWinsUnique
		self.minRestarts = minRestarts
		self.maxLikes = maxLikes
		self.maxPlays = maxPlays
		self.maxPlaysUnique = maxPlaysUnique
		self.maxRestarts = maxRestarts
		self.customQuery = customQuery
		self.searchType = searchType
		self.winRateDisplayType = winRateDisplayType
		self.hideCompleted = hideCompleted


class TabSettingsSorting:

    offsets = {'wrWeight': 16, 'likesWeight': 20}    
    def __init__(self, wrWeight: System.Int32, likesWeight: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.wrWeight = wrWeight
		self.likesWeight = likesWeight


class TabSettingsTrending:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ThemableMetadata:

    offsets = {'skin': 16}    
    def __init__(self, skin: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.skin = skin


class TimerSkuSettings:

    offsets = {'maxLobbyWait': 16, 'lobbyStartWait': 24, 'defeatScreenWait': 32, 'idleLobbyExpire': 40, 'mapLoadTimeout': 48, 'rejoinPromptExpire': 56}    
    def __init__(self, maxLobbyWait: System.TimeSpan, lobbyStartWait: System.TimeSpan, defeatScreenWait: System.TimeSpan, idleLobbyExpire: System.TimeSpan, mapLoadTimeout: System.TimeSpan, rejoinPromptExpire: System.TimeSpan, **kwargs):
        super().__init__(self, **kwargs)
		self.maxLobbyWait = maxLobbyWait
		self.lobbyStartWait = lobbyStartWait
		self.defeatScreenWait = defeatScreenWait
		self.idleLobbyExpire = idleLobbyExpire
		self.mapLoadTimeout = mapLoadTimeout
		self.rejoinPromptExpire = rejoinPromptExpire


class TitleSettings:

    offsets = {'maxLength': 16}    
    def __init__(self, maxLength: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.maxLength = maxLength


class TowerData:

    offsets = {'tower': 16, 'max': 24, 'path1NumBlockedTiers': 28, 'path2NumBlockedTiers': 32, 'path3NumBlockedTiers': 36, 'isHero': 40}    
    def __init__(self, tower: System.String, max: System.Int32, path1NumBlockedTiers: System.Int32, path2NumBlockedTiers: System.Int32, path3NumBlockedTiers: System.Int32, isHero: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.tower = tower
		self.max = max
		self.path1NumBlockedTiers = path1NumBlockedTiers
		self.path2NumBlockedTiers = path2NumBlockedTiers
		self.path3NumBlockedTiers = path3NumBlockedTiers
		self.isHero = isHero


class TrophyEvent:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TrophyEventMetadata:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class UnknownEvent:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class UpdatePopupEvent:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class UpdatePopupEventMetadata:

    offsets = {'banner': 16, 'useLocs': 24, 'title': 32, 'description': 40, 'isUpdatePopup': 48}    
    def __init__(self, banner: System.String, useLocs: System.Collections.Generic.Dictionary<System.String,System.Boolean>, title: System.Collections.Generic.Dictionary<System.String,System.String>, description: System.Collections.Generic.Dictionary<System.String,System.String>, isUpdatePopup: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.banner = banner
		self.useLocs = useLocs
		self.title = title
		self.description = description
		self.isUpdatePopup = isUpdatePopup


class WinRewards:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BonusCashPerRoundModel:

    offsets = {'roundMultiple': 48, 'baseCash': 52}    
    def __init__(self, roundMultiple: System.Single, baseCash: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.roundMultiple = roundMultiple
		self.baseCash = baseCash


class ComeOnEverybodyModel:

    offsets = {'discountMultiplier': 48, 'rateMultiplier': 52, 'buffLocsNameRate': 56, 'buffIconNameRate': 64, 'buffLocsNamePrice': 72, 'buffIconNamePrice': 80, 'rateMutator': 88, 'priceMutator': 96}    
    def __init__(self, discountMultiplier: System.Single, rateMultiplier: System.Single, buffLocsNameRate: System.String, buffIconNameRate: System.String, buffLocsNamePrice: System.String, buffIconNamePrice: System.String, rateMutator: Assets.Scripts.Models.SimulationBehaviors.ComeOnEverybodyModel.RateMutatorClass, priceMutator: Assets.Scripts.Models.SimulationBehaviors.ComeOnEverybodyModel.PriceMutatorClass, **kwargs):
        super().__init__(self, **kwargs)
		self.discountMultiplier = discountMultiplier
		self.rateMultiplier = rateMultiplier
		self.buffLocsNameRate = buffLocsNameRate
		self.buffIconNameRate = buffIconNameRate
		self.buffLocsNamePrice = buffLocsNamePrice
		self.buffIconNamePrice = buffIconNamePrice
		self.rateMutator = rateMutator
		self.priceMutator = priceMutator


class CreateTowerActionSimBehaviorModel:

    offsets = {'releaseOriginX': 48, 'releaseOriginY': 52, 'reverseReleaseOriginX': 56, 'reverseReleaseOriginY': 60, 'towerId': 64, 'minDistance': 72, 'maxDistance': 76, 'pointDistance': 80, 'idealDistanceWithinTrack': 84, 'delay': 88, 'delayFrames': 92}    
    def __init__(self, releaseOriginX: System.Single, releaseOriginY: System.Single, reverseReleaseOriginX: System.Single, reverseReleaseOriginY: System.Single, towerId: System.String, minDistance: System.Single, maxDistance: System.Single, pointDistance: System.Single, idealDistanceWithinTrack: System.Single, delay: System.Single, delayFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.releaseOriginX = releaseOriginX
		self.releaseOriginY = releaseOriginY
		self.reverseReleaseOriginX = reverseReleaseOriginX
		self.reverseReleaseOriginY = reverseReleaseOriginY
		self.towerId = towerId
		self.minDistance = minDistance
		self.maxDistance = maxDistance
		self.pointDistance = pointDistance
		self.idealDistanceWithinTrack = idealDistanceWithinTrack
		self.delay = delay
		self.delayFrames = delayFrames


class CrossTheStreamsSimBehaviorModel:

    offsets = {'projectileModel': 48, 'effectModel': 56, 'rateFrames': 64, 'emissionModel': 72, 'positionRandomness': 80, 'endPointOffset': 84}    
    def __init__(self, projectileModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, effectModel: Assets.Scripts.Models.Effects.EffectModel, rateFrames: System.Int32, emissionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel, positionRandomness: System.Single, endPointOffset: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.projectileModel = projectileModel
		self.effectModel = effectModel
		self.rateFrames = rateFrames
		self.emissionModel = emissionModel
		self.positionRandomness = positionRandomness
		self.endPointOffset = endPointOffset


class EmergencyUnlockSimBehaviorModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class FreePowerModel:

    offsets = {'basePowerID': 48, 'charges': 56}    
    def __init__(self, basePowerID: System.String, charges: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.basePowerID = basePowerID
		self.charges = charges


class FreeTowerModel:

    offsets = {'baseTowerID': 48, 'charges': 56}    
    def __init__(self, baseTowerID: System.String, charges: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.baseTowerID = baseTowerID
		self.charges = charges


class HeroXPBonusModel:

    offsets = {'xpBonus': 48}    
    def __init__(self, xpBonus: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.xpBonus = xpBonus


class ImfLoanCollectionModel:

    offsets = {'collectionRate': 48, 'amount': 52}    
    def __init__(self, collectionRate: System.Single, amount: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.collectionRate = collectionRate
		self.amount = amount


class IncreaseBloonWorthSimBehaviorModel:

    offsets = {'cashScale': 48, 'isUnique': 52}    
    def __init__(self, cashScale: System.Single, isUnique: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.cashScale = cashScale
		self.isUnique = isUnique


class MapItemVsProjectileBehaviorModel:

    offsets = {'collisionMarkerX': 48, 'collisionMarkerY': 52, 'collisionRadius': 56, 'projectileChipTag': 64}    
    def __init__(self, collisionMarkerX: System.Single, collisionMarkerY: System.Single, collisionRadius: System.Single, projectileChipTag: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.collisionMarkerX = collisionMarkerX
		self.collisionMarkerY = collisionMarkerY
		self.collisionRadius = collisionRadius
		self.projectileChipTag = projectileChipTag


class PreGamePrepModel:

    offsets = {'projectileModel': 48, 'distFromEdgeOfMap': 56}    
    def __init__(self, projectileModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, distFromEdgeOfMap: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.projectileModel = projectileModel
		self.distFromEdgeOfMap = distFromEdgeOfMap


class SetMaxHealthOfBloonBehaviorModel:

    offsets = {'bloonId': 48, 'healthMultiplier': 56, 'round': 60, 'mutator': 64}    
    def __init__(self, bloonId: System.String, healthMultiplier: System.Single, round: System.Int32, mutator: Assets.Scripts.Models.SimulationBehaviors.SetMaxHealthOfBloonBehaviorModel.SetMaxHealthForBloon, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonId = bloonId
		self.healthMultiplier = healthMultiplier
		self.round = round
		self.mutator = mutator


class ShieldPerRoundModel:

    offsets = {'shieldPerRound': 48}    
    def __init__(self, shieldPerRound: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.shieldPerRound = shieldPerRound


class SimNecromancerGraveyardManagerModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SimPowerDiscountModel:

    offsets = {'multiplier': 56, 'subtraction': 60, 'charges': 64}    
    def __init__(self, multiplier: System.Single, subtraction: System.Single, charges: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.subtraction = subtraction
		self.charges = charges


class SimTowerDiscountModel:

    offsets = {'multiplier': 56, 'subtraction': 60, 'charges': 64}    
    def __init__(self, multiplier: System.Single, subtraction: System.Single, charges: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.subtraction = subtraction
		self.charges = charges


class SimulationBehaviorModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TowerTierRestrictionModel:

    offsets = {'towerBaseId': 48, 'path': 56, 'tier': 60, 'maxCountModifier': 64}    
    def __init__(self, towerBaseId: System.String, path: System.Int32, tier: System.Int32, maxCountModifier: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.towerBaseId = towerBaseId
		self.path = path
		self.tier = tier
		self.maxCountModifier = maxCountModifier


class WingmonkeySimulationModel:

    offsets = {'spacingX': 48, 'spacingY': 52}    
    def __init__(self, spacingX: System.Single, spacingY: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.spacingX = spacingX
		self.spacingY = spacingY


class HeroXPBonusModModel:

    offsets = {'percentMultiplier': 48}    
    def __init__(self, percentMultiplier: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.percentMultiplier = percentMultiplier


class HeroSkinModel:

    offsets = {'heroUnlockedEventSound': 152, 'heroUnlockedVoiceSound': 160}    
    def __init__(self, heroUnlockedEventSound: Assets.Scripts.Models.Audio.SoundModel, heroUnlockedVoiceSound: Assets.Scripts.Models.Audio.SoundModel, **kwargs):
        super().__init__(self, **kwargs)
		self.heroUnlockedEventSound = heroUnlockedEventSound
		self.heroUnlockedVoiceSound = heroUnlockedVoiceSound


class SkinBehaviorModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SkinModel:

    offsets = {'towerBaseId': 48, 'mmCost': 56, 'isDefaultTowerSkin': 60, 'display': 64, 'icon': 72, 'locsKeySkinDescription': 80, 'locsKeySkinName': 88, 'headerImageBackground': 120, 'materialId': 128}    
    def __init__(self, towerBaseId: System.String, mmCost: System.Int32, isDefaultTowerSkin: System.Boolean, display: System.String, icon: Assets.Scripts.Utils.SpriteReference, locsKeySkinDescription: System.String, locsKeySkinName: System.String, headerImageBackground: System.String, materialId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.towerBaseId = towerBaseId
		self.mmCost = mmCost
		self.isDefaultTowerSkin = isDefaultTowerSkin
		self.display = display
		self.icon = icon
		self.locsKeySkinDescription = locsKeySkinDescription
		self.locsKeySkinName = locsKeySkinName
		self.headerImageBackground = headerImageBackground
		self.materialId = materialId


class SwapTowerGraphicModel:

    offsets = {'lodToReplace': 48, 'lodReplacement': 56}    
    def __init__(self, lodToReplace: System.String, lodReplacement: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.lodToReplace = lodToReplace
		self.lodReplacement = lodReplacement


class SwapTowerSoundModel:

    offsets = {'soundToReplace': 48, 'soundReplacement': 56}    
    def __init__(self, soundToReplace: System.String, soundReplacement: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.soundToReplace = soundToReplace
		self.soundReplacement = soundReplacement


class SwapTowerSpriteModel:

    offsets = {'spriteToReplace': 48, 'spriteReplacement': 56}    
    def __init__(self, spriteToReplace: Assets.Scripts.Utils.SpriteReference, spriteReplacement: Assets.Scripts.Utils.SpriteReference, **kwargs):
        super().__init__(self, **kwargs)
		self.spriteToReplace = spriteToReplace
		self.spriteReplacement = spriteReplacement


class LootFrom:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class LootSet:

    offsets = {'activeTower': 40, 'transactionID': 48, 'dontShowRewardsUI': 56, 'unlockUISceneName': 64}    
    def __init__(self, activeTower: System.String, transactionID: System.String, dontShowRewardsUI: System.Boolean, unlockUISceneName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.activeTower = activeTower
		self.transactionID = transactionID
		self.dontShowRewardsUI = dontShowRewardsUI
		self.unlockUISceneName = unlockUISceneName


class AchievementLoot:

    offsets = {'achievementName': 24}    
    def __init__(self, achievementName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.achievementName = achievementName


class BaseLoot:
	serializeSeparator: System.String
    offsets = {'serializeSeparator': 0, 'transactionID': 16}    
    def __init__(self, serializeSeparator: System.String, transactionID: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.serializeSeparator = serializeSeparator
		self.transactionID = transactionID


class BaseQuantityLoot:

    offsets = {'quantity': 24}    
    def __init__(self, quantity: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.quantity = quantity


class BigBloonsModeLoot:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BigTowersModeLoot:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BossBadgeLoot:

    offsets = {'badgeType': 32}    
    def __init__(self, badgeType: Assets.Scripts.Models.Store.Loot.BossBadgeType, **kwargs):
        super().__init__(self, **kwargs)
		self.badgeType = badgeType


class BossBadgeType:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class CollectionEventLoot:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DoubleCashModeLoot:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class FullTowerAndParagonUnlockLoot:

    offsets = {'tower': 24}    
    def __init__(self, tower: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.tower = tower


class FullTowerUnlockLoot:

    offsets = {'tower': 24}    
    def __init__(self, tower: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.tower = tower


class HeroBoosterLoot:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class HeroLoot:

    offsets = {'hero': 24}    
    def __init__(self, hero: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.hero = hero


class HeroSkinLoot:

    offsets = {'hero': 24, 'skin': 32}    
    def __init__(self, hero: System.String, skin: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.hero = hero
		self.skin = skin


class InstaMonkeyLoot:

    offsets = {'baseTower': 32}    
    def __init__(self, baseTower: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.baseTower = baseTower


class InstaMonkeyPacksLoot:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class InstaRankLoot:

    offsets = {'rank': 24}    
    def __init__(self, rank: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.rank = rank


class KnowledgePointsLoot:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MapUnlockKeyLoot:

    offsets = {'keyType': 32}    
    def __init__(self, keyType: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.keyType = keyType


class MonkeyMoneyLoot:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ParagonUnlockLoot:

    offsets = {'tower': 24}    
    def __init__(self, tower: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.tower = tower


class PowerLoot:

    offsets = {'power': 32}    
    def __init__(self, power: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.power = power


class PowersPacksLoot:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RaceBadgeLoot:

    offsets = {'badgeType': 32}    
    def __init__(self, badgeType: Assets.Scripts.Models.Store.Loot.RaceBadgeType, **kwargs):
        super().__init__(self, **kwargs)
		self.badgeType = badgeType


class RaceBadgeType:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class RacesPassLoot:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RandomInstaMonkeyLoot:

    offsets = {'tier': 32, 'fixedBaseTower': 40}    
    def __init__(self, tier: System.Int32, fixedBaseTower: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.tier = tier
		self.fixedBaseTower = fixedBaseTower


class RandomPowerLoot:

    offsets = {'randomPowerType': 32}    
    def __init__(self, randomPowerType: Assets.Scripts.Models.Store.Loot.RandomPowerType, **kwargs):
        super().__init__(self, **kwargs)
		self.randomPowerType = randomPowerType


class RandomPowerType:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class ResetDailyChestLoot:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SmallBloonsModeLoot:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SmallTowersModeLoot:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TowerUnlockLoot:

    offsets = {'baseTowerId': 24, 'showUnlockScreen': 32}    
    def __init__(self, baseTowerId: System.String, showUnlockScreen: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.baseTowerId = baseTowerId
		self.showUnlockScreen = showUnlockScreen


class TowerXPLoot:

    offsets = {'tower': 32}    
    def __init__(self, tower: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.tower = tower


class TrophyLoot:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TrophyStoreItemLoot:

    offsets = {'trophyStoreItemUID': 24}    
    def __init__(self, trophyStoreItemUID: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.trophyStoreItemUID = trophyStoreItemUID


class TSMInfoModel:

    offsets = {'int1': 16, 'bool1': 20, 'float1': 24, 'string1': 32}    
    def __init__(self, int1: System.Int32, bool1: System.Boolean, float1: System.Single, string1: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.int1 = int1
		self.bool1 = bool1
		self.float1 = float1
		self.string1 = string1


class HeroDetailsModel:

    offsets = {'upgradeMax': 80, 'visiblePlayerLevel': 84, 'monkeyMoneyCost': 88, 'newestHero': 92}    
    def __init__(self, upgradeMax: System.Int32, visiblePlayerLevel: System.Int32, monkeyMoneyCost: System.Int32, newestHero: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.upgradeMax = upgradeMax
		self.visiblePlayerLevel = visiblePlayerLevel
		self.monkeyMoneyCost = monkeyMoneyCost
		self.newestHero = newestHero


class ShopTowerDetailsModel:

    offsets = {'pathOneMax': 80, 'pathTwoMax': 84, 'pathThreeMax': 88}    
    def __init__(self, pathOneMax: System.Int32, pathTwoMax: System.Int32, pathThreeMax: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.pathOneMax = pathOneMax
		self.pathTwoMax = pathTwoMax
		self.pathThreeMax = pathThreeMax


class TowerDetailsModel:

    offsets = {'towerId': 48, 'towerIndex': 56, 'towerCount': 60, 'popsRequired': 64}    
    def __init__(self, towerId: System.String, towerIndex: System.Int32, towerCount: System.Int32, popsRequired: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.towerId = towerId
		self.towerIndex = towerIndex
		self.towerCount = towerCount
		self.popsRequired = popsRequired


class ApopalypseModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BloonHealthModel:

    offsets = {'healthMod': 48, 'bloonTag': 56}    
    def __init__(self, healthMod: System.Single, bloonTag: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.healthMod = healthMod
		self.bloonTag = bloonTag


class DeflationModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class LockTowerModModel:

    offsets = {'towerToLock': 48}    
    def __init__(self, towerToLock: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.towerToLock = towerToLock


class LockTowerSetModModel:

    offsets = {'towerSetToLock': 48}    
    def __init__(self, towerSetToLock: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.towerSetToLock = towerSetToLock


class PathTierMaxModModel:

    offsets = {'path': 48, 'tier': 52}    
    def __init__(self, path: System.Int32, tier: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.path = path
		self.tier = tier


class ReverseModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AmbushTechCIData:

    offsets = {'targetImageId': 16, 'targetImageScale': 24, 'helperMessage': 40, 'numberOfPoints': 48, 'abilityId': 52}    
    def __init__(self, targetImageId: System.String, targetImageScale: Assets.Scripts.Simulation.SMath.Vector3, helperMessage: System.String, numberOfPoints: System.Int32, abilityId: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.targetImageId = targetImageId
		self.targetImageScale = targetImageScale
		self.helperMessage = helperMessage
		self.numberOfPoints = numberOfPoints
		self.abilityId = abilityId


class BloodSacrificeCIData:

    offsets = {'validTargetImgId': 16, 'validTowerIds': 24, 'helperMsg': 32, 'helperMsgBanned': 40}    
    def __init__(self, validTargetImgId: System.String, validTowerIds: System.Collections.Generic.List<System.Int32>, helperMsg: System.String, helperMsgBanned: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.validTargetImgId = validTargetImgId
		self.validTowerIds = validTowerIds
		self.helperMsg = helperMsg
		self.helperMsgBanned = helperMsgBanned


class DeployCIData:

    offsets = {'helperMsg': 16, 'towerId': 24, 'towerModelToDeploy': 32}    
    def __init__(self, helperMsg: System.String, towerId: System.Int32, towerModelToDeploy: Assets.Scripts.Models.Towers.TowerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.helperMsg = helperMsg
		self.towerId = towerId
		self.towerModelToDeploy = towerModelToDeploy


class DeployCIResultData:

    offsets = {'towerId': 16, 'position': 20}    
    def __init__(self, towerId: System.Int32, position: Assets.Scripts.Simulation.SMath.Vector2, **kwargs):
        super().__init__(self, **kwargs)
		self.towerId = towerId
		self.position = position


class DoorGunnerCIData:

    offsets = {'validTargetImgId': 16, 'validTowerIds': 24, 'helperMsg': 32, 'helperMsgBanned': 40}    
    def __init__(self, validTargetImgId: System.String, validTowerIds: System.Collections.Generic.List<System.Int32>, helperMsg: System.String, helperMsgBanned: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.validTargetImgId = validTargetImgId
		self.validTowerIds = validTowerIds
		self.helperMsg = helperMsg
		self.helperMsgBanned = helperMsgBanned


class DoorGunnerCIResultData:

    offsets = {'towerId': 16, 'position': 20}    
    def __init__(self, towerId: System.Int32, position: Assets.Scripts.Simulation.SMath.Vector2, **kwargs):
        super().__init__(self, **kwargs)
		self.towerId = towerId
		self.position = position


class OverclockCIData:

    offsets = {'validTargetImgId': 16, 'validTowerIds': 24, 'helperMsg': 32, 'helperMsgBanned': 40}    
    def __init__(self, validTargetImgId: System.String, validTowerIds: System.Collections.Generic.List<System.Int32>, helperMsg: System.String, helperMsgBanned: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.validTargetImgId = validTargetImgId
		self.validTowerIds = validTowerIds
		self.helperMsg = helperMsg
		self.helperMsgBanned = helperMsgBanned


class PowerType:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RedeployCIData:

    offsets = {'validTargetImgId': 16, 'validTowerIds': 24, 'helperMsg': 32, 'helperMsgBanned': 40}    
    def __init__(self, validTargetImgId: System.String, validTowerIds: System.Collections.Generic.List<System.Int32>, helperMsg: System.String, helperMsgBanned: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.validTargetImgId = validTargetImgId
		self.validTowerIds = validTowerIds
		self.helperMsg = helperMsg
		self.helperMsgBanned = helperMsgBanned


class RedeployCIResultData:

    offsets = {'towerId': 16, 'position': 20}    
    def __init__(self, towerId: System.Int32, position: Assets.Scripts.Simulation.SMath.Vector2, **kwargs):
        super().__init__(self, **kwargs)
		self.towerId = towerId
		self.position = position


class RepositionTowerCIData:

    offsets = {'placementZoneAssetId': 16, 'placementZoneAssetScale': 24, 'towerId': 28, 'helperMsg': 32, 'restrictPlacementRadius': 40}    
    def __init__(self, placementZoneAssetId: System.String, placementZoneAssetScale: System.Single, towerId: System.Int32, helperMsg: System.String, restrictPlacementRadius: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.placementZoneAssetId = placementZoneAssetId
		self.placementZoneAssetScale = placementZoneAssetScale
		self.towerId = towerId
		self.helperMsg = helperMsg
		self.restrictPlacementRadius = restrictPlacementRadius


class RepositionTowerCIResultData:

    offsets = {'position': 16}    
    def __init__(self, position: Assets.Scripts.Simulation.SMath.Vector2, **kwargs):
        super().__init__(self, **kwargs)
		self.position = position


class SelectTargetCIData:

    offsets = {'targetImageId': 16, 'targetImageScale': 24, 'helperMessage': 40, 'numberOfPoints': 48, 'previousTargetPosition': 52}    
    def __init__(self, targetImageId: System.String, targetImageScale: Assets.Scripts.Simulation.SMath.Vector3, helperMessage: System.String, numberOfPoints: System.Int32, previousTargetPosition: Assets.Scripts.Utils.Optional<Assets.Scripts.Simulation.SMath.Vector2>, **kwargs):
        super().__init__(self, **kwargs)
		self.targetImageId = targetImageId
		self.targetImageScale = targetImageScale
		self.helperMessage = helperMessage
		self.numberOfPoints = numberOfPoints
		self.previousTargetPosition = previousTargetPosition


class TargetType:
	none: Assets.Scripts.Models.Towers.TargetType
    offsets = {'none': 0, 'first': 16, 'last': 32, 'close': 48, 'far': 64, 'strong': 80, 'strongExceptMoab': 96, 'random': 112, 'any': 128, 'id': 16, 'isActionable': 24, 'actionOnCreate': 25, 'intID': 28}    
    def __init__(self, none: Assets.Scripts.Models.Towers.TargetType, first: Assets.Scripts.Models.Towers.TargetType, last: Assets.Scripts.Models.Towers.TargetType, close: Assets.Scripts.Models.Towers.TargetType, far: Assets.Scripts.Models.Towers.TargetType, strong: Assets.Scripts.Models.Towers.TargetType, strongExceptMoab: Assets.Scripts.Models.Towers.TargetType, random: Assets.Scripts.Models.Towers.TargetType, any: Assets.Scripts.Models.Towers.TargetType, id: System.String, isActionable: System.Boolean, actionOnCreate: System.Boolean, intID: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.none = none
		self.first = first
		self.last = last
		self.close = close
		self.far = far
		self.strong = strong
		self.strongExceptMoab = strongExceptMoab
		self.random = random
		self.any = any
		self.id = id
		self.isActionable = isActionable
		self.actionOnCreate = actionOnCreate
		self.intID = intID


class TechBotCIData:

    offsets = {'validTargetImgId': 16, 'validTowerIds': 24, 'alreadylinkedIds': 32, 'noAbilityIds': 40, 'baseHelperMsg': 48, 'alreadyLinkedMsg': 56, 'noAbilityMsg': 64, 'cantLinkMsg': 72, 'noTowersMsg': 80}    
    def __init__(self, validTargetImgId: System.String, validTowerIds: System.Collections.Generic.List<System.Int32>, alreadylinkedIds: System.Collections.Generic.List<System.Int32>, noAbilityIds: System.Collections.Generic.List<System.Int32>, baseHelperMsg: System.String, alreadyLinkedMsg: System.String, noAbilityMsg: System.String, cantLinkMsg: System.String, noTowersMsg: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.validTargetImgId = validTargetImgId
		self.validTowerIds = validTowerIds
		self.alreadylinkedIds = alreadylinkedIds
		self.noAbilityIds = noAbilityIds
		self.baseHelperMsg = baseHelperMsg
		self.alreadyLinkedMsg = alreadyLinkedMsg
		self.noAbilityMsg = noAbilityMsg
		self.cantLinkMsg = cantLinkMsg
		self.noTowersMsg = noTowersMsg


class TowerBehaviorModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TowerModel:

    offsets = {'display': 48, 'baseId': 56, 'cost': 64, 'radius': 68, 'radiusSquared': 72, 'range': 76, 'ignoreBlockers': 80, 'isGlobalRange': 81, 'tier': 84, 'towerSet': 96, 'icon': 112, 'portrait': 120, 'instaIcon': 128, 'ignoreTowerForSelection': 144, 'footprint': 160, 'dontDisplayUpgrades': 168, 'emoteSpriteSmall': 176, 'emoteSpriteLarge': 184, 'doesntRotate': 192, 'paragonUpgrade': 224, 'isSubTower': 232, 'isBakable': 233, 'powerName': 240, 'showPowerTowerBuffs': 248, 'animationSpeed': 252, 'towerSelectionMenuThemeId': 256, 'ignoreCoopAreas': 264, 'canAlwaysBeSold': 265, 'isParagon': 266, 'towerSize': 268, 'cachedThrowMarkerHeight': 272}    
    def __init__(self, display: System.String, baseId: System.String, cost: System.Single, radius: System.Single, radiusSquared: System.Single, range: System.Single, ignoreBlockers: System.Boolean, isGlobalRange: System.Boolean, tier: System.Int32, towerSet: System.String, icon: Assets.Scripts.Utils.SpriteReference, portrait: Assets.Scripts.Utils.SpriteReference, instaIcon: Assets.Scripts.Utils.SpriteReference, ignoreTowerForSelection: System.Boolean, footprint: Assets.Scripts.Models.Towers.Behaviors.FootprintModel, dontDisplayUpgrades: System.Boolean, emoteSpriteSmall: Assets.Scripts.Utils.SpriteReference, emoteSpriteLarge: Assets.Scripts.Utils.SpriteReference, doesntRotate: System.Boolean, paragonUpgrade: Assets.Scripts.Models.Towers.Upgrades.UpgradePathModel, isSubTower: System.Boolean, isBakable: System.Boolean, powerName: System.String, showPowerTowerBuffs: System.Boolean, animationSpeed: System.Single, towerSelectionMenuThemeId: System.String, ignoreCoopAreas: System.Boolean, canAlwaysBeSold: System.Boolean, isParagon: System.Boolean, towerSize: Assets.Scripts.Models.Towers.TowerModel.TowerSize, cachedThrowMarkerHeight: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.display = display
		self.baseId = baseId
		self.cost = cost
		self.radius = radius
		self.radiusSquared = radiusSquared
		self.range = range
		self.ignoreBlockers = ignoreBlockers
		self.isGlobalRange = isGlobalRange
		self.tier = tier
		self.towerSet = towerSet
		self.icon = icon
		self.portrait = portrait
		self.instaIcon = instaIcon
		self.ignoreTowerForSelection = ignoreTowerForSelection
		self.footprint = footprint
		self.dontDisplayUpgrades = dontDisplayUpgrades
		self.emoteSpriteSmall = emoteSpriteSmall
		self.emoteSpriteLarge = emoteSpriteLarge
		self.doesntRotate = doesntRotate
		self.paragonUpgrade = paragonUpgrade
		self.isSubTower = isSubTower
		self.isBakable = isBakable
		self.powerName = powerName
		self.showPowerTowerBuffs = showPowerTowerBuffs
		self.animationSpeed = animationSpeed
		self.towerSelectionMenuThemeId = towerSelectionMenuThemeId
		self.ignoreCoopAreas = ignoreCoopAreas
		self.canAlwaysBeSold = canAlwaysBeSold
		self.isParagon = isParagon
		self.towerSize = towerSize
		self.cachedThrowMarkerHeight = cachedThrowMarkerHeight


class TowerType:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AbilityCooldownScaleSupportModel:

    offsets = {'isUnique': 96, 'abilityCooldownSpeedScale': 100, 'affectsOnlyWater': 104, 'mutatorPriority': 108}    
    def __init__(self, isUnique: System.Boolean, abilityCooldownSpeedScale: System.Single, affectsOnlyWater: System.Boolean, mutatorPriority: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.isUnique = isUnique
		self.abilityCooldownSpeedScale = abilityCooldownSpeedScale
		self.affectsOnlyWater = affectsOnlyWater
		self.mutatorPriority = mutatorPriority


class AcademyTowerMutatorGroupModel:

    offsets = {'cost': 56, 'towerBaseId': 64}    
    def __init__(self, cost: System.Int32, towerBaseId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.cost = cost
		self.towerBaseId = towerBaseId


class AcidicMixtureCheckModel:

    offsets = {'maxCount': 48, 'mutationId': 56}    
    def __init__(self, maxCount: System.Int32, mutationId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.maxCount = maxCount
		self.mutationId = mutationId


class ActivateAbilityAfterIntervalModel:

    offsets = {'abilityModel': 48, 'interval': 56, 'intervalFrames': 60}    
    def __init__(self, abilityModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.AbilityModel, interval: System.Single, intervalFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.abilityModel = abilityModel
		self.interval = interval
		self.intervalFrames = intervalFrames


class ActivateAbilityOnRoundStartModel:

    offsets = {'abilityModel': 48}    
    def __init__(self, abilityModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.AbilityModel, **kwargs):
        super().__init__(self, **kwargs)
		self.abilityModel = abilityModel


class AddBehaviorToBloonInZoneModel:

    offsets = {'zoneRadius': 48, 'mutationId': 56, 'isUnique': 64, 'overlays': 88, 'overlayLayer': 96, '_mutator': 104}    
    def __init__(self, zoneRadius: System.Single, mutationId: System.String, isUnique: System.Boolean, overlays: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Effects.AssetPathModel>, overlayLayer: System.Int32, _mutator: Assets.Scripts.Simulation.Objects.BehaviorMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.zoneRadius = zoneRadius
		self.mutationId = mutationId
		self.isUnique = isUnique
		self.overlays = overlays
		self.overlayLayer = overlayLayer
		self._mutator = _mutator


class AddBehaviorToTowerSupportModel:

    offsets = {'mutationId': 104}    
    def __init__(self, mutationId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.mutationId = mutationId


class AddMakeshiftAreaModel:

    offsets = {'newAreaType': 56, 'renderHeightOffset': 88, 'ignoreZAxisTowerCollision': 92, 'destroyTowersOnAreaWhenSold': 93}    
    def __init__(self, newAreaType: Assets.Scripts.Models.Map.AreaType, renderHeightOffset: System.Single, ignoreZAxisTowerCollision: System.Boolean, destroyTowersOnAreaWhenSold: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.newAreaType = newAreaType
		self.renderHeightOffset = renderHeightOffset
		self.ignoreZAxisTowerCollision = ignoreZAxisTowerCollision
		self.destroyTowersOnAreaWhenSold = destroyTowersOnAreaWhenSold


class AdoraSunGodTransformationModel:

    offsets = {'newDisplayPath': 48, 'damageBonus': 56, 'pierceBonus': 60, 'upgradeAnimation': 64, 'weaponDelay': 68, 'weaponDelayFrames': 72, 'effectModel': 80, 'portraitRef': 88, 'newDisplayDarkPath': 96, 'projectileDisplayDarkPath': 104, 'bolDisplayDarkPath': 112, 'bolProjectileDisplayDarkPath': 120, 'laolProjectileDisplayDarkPath': 128, 'effectDarkModel': 136, 'portraitDarkRef': 144, 'beamHitDisplayDarkPath': 152, 'upgradeAnimationDarkPath': 160, 'longArmOfLightBehaviorModel': 168, 'ballOfLightModel': 176, 'adoraTransformSoundModel': 184, 'regularMutator': 192, 'darkMutator': 200}    
    def __init__(self, newDisplayPath: Assets.Scripts.Models.Effects.AssetPathModel, damageBonus: System.Int32, pierceBonus: System.Int32, upgradeAnimation: System.Int32, weaponDelay: System.Single, weaponDelayFrames: System.Int32, effectModel: Assets.Scripts.Models.Effects.EffectModel, portraitRef: Assets.Scripts.Utils.SpriteReference, newDisplayDarkPath: Assets.Scripts.Models.Effects.AssetPathModel, projectileDisplayDarkPath: Assets.Scripts.Models.Effects.AssetPathModel, bolDisplayDarkPath: Assets.Scripts.Models.Effects.AssetPathModel, bolProjectileDisplayDarkPath: Assets.Scripts.Models.Effects.AssetPathModel, laolProjectileDisplayDarkPath: Assets.Scripts.Models.Effects.AssetPathModel, effectDarkModel: Assets.Scripts.Models.Effects.EffectModel, portraitDarkRef: Assets.Scripts.Utils.SpriteReference, beamHitDisplayDarkPath: Assets.Scripts.Models.Effects.AssetPathModel, upgradeAnimationDarkPath: System.Int32, longArmOfLightBehaviorModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.LongArmOfLightModel, ballOfLightModel: Assets.Scripts.Models.Towers.TowerModel, adoraTransformSoundModel: Assets.Scripts.Models.Towers.Behaviors.AdoraTransformSoundModel, regularMutator: Assets.Scripts.Models.Towers.Behaviors.AdoraSunGodTransformationModel.Mutator, darkMutator: Assets.Scripts.Models.Towers.Behaviors.AdoraSunGodTransformationModel.DarkMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.newDisplayPath = newDisplayPath
		self.damageBonus = damageBonus
		self.pierceBonus = pierceBonus
		self.upgradeAnimation = upgradeAnimation
		self.weaponDelay = weaponDelay
		self.weaponDelayFrames = weaponDelayFrames
		self.effectModel = effectModel
		self.portraitRef = portraitRef
		self.newDisplayDarkPath = newDisplayDarkPath
		self.projectileDisplayDarkPath = projectileDisplayDarkPath
		self.bolDisplayDarkPath = bolDisplayDarkPath
		self.bolProjectileDisplayDarkPath = bolProjectileDisplayDarkPath
		self.laolProjectileDisplayDarkPath = laolProjectileDisplayDarkPath
		self.effectDarkModel = effectDarkModel
		self.portraitDarkRef = portraitDarkRef
		self.beamHitDisplayDarkPath = beamHitDisplayDarkPath
		self.upgradeAnimationDarkPath = upgradeAnimationDarkPath
		self.longArmOfLightBehaviorModel = longArmOfLightBehaviorModel
		self.ballOfLightModel = ballOfLightModel
		self.adoraTransformSoundModel = adoraTransformSoundModel
		self.regularMutator = regularMutator
		self.darkMutator = darkMutator


class AdoraTransformSoundModel:

    offsets = {'newSelectSound01': 48, 'newSelectSound02': 56, 'newSelectSound03': 64, 'newSelectSound04': 72, 'newSelectSound05': 80, 'newSelectSound06': 88, 'newSelectAltSound01': 96, 'newSelectAltSound02': 104, 'newLeakSound01': 112, 'newLeakSound02': 120, 'newMoabDestroyedSound01': 128, 'newMoabDestroyedSound02': 136, 'newMoabWarningSound': 144, 'newBfbWarningSound': 152, 'newZomgWarningSound': 160, 'newBadWarningSound': 168, 'newUltimate3Sound': 176, 'newUltimate7Sound': 184, 'newUltimate10Sound': 192, 'transformSound': 200}    
    def __init__(self, newSelectSound01: Assets.Scripts.Models.Audio.SoundModel, newSelectSound02: Assets.Scripts.Models.Audio.SoundModel, newSelectSound03: Assets.Scripts.Models.Audio.SoundModel, newSelectSound04: Assets.Scripts.Models.Audio.SoundModel, newSelectSound05: Assets.Scripts.Models.Audio.SoundModel, newSelectSound06: Assets.Scripts.Models.Audio.SoundModel, newSelectAltSound01: Assets.Scripts.Models.Audio.SoundModel, newSelectAltSound02: Assets.Scripts.Models.Audio.SoundModel, newLeakSound01: Assets.Scripts.Models.Audio.SoundModel, newLeakSound02: Assets.Scripts.Models.Audio.SoundModel, newMoabDestroyedSound01: Assets.Scripts.Models.Audio.SoundModel, newMoabDestroyedSound02: Assets.Scripts.Models.Audio.SoundModel, newMoabWarningSound: Assets.Scripts.Models.Audio.SoundModel, newBfbWarningSound: Assets.Scripts.Models.Audio.SoundModel, newZomgWarningSound: Assets.Scripts.Models.Audio.SoundModel, newBadWarningSound: Assets.Scripts.Models.Audio.SoundModel, newUltimate3Sound: Assets.Scripts.Models.Audio.SoundModel, newUltimate7Sound: Assets.Scripts.Models.Audio.SoundModel, newUltimate10Sound: Assets.Scripts.Models.Audio.SoundModel, transformSound: Assets.Scripts.Models.Audio.SoundModel, **kwargs):
        super().__init__(self, **kwargs)
		self.newSelectSound01 = newSelectSound01
		self.newSelectSound02 = newSelectSound02
		self.newSelectSound03 = newSelectSound03
		self.newSelectSound04 = newSelectSound04
		self.newSelectSound05 = newSelectSound05
		self.newSelectSound06 = newSelectSound06
		self.newSelectAltSound01 = newSelectAltSound01
		self.newSelectAltSound02 = newSelectAltSound02
		self.newLeakSound01 = newLeakSound01
		self.newLeakSound02 = newLeakSound02
		self.newMoabDestroyedSound01 = newMoabDestroyedSound01
		self.newMoabDestroyedSound02 = newMoabDestroyedSound02
		self.newMoabWarningSound = newMoabWarningSound
		self.newBfbWarningSound = newBfbWarningSound
		self.newZomgWarningSound = newZomgWarningSound
		self.newBadWarningSound = newBadWarningSound
		self.newUltimate3Sound = newUltimate3Sound
		self.newUltimate7Sound = newUltimate7Sound
		self.newUltimate10Sound = newUltimate10Sound
		self.transformSound = transformSound


class AirUnitModel:

    offsets = {'display': 56}    
    def __init__(self, display: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.display = display


class AmmoBeltModel:

    offsets = {'startCount': 48, 'maxCount': 52, 'regenRate': 56, 'regenRateFrames': 60}    
    def __init__(self, startCount: System.Int32, maxCount: System.Int32, regenRate: System.Single, regenRateFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.startCount = startCount
		self.maxCount = maxCount
		self.regenRate = regenRate
		self.regenRateFrames = regenRateFrames


class BananaBonusCashZoneModel:

    offsets = {'multiplier': 48}    
    def __init__(self, multiplier: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier


class BananaCashIncreaseSupportModel:

    offsets = {'multiplier': 96, 'mutatorId': 104, 'isUnique': 112, 'useTiers': 113, 'firstPathTier': 116, 'secondPathTier': 120, 'thirdPathTier': 124}    
    def __init__(self, multiplier: System.Single, mutatorId: System.String, isUnique: System.Boolean, useTiers: System.Boolean, firstPathTier: System.Int32, secondPathTier: System.Int32, thirdPathTier: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.mutatorId = mutatorId
		self.isUnique = isUnique
		self.useTiers = useTiers
		self.firstPathTier = firstPathTier
		self.secondPathTier = secondPathTier
		self.thirdPathTier = thirdPathTier


class BananaCentralBuffModel:

    offsets = {'multiplier': 72, 'mutatorId': 80}    
    def __init__(self, multiplier: System.Single, mutatorId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.mutatorId = mutatorId


class BankDepositsModel:

    offsets = {'depositPercent': 48, 'displayPath': 56, 'displayLifetime': 64}    
    def __init__(self, depositPercent: System.Single, displayPath: System.String, displayLifetime: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.depositPercent = depositPercent
		self.displayPath = displayPath
		self.displayLifetime = displayLifetime


class BankModel:

    offsets = {'capacity': 48, 'interest': 52, 'assetId': 56, 'fullBankAssetId': 64, 'lifespan': 72, 'autoCollect': 76, 'collectAnimation': 80}    
    def __init__(self, capacity: System.Single, interest: System.Single, assetId: System.String, fullBankAssetId: System.String, lifespan: System.Single, autoCollect: System.Boolean, collectAnimation: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.capacity = capacity
		self.interest = interest
		self.assetId = assetId
		self.fullBankAssetId = fullBankAssetId
		self.lifespan = lifespan
		self.autoCollect = autoCollect
		self.collectAnimation = collectAnimation


class BaseTowersInRadiusModel:

    offsets = {'towerGroup': 48}    
    def __init__(self, towerGroup: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.towerGroup = towerGroup


class BerserkerBrewCheckModel:

    offsets = {'maxCount': 48, 'mutationId': 56}    
    def __init__(self, maxCount: System.Int32, mutationId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.maxCount = maxCount
		self.mutationId = mutationId


class BonusCashZoneModel:

    offsets = {'multiplier': 48, 'stackName': 56, 'groupName': 64, 'stackLimit': 72}    
    def __init__(self, multiplier: System.Single, stackName: System.String, groupName: System.String, stackLimit: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.stackName = stackName
		self.groupName = groupName
		self.stackLimit = stackLimit


class BonusLivesPerRoundModel:

    offsets = {'amount': 48, 'lifespan': 52, 'assetId': 56}    
    def __init__(self, amount: System.Int32, lifespan: System.Single, assetId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.amount = amount
		self.lifespan = lifespan
		self.assetId = assetId


class CanBuffIndicatorModel:

    offsets = {'isDisabled': 72}    
    def __init__(self, isDisabled: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isDisabled = isDisabled


class CashIncreaseModel:

    offsets = {'increase': 48, 'multiplier': 52}    
    def __init__(self, increase: System.Single, multiplier: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.increase = increase
		self.multiplier = multiplier


class CashbackZoneModel:

    offsets = {'cashbackZoneMultiplier': 48, 'cashbackMaxPercent': 52, 'groupName': 56}    
    def __init__(self, cashbackZoneMultiplier: System.Single, cashbackMaxPercent: System.Single, groupName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.cashbackZoneMultiplier = cashbackZoneMultiplier
		self.cashbackMaxPercent = cashbackMaxPercent
		self.groupName = groupName


class CentralMarketBuffModel:

    offsets = {'multiplier': 72, 'mutatorId': 80, 'maxStackCount': 88}    
    def __init__(self, multiplier: System.Single, mutatorId: System.String, maxStackCount: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.mutatorId = mutatorId
		self.maxStackCount = maxStackCount


class ChurchillBaseRotationModel:

    offsets = {'rotationSpeed': 48, 'animationMovingClockwise': 52, 'animationMovingAntiClockwise': 56, 'animationStateNotMoving': 60}    
    def __init__(self, rotationSpeed: System.Single, animationMovingClockwise: System.Int32, animationMovingAntiClockwise: System.Int32, animationStateNotMoving: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.rotationSpeed = rotationSpeed
		self.animationMovingClockwise = animationMovingClockwise
		self.animationMovingAntiClockwise = animationMovingAntiClockwise
		self.animationStateNotMoving = animationStateNotMoving


class CircleFootprintModel:

    offsets = {'radius': 56}    
    def __init__(self, radius: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.radius = radius


class CircleMovementModel:

    offsets = {'radius': 48, 'speed': 52}    
    def __init__(self, radius: System.Single, speed: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.radius = radius
		self.speed = speed


class CollectCashZoneModel:

    offsets = {'attractRange': 48, 'collectRange': 52, 'speed': 56, 'towerFilter': 64, 'useTowerRange': 72}    
    def __init__(self, attractRange: System.Single, collectRange: System.Single, speed: System.Single, towerFilter: System.String, useTowerRange: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.attractRange = attractRange
		self.collectRange = collectRange
		self.speed = speed
		self.towerFilter = towerFilter
		self.useTowerRange = useTowerRange


class CollectCreatedProjectileModel:

    offsets = {'projectileId': 48}    
    def __init__(self, projectileId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.projectileId = projectileId


class ComancheDefenceModel:

    offsets = {'towerModel': 48, 'reinforcementCount': 56, 'durationFrames': 60, 'cooldownFrames': 64, 'maxActivationsPerRound': 68, 'immediate': 72, 'sound': 80}    
    def __init__(self, towerModel: Assets.Scripts.Models.Towers.TowerModel, reinforcementCount: System.Int32, durationFrames: System.Int32, cooldownFrames: System.Int32, maxActivationsPerRound: System.Int32, immediate: System.Boolean, sound: Assets.Scripts.Models.Audio.SoundModel, **kwargs):
        super().__init__(self, **kwargs)
		self.towerModel = towerModel
		self.reinforcementCount = reinforcementCount
		self.durationFrames = durationFrames
		self.cooldownFrames = cooldownFrames
		self.maxActivationsPerRound = maxActivationsPerRound
		self.immediate = immediate
		self.sound = sound


class CreateEffectAfterTimeModel:

    offsets = {'effectModel': 48, 'lifespan': 56, 'lifespanFrames': 60, 'useRoundTime': 64}    
    def __init__(self, effectModel: Assets.Scripts.Models.Effects.EffectModel, lifespan: System.Single, lifespanFrames: System.Int32, useRoundTime: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.effectModel = effectModel
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames
		self.useRoundTime = useRoundTime


class CreateEffectOnAirUnitDestroyModel:

    offsets = {'effectModel': 48, 'rotation': 56, 'scale': 60}    
    def __init__(self, effectModel: Assets.Scripts.Models.Effects.EffectModel, rotation: System.Single, scale: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.effectModel = effectModel
		self.rotation = rotation
		self.scale = scale


class CreateEffectOnAirUnitModel:

    offsets = {'effectModel': 48, 'rotation': 56, 'scale': 60}    
    def __init__(self, effectModel: Assets.Scripts.Models.Effects.EffectModel, rotation: System.Single, scale: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.effectModel = effectModel
		self.rotation = rotation
		self.scale = scale


class CreateEffectOnExpireModel:

    offsets = {'effectModel': 48}    
    def __init__(self, effectModel: Assets.Scripts.Models.Effects.EffectModel, **kwargs):
        super().__init__(self, **kwargs)
		self.effectModel = effectModel


class CreateEffectOnPlaceModel:

    offsets = {'effectModel': 48}    
    def __init__(self, effectModel: Assets.Scripts.Models.Effects.EffectModel, **kwargs):
        super().__init__(self, **kwargs)
		self.effectModel = effectModel


class CreateEffectOnSellModel:

    offsets = {'effectModel': 48}    
    def __init__(self, effectModel: Assets.Scripts.Models.Effects.EffectModel, **kwargs):
        super().__init__(self, **kwargs)
		self.effectModel = effectModel


class CreateEffectOnUpgradeModel:

    offsets = {'effectModel': 48}    
    def __init__(self, effectModel: Assets.Scripts.Models.Effects.EffectModel, **kwargs):
        super().__init__(self, **kwargs)
		self.effectModel = effectModel


class CreateProjectileOnTowerDestroyModel:

    offsets = {'projectileModel': 48, 'emissionModel': 56, 'useTowerRotation': 64, 'setAgeZeroOnSell': 65}    
    def __init__(self, projectileModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, emissionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel, useTowerRotation: System.Boolean, setAgeZeroOnSell: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.projectileModel = projectileModel
		self.emissionModel = emissionModel
		self.useTowerRotation = useTowerRotation
		self.setAgeZeroOnSell = setAgeZeroOnSell


class CreateSoundOnAttachedModel:

    offsets = {'sound': 48, 'altSound': 56}    
    def __init__(self, sound: Assets.Scripts.Models.Audio.SoundModel, altSound: Assets.Scripts.Models.Audio.SoundModel, **kwargs):
        super().__init__(self, **kwargs)
		self.sound = sound
		self.altSound = altSound


class CreateSoundOnBloonEnterTrackModel:

    offsets = {'moabSound': 48, 'bfbSound': 56, 'ddtSound': 64, 'zomgSound': 72, 'badSound': 80}    
    def __init__(self, moabSound: Assets.Scripts.Models.Audio.SoundModel, bfbSound: Assets.Scripts.Models.Audio.SoundModel, ddtSound: Assets.Scripts.Models.Audio.SoundModel, zomgSound: Assets.Scripts.Models.Audio.SoundModel, badSound: Assets.Scripts.Models.Audio.SoundModel, **kwargs):
        super().__init__(self, **kwargs)
		self.moabSound = moabSound
		self.bfbSound = bfbSound
		self.ddtSound = ddtSound
		self.zomgSound = zomgSound
		self.badSound = badSound


class CreateSoundOnBloonLeakModel:

    offsets = {'sound1': 48, 'sound2': 56}    
    def __init__(self, sound1: Assets.Scripts.Models.Audio.SoundModel, sound2: Assets.Scripts.Models.Audio.SoundModel, **kwargs):
        super().__init__(self, **kwargs)
		self.sound1 = sound1
		self.sound2 = sound2


class CreateSoundOnMonkeyMoneyActivatedModel:

    offsets = {'sound': 48}    
    def __init__(self, sound: Assets.Scripts.Models.Audio.SoundModel, **kwargs):
        super().__init__(self, **kwargs)
		self.sound = sound


class CreateSoundOnSelectedModel:

    offsets = {'sound1': 48, 'sound2': 56, 'sound3': 64, 'sound4': 72, 'sound5': 80, 'sound6': 88, 'altSound1': 96, 'altSound2': 104}    
    def __init__(self, sound1: Assets.Scripts.Models.Audio.SoundModel, sound2: Assets.Scripts.Models.Audio.SoundModel, sound3: Assets.Scripts.Models.Audio.SoundModel, sound4: Assets.Scripts.Models.Audio.SoundModel, sound5: Assets.Scripts.Models.Audio.SoundModel, sound6: Assets.Scripts.Models.Audio.SoundModel, altSound1: Assets.Scripts.Models.Audio.SoundModel, altSound2: Assets.Scripts.Models.Audio.SoundModel, **kwargs):
        super().__init__(self, **kwargs)
		self.sound1 = sound1
		self.sound2 = sound2
		self.sound3 = sound3
		self.sound4 = sound4
		self.sound5 = sound5
		self.sound6 = sound6
		self.altSound1 = altSound1
		self.altSound2 = altSound2


class CreateSoundOnSellModel:

    offsets = {'sound': 48}    
    def __init__(self, sound: Assets.Scripts.Models.Audio.SoundModel, **kwargs):
        super().__init__(self, **kwargs)
		self.sound = sound


class CreateSoundOnTowerPlaceModel:

    offsets = {'sound1': 48, 'sound2': 56, 'heroSound1': 64, 'heroSound2': 72}    
    def __init__(self, sound1: Assets.Scripts.Models.Audio.SoundModel, sound2: Assets.Scripts.Models.Audio.SoundModel, heroSound1: Assets.Scripts.Models.Audio.SoundModel, heroSound2: Assets.Scripts.Models.Audio.SoundModel, **kwargs):
        super().__init__(self, **kwargs)
		self.sound1 = sound1
		self.sound2 = sound2
		self.heroSound1 = heroSound1
		self.heroSound2 = heroSound2


class CreateSoundOnUpgradeModel:

    offsets = {'sound': 48, 'sound1': 56, 'sound2': 64, 'sound3': 72, 'sound4': 80, 'sound5': 88, 'sound6': 96, 'sound7': 104, 'sound8': 112}    
    def __init__(self, sound: Assets.Scripts.Models.Audio.SoundModel, sound1: Assets.Scripts.Models.Audio.SoundModel, sound2: Assets.Scripts.Models.Audio.SoundModel, sound3: Assets.Scripts.Models.Audio.SoundModel, sound4: Assets.Scripts.Models.Audio.SoundModel, sound5: Assets.Scripts.Models.Audio.SoundModel, sound6: Assets.Scripts.Models.Audio.SoundModel, sound7: Assets.Scripts.Models.Audio.SoundModel, sound8: Assets.Scripts.Models.Audio.SoundModel, **kwargs):
        super().__init__(self, **kwargs)
		self.sound = sound
		self.sound1 = sound1
		self.sound2 = sound2
		self.sound3 = sound3
		self.sound4 = sound4
		self.sound5 = sound5
		self.sound6 = sound6
		self.sound7 = sound7
		self.sound8 = sound8


class CreditPopsToParentTowerModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DamageBasedAttackSpeedModel:

    offsets = {'damageThreshold': 48, 'increasePerThreshold': 52, 'maxStacks': 56, 'maxTimeInFramesWithoutDamage': 60}    
    def __init__(self, damageThreshold: System.Single, increasePerThreshold: System.Single, maxStacks: System.Int32, maxTimeInFramesWithoutDamage: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.damageThreshold = damageThreshold
		self.increasePerThreshold = increasePerThreshold
		self.maxStacks = maxStacks
		self.maxTimeInFramesWithoutDamage = maxTimeInFramesWithoutDamage


class DamageOverTimeZoneModel:

    offsets = {'behaviorModel': 48, 'range': 56, 'isGlobal': 60, 'filterInvisible': 61, 'onlyAffectOnscreen': 62, 'mutatorId': 64}    
    def __init__(self, behaviorModel: Assets.Scripts.Models.Bloons.Behaviors.DamageOverTimeModel, range: System.Single, isGlobal: System.Boolean, filterInvisible: System.Boolean, onlyAffectOnscreen: System.Boolean, mutatorId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.behaviorModel = behaviorModel
		self.range = range
		self.isGlobal = isGlobal
		self.filterInvisible = filterInvisible
		self.onlyAffectOnscreen = onlyAffectOnscreen
		self.mutatorId = mutatorId


class DamageSupportModel:

    offsets = {'increase': 96, 'mutatorId': 104, 'isUnique': 112}    
    def __init__(self, increase: System.Single, mutatorId: System.String, isUnique: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.increase = increase
		self.mutatorId = mutatorId
		self.isUnique = isUnique


class DamageTypeSupportModel:

    offsets = {'mutatorId': 96, 'immuneBloonProperties': 104, 'isUnique': 108}    
    def __init__(self, mutatorId: System.String, immuneBloonProperties: BloonProperties, isUnique: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.mutatorId = mutatorId
		self.immuneBloonProperties = immuneBloonProperties
		self.isUnique = isUnique


class DartlingMaintainLastPosModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DelayedShutoffModel:

    offsets = {'delay': 48, 'delayFrames': 52, 'shutoffTime': 56, 'shutoffTimeFrames': 60, 'mutator': 64, 'effectModel': 72}    
    def __init__(self, delay: System.Single, delayFrames: System.Int32, shutoffTime: System.Single, shutoffTimeFrames: System.Int32, mutator: Assets.Scripts.Models.Towers.Behaviors.DelayedShutoffModel.ShutoffMutator, effectModel: Assets.Scripts.Models.Effects.EffectModel, **kwargs):
        super().__init__(self, **kwargs)
		self.delay = delay
		self.delayFrames = delayFrames
		self.shutoffTime = shutoffTime
		self.shutoffTimeFrames = shutoffTimeFrames
		self.mutator = mutator
		self.effectModel = effectModel


class DestroyChildTowersOnUpgradeModel:

    offsets = {'towerId': 48}    
    def __init__(self, towerId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.towerId = towerId


class DiscountZoneModel:

    offsets = {'discountMultiplier': 72, 'stackLimit': 76, 'stackName': 80, 'groupName': 88, 'affectSelf': 96, 'tierCap': 100}    
    def __init__(self, discountMultiplier: System.Single, stackLimit: System.Int32, stackName: System.String, groupName: System.String, affectSelf: System.Boolean, tierCap: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.discountMultiplier = discountMultiplier
		self.stackLimit = stackLimit
		self.stackName = stackName
		self.groupName = groupName
		self.affectSelf = affectSelf
		self.tierCap = tierCap


class DroneIdleModel:

    offsets = {'outOfRangeRepositionTime': 48, 'outOfRangeRepositionTimeFrames': 52, 'idleRepositionTimeMin': 56, 'idleRepositionTimeMinFrames': 60, 'idleRepositionTimeMax': 64, 'idleRepositionTimeMaxFrames': 68, 'greenLight': 72, 'redLight': 80, 'blueLight': 88, 'yellowLight': 96, 'purpleLight': 104}    
    def __init__(self, outOfRangeRepositionTime: System.Single, outOfRangeRepositionTimeFrames: System.Int32, idleRepositionTimeMin: System.Single, idleRepositionTimeMinFrames: System.Int32, idleRepositionTimeMax: System.Single, idleRepositionTimeMaxFrames: System.Int32, greenLight: Assets.Scripts.Models.GenericBehaviors.DisplayModel, redLight: Assets.Scripts.Models.GenericBehaviors.DisplayModel, blueLight: Assets.Scripts.Models.GenericBehaviors.DisplayModel, yellowLight: Assets.Scripts.Models.GenericBehaviors.DisplayModel, purpleLight: Assets.Scripts.Models.GenericBehaviors.DisplayModel, **kwargs):
        super().__init__(self, **kwargs)
		self.outOfRangeRepositionTime = outOfRangeRepositionTime
		self.outOfRangeRepositionTimeFrames = outOfRangeRepositionTimeFrames
		self.idleRepositionTimeMin = idleRepositionTimeMin
		self.idleRepositionTimeMinFrames = idleRepositionTimeMinFrames
		self.idleRepositionTimeMax = idleRepositionTimeMax
		self.idleRepositionTimeMaxFrames = idleRepositionTimeMaxFrames
		self.greenLight = greenLight
		self.redLight = redLight
		self.blueLight = blueLight
		self.yellowLight = yellowLight
		self.purpleLight = purpleLight


class DroneSupportModel:

    offsets = {'droneModel': 48, 'count': 56, 'spawnDelay': 60, 'spawnDelayFrames': 64, 'spawnAnimState': 68, 'spawnIndexRotation': 104, 'effectAtSpawn': 112, 'updateTargetType': 120, 'effectOnDisplayChanged': 128, 'createDroneUpgradeEffect': 136, 'ignoreTargetingTime': 140, 'ignoreTargetingFrames': 144}    
    def __init__(self, droneModel: Assets.Scripts.Models.Towers.TowerModel, count: System.Int32, spawnDelay: System.Single, spawnDelayFrames: System.Int32, spawnAnimState: System.Int32, spawnIndexRotation: System.Single, effectAtSpawn: Assets.Scripts.Models.Effects.EffectModel, updateTargetType: System.Boolean, effectOnDisplayChanged: Assets.Scripts.Models.Effects.EffectModel, createDroneUpgradeEffect: System.Boolean, ignoreTargetingTime: System.Single, ignoreTargetingFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.droneModel = droneModel
		self.count = count
		self.spawnDelay = spawnDelay
		self.spawnDelayFrames = spawnDelayFrames
		self.spawnAnimState = spawnAnimState
		self.spawnIndexRotation = spawnIndexRotation
		self.effectAtSpawn = effectAtSpawn
		self.updateTargetType = updateTargetType
		self.effectOnDisplayChanged = effectOnDisplayChanged
		self.createDroneUpgradeEffect = createDroneUpgradeEffect
		self.ignoreTargetingTime = ignoreTargetingTime
		self.ignoreTargetingFrames = ignoreTargetingFrames


class DruidOfWrathBuffModel:

    offsets = {'newPopCount': 48}    
    def __init__(self, newPopCount: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.newPopCount = newPopCount


class DruidVengeanceEffectModel:

    offsets = {'damageModifierWrathModel': 48, 'smallGlowEffectModel': 56, 'mediumGlowEffectModel': 64, 'epicGlowEffectModel': 72, 'defaultProjectilePath': 80, 'weakProjectilePath': 88, 'mediumProjectilePath': 96, 'epicProjectilePath': 104, 'smallGlowEffectStacks': 112, 'mediumGlowEffectStacks': 116, 'epicGlowEffectStacks': 120}    
    def __init__(self, damageModifierWrathModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.DamageModifierWrathModel, smallGlowEffectModel: Assets.Scripts.Models.Effects.EffectModel, mediumGlowEffectModel: Assets.Scripts.Models.Effects.EffectModel, epicGlowEffectModel: Assets.Scripts.Models.Effects.EffectModel, defaultProjectilePath: System.String, weakProjectilePath: System.String, mediumProjectilePath: System.String, epicProjectilePath: System.String, smallGlowEffectStacks: System.Int32, mediumGlowEffectStacks: System.Int32, epicGlowEffectStacks: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.damageModifierWrathModel = damageModifierWrathModel
		self.smallGlowEffectModel = smallGlowEffectModel
		self.mediumGlowEffectModel = mediumGlowEffectModel
		self.epicGlowEffectModel = epicGlowEffectModel
		self.defaultProjectilePath = defaultProjectilePath
		self.weakProjectilePath = weakProjectilePath
		self.mediumProjectilePath = mediumProjectilePath
		self.epicProjectilePath = epicProjectilePath
		self.smallGlowEffectStacks = smallGlowEffectStacks
		self.mediumGlowEffectStacks = mediumGlowEffectStacks
		self.epicGlowEffectStacks = epicGlowEffectStacks


class DynamicDuoModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DynamicDuoRemovalModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class EnergisingTotemAnimStateModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class EnergisingTotemBehaviorModel:

    offsets = {'rounds': 48, 'monkeyMoneyCost': 52}    
    def __init__(self, rounds: System.Int32, monkeyMoneyCost: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.rounds = rounds
		self.monkeyMoneyCost = monkeyMoneyCost


class EziliSupportModel:

    offsets = {'necroPierceMultiplier': 48, 'necroPierceMutator': 56}    
    def __init__(self, necroPierceMultiplier: System.Single, necroPierceMutator: Assets.Scripts.Models.Towers.Behaviors.EziliSupportModel.NecromancerPierceMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.necroPierceMultiplier = necroPierceMultiplier
		self.necroPierceMutator = necroPierceMutator


class FighterMovementModel:

    offsets = {'maxSpeed': 48, 'turningSpeed': 52, 'minDistanceToTargetBeforeFlyover': 56, 'distanceOfFlyover': 60, 'bankAngleMax': 64, 'bankSmoothness': 68, 'rollTotalTime': 72, 'rollRunUpDistance': 76, 'rollTimeBeforeNext': 80, 'rollChancePerSecondPassed': 84, 'loopTotalTime': 88, 'loopRunUpDistance': 92, 'loopTimeBeforeNext': 96, 'loopChancePerSecondPassed': 100, 'loopRadius': 104, 'loopModelScale': 108}    
    def __init__(self, maxSpeed: System.Single, turningSpeed: System.Single, minDistanceToTargetBeforeFlyover: System.Single, distanceOfFlyover: System.Single, bankAngleMax: System.Single, bankSmoothness: System.Single, rollTotalTime: System.Single, rollRunUpDistance: System.Single, rollTimeBeforeNext: System.Single, rollChancePerSecondPassed: System.Single, loopTotalTime: System.Single, loopRunUpDistance: System.Single, loopTimeBeforeNext: System.Single, loopChancePerSecondPassed: System.Single, loopRadius: System.Single, loopModelScale: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.maxSpeed = maxSpeed
		self.turningSpeed = turningSpeed
		self.minDistanceToTargetBeforeFlyover = minDistanceToTargetBeforeFlyover
		self.distanceOfFlyover = distanceOfFlyover
		self.bankAngleMax = bankAngleMax
		self.bankSmoothness = bankSmoothness
		self.rollTotalTime = rollTotalTime
		self.rollRunUpDistance = rollRunUpDistance
		self.rollTimeBeforeNext = rollTimeBeforeNext
		self.rollChancePerSecondPassed = rollChancePerSecondPassed
		self.loopTotalTime = loopTotalTime
		self.loopRunUpDistance = loopRunUpDistance
		self.loopTimeBeforeNext = loopTimeBeforeNext
		self.loopChancePerSecondPassed = loopChancePerSecondPassed
		self.loopRadius = loopRadius
		self.loopModelScale = loopModelScale


class FigureEightMovementModel:

    offsets = {'radius': 48, 'speed': 52}    
    def __init__(self, radius: System.Single, speed: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.radius = radius
		self.speed = speed


class FootprintModel:

    offsets = {'doesntBlockTowerPlacement': 48, 'ignoresPlacementCheck': 49, 'ignoresTowerOverlap': 50}    
    def __init__(self, doesntBlockTowerPlacement: System.Boolean, ignoresPlacementCheck: System.Boolean, ignoresTowerOverlap: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.doesntBlockTowerPlacement = doesntBlockTowerPlacement
		self.ignoresPlacementCheck = ignoresPlacementCheck
		self.ignoresTowerOverlap = ignoresTowerOverlap


class FootprintZoneModel:

    offsets = {'footprintReduction': 96, 'mutatorId': 104, 'isUnique': 112}    
    def __init__(self, footprintReduction: System.Single, mutatorId: System.String, isUnique: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.footprintReduction = footprintReduction
		self.mutatorId = mutatorId
		self.isUnique = isUnique


class FreeUpgradeSupportModel:

    offsets = {'mutatorId': 96, 'upgrade': 104}    
    def __init__(self, mutatorId: System.String, upgrade: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.mutatorId = mutatorId
		self.upgrade = upgrade


class FreezeNearbyWaterModel:

    offsets = {'radius': 48, 'areaHeightOffset': 52, 'freezeAsset': 56}    
    def __init__(self, radius: System.Single, areaHeightOffset: System.Single, freezeAsset: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.radius = radius
		self.areaHeightOffset = areaHeightOffset
		self.freezeAsset = freezeAsset


class GlobalRangeCircleModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class HeliMovementModel:

    offsets = {'maxSpeed': 48, 'rotationSpeed': 52, 'strafeDistance': 56, 'strafeDistanceSquared': 60, 'otherHeliRepulsionRange': 64, 'otherHeliRepulsionRangeSquared': 68, 'movementForceStart': 72, 'movementForceEnd': 76, 'movementForceEndSquared': 80, 'brakeForce': 84, 'otherHeliRepulsonForce': 88, 'slowdownRadiusMax': 92, 'slowdownRadiusMaxSquared': 96, 'slowdownRadiusMin': 100, 'slowdownRadiusMinSquared': 104, 'minVelocityCapScale': 108, 'destinationYOffset': 112, 'tiltAngle': 116}    
    def __init__(self, maxSpeed: System.Single, rotationSpeed: System.Single, strafeDistance: System.Single, strafeDistanceSquared: System.Single, otherHeliRepulsionRange: System.Single, otherHeliRepulsionRangeSquared: System.Single, movementForceStart: System.Single, movementForceEnd: System.Single, movementForceEndSquared: System.Single, brakeForce: System.Single, otherHeliRepulsonForce: System.Single, slowdownRadiusMax: System.Single, slowdownRadiusMaxSquared: System.Single, slowdownRadiusMin: System.Single, slowdownRadiusMinSquared: System.Single, minVelocityCapScale: System.Single, destinationYOffset: System.Single, tiltAngle: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.maxSpeed = maxSpeed
		self.rotationSpeed = rotationSpeed
		self.strafeDistance = strafeDistance
		self.strafeDistanceSquared = strafeDistanceSquared
		self.otherHeliRepulsionRange = otherHeliRepulsionRange
		self.otherHeliRepulsionRangeSquared = otherHeliRepulsionRangeSquared
		self.movementForceStart = movementForceStart
		self.movementForceEnd = movementForceEnd
		self.movementForceEndSquared = movementForceEndSquared
		self.brakeForce = brakeForce
		self.otherHeliRepulsonForce = otherHeliRepulsonForce
		self.slowdownRadiusMax = slowdownRadiusMax
		self.slowdownRadiusMaxSquared = slowdownRadiusMaxSquared
		self.slowdownRadiusMin = slowdownRadiusMin
		self.slowdownRadiusMinSquared = slowdownRadiusMinSquared
		self.minVelocityCapScale = minVelocityCapScale
		self.destinationYOffset = destinationYOffset
		self.tiltAngle = tiltAngle


class HeroModel:

    offsets = {'xpScale': 48, 'costPerXpToLevel': 52}    
    def __init__(self, xpScale: System.Single, costPerXpToLevel: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.xpScale = xpScale
		self.costPerXpToLevel = costPerXpToLevel


class HeroXpPerRoundModel:

    offsets = {'additionalXpPerRound': 48}    
    def __init__(self, additionalXpPerRound: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalXpPerRound = additionalXpPerRound


class HeroXpScaleSupportModel:

    offsets = {'isUnique': 96, 'heroXpScale': 100}    
    def __init__(self, isUnique: System.Boolean, heroXpScale: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.isUnique = isUnique
		self.heroXpScale = heroXpScale


class HexManagerModel:

    offsets = {'hex': 48, 'overlays': 56, 'overlayLayer': 64, 'mutators': 72}    
    def __init__(self, hex: Assets.Scripts.Models.Bloons.Behaviors.HexModel, overlays: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Effects.AssetPathModel>, overlayLayer: System.Int32, mutators: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Models.Towers.Behaviors.HexManagerModel.HexMutator>, **kwargs):
        super().__init__(self, **kwargs)
		self.hex = hex
		self.overlays = overlays
		self.overlayLayer = overlayLayer
		self.mutators = mutators


class IgnoreAllMutatorsTowerModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class IgnoreTowerModel:

    offsets = {'ignoreId': 48}    
    def __init__(self, ignoreId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.ignoreId = ignoreId


class IgnoreTowersBlockerModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class LifeRegenModel:

    offsets = {'regenAmount': 48, 'overRegenAmount': 52, 'lifespan': 56, 'assetId': 64}    
    def __init__(self, regenAmount: System.Single, overRegenAmount: System.Single, lifespan: System.Single, assetId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.regenAmount = regenAmount
		self.overRegenAmount = overRegenAmount
		self.lifespan = lifespan
		self.assetId = assetId


class LinkDisplayScaleToTowerRangeModel:

    offsets = {'displayPath': 48, 'baseTowerRange': 56, 'displayRadius': 60}    
    def __init__(self, displayPath: System.String, baseTowerRange: System.Single, displayRadius: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.displayPath = displayPath
		self.baseTowerRange = baseTowerRange
		self.displayRadius = displayRadius


class LinkProjectileRadiusToTowerRangeModel:

    offsets = {'projectileModel': 48, 'baseTowerRange': 56, 'projectileRadiusOffset': 60, 'displayRadius': 64}    
    def __init__(self, projectileModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, baseTowerRange: System.Single, projectileRadiusOffset: System.Single, displayRadius: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.projectileModel = projectileModel
		self.baseTowerRange = baseTowerRange
		self.projectileRadiusOffset = projectileRadiusOffset
		self.displayRadius = displayRadius


class LoadAlchemistBrewInfoModel:

    offsets = {'addBerserkerBrewToProjectileModel': 48, 'addAcidicMixtureToProjectileModel': 56}    
    def __init__(self, addBerserkerBrewToProjectileModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.AddBerserkerBrewToProjectileModel, addAcidicMixtureToProjectileModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.AddAcidicMixtureToProjectileModel, **kwargs):
        super().__init__(self, **kwargs)
		self.addBerserkerBrewToProjectileModel = addBerserkerBrewToProjectileModel
		self.addAcidicMixtureToProjectileModel = addAcidicMixtureToProjectileModel


class MerchantShipModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MoabShoveZoneModel:

    offsets = {'range': 48, 'moabPushSpeedScaleCap': 52, 'bfbPushSpeedScaleCap': 56, 'zomgPushSpeedScaleCap': 60, 'filterInvisibleModel': 64}    
    def __init__(self, range: System.Single, moabPushSpeedScaleCap: System.Single, bfbPushSpeedScaleCap: System.Single, zomgPushSpeedScaleCap: System.Single, filterInvisibleModel: Assets.Scripts.Models.Towers.Filters.FilterInvisibleModel, **kwargs):
        super().__init__(self, **kwargs)
		self.range = range
		self.moabPushSpeedScaleCap = moabPushSpeedScaleCap
		self.bfbPushSpeedScaleCap = bfbPushSpeedScaleCap
		self.zomgPushSpeedScaleCap = zomgPushSpeedScaleCap
		self.filterInvisibleModel = filterInvisibleModel


class MonkeyCityIncomeSupportModel:

    offsets = {'isUnique': 96, 'incomeModifier': 100}    
    def __init__(self, isUnique: System.Boolean, incomeModifier: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.isUnique = isUnique
		self.incomeModifier = incomeModifier


class MonkeyCityModel:

    offsets = {'roundsTillMultiplier': 48, 'towerId': 56, 'multiplier': 64, 'mutatorId': 72}    
    def __init__(self, roundsTillMultiplier: System.Int32, towerId: System.String, multiplier: System.Single, mutatorId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.roundsTillMultiplier = roundsTillMultiplier
		self.towerId = towerId
		self.multiplier = multiplier
		self.mutatorId = mutatorId


class MonkeyTempleModel:

    offsets = {'towerGroupCount': 48, 'effectModel': 56, 'towerEffectModel': 64, 'heroEffectModel': 72, 'darkTransformSound': 80, 'darkAltTransformSound': 88, 'animation': 96, 'upgradeAnimation': 100, 'weaponDelay': 104, 'weaponDelayFrames': 108, 'templeId': 112, 'checkForThereCanOnlyBeOne': 120, 'transformationEffect': 128, 'theAntiBloonSacrificeEffect': 136, 'legendOfTheNightSacrificeEffect': 144, 'transformationAnimation': 152, 'transformationWeaponDelay': 156, 'heroOverlapYAdjustment': 160, 'tcbooMutator': 168}    
    def __init__(self, towerGroupCount: System.Int32, effectModel: Assets.Scripts.Models.Effects.EffectModel, towerEffectModel: Assets.Scripts.Models.Effects.EffectModel, heroEffectModel: Assets.Scripts.Models.Effects.EffectModel, darkTransformSound: Assets.Scripts.Models.Audio.SoundModel, darkAltTransformSound: Assets.Scripts.Models.Audio.SoundModel, animation: System.Int32, upgradeAnimation: System.Int32, weaponDelay: System.Single, weaponDelayFrames: System.Int32, templeId: System.String, checkForThereCanOnlyBeOne: System.Boolean, transformationEffect: Assets.Scripts.Models.Effects.EffectModel, theAntiBloonSacrificeEffect: Assets.Scripts.Models.Effects.EffectModel, legendOfTheNightSacrificeEffect: Assets.Scripts.Models.Effects.EffectModel, transformationAnimation: System.Int32, transformationWeaponDelay: System.Single, heroOverlapYAdjustment: System.Single, tcbooMutator: Assets.Scripts.Models.Towers.Behaviors.MonkeyTempleModel.TCBOOMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.towerGroupCount = towerGroupCount
		self.effectModel = effectModel
		self.towerEffectModel = towerEffectModel
		self.heroEffectModel = heroEffectModel
		self.darkTransformSound = darkTransformSound
		self.darkAltTransformSound = darkAltTransformSound
		self.animation = animation
		self.upgradeAnimation = upgradeAnimation
		self.weaponDelay = weaponDelay
		self.weaponDelayFrames = weaponDelayFrames
		self.templeId = templeId
		self.checkForThereCanOnlyBeOne = checkForThereCanOnlyBeOne
		self.transformationEffect = transformationEffect
		self.theAntiBloonSacrificeEffect = theAntiBloonSacrificeEffect
		self.legendOfTheNightSacrificeEffect = legendOfTheNightSacrificeEffect
		self.transformationAnimation = transformationAnimation
		self.transformationWeaponDelay = transformationWeaponDelay
		self.heroOverlapYAdjustment = heroOverlapYAdjustment
		self.tcbooMutator = tcbooMutator


class MonkeyopolisModel:

    offsets = {'filterTower': 48, 'valueRequiredForCrate': 56, 'cashFromCrate': 60}    
    def __init__(self, filterTower: System.String, valueRequiredForCrate: System.Int32, cashFromCrate: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.filterTower = filterTower
		self.valueRequiredForCrate = valueRequiredForCrate
		self.cashFromCrate = cashFromCrate


class MonkeyopolisUpgradeCostModel:

    offsets = {'costPerFarm': 48, 'path': 52, 'towerFilter': 56}    
    def __init__(self, costPerFarm: System.Int32, path: System.Int32, towerFilter: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.costPerFarm = costPerFarm
		self.path = path
		self.towerFilter = towerFilter


class MutationImunityTowerModel:

    offsets = {'effectScale': 56, 'durationScale': 60, 'modifyEffectScale': 64, 'modifyDurationScale': 65, 'preventMutation': 66}    
    def __init__(self, effectScale: System.Single, durationScale: System.Single, modifyEffectScale: System.Boolean, modifyDurationScale: System.Boolean, preventMutation: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.effectScale = effectScale
		self.durationScale = durationScale
		self.modifyEffectScale = modifyEffectScale
		self.modifyDurationScale = modifyDurationScale
		self.preventMutation = preventMutation


class NecromancerZoneModel:

    offsets = {'attackUsedForRangeModel': 48}    
    def __init__(self, attackUsedForRangeModel: Assets.Scripts.Models.Towers.Behaviors.Attack.AttackModel, **kwargs):
        super().__init__(self, **kwargs)
		self.attackUsedForRangeModel = attackUsedForRangeModel


class OrbitModel:

    offsets = {'projectile': 48, 'count': 56, 'range': 60}    
    def __init__(self, projectile: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, count: System.Int32, range: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.projectile = projectile
		self.count = count
		self.range = range


class OrbitingTowerModel:

    offsets = {'rotationDegreesPerFrame': 48, 'radius': 52, 'ignoreRotation': 56, 'offset': 60, 'dontUseParentOrigin': 68}    
    def __init__(self, rotationDegreesPerFrame: System.Single, radius: System.Single, ignoreRotation: System.Boolean, offset: Assets.Scripts.Simulation.SMath.Vector2, dontUseParentOrigin: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.rotationDegreesPerFrame = rotationDegreesPerFrame
		self.radius = radius
		self.ignoreRotation = ignoreRotation
		self.offset = offset
		self.dontUseParentOrigin = dontUseParentOrigin


class OverrideCamoDetectionModel:

    offsets = {'detectCamo': 48}    
    def __init__(self, detectCamo: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.detectCamo = detectCamo


class ParagonAssetSwapModel:

    offsets = {'displayToSwap': 48, 'newDisplay': 56, 'displayDegree': 64, 'applyToAllAbove': 68}    
    def __init__(self, displayToSwap: System.String, newDisplay: System.String, displayDegree: System.Int32, applyToAllAbove: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.displayToSwap = displayToSwap
		self.newDisplay = newDisplay
		self.displayDegree = displayDegree
		self.applyToAllAbove = applyToAllAbove


class ParagonTowerModel:
	mutatorId: System.String
    offsets = {'mutatorId': 0, 'effectDuringModel': 56, 'effectAfterInvestmentModel': 64, 'endEffectModel': 72, 'investmentEffectModel': 80, 'investmentEffectTier5Model': 88, 'effectMinScale': 96, 'effectMaxScale': 100, 'investStartScale': 104, 'investEndScale': 108, 'inactiveDuration': 112, 'inactiveDurationFrames': 116, 'endAnimationState': 120, 'effectsStartMovingAt': 124, 'effectsStartMovingAtFrame': 128, 'effectsDontStartMovingAt': 132, 'effectsDontStartMovingAtFrame': 136, 'investmentEffectHeight': 140, 'investmentEffectDestYOffset': 144, 'degreeTextEffectId': 152, 'degreeTextEffectLifespan': 160, 'changeAttackDisplay': 164, 'effectScaleDownTime': 168, 'effectScaleDownTimeFrames': 172, 'investmentEffectExponent': 176}    
    def __init__(self, mutatorId: System.String, effectDuringModel: Assets.Scripts.Models.Effects.EffectModel, effectAfterInvestmentModel: Assets.Scripts.Models.Effects.EffectModel, endEffectModel: Assets.Scripts.Models.Effects.EffectModel, investmentEffectModel: Assets.Scripts.Models.Effects.EffectModel, investmentEffectTier5Model: Assets.Scripts.Models.Effects.EffectModel, effectMinScale: System.Single, effectMaxScale: System.Single, investStartScale: System.Single, investEndScale: System.Single, inactiveDuration: System.Single, inactiveDurationFrames: System.Int32, endAnimationState: System.Int32, effectsStartMovingAt: System.Single, effectsStartMovingAtFrame: System.Int32, effectsDontStartMovingAt: System.Single, effectsDontStartMovingAtFrame: System.Int32, investmentEffectHeight: System.Single, investmentEffectDestYOffset: System.Single, degreeTextEffectId: System.String, degreeTextEffectLifespan: System.Single, changeAttackDisplay: System.Boolean, effectScaleDownTime: System.Single, effectScaleDownTimeFrames: System.Int32, investmentEffectExponent: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.mutatorId = mutatorId
		self.effectDuringModel = effectDuringModel
		self.effectAfterInvestmentModel = effectAfterInvestmentModel
		self.endEffectModel = endEffectModel
		self.investmentEffectModel = investmentEffectModel
		self.investmentEffectTier5Model = investmentEffectTier5Model
		self.effectMinScale = effectMinScale
		self.effectMaxScale = effectMaxScale
		self.investStartScale = investStartScale
		self.investEndScale = investEndScale
		self.inactiveDuration = inactiveDuration
		self.inactiveDurationFrames = inactiveDurationFrames
		self.endAnimationState = endAnimationState
		self.effectsStartMovingAt = effectsStartMovingAt
		self.effectsStartMovingAtFrame = effectsStartMovingAtFrame
		self.effectsDontStartMovingAt = effectsDontStartMovingAt
		self.effectsDontStartMovingAtFrame = effectsDontStartMovingAtFrame
		self.investmentEffectHeight = investmentEffectHeight
		self.investmentEffectDestYOffset = investmentEffectDestYOffset
		self.degreeTextEffectId = degreeTextEffectId
		self.degreeTextEffectLifespan = degreeTextEffectLifespan
		self.changeAttackDisplay = changeAttackDisplay
		self.effectScaleDownTime = effectScaleDownTime
		self.effectScaleDownTimeFrames = effectScaleDownTimeFrames
		self.investmentEffectExponent = investmentEffectExponent


class PathMovementFromScreenCenterModel:

    offsets = {'speed': 48, 'speedFrames': 52, 'ignoreTargetType': 56}    
    def __init__(self, speed: System.Single, speedFrames: System.Single, ignoreTargetType: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.speed = speed
		self.speedFrames = speedFrames
		self.ignoreTargetType = ignoreTargetType


class PathMovementModel:

    offsets = {'speed': 48, 'rotation': 52, 'bankRotation': 56, 'bankRotationMul': 60, 'ignoreTargetType': 64, 'catchUpSpeed': 68, 'takeOffTime': 72, 'takeOffExponent': 76, 'takeOffAnimTime': 80, 'takeOffScale': 84, 'takeOffScaleExponent': 88, 'takeOffPitch': 92, 'takeOffPitchExponent': 96}    
    def __init__(self, speed: System.Single, rotation: System.Single, bankRotation: System.Single, bankRotationMul: System.Single, ignoreTargetType: System.Boolean, catchUpSpeed: System.Single, takeOffTime: System.Single, takeOffExponent: System.Single, takeOffAnimTime: System.Single, takeOffScale: System.Single, takeOffScaleExponent: System.Single, takeOffPitch: System.Single, takeOffPitchExponent: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.speed = speed
		self.rotation = rotation
		self.bankRotation = bankRotation
		self.bankRotationMul = bankRotationMul
		self.ignoreTargetType = ignoreTargetType
		self.catchUpSpeed = catchUpSpeed
		self.takeOffTime = takeOffTime
		self.takeOffExponent = takeOffExponent
		self.takeOffAnimTime = takeOffAnimTime
		self.takeOffScale = takeOffScale
		self.takeOffScaleExponent = takeOffScaleExponent
		self.takeOffPitch = takeOffPitch
		self.takeOffPitchExponent = takeOffPitchExponent


class PerRoundCashBonusTowerModel:

    offsets = {'cashPerRound': 48, 'cashRoundBonusMultiplier': 52, 'lifespan': 56, 'assetId': 64, 'distributeCash': 72}    
    def __init__(self, cashPerRound: System.Single, cashRoundBonusMultiplier: System.Single, lifespan: System.Single, assetId: System.String, distributeCash: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.cashPerRound = cashPerRound
		self.cashRoundBonusMultiplier = cashRoundBonusMultiplier
		self.lifespan = lifespan
		self.assetId = assetId
		self.distributeCash = distributeCash


class PermanentBeserkerBrewModel:

    offsets = {'rangeIncrease': 48, 'rateIncrease': 52, 'damageIncrease': 56, 'pierceIncrease': 60, 'mutatorId': 64, 'priority': 72}    
    def __init__(self, rangeIncrease: System.Single, rateIncrease: System.Single, damageIncrease: System.Single, pierceIncrease: System.Single, mutatorId: System.String, priority: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.rangeIncrease = rangeIncrease
		self.rateIncrease = rateIncrease
		self.damageIncrease = damageIncrease
		self.pierceIncrease = pierceIncrease
		self.mutatorId = mutatorId
		self.priority = priority


class PierceSupportModel:

    offsets = {'pierce': 96, 'mutatorId': 104, 'isUnique': 112}    
    def __init__(self, pierce: System.Single, mutatorId: System.String, isUnique: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.pierce = pierce
		self.mutatorId = mutatorId
		self.isUnique = isUnique


class PlaceAlongTrackModel:

    offsets = {'objectToPlace1Path': 48, 'objectToPlace2Path': 56, 'objectToPlace3Path': 64, 'objectToPlace4Path': 72, 'spacingMin': 88, 'spacingMax': 92, 'scaleMin': 96, 'scaleMax': 100, 'rotationMin': 104, 'rotationMax': 108, 'offsetMin': 112, 'offsetMax': 116}    
    def __init__(self, objectToPlace1Path: System.String, objectToPlace2Path: System.String, objectToPlace3Path: System.String, objectToPlace4Path: System.String, spacingMin: System.Single, spacingMax: System.Single, scaleMin: System.Single, scaleMax: System.Single, rotationMin: System.Single, rotationMax: System.Single, offsetMin: System.Single, offsetMax: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.objectToPlace1Path = objectToPlace1Path
		self.objectToPlace2Path = objectToPlace2Path
		self.objectToPlace3Path = objectToPlace3Path
		self.objectToPlace4Path = objectToPlace4Path
		self.spacingMin = spacingMin
		self.spacingMax = spacingMax
		self.scaleMin = scaleMin
		self.scaleMax = scaleMax
		self.rotationMin = rotationMin
		self.rotationMax = rotationMax
		self.offsetMin = offsetMin
		self.offsetMax = offsetMax


class PlayAnimationIndexModel:

    offsets = {'placeAnimation': 48, 'upgradeAnimation': 52}    
    def __init__(self, placeAnimation: System.Int32, upgradeAnimation: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.placeAnimation = placeAnimation
		self.upgradeAnimation = upgradeAnimation


class PoplustSupportModel:

    offsets = {'mutatorId': 72, 'maxStacks': 80, 'ratePercentIncrease': 84, 'piercePercentIncrease': 88}    
    def __init__(self, mutatorId: System.String, maxStacks: System.Int32, ratePercentIncrease: System.Single, piercePercentIncrease: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.mutatorId = mutatorId
		self.maxStacks = maxStacks
		self.ratePercentIncrease = ratePercentIncrease
		self.piercePercentIncrease = piercePercentIncrease


class PreEmptiveStrikeLauncherModel:

    offsets = {'projectileModel': 48, 'emissionModel': 56, 'throwOffsetX': 64, 'throwOffsetY': 68, 'throwOffsetZ': 72, 'ejectEffectModel': 80, 'animationState': 88}    
    def __init__(self, projectileModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, emissionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel, throwOffsetX: System.Single, throwOffsetY: System.Single, throwOffsetZ: System.Single, ejectEffectModel: Assets.Scripts.Models.Effects.EffectModel, animationState: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.projectileModel = projectileModel
		self.emissionModel = emissionModel
		self.throwOffsetX = throwOffsetX
		self.throwOffsetY = throwOffsetY
		self.throwOffsetZ = throwOffsetZ
		self.ejectEffectModel = ejectEffectModel
		self.animationState = animationState


class PrinceOfDarknessZombieBuffModel:

    offsets = {'damageIncrease': 72, 'distanceMultiplier': 76}    
    def __init__(self, damageIncrease: System.Single, distanceMultiplier: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.damageIncrease = damageIncrease
		self.distanceMultiplier = distanceMultiplier


class ProjectileRadiusSupportModel:

    offsets = {'multiplier': 96, 'isUnique': 112, 'mutatorId': 120}    
    def __init__(self, multiplier: System.Single, isUnique: System.Boolean, mutatorId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.isUnique = isUnique
		self.mutatorId = mutatorId


class ProjectileSpeedSupportModel:

    offsets = {'multiplier': 96, 'mutatorId': 104, 'isUnique': 112}    
    def __init__(self, multiplier: System.Single, mutatorId: System.String, isUnique: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.mutatorId = mutatorId
		self.isUnique = isUnique


class RangeSupportModel:

    offsets = {'multiplier': 96, 'additive': 100, 'mutatorId': 104, 'isUnique': 112}    
    def __init__(self, multiplier: System.Single, additive: System.Single, mutatorId: System.String, isUnique: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.additive = additive
		self.mutatorId = mutatorId
		self.isUnique = isUnique


class RangeUpFromUpgradeModel:

    offsets = {'rangePerUpgrade': 48, 'upgradeTier': 52, 'upgradePath': 56, 'towerBaseId': 64}    
    def __init__(self, rangePerUpgrade: System.Single, upgradeTier: System.Int32, upgradePath: System.Int32, towerBaseId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.rangePerUpgrade = rangePerUpgrade
		self.upgradeTier = upgradeTier
		self.upgradePath = upgradePath
		self.towerBaseId = towerBaseId


class RateSupportBombExpertModel:

    offsets = {'rangeMultiplier': 96, 'pierceMultiplier': 100, 'isUnique': 104}    
    def __init__(self, rangeMultiplier: System.Single, pierceMultiplier: System.Single, isUnique: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.rangeMultiplier = rangeMultiplier
		self.pierceMultiplier = pierceMultiplier
		self.isUnique = isUnique


class RateSupportExplosiveModel:

    offsets = {'multiplier': 96, 'isUnique': 100, 'mutatorId': 104}    
    def __init__(self, multiplier: System.Single, isUnique: System.Boolean, mutatorId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.isUnique = isUnique
		self.mutatorId = mutatorId


class RateSupportModel:

    offsets = {'multiplier': 96, 'isUnique': 100, 'mutatorId': 104, 'priority': 112}    
    def __init__(self, multiplier: System.Single, isUnique: System.Boolean, mutatorId: System.String, priority: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.isUnique = isUnique
		self.mutatorId = mutatorId
		self.priority = priority


class RectangleFootprintModel:

    offsets = {'xWidth': 56, 'yWidth': 60}    
    def __init__(self, xWidth: System.Single, yWidth: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.xWidth = xWidth
		self.yWidth = yWidth


class RemoveMutatorOnUpgradeModel:

    offsets = {'mutatorId': 48, 'firstPath': 56, 'secondPath': 60, 'thirdPath': 64}    
    def __init__(self, mutatorId: System.String, firstPath: System.Int32, secondPath: System.Int32, thirdPath: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.mutatorId = mutatorId
		self.firstPath = firstPath
		self.secondPath = secondPath
		self.thirdPath = thirdPath


class RemovePermaBrewModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RotateToDefaultPositionTowerModel:

    offsets = {'rotation': 48, 'onlyOnReachingTier': 52}    
    def __init__(self, rotation: System.Single, onlyOnReachingTier: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.rotation = rotation
		self.onlyOnReachingTier = onlyOnReachingTier


class SavedSubTowerModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SelfStackingSupportCompoundingModel:

    offsets = {'maxStacks': 72, 'mutatorId': 80}    
    def __init__(self, maxStacks: System.Int32, mutatorId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.maxStacks = maxStacks
		self.mutatorId = mutatorId


class SelfStackingSupportModel:

    offsets = {'maxStacks': 48, 'mutatorId': 56}    
    def __init__(self, maxStacks: System.Int32, mutatorId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.maxStacks = maxStacks
		self.mutatorId = mutatorId


class SellIncreaseZoneModel:

    offsets = {'sellMultiplier': 56, 'stackName': 64}    
    def __init__(self, sellMultiplier: System.Single, stackName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.sellMultiplier = sellMultiplier
		self.stackName = stackName


class SellStackedTowersModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SetHeroLevelOnPlaceModel:

    offsets = {'level': 48}    
    def __init__(self, level: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.level = level


class SetTargetPriorityOnUpgradeModel:

    offsets = {'firstPath': 48, 'secondPath': 52, 'thirdPath': 56, 'targetTypeId': 64}    
    def __init__(self, firstPath: System.Int32, secondPath: System.Int32, thirdPath: System.Int32, targetTypeId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.firstPath = firstPath
		self.secondPath = secondPath
		self.thirdPath = thirdPath
		self.targetTypeId = targetTypeId


class ShowCashIconInsteadModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ShowDisplayForTerrainModel:

    offsets = {'areaType': 48, 'displayAssetName': 56, 'scaleOn': 64, 'scaleOff': 68}    
    def __init__(self, areaType: Assets.Scripts.Models.Map.AreaType, displayAssetName: System.String, scaleOn: System.Single, scaleOff: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.areaType = areaType
		self.displayAssetName = displayAssetName
		self.scaleOn = scaleOn
		self.scaleOff = scaleOff


class SkimBloonsModel:

    offsets = {'skimAmount': 48}    
    def __init__(self, skimAmount: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.skimAmount = skimAmount


class SlowBloonsZoneModel:

    offsets = {'zoneRadius': 48, 'mutationId': 56, 'isUnique': 64, 'speedScale': 80, 'speedChange': 84, 'bindRadiusToTowerRange': 88, 'radiusOffset': 92, 'bloonTag': 96, 'inclusive': 112, '_mutator': 120}    
    def __init__(self, zoneRadius: System.Single, mutationId: System.String, isUnique: System.Boolean, speedScale: System.Single, speedChange: System.Single, bindRadiusToTowerRange: System.Boolean, radiusOffset: System.Single, bloonTag: System.String, inclusive: System.Boolean, _mutator: Assets.Scripts.Simulation.Objects.BehaviorMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.zoneRadius = zoneRadius
		self.mutationId = mutationId
		self.isUnique = isUnique
		self.speedScale = speedScale
		self.speedChange = speedChange
		self.bindRadiusToTowerRange = bindRadiusToTowerRange
		self.radiusOffset = radiusOffset
		self.bloonTag = bloonTag
		self.inclusive = inclusive
		self._mutator = _mutator


class SoulbindManagerModel:

    offsets = {'createEffectOnTowerSold': 48, 'assetId': 56, 'lifespan': 64}    
    def __init__(self, createEffectOnTowerSold: Assets.Scripts.Models.Effects.EffectModel, assetId: System.String, lifespan: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.createEffectOnTowerSold = createEffectOnTowerSold
		self.assetId = assetId
		self.lifespan = lifespan


class SpiritOfTheForestModel:

    offsets = {'objectToPlace1FarPath': 48, 'objectToPlace2FarPath': 56, 'objectToPlace3FarPath': 64, 'objectToPlace4FarPath': 72, 'objectToPlace1MiddlePath': 88, 'objectToPlace2MiddlePath': 96, 'objectToPlace3MiddlePath': 104, 'objectToPlace4MiddlePath': 112, 'objectToPlace1ClosePath': 128, 'objectToPlace2ClosePath': 136, 'objectToPlace3ClosePath': 144, 'objectToPlace4ClosePath': 152, 'damageOverTimeZoneModelFar': 168, 'damageOverTimeZoneModelMiddle': 176, 'damageOverTimeZoneModelClose': 184, 'middleRange': 192, 'closeRange': 196, 'spacingMin': 200, 'spacingMax': 204, 'scaleMin': 208, 'scaleMax': 212, 'rotationMin': 216, 'rotationMax': 220, 'offsetMin': 224, 'offsetMax': 228, 'circleRadius': 232, 'generateRadius': 236, 'time': 240, 'timeFrames': 244, 'amountPerFrame': 248, 'minScale': 252, 'maxScale': 256, 'scaleTime': 260, 'minScaleVector': 264, 'maxScaleVector3': 276}    
    def __init__(self, objectToPlace1FarPath: System.String, objectToPlace2FarPath: System.String, objectToPlace3FarPath: System.String, objectToPlace4FarPath: System.String, objectToPlace1MiddlePath: System.String, objectToPlace2MiddlePath: System.String, objectToPlace3MiddlePath: System.String, objectToPlace4MiddlePath: System.String, objectToPlace1ClosePath: System.String, objectToPlace2ClosePath: System.String, objectToPlace3ClosePath: System.String, objectToPlace4ClosePath: System.String, damageOverTimeZoneModelFar: Assets.Scripts.Models.Towers.Behaviors.DamageOverTimeZoneModel, damageOverTimeZoneModelMiddle: Assets.Scripts.Models.Towers.Behaviors.DamageOverTimeZoneModel, damageOverTimeZoneModelClose: Assets.Scripts.Models.Towers.Behaviors.DamageOverTimeZoneModel, middleRange: System.Single, closeRange: System.Single, spacingMin: System.Single, spacingMax: System.Single, scaleMin: System.Single, scaleMax: System.Single, rotationMin: System.Single, rotationMax: System.Single, offsetMin: System.Single, offsetMax: System.Single, circleRadius: System.Single, generateRadius: System.Single, time: System.Single, timeFrames: System.Int32, amountPerFrame: System.Single, minScale: System.Single, maxScale: System.Single, scaleTime: System.Single, minScaleVector: Assets.Scripts.Simulation.SMath.Vector3, maxScaleVector3: Assets.Scripts.Simulation.SMath.Vector3, **kwargs):
        super().__init__(self, **kwargs)
		self.objectToPlace1FarPath = objectToPlace1FarPath
		self.objectToPlace2FarPath = objectToPlace2FarPath
		self.objectToPlace3FarPath = objectToPlace3FarPath
		self.objectToPlace4FarPath = objectToPlace4FarPath
		self.objectToPlace1MiddlePath = objectToPlace1MiddlePath
		self.objectToPlace2MiddlePath = objectToPlace2MiddlePath
		self.objectToPlace3MiddlePath = objectToPlace3MiddlePath
		self.objectToPlace4MiddlePath = objectToPlace4MiddlePath
		self.objectToPlace1ClosePath = objectToPlace1ClosePath
		self.objectToPlace2ClosePath = objectToPlace2ClosePath
		self.objectToPlace3ClosePath = objectToPlace3ClosePath
		self.objectToPlace4ClosePath = objectToPlace4ClosePath
		self.damageOverTimeZoneModelFar = damageOverTimeZoneModelFar
		self.damageOverTimeZoneModelMiddle = damageOverTimeZoneModelMiddle
		self.damageOverTimeZoneModelClose = damageOverTimeZoneModelClose
		self.middleRange = middleRange
		self.closeRange = closeRange
		self.spacingMin = spacingMin
		self.spacingMax = spacingMax
		self.scaleMin = scaleMin
		self.scaleMax = scaleMax
		self.rotationMin = rotationMin
		self.rotationMax = rotationMax
		self.offsetMin = offsetMin
		self.offsetMax = offsetMax
		self.circleRadius = circleRadius
		self.generateRadius = generateRadius
		self.time = time
		self.timeFrames = timeFrames
		self.amountPerFrame = amountPerFrame
		self.minScale = minScale
		self.maxScale = maxScale
		self.scaleTime = scaleTime
		self.minScaleVector = minScaleVector
		self.maxScaleVector3 = maxScaleVector3


class StaggeredShotsModel:

    offsets = {'filterTower': 48}    
    def __init__(self, filterTower: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.filterTower = filterTower


class StartOfRoundRateBuffModel:

    offsets = {'modifier': 48, 'duration': 52, 'durationFrames': 56, 'mutator': 64}    
    def __init__(self, modifier: System.Single, duration: System.Single, durationFrames: System.Int32, mutator: Assets.Scripts.Models.Towers.Behaviors.StartOfRoundRateBuffModel.RateMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.modifier = modifier
		self.duration = duration
		self.durationFrames = durationFrames
		self.mutator = mutator


class SubCommanderSupportModel:

    offsets = {'isUnique': 96, 'pierceIncrease': 100, 'damageIncrease': 104, 'damageScale': 108}    
    def __init__(self, isUnique: System.Boolean, pierceIncrease: System.Int32, damageIncrease: System.Int32, damageScale: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.isUnique = isUnique
		self.pierceIncrease = pierceIncrease
		self.damageIncrease = damageIncrease
		self.damageScale = damageScale


class SubmergeEffectModel:

    offsets = {'effectModel': 48, 'baseTowerRange': 56, 'projectileModel': 64, 'displayRadius': 72}    
    def __init__(self, effectModel: Assets.Scripts.Models.Effects.EffectModel, baseTowerRange: System.Single, projectileModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, displayRadius: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.effectModel = effectModel
		self.baseTowerRange = baseTowerRange
		self.projectileModel = projectileModel
		self.displayRadius = displayRadius


class SubmergeModel:

    offsets = {'submergeAttackModel': 72, 'abilityCooldownSpeedScale': 80, 'abilityCooldownSpeedScaleGlobal': 84, 'submergeDepth': 88, 'submergeSpeed': 92, 'heroXpScale': 96, 'attackDisplayPath': 104, 'submergeSound': 112, 'emergeSound': 120, 'supportMutatorPriority': 128}    
    def __init__(self, submergeAttackModel: Assets.Scripts.Models.Towers.TowerBehaviorModel, abilityCooldownSpeedScale: System.Single, abilityCooldownSpeedScaleGlobal: System.Single, submergeDepth: System.Single, submergeSpeed: System.Single, heroXpScale: System.Single, attackDisplayPath: System.String, submergeSound: Assets.Scripts.Models.Audio.SoundModel, emergeSound: Assets.Scripts.Models.Audio.SoundModel, supportMutatorPriority: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.submergeAttackModel = submergeAttackModel
		self.abilityCooldownSpeedScale = abilityCooldownSpeedScale
		self.abilityCooldownSpeedScaleGlobal = abilityCooldownSpeedScaleGlobal
		self.submergeDepth = submergeDepth
		self.submergeSpeed = submergeSpeed
		self.heroXpScale = heroXpScale
		self.attackDisplayPath = attackDisplayPath
		self.submergeSound = submergeSound
		self.emergeSound = emergeSound
		self.supportMutatorPriority = supportMutatorPriority


class SupportModel:

    offsets = {'isGlobal': 56, 'isCustomRadius': 57, 'customRadius': 60, 'appliesToOwningTower': 64, 'showBuffIcon': 65, 'buffLocsName': 72, 'buffIconName': 80, 'maxStackSize': 88, 'onlyShowBuffIfMutated': 92}    
    def __init__(self, isGlobal: System.Boolean, isCustomRadius: System.Boolean, customRadius: System.Single, appliesToOwningTower: System.Boolean, showBuffIcon: System.Boolean, buffLocsName: System.String, buffIconName: System.String, maxStackSize: System.Int32, onlyShowBuffIfMutated: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isGlobal = isGlobal
		self.isCustomRadius = isCustomRadius
		self.customRadius = customRadius
		self.appliesToOwningTower = appliesToOwningTower
		self.showBuffIcon = showBuffIcon
		self.buffLocsName = buffLocsName
		self.buffIconName = buffIconName
		self.maxStackSize = maxStackSize
		self.onlyShowBuffIfMutated = onlyShowBuffIfMutated


class SupportRemoveFilterOutTagModel:

    offsets = {'mutatorId': 96, 'removeScriptWithSupportMutatorId': 104}    
    def __init__(self, mutatorId: System.String, removeScriptWithSupportMutatorId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.mutatorId = mutatorId
		self.removeScriptWithSupportMutatorId = removeScriptWithSupportMutatorId


class SupportShinobiTacticsModel:

    offsets = {'multiplier': 96}    
    def __init__(self, multiplier: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier


class SupportTowerPlacementZoneModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SwitchTargetSupplierOnUpgradeModel:

    offsets = {'targetSupplierName': 48}    
    def __init__(self, targetSupplierName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.targetSupplierName = targetSupplierName


class SyncTargetPriorityWithSubTowersModel:

    offsets = {'isSelectable': 48}    
    def __init__(self, isSelectable: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable


class SyphonModel:

    offsets = {'mutationId': 48, 'multiplier': 56, 'charges': 60, 'lifespan': 64, 'lifespanFrames': 68, 'overlays': 80, 'overlayLayer': 88, 'bloonWorthMutator': 96}    
    def __init__(self, mutationId: System.String, multiplier: System.Single, charges: System.Int32, lifespan: System.Single, lifespanFrames: System.Int32, overlays: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Effects.AssetPathModel>, overlayLayer: System.Int32, bloonWorthMutator: Assets.Scripts.Models.Towers.Behaviors.SyphonModel.BloonWorthMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.mutationId = mutationId
		self.multiplier = multiplier
		self.charges = charges
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames
		self.overlays = overlays
		self.overlayLayer = overlayLayer
		self.bloonWorthMutator = bloonWorthMutator


class TargetSupplierSupportModel:

    offsets = {'mutatorId': 96, 'targetSupplier': 104, 'mutator': 112}    
    def __init__(self, mutatorId: System.String, targetSupplier: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetSupplierModel, mutator: Assets.Scripts.Models.Towers.Behaviors.TargetSupplierSupportModel.MutatorTower, **kwargs):
        super().__init__(self, **kwargs)
		self.mutatorId = mutatorId
		self.targetSupplier = targetSupplier
		self.mutator = mutator


class TempleTowerMutatorGroupModel:

    offsets = {'cost': 56, 'towerSet': 64}    
    def __init__(self, cost: System.Int32, towerSet: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.cost = cost
		self.towerSet = towerSet


class TempleTowerMutatorGroupTierOneModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TempleTowerMutatorGroupTierTwoModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TowerBehaviorBuffModel:

    offsets = {'buffLocsName': 48, 'buffIconName': 56, 'maxStackSize': 64, 'isGlobalRange': 68}    
    def __init__(self, buffLocsName: System.String, buffIconName: System.String, maxStackSize: System.Int32, isGlobalRange: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.buffLocsName = buffLocsName
		self.buffIconName = buffIconName
		self.maxStackSize = maxStackSize
		self.isGlobalRange = isGlobalRange


class TowerCreateTowerModel:

    offsets = {'towerModel': 48, 'isAirBasedTower': 56}    
    def __init__(self, towerModel: Assets.Scripts.Models.Towers.TowerModel, isAirBasedTower: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.towerModel = towerModel
		self.isAirBasedTower = isAirBasedTower


class TowerExpireModel:

    offsets = {'expireOnRoundComplete': 48, 'expireOnDefeatScreen': 49, 'lifespanFrames': 52, 'lifespan': 56}    
    def __init__(self, expireOnRoundComplete: System.Boolean, expireOnDefeatScreen: System.Boolean, lifespanFrames: System.Int32, lifespan: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.expireOnRoundComplete = expireOnRoundComplete
		self.expireOnDefeatScreen = expireOnDefeatScreen
		self.lifespanFrames = lifespanFrames
		self.lifespan = lifespan


class TowerExpireOnParentDestroyedModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TowerExpireOnParentUpgradedModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TowerMutatorGroupModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TowerRadiusModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TowerSellModel:

    offsets = {'charges': 48, 'multiplier': 52, 'additional': 56}    
    def __init__(self, charges: System.Int32, multiplier: System.Single, additional: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.charges = charges
		self.multiplier = multiplier
		self.additional = additional


class TradeEmpireBuffModel:

    offsets = {'cashPerRoundPerMechantship': 72, 'maxMerchantmanCapBonus': 76}    
    def __init__(self, cashPerRoundPerMechantship: System.Single, maxMerchantmanCapBonus: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.cashPerRoundPerMechantship = cashPerRoundPerMechantship
		self.maxMerchantmanCapBonus = maxMerchantmanCapBonus


class TransformTowerXpModel:

    offsets = {'multiplier': 48}    
    def __init__(self, multiplier: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier


class VisibilitySupportModel:

    offsets = {'isUnique': 96, 'mutatorId': 104}    
    def __init__(self, isUnique: System.Boolean, mutatorId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.isUnique = isUnique
		self.mutatorId = mutatorId


class WeaponReloadPercentageOnTargetPrioModel:

    offsets = {'multiplier': 48, 'targetType': 56, 'mutator': 64}    
    def __init__(self, multiplier: System.Single, targetType: System.String, mutator: Assets.Scripts.Models.Towers.Behaviors.WeaponReloadPercentageOnTargetPrioModel.RateMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.targetType = targetType
		self.mutator = mutator


class WizardsLibraryModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AbilityBehaviorBuffModel:

    offsets = {'showBuffIcon': 48, 'isGlobal': 49, 'buffLocsName': 56, 'buffIconName': 64}    
    def __init__(self, showBuffIcon: System.Boolean, isGlobal: System.Boolean, buffLocsName: System.String, buffIconName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.showBuffIcon = showBuffIcon
		self.isGlobal = isGlobal
		self.buffLocsName = buffLocsName
		self.buffIconName = buffIconName


class AbilityBehaviorModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AbilityModel:

    offsets = {'displayName': 48, 'description': 56, 'icon': 64, 'activateOnPreLeak': 80, 'activateOnLeak': 81, 'addedViaUpgrade': 88, 'cooldownFrames': 96, 'livesCost': 100, 'maxActivationsPerRound': 104, 'animation': 108, 'animationOffsetFrames': 112, 'enabled': 116, 'canActivateBetweenRounds': 117, 'resetCooldownOnTierUpgrade': 118, 'disabledByAnotherTower': 119, 'activateOnLivesLost': 120, 'sharedCooldown': 121, 'dontShowStacked': 122, 'animateOnMainAttackDisplay': 123, 'cooldownSpeedScale': 124, 'animationOffset': 128, 'cooldown': 132}    
    def __init__(self, displayName: System.String, description: System.String, icon: Assets.Scripts.Utils.SpriteReference, activateOnPreLeak: System.Boolean, activateOnLeak: System.Boolean, addedViaUpgrade: System.String, cooldownFrames: System.Int32, livesCost: System.Int32, maxActivationsPerRound: System.Int32, animation: System.Int32, animationOffsetFrames: System.Int32, enabled: System.Boolean, canActivateBetweenRounds: System.Boolean, resetCooldownOnTierUpgrade: System.Boolean, disabledByAnotherTower: System.Boolean, activateOnLivesLost: System.Boolean, sharedCooldown: System.Boolean, dontShowStacked: System.Boolean, animateOnMainAttackDisplay: System.Boolean, cooldownSpeedScale: System.Single, animationOffset: System.Single, cooldown: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.displayName = displayName
		self.description = description
		self.icon = icon
		self.activateOnPreLeak = activateOnPreLeak
		self.activateOnLeak = activateOnLeak
		self.addedViaUpgrade = addedViaUpgrade
		self.cooldownFrames = cooldownFrames
		self.livesCost = livesCost
		self.maxActivationsPerRound = maxActivationsPerRound
		self.animation = animation
		self.animationOffsetFrames = animationOffsetFrames
		self.enabled = enabled
		self.canActivateBetweenRounds = canActivateBetweenRounds
		self.resetCooldownOnTierUpgrade = resetCooldownOnTierUpgrade
		self.disabledByAnotherTower = disabledByAnotherTower
		self.activateOnLivesLost = activateOnLivesLost
		self.sharedCooldown = sharedCooldown
		self.dontShowStacked = dontShowStacked
		self.animateOnMainAttackDisplay = animateOnMainAttackDisplay
		self.cooldownSpeedScale = cooldownSpeedScale
		self.animationOffset = animationOffset
		self.cooldown = cooldown


class AbilityCreateTowerModel:

    offsets = {'towerModel': 48, 'isAirBasedTower': 56}    
    def __init__(self, towerModel: Assets.Scripts.Models.Towers.TowerModel, isAirBasedTower: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.towerModel = towerModel
		self.isAirBasedTower = isAirBasedTower


class ActivateAttackModel:

    offsets = {'lifespan': 48, 'lifespanFrames': 52, 'processOnActivate': 64, 'cancelIfNoTargets': 65, 'turnOffExisting': 66, 'endOnRoundEnd': 67, 'endOnDefeatScreen': 68, 'isOneShot': 69}    
    def __init__(self, lifespan: System.Single, lifespanFrames: System.Int32, processOnActivate: System.Boolean, cancelIfNoTargets: System.Boolean, turnOffExisting: System.Boolean, endOnRoundEnd: System.Boolean, endOnDefeatScreen: System.Boolean, isOneShot: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames
		self.processOnActivate = processOnActivate
		self.cancelIfNoTargets = cancelIfNoTargets
		self.turnOffExisting = turnOffExisting
		self.endOnRoundEnd = endOnRoundEnd
		self.endOnDefeatScreen = endOnDefeatScreen
		self.isOneShot = isOneShot


class ActivateAttackSwitchModel:

    offsets = {'lifespanFrames': 48, 'firstAttack': 56, 'secondAttack': 64, 'processOnActivate': 72}    
    def __init__(self, lifespanFrames: System.Int32, firstAttack: Assets.Scripts.Models.Towers.Behaviors.Attack.AttackModel, secondAttack: Assets.Scripts.Models.Towers.Behaviors.Attack.AttackModel, processOnActivate: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.lifespanFrames = lifespanFrames
		self.firstAttack = firstAttack
		self.secondAttack = secondAttack
		self.processOnActivate = processOnActivate


class ActivateMutatorModel:

    offsets = {'towerMutatorModel': 48}    
    def __init__(self, towerMutatorModel: Assets.Scripts.Models.Towers.Mutators.TowerMutatorModel, **kwargs):
        super().__init__(self, **kwargs)
		self.towerMutatorModel = towerMutatorModel


class ActivatePierceSupportZoneModel:

    offsets = {'range': 72, 'pierceIncrease': 76, 'maxNumTowersModified': 80, 'mutatorId': 88, 'isUnique': 96, 'canEffectThisTower': 97, 'lifespan': 100, 'lifespanFrames': 104, 'displayModel': 112, 'useTowerRange': 128}    
    def __init__(self, range: System.Single, pierceIncrease: System.Int32, maxNumTowersModified: System.Single, mutatorId: System.String, isUnique: System.Boolean, canEffectThisTower: System.Boolean, lifespan: System.Single, lifespanFrames: System.Single, displayModel: Assets.Scripts.Models.GenericBehaviors.DisplayModel, useTowerRange: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.range = range
		self.pierceIncrease = pierceIncrease
		self.maxNumTowersModified = maxNumTowersModified
		self.mutatorId = mutatorId
		self.isUnique = isUnique
		self.canEffectThisTower = canEffectThisTower
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames
		self.displayModel = displayModel
		self.useTowerRange = useTowerRange


class ActivateRateSupportZoneModel:

    offsets = {'range': 72, 'rateModifier': 76, 'maxNumTowersModified': 80, 'mutatorId': 88, 'isUnique': 96, 'canEffectThisTower': 97, 'lifespan': 100, 'lifespanFrames': 104, 'displayModel': 112, 'useTowerRange': 128}    
    def __init__(self, range: System.Single, rateModifier: System.Single, maxNumTowersModified: System.Single, mutatorId: System.String, isUnique: System.Boolean, canEffectThisTower: System.Boolean, lifespan: System.Single, lifespanFrames: System.Single, displayModel: Assets.Scripts.Models.GenericBehaviors.DisplayModel, useTowerRange: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.range = range
		self.rateModifier = rateModifier
		self.maxNumTowersModified = maxNumTowersModified
		self.mutatorId = mutatorId
		self.isUnique = isUnique
		self.canEffectThisTower = canEffectThisTower
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames
		self.displayModel = displayModel
		self.useTowerRange = useTowerRange


class ActivateTowerDamageSupportZoneModel:

    offsets = {'range': 72, 'damageIncrease': 76, 'maxNumTowersModified': 80, 'mutatorId': 88, 'isUnique': 96, 'canEffectThisTower': 97, 'lifespan': 100, 'lifespanFrames': 104, 'displayModel': 112, 'immuneBloonProperties': 120, 'replaceImmuneBloonProperties': 124, 'useTowerRange': 125}    
    def __init__(self, range: System.Single, damageIncrease: System.Single, maxNumTowersModified: System.Single, mutatorId: System.String, isUnique: System.Boolean, canEffectThisTower: System.Boolean, lifespan: System.Single, lifespanFrames: System.Single, displayModel: Assets.Scripts.Models.GenericBehaviors.DisplayModel, immuneBloonProperties: BloonProperties, replaceImmuneBloonProperties: System.Boolean, useTowerRange: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.range = range
		self.damageIncrease = damageIncrease
		self.maxNumTowersModified = maxNumTowersModified
		self.mutatorId = mutatorId
		self.isUnique = isUnique
		self.canEffectThisTower = canEffectThisTower
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames
		self.displayModel = displayModel
		self.immuneBloonProperties = immuneBloonProperties
		self.replaceImmuneBloonProperties = replaceImmuneBloonProperties
		self.useTowerRange = useTowerRange


class ActivateVisibilitySupportZoneModel:

    offsets = {'range': 72, 'maxNumTowersModified': 76, 'mutatorId': 80, 'isUnique': 88, 'canEffectThisTower': 89, 'lifespan': 92, 'lifespanFrames': 96, 'displayModel': 104, 'useTowerRange': 120}    
    def __init__(self, range: System.Single, maxNumTowersModified: System.Single, mutatorId: System.String, isUnique: System.Boolean, canEffectThisTower: System.Boolean, lifespan: System.Single, lifespanFrames: System.Single, displayModel: Assets.Scripts.Models.GenericBehaviors.DisplayModel, useTowerRange: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.range = range
		self.maxNumTowersModified = maxNumTowersModified
		self.mutatorId = mutatorId
		self.isUnique = isUnique
		self.canEffectThisTower = canEffectThisTower
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames
		self.displayModel = displayModel
		self.useTowerRange = useTowerRange


class AmbushTechModel:

    offsets = {'displayPath': 48, 'radius': 56}    
    def __init__(self, displayPath: System.String, radius: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.displayPath = displayPath
		self.radius = radius


class ArtilleryCommandModel:

    offsets = {'givesBuff': 48, 'buffFrames': 52, 'otherTowerEffectModel': 56}    
    def __init__(self, givesBuff: System.Boolean, buffFrames: System.Int32, otherTowerEffectModel: Assets.Scripts.Models.Effects.EffectModel, **kwargs):
        super().__init__(self, **kwargs)
		self.givesBuff = givesBuff
		self.buffFrames = buffFrames
		self.otherTowerEffectModel = otherTowerEffectModel


class BiohackModel:

    offsets = {'lifespan': 72, 'lifespanFrames': 76, 'damageIncrease': 80, 'affectedCount': 84, 'effectModel': 104, 'damageMutator': 112, 'behaviorMutator': 120}    
    def __init__(self, lifespan: System.Single, lifespanFrames: System.Int32, damageIncrease: System.Single, affectedCount: System.Int32, effectModel: Assets.Scripts.Models.Effects.EffectModel, damageMutator: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.BiohackModel.BiohackDamageMutator, behaviorMutator: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.BiohackModel.Mutator, **kwargs):
        super().__init__(self, **kwargs)
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames
		self.damageIncrease = damageIncrease
		self.affectedCount = affectedCount
		self.effectModel = effectModel
		self.damageMutator = damageMutator
		self.behaviorMutator = behaviorMutator


class BloodSacrificeModel:

    offsets = {'xpMultiplier': 48, 'selectionObjectPath': 56, 'effectAtSacrificeModel': 64, 'activateSound': 72, 'confirmSound': 80, 'rateBonusMultiplier': 88, 'rangeBonusMultiplier': 92, 'buffDuration': 96, 'buffDurationFrames': 100, 'buffDisplayPath': 104, 'buffLocsName': 112, 'buffIconName': 120, 'buffDisplayModel': 128, 'bonusMultiplierPerSacrifice': 136, 'bonusSacrificeAmount': 140, 'maxBonusCount': 144, 'mutators': 152}    
    def __init__(self, xpMultiplier: System.Single, selectionObjectPath: System.String, effectAtSacrificeModel: Assets.Scripts.Models.Effects.EffectModel, activateSound: System.String, confirmSound: System.String, rateBonusMultiplier: System.Single, rangeBonusMultiplier: System.Single, buffDuration: System.Single, buffDurationFrames: System.Int32, buffDisplayPath: System.String, buffLocsName: System.String, buffIconName: System.String, buffDisplayModel: Assets.Scripts.Models.GenericBehaviors.DisplayModel, bonusMultiplierPerSacrifice: System.Single, bonusSacrificeAmount: System.Single, maxBonusCount: System.Int32, mutators: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.BloodSacrificeModel.BloodSacrificeMutator>, **kwargs):
        super().__init__(self, **kwargs)
		self.xpMultiplier = xpMultiplier
		self.selectionObjectPath = selectionObjectPath
		self.effectAtSacrificeModel = effectAtSacrificeModel
		self.activateSound = activateSound
		self.confirmSound = confirmSound
		self.rateBonusMultiplier = rateBonusMultiplier
		self.rangeBonusMultiplier = rangeBonusMultiplier
		self.buffDuration = buffDuration
		self.buffDurationFrames = buffDurationFrames
		self.buffDisplayPath = buffDisplayPath
		self.buffLocsName = buffLocsName
		self.buffIconName = buffIconName
		self.buffDisplayModel = buffDisplayModel
		self.bonusMultiplierPerSacrifice = bonusMultiplierPerSacrifice
		self.bonusSacrificeAmount = bonusSacrificeAmount
		self.maxBonusCount = maxBonusCount
		self.mutators = mutators


class BonusLivesOnAbilityModel:

    offsets = {'amount': 48}    
    def __init__(self, amount: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.amount = amount


class CallToArmsModel:

    offsets = {'multiplier': 48, 'useRadius': 52, 'buffLocsName': 56, 'buffIconName': 64, 'lifespanFrames': 72, 'lifespan': 76, '_mutator': 80}    
    def __init__(self, multiplier: System.Single, useRadius: System.Boolean, buffLocsName: System.String, buffIconName: System.String, lifespanFrames: System.Int32, lifespan: System.Single, _mutator: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.CallToArmsModel.CallToArmsMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.useRadius = useRadius
		self.buffLocsName = buffLocsName
		self.buffIconName = buffIconName
		self.lifespanFrames = lifespanFrames
		self.lifespan = lifespan
		self._mutator = _mutator


class CashBoostModel:

    offsets = {'lifespanFrames': 48, 'multiplier': 52, 'range': 56, 'filterTower': 64}    
    def __init__(self, lifespanFrames: System.Int32, multiplier: System.Single, range: System.Single, filterTower: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.lifespanFrames = lifespanFrames
		self.multiplier = multiplier
		self.range = range
		self.filterTower = filterTower


class CashPerBananaFarmInRangeModel:

    offsets = {'baseCash': 48, 'cash': 52, 'rangeIncrease': 56, 'textAssetId': 64, 'textLifespan': 72}    
    def __init__(self, baseCash: System.Single, cash: System.Single, rangeIncrease: System.Single, textAssetId: System.String, textLifespan: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.baseCash = baseCash
		self.cash = cash
		self.rangeIncrease = rangeIncrease
		self.textAssetId = textAssetId
		self.textLifespan = textLifespan


class ChangeDamageTypeModel:

    offsets = {'lifespanFrames': 48, 'immuneBloonProperties': 52}    
    def __init__(self, lifespanFrames: System.Int32, immuneBloonProperties: BloonProperties, **kwargs):
        super().__init__(self, **kwargs)
		self.lifespanFrames = lifespanFrames
		self.immuneBloonProperties = immuneBloonProperties


class ChangeProjectileDisplayModel:

    offsets = {'lifespan': 48, 'lifespanFrames': 52, 'projectileModel': 56, 'displayPath': 64, 'mutator': 72}    
    def __init__(self, lifespan: System.Single, lifespanFrames: System.Int32, projectileModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, displayPath: Assets.Scripts.Models.Effects.AssetPathModel, mutator: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.ChangeProjectileDisplayModel.ChangeProjectileDisplayMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames
		self.projectileModel = projectileModel
		self.displayPath = displayPath
		self.mutator = mutator


class CollectFromBankModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CreateEffectOnAbilityEndModel:

    offsets = {'effectModel': 48, 'lifespan': 56, 'lifespanFrames': 60}    
    def __init__(self, effectModel: Assets.Scripts.Models.Effects.EffectModel, lifespan: System.Single, lifespanFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.effectModel = effectModel
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames


class CreateEffectOnAbilityModel:

    offsets = {'effectModel': 48, 'randomRotation': 56, 'centerEffect': 57, 'destroyOnEnd': 58, 'useAttackTransform': 59, 'canSave': 60}    
    def __init__(self, effectModel: Assets.Scripts.Models.Effects.EffectModel, randomRotation: System.Boolean, centerEffect: System.Boolean, destroyOnEnd: System.Boolean, useAttackTransform: System.Boolean, canSave: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.effectModel = effectModel
		self.randomRotation = randomRotation
		self.centerEffect = centerEffect
		self.destroyOnEnd = destroyOnEnd
		self.useAttackTransform = useAttackTransform
		self.canSave = canSave


class CreateSoundOnAbilityModel:

    offsets = {'sound': 48, 'heroSound': 56, 'heroSound2': 64}    
    def __init__(self, sound: Assets.Scripts.Models.Audio.SoundModel, heroSound: Assets.Scripts.Models.Audio.SoundModel, heroSound2: Assets.Scripts.Models.Audio.SoundModel, **kwargs):
        super().__init__(self, **kwargs)
		self.sound = sound
		self.heroSound = heroSound
		self.heroSound2 = heroSound2


class DamageUpModel:

    offsets = {'lifespanFrames': 48, 'additionalDamage': 52, 'projectileDisplay': 56, 'mutator': 64}    
    def __init__(self, lifespanFrames: System.Int32, additionalDamage: System.Int32, projectileDisplay: Assets.Scripts.Models.Effects.AssetPathModel, mutator: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.DamageUpModel.DamageUpMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.lifespanFrames = lifespanFrames
		self.additionalDamage = additionalDamage
		self.projectileDisplay = projectileDisplay
		self.mutator = mutator


class DarkshiftModel:

    offsets = {'restrictToTowerRadius': 48, 'placementZoneAssetRadius': 52, 'placementZoneAsset': 56, 'darkshiftSound': 64, 'disappearEffectModel': 72, 'reappearEffectModel': 80}    
    def __init__(self, restrictToTowerRadius: System.Boolean, placementZoneAssetRadius: System.Single, placementZoneAsset: System.String, darkshiftSound: Assets.Scripts.Models.Audio.SoundModel, disappearEffectModel: Assets.Scripts.Models.Effects.EffectModel, reappearEffectModel: Assets.Scripts.Models.Effects.EffectModel, **kwargs):
        super().__init__(self, **kwargs)
		self.restrictToTowerRadius = restrictToTowerRadius
		self.placementZoneAssetRadius = placementZoneAssetRadius
		self.placementZoneAsset = placementZoneAsset
		self.darkshiftSound = darkshiftSound
		self.disappearEffectModel = disappearEffectModel
		self.reappearEffectModel = reappearEffectModel


class DeployModel:

    offsets = {'activateSound': 48, 'dropOffSound': 56}    
    def __init__(self, activateSound: Assets.Scripts.Models.Audio.SoundModel, dropOffSound: Assets.Scripts.Models.Audio.SoundModel, **kwargs):
        super().__init__(self, **kwargs)
		self.activateSound = activateSound
		self.dropOffSound = dropOffSound


class DoorGunnerModel:

    offsets = {'selectionObjectPath': 48, 'isSelectableGameObject': 56, 'activateSound': 64, 'pickupSound': 72, 'mutator': 80}    
    def __init__(self, selectionObjectPath: System.String, isSelectableGameObject: System.String, activateSound: Assets.Scripts.Models.Audio.SoundModel, pickupSound: Assets.Scripts.Models.Audio.SoundModel, mutator: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.DoorGunnerModel.DoorGunnerMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.selectionObjectPath = selectionObjectPath
		self.isSelectableGameObject = isSelectableGameObject
		self.activateSound = activateSound
		self.pickupSound = pickupSound
		self.mutator = mutator


class DroneSwarmModel:

    offsets = {'duration': 48, 'durationFrames': 52, 'droneSupportModel': 56, 'droneEndRadius': 64, 'droneEndRadiusSquared': 68}    
    def __init__(self, duration: System.Single, durationFrames: System.Int32, droneSupportModel: Assets.Scripts.Models.Towers.Behaviors.DroneSupportModel, droneEndRadius: System.Single, droneEndRadiusSquared: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.duration = duration
		self.durationFrames = durationFrames
		self.droneSupportModel = droneSupportModel
		self.droneEndRadius = droneEndRadius
		self.droneEndRadiusSquared = droneEndRadiusSquared


class EmergencyUnlockModel:

    offsets = {'swivelSpeedMultiplier': 48, 'duration': 52, 'durationFrames': 56, 'activateSound': 64, 'buffDisplayPath': 72, 'buffDisplayModel': 80, 'mutator': 88}    
    def __init__(self, swivelSpeedMultiplier: System.Single, duration: System.Single, durationFrames: System.Int32, activateSound: Assets.Scripts.Models.Audio.SoundModel, buffDisplayPath: System.String, buffDisplayModel: Assets.Scripts.Models.GenericBehaviors.DisplayModel, mutator: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.EmergencyUnlockModel.EmergencyUnlockMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.swivelSpeedMultiplier = swivelSpeedMultiplier
		self.duration = duration
		self.durationFrames = durationFrames
		self.activateSound = activateSound
		self.buffDisplayPath = buffDisplayPath
		self.buffDisplayModel = buffDisplayModel
		self.mutator = mutator


class GroundZeroBombBuffModel:

    offsets = {'towerMutatorModel': 48, 'damageIncrease': 56, 'lifespan': 60, 'lifespanFrames': 64, '_mutator': 72}    
    def __init__(self, towerMutatorModel: Assets.Scripts.Models.Towers.Mutators.TowerMutatorModel, damageIncrease: System.Int32, lifespan: System.Single, lifespanFrames: System.Int32, _mutator: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.GroundZeroBombBuffModel.GroundZeroBuffMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.towerMutatorModel = towerMutatorModel
		self.damageIncrease = damageIncrease
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames
		self._mutator = _mutator


class ImfLoanModel:

    offsets = {'amount': 48, 'incomeRecoveryRate': 52, 'assetId': 56, 'lifespan': 64, 'imfLoanCollection': 72}    
    def __init__(self, amount: System.Single, incomeRecoveryRate: System.Single, assetId: System.String, lifespan: System.Single, imfLoanCollection: Assets.Scripts.Models.SimulationBehaviors.ImfLoanCollectionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.amount = amount
		self.incomeRecoveryRate = incomeRecoveryRate
		self.assetId = assetId
		self.lifespan = lifespan
		self.imfLoanCollection = imfLoanCollection


class ImmunityModel:

    offsets = {'lifespan': 48, 'lifespanFrames': 52, 'effectModel': 56}    
    def __init__(self, lifespan: System.Single, lifespanFrames: System.Int32, effectModel: Assets.Scripts.Models.Effects.EffectModel, **kwargs):
        super().__init__(self, **kwargs)
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames
		self.effectModel = effectModel


class IncreaseRangeModel:

    offsets = {'lifespanFrames': 48, 'multiplier': 52, 'addative': 56, 'endOnDefeatScreen': 60, 'mutator': 64}    
    def __init__(self, lifespanFrames: System.Int32, multiplier: System.Single, addative: System.Single, endOnDefeatScreen: System.Boolean, mutator: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.IncreaseRangeModel.RangeMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.lifespanFrames = lifespanFrames
		self.multiplier = multiplier
		self.addative = addative
		self.endOnDefeatScreen = endOnDefeatScreen
		self.mutator = mutator


class LeapingSwordModel:

    offsets = {'timeUntilFinish': 48, 'timeUntilFinishFrames': 52, 'landDelay': 56, 'landDelayFrames': 60, 'impactProjectileModel': 64, 'dotProjectileModel': 72, 'effectAtTarget': 80, 'impactEffectModel': 88, 'finishingEffectModel': 96, 'singleEmissionModel': 104, 'finishingEffectDelay': 112, 'finishingEffectDelayFrames': 116, 'landingSound': 120}    
    def __init__(self, timeUntilFinish: System.Single, timeUntilFinishFrames: System.Int32, landDelay: System.Single, landDelayFrames: System.Int32, impactProjectileModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, dotProjectileModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, effectAtTarget: Assets.Scripts.Models.Effects.EffectModel, impactEffectModel: Assets.Scripts.Models.Effects.EffectModel, finishingEffectModel: Assets.Scripts.Models.Effects.EffectModel, singleEmissionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.SingleEmissionModel, finishingEffectDelay: System.Single, finishingEffectDelayFrames: System.Int32, landingSound: Assets.Scripts.Models.Audio.SoundModel, **kwargs):
        super().__init__(self, **kwargs)
		self.timeUntilFinish = timeUntilFinish
		self.timeUntilFinishFrames = timeUntilFinishFrames
		self.landDelay = landDelay
		self.landDelayFrames = landDelayFrames
		self.impactProjectileModel = impactProjectileModel
		self.dotProjectileModel = dotProjectileModel
		self.effectAtTarget = effectAtTarget
		self.impactEffectModel = impactEffectModel
		self.finishingEffectModel = finishingEffectModel
		self.singleEmissionModel = singleEmissionModel
		self.finishingEffectDelay = finishingEffectDelay
		self.finishingEffectDelayFrames = finishingEffectDelayFrames
		self.landingSound = landingSound


class LongArmOfLightModel:

    offsets = {'lifespanFrames': 48, 'multiplier': 52, 'projectileDisplay': 56, 'projectileRadiusMultiplier': 64, 'immuneBloonProperties': 68, 'damageIncrease': 72, 'mutatorId': 80, 'lifespan': 88, 'mutator': 96}    
    def __init__(self, lifespanFrames: System.Int32, multiplier: System.Single, projectileDisplay: Assets.Scripts.Models.Effects.AssetPathModel, projectileRadiusMultiplier: System.Single, immuneBloonProperties: BloonProperties, damageIncrease: System.Int32, mutatorId: System.String, lifespan: System.Single, mutator: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.LongArmOfLightModel.LongArmOfLightMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.lifespanFrames = lifespanFrames
		self.multiplier = multiplier
		self.projectileDisplay = projectileDisplay
		self.projectileRadiusMultiplier = projectileRadiusMultiplier
		self.immuneBloonProperties = immuneBloonProperties
		self.damageIncrease = damageIncrease
		self.mutatorId = mutatorId
		self.lifespan = lifespan
		self.mutator = mutator


class MoabBarrageModel:

    offsets = {'durationFrames': 48, 'damageOverTimeModel': 56, 'targets': 64, 'mutatorId': 72, 'mutators': 80}    
    def __init__(self, durationFrames: System.Int32, damageOverTimeModel: Assets.Scripts.Models.Bloons.BloonBehaviorModel, targets: System.Int32, mutatorId: System.String, mutators: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.MoabBarrageModel.AddBehaviorToBloonMutator>, **kwargs):
        super().__init__(self, **kwargs)
		self.durationFrames = durationFrames
		self.damageOverTimeModel = damageOverTimeModel
		self.targets = targets
		self.mutatorId = mutatorId
		self.mutators = mutators


class MonkeyFanClubModel:

    offsets = {'lifespan': 48, 'lifespanFrames': 52, 'maxTier': 56, 'towerCount': 60, 'range': 64, 'reloadModifier': 68, 'immuneBloonProperties': 72, 'display': 80, 'towerDisplay': 88, 'originDisplay': 96, 'towerOriginDisplay': 104, 'effectId': 112, 'effectLeaderId': 120, 'effectOnOtherId': 128, 'bonusPierce': 136, 'projectileRadius': 140, 'bonusDamage': 144, 'effectModel': 152, 'handBlurEjectEffectModel': 160, 'ejectX': 168, 'ejectY': 172, 'ejectZ': 176, 'otherDisplayModel': 184, 'displayModel': 192, 'leaderDisplayModel': 200, 'endDisplayModel': 208, 'ignoreWithMutators': 216}    
    def __init__(self, lifespan: System.Single, lifespanFrames: System.Int32, maxTier: System.Int32, towerCount: System.Int32, range: System.Single, reloadModifier: System.Single, immuneBloonProperties: BloonProperties, display: System.String, towerDisplay: System.String, originDisplay: System.String, towerOriginDisplay: System.String, effectId: System.String, effectLeaderId: System.String, effectOnOtherId: System.String, bonusPierce: System.Single, projectileRadius: System.Single, bonusDamage: System.Int32, effectModel: Assets.Scripts.Models.Effects.EffectModel, handBlurEjectEffectModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.EjectEffectModel, ejectX: System.Single, ejectY: System.Single, ejectZ: System.Single, otherDisplayModel: Assets.Scripts.Models.GenericBehaviors.DisplayModel, displayModel: Assets.Scripts.Models.GenericBehaviors.DisplayModel, leaderDisplayModel: Assets.Scripts.Models.GenericBehaviors.DisplayModel, endDisplayModel: Assets.Scripts.Models.Towers.Behaviors.CreateEffectAfterTimeModel, ignoreWithMutators: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames
		self.maxTier = maxTier
		self.towerCount = towerCount
		self.range = range
		self.reloadModifier = reloadModifier
		self.immuneBloonProperties = immuneBloonProperties
		self.display = display
		self.towerDisplay = towerDisplay
		self.originDisplay = originDisplay
		self.towerOriginDisplay = towerOriginDisplay
		self.effectId = effectId
		self.effectLeaderId = effectLeaderId
		self.effectOnOtherId = effectOnOtherId
		self.bonusPierce = bonusPierce
		self.projectileRadius = projectileRadius
		self.bonusDamage = bonusDamage
		self.effectModel = effectModel
		self.handBlurEjectEffectModel = handBlurEjectEffectModel
		self.ejectX = ejectX
		self.ejectY = ejectY
		self.ejectZ = ejectZ
		self.otherDisplayModel = otherDisplayModel
		self.displayModel = displayModel
		self.leaderDisplayModel = leaderDisplayModel
		self.endDisplayModel = endDisplayModel
		self.ignoreWithMutators = ignoreWithMutators


class MorphTowerModel:

    offsets = {'isUnique': 48, 'priority': 52, 'mutatorId': 56, 'mutateAll': 64, 'mutateSelf': 65, 'towerModel': 72, 'secondaryTowerModel': 80, 'effectModel': 88, 'effectOnTransitionBackModel': 96, 'maxTier': 104, 'maxCost': 108, 'maxTowers': 112, 'affectList': 120, 'resetOnDefeatScreen': 128, 'ignoreWithMutators': 136, 'lifespan': 152, 'lifespanFrames': 156}    
    def __init__(self, isUnique: System.Boolean, priority: System.Int32, mutatorId: System.String, mutateAll: System.Boolean, mutateSelf: System.Boolean, towerModel: Assets.Scripts.Models.Towers.TowerModel, secondaryTowerModel: Assets.Scripts.Models.Towers.TowerModel, effectModel: Assets.Scripts.Models.Effects.EffectModel, effectOnTransitionBackModel: Assets.Scripts.Models.Effects.EffectModel, maxTier: System.Int32, maxCost: System.Single, maxTowers: System.Int32, affectList: System.String, resetOnDefeatScreen: System.Boolean, ignoreWithMutators: System.String, lifespan: System.Single, lifespanFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.isUnique = isUnique
		self.priority = priority
		self.mutatorId = mutatorId
		self.mutateAll = mutateAll
		self.mutateSelf = mutateSelf
		self.towerModel = towerModel
		self.secondaryTowerModel = secondaryTowerModel
		self.effectModel = effectModel
		self.effectOnTransitionBackModel = effectOnTransitionBackModel
		self.maxTier = maxTier
		self.maxCost = maxCost
		self.maxTowers = maxTowers
		self.affectList = affectList
		self.resetOnDefeatScreen = resetOnDefeatScreen
		self.ignoreWithMutators = ignoreWithMutators
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames


class MutateCreateProjectileOnExhaustPierceOnAbilityModel:

    offsets = {'lifespanFrames': 48, 'countIncrease': 52, 'targetCPOEPId': 56}    
    def __init__(self, lifespanFrames: System.Int32, countIncrease: System.Int32, targetCPOEPId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.lifespanFrames = lifespanFrames
		self.countIncrease = countIncrease
		self.targetCPOEPId = targetCPOEPId


class MutateDamageOnAbilityModel:

    offsets = {'lifespanFrames': 48, 'damageIncrease': 52, 'targetDamageId': 56, 'mutator': 64}    
    def __init__(self, lifespanFrames: System.Int32, damageIncrease: System.Int32, targetDamageId: System.String, mutator: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.MutateDamageOnAbilityModel.DamageMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.lifespanFrames = lifespanFrames
		self.damageIncrease = damageIncrease
		self.targetDamageId = targetDamageId
		self.mutator = mutator


class MutateProjectileOnAbilityModel:

    offsets = {'lifespanFrames': 48, 'projectileBehaviorModel': 56, 'mutatorId': 64, 'projectileModel': 72, 'mutator': 80}    
    def __init__(self, lifespanFrames: System.Int32, projectileBehaviorModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileBehaviorModel, mutatorId: System.String, projectileModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, mutator: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.MutateProjectileOnAbilityModel.ProjectileMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.lifespanFrames = lifespanFrames
		self.projectileBehaviorModel = projectileBehaviorModel
		self.mutatorId = mutatorId
		self.projectileModel = projectileModel
		self.mutator = mutator


class MutateRemoveAllAttacksOnAbilityActivateModel:

    offsets = {'lifespan': 48, 'lifespanFrames': 52}    
    def __init__(self, lifespan: System.Single, lifespanFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames


class OverclockModel:

    offsets = {'lifespanFrames': 48, 'rateModifier': 52, 'villageRangeModifier': 56, 'mutatorId': 64, 'mutatorSaveId': 72, 'maxStacks': 80, 'selectionObjectPath': 88, 'buffDisplayPath': 96, 'initialEffect': 104, 'buffDisplayModel': 112, 'buffLocsName': 120, 'buffIconName': 128, 'mutator': 144}    
    def __init__(self, lifespanFrames: System.Int32, rateModifier: System.Single, villageRangeModifier: System.Single, mutatorId: System.String, mutatorSaveId: System.String, maxStacks: System.Int32, selectionObjectPath: System.String, buffDisplayPath: System.String, initialEffect: Assets.Scripts.Models.Effects.EffectModel, buffDisplayModel: Assets.Scripts.Models.GenericBehaviors.DisplayModel, buffLocsName: System.String, buffIconName: System.String, mutator: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.OverclockModel.OverclockMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.lifespanFrames = lifespanFrames
		self.rateModifier = rateModifier
		self.villageRangeModifier = villageRangeModifier
		self.mutatorId = mutatorId
		self.mutatorSaveId = mutatorSaveId
		self.maxStacks = maxStacks
		self.selectionObjectPath = selectionObjectPath
		self.buffDisplayPath = buffDisplayPath
		self.initialEffect = initialEffect
		self.buffDisplayModel = buffDisplayModel
		self.buffLocsName = buffLocsName
		self.buffIconName = buffIconName
		self.mutator = mutator


class OverclockPermanentModel:

    offsets = {'rateModifier': 48, 'villageRangeModifier': 52, 'mutatorId': 56, 'maxStacks': 64, 'buffLocsName': 72, 'buffIconName': 80, 'mutatorsByStack': 88}    
    def __init__(self, rateModifier: System.Single, villageRangeModifier: System.Single, mutatorId: System.String, maxStacks: System.Int32, buffLocsName: System.String, buffIconName: System.String, mutatorsByStack: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.OverclockPermanentModel.OverclockPermanentMutator>, **kwargs):
        super().__init__(self, **kwargs)
		self.rateModifier = rateModifier
		self.villageRangeModifier = villageRangeModifier
		self.mutatorId = mutatorId
		self.maxStacks = maxStacks
		self.buffLocsName = buffLocsName
		self.buffIconName = buffIconName
		self.mutatorsByStack = mutatorsByStack


class PauseAllOtherAttacksModel:

    offsets = {'lifespan': 48, 'lifespanFrames': 52, 'endOnRoundEnd': 56, 'endOnDefeatScreen': 57}    
    def __init__(self, lifespan: System.Single, lifespanFrames: System.Int32, endOnRoundEnd: System.Boolean, endOnDefeatScreen: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames
		self.endOnRoundEnd = endOnRoundEnd
		self.endOnDefeatScreen = endOnDefeatScreen


class PlaceProjectileAtModel:

    offsets = {'projectileModel': 48, 'emissionModel': 56, 'placementRadius': 72, 'rangeCircleRadius': 76, 'delay': 80, 'delayFrames': 84, 'effectAtLocationModel': 88, 'effectAtTowerModel': 96, 'soundOnPlaceModel': 104, 'mockTowerModel': 112, 'effectAtTowerPosX': 120, 'effectAtTowerPosY': 124, 'effectAtTowerPosZ': 128, 'useRandomRotation': 132, 'placingDisplayPath': 136}    
    def __init__(self, projectileModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, emissionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel, placementRadius: System.Single, rangeCircleRadius: System.Single, delay: System.Single, delayFrames: System.Int32, effectAtLocationModel: Assets.Scripts.Models.Effects.EffectModel, effectAtTowerModel: Assets.Scripts.Models.Effects.EffectModel, soundOnPlaceModel: Assets.Scripts.Models.Audio.SoundModel, mockTowerModel: Assets.Scripts.Models.Towers.TowerModel, effectAtTowerPosX: System.Single, effectAtTowerPosY: System.Single, effectAtTowerPosZ: System.Single, useRandomRotation: System.Boolean, placingDisplayPath: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.projectileModel = projectileModel
		self.emissionModel = emissionModel
		self.placementRadius = placementRadius
		self.rangeCircleRadius = rangeCircleRadius
		self.delay = delay
		self.delayFrames = delayFrames
		self.effectAtLocationModel = effectAtLocationModel
		self.effectAtTowerModel = effectAtTowerModel
		self.soundOnPlaceModel = soundOnPlaceModel
		self.mockTowerModel = mockTowerModel
		self.effectAtTowerPosX = effectAtTowerPosX
		self.effectAtTowerPosY = effectAtTowerPosY
		self.effectAtTowerPosZ = effectAtTowerPosZ
		self.useRandomRotation = useRandomRotation
		self.placingDisplayPath = placingDisplayPath


class RedeployModel:

    offsets = {'selectionObjectPath': 48, 'isSelectableGameObject': 56, 'activateSound': 64, 'pickupSound': 72, 'dropOffSound': 80, 'isDoorGunnerActive': 88}    
    def __init__(self, selectionObjectPath: System.String, isSelectableGameObject: System.String, activateSound: Assets.Scripts.Models.Audio.SoundModel, pickupSound: Assets.Scripts.Models.Audio.SoundModel, dropOffSound: Assets.Scripts.Models.Audio.SoundModel, isDoorGunnerActive: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.selectionObjectPath = selectionObjectPath
		self.isSelectableGameObject = isSelectableGameObject
		self.activateSound = activateSound
		self.pickupSound = pickupSound
		self.dropOffSound = dropOffSound
		self.isDoorGunnerActive = isDoorGunnerActive


class SoulbindModel:

    offsets = {'selectionObjectPath': 48, 'soulbindEffectOnTargetModel': 56, 'soulbindEffectOnBoundTargetsId': 64}    
    def __init__(self, selectionObjectPath: System.String, soulbindEffectOnTargetModel: Assets.Scripts.Models.Effects.EffectModel, soulbindEffectOnBoundTargetsId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.selectionObjectPath = selectionObjectPath
		self.soulbindEffectOnTargetModel = soulbindEffectOnTargetModel
		self.soulbindEffectOnBoundTargetsId = soulbindEffectOnBoundTargetsId


class SwitchDisplayModel:

    offsets = {'lifespan': 48, 'lifespanFrames': 52, 'display': 56, 'excludeSubTowers': 64, 'createEffectOnSwitchBackModel': 72, 'resetOnDefeatScreen': 80}    
    def __init__(self, lifespan: System.Single, lifespanFrames: System.Int32, display: System.String, excludeSubTowers: System.Boolean, createEffectOnSwitchBackModel: Assets.Scripts.Models.Effects.EffectModel, resetOnDefeatScreen: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames
		self.display = display
		self.excludeSubTowers = excludeSubTowers
		self.createEffectOnSwitchBackModel = createEffectOnSwitchBackModel
		self.resetOnDefeatScreen = resetOnDefeatScreen


class SwordChargeModel:

    offsets = {'initialDelay': 48, 'initialDelayFrames': 52, 'endDelay': 56, 'endDelayFrames': 60, 'iterations': 64, 'projectileModel': 72, 'singleEmissionModel': 80, 'effectAtEndModel': 88, 'effectDuringCharge': 96, 'chargeEffectDestroyDelay': 104, 'chargeEffectDestroyDelayFrames': 108, 'spawnSound': 112, 'landingSound': 120}    
    def __init__(self, initialDelay: System.Single, initialDelayFrames: System.Int32, endDelay: System.Single, endDelayFrames: System.Int32, iterations: System.Int32, projectileModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, singleEmissionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.SingleEmissionModel, effectAtEndModel: Assets.Scripts.Models.Effects.EffectModel, effectDuringCharge: Assets.Scripts.Models.Effects.EffectModel, chargeEffectDestroyDelay: System.Single, chargeEffectDestroyDelayFrames: System.Int32, spawnSound: Assets.Scripts.Models.Audio.SoundModel, landingSound: Assets.Scripts.Models.Audio.SoundModel, **kwargs):
        super().__init__(self, **kwargs)
		self.initialDelay = initialDelay
		self.initialDelayFrames = initialDelayFrames
		self.endDelay = endDelay
		self.endDelayFrames = endDelayFrames
		self.iterations = iterations
		self.projectileModel = projectileModel
		self.singleEmissionModel = singleEmissionModel
		self.effectAtEndModel = effectAtEndModel
		self.effectDuringCharge = effectDuringCharge
		self.chargeEffectDestroyDelay = chargeEffectDestroyDelay
		self.chargeEffectDestroyDelayFrames = chargeEffectDestroyDelayFrames
		self.spawnSound = spawnSound
		self.landingSound = landingSound


class SyphonFundingModel:

    offsets = {'lifespan': 48, 'lifespanFrames': 52}    
    def __init__(self, lifespan: System.Single, lifespanFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames


class TechBotLinkModel:

    offsets = {'selectionObjectPath': 48, 'isSelectableGameObject': 56, 'activateSound': 64, 'confirmSound': 72, 'activatedTowerAbilityEffectModel': 80, 'lineDisplayPath': 88, 'lineDotOffset': 96, 'lineDotSpacing': 100, 'activateAnimationState': 104, 'linkAnimationState': 108, 'idleAnimationState': 112, 'travelEffectModel': 120, 'travelEffectSpeed': 128, 'ambushTechActive': 132}    
    def __init__(self, selectionObjectPath: System.String, isSelectableGameObject: System.String, activateSound: System.String, confirmSound: System.String, activatedTowerAbilityEffectModel: Assets.Scripts.Models.Effects.EffectModel, lineDisplayPath: System.String, lineDotOffset: System.Single, lineDotSpacing: System.Single, activateAnimationState: System.Int32, linkAnimationState: System.Int32, idleAnimationState: System.Int32, travelEffectModel: Assets.Scripts.Models.Effects.EffectModel, travelEffectSpeed: System.Single, ambushTechActive: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.selectionObjectPath = selectionObjectPath
		self.isSelectableGameObject = isSelectableGameObject
		self.activateSound = activateSound
		self.confirmSound = confirmSound
		self.activatedTowerAbilityEffectModel = activatedTowerAbilityEffectModel
		self.lineDisplayPath = lineDisplayPath
		self.lineDotOffset = lineDotOffset
		self.lineDotSpacing = lineDotSpacing
		self.activateAnimationState = activateAnimationState
		self.linkAnimationState = linkAnimationState
		self.idleAnimationState = idleAnimationState
		self.travelEffectModel = travelEffectModel
		self.travelEffectSpeed = travelEffectSpeed
		self.ambushTechActive = ambushTechActive


class TechBotUnlinkModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TurboModel:

    offsets = {'lifespanFrames': 48, 'multiplier': 52, 'projectileDisplay': 56, 'lifespan': 64, 'extraDamage': 68, 'projectileRadiusScaleBonus': 72, 'dontRemoveMutatorOnDestroy': 76}    
    def __init__(self, lifespanFrames: System.Int32, multiplier: System.Single, projectileDisplay: Assets.Scripts.Models.Effects.AssetPathModel, lifespan: System.Single, extraDamage: System.Int32, projectileRadiusScaleBonus: System.Single, dontRemoveMutatorOnDestroy: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.lifespanFrames = lifespanFrames
		self.multiplier = multiplier
		self.projectileDisplay = projectileDisplay
		self.lifespan = lifespan
		self.extraDamage = extraDamage
		self.projectileRadiusScaleBonus = projectileRadiusScaleBonus
		self.dontRemoveMutatorOnDestroy = dontRemoveMutatorOnDestroy


class UCAVModel:

    offsets = {'duration': 48, 'durationFrames': 52, 'uavTowerModel': 56, 'ucavTowerModel': 64, 'effectAtTowerStartModel': 72, 'effectAtTowerEndModel': 80}    
    def __init__(self, duration: System.Single, durationFrames: System.Int32, uavTowerModel: Assets.Scripts.Models.Towers.TowerModel, ucavTowerModel: Assets.Scripts.Models.Towers.TowerModel, effectAtTowerStartModel: Assets.Scripts.Models.Effects.EffectModel, effectAtTowerEndModel: Assets.Scripts.Models.Effects.EffectModel, **kwargs):
        super().__init__(self, **kwargs)
		self.duration = duration
		self.durationFrames = durationFrames
		self.uavTowerModel = uavTowerModel
		self.ucavTowerModel = ucavTowerModel
		self.effectAtTowerStartModel = effectAtTowerStartModel
		self.effectAtTowerEndModel = effectAtTowerEndModel


class VineRuptureModel:

    offsets = {'effectModel': 48, 'interval': 56, 'intervalFrames': 60, 'projectileModel': 64, 'emission': 72, 'sound1': 80, 'sound2': 88, 'sound3': 96, 'sound4': 104}    
    def __init__(self, effectModel: Assets.Scripts.Models.Effects.EffectModel, interval: System.Single, intervalFrames: System.Int32, projectileModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, emission: Assets.Scripts.Models.Towers.Behaviors.Emissions.SingleEmissionModel, sound1: Assets.Scripts.Models.Audio.SoundModel, sound2: Assets.Scripts.Models.Audio.SoundModel, sound3: Assets.Scripts.Models.Audio.SoundModel, sound4: Assets.Scripts.Models.Audio.SoundModel, **kwargs):
        super().__init__(self, **kwargs)
		self.effectModel = effectModel
		self.interval = interval
		self.intervalFrames = intervalFrames
		self.projectileModel = projectileModel
		self.emission = emission
		self.sound1 = sound1
		self.sound2 = sound2
		self.sound3 = sound3
		self.sound4 = sound4


class AttackAirUnitModel:

    offsets = {'displayAirUnitModel': 112}    
    def __init__(self, displayAirUnitModel: Assets.Scripts.Models.GenericBehaviors.DisplayModel, **kwargs):
        super().__init__(self, **kwargs)
		self.displayAirUnitModel = displayAirUnitModel


class AttackBehaviorModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AttackModel:

    offsets = {'range': 64, 'targetProvider': 72, 'offsetX': 80, 'offsetY': 84, 'offsetZ': 88, 'attackThroughWalls': 92, 'fireWithoutTarget': 93, 'framesBeforeRetarget': 96, 'addsToSharedGrid': 100, 'sharedGridRange': 104}    
    def __init__(self, range: System.Single, targetProvider: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetSupplierModel, offsetX: System.Single, offsetY: System.Single, offsetZ: System.Single, attackThroughWalls: System.Boolean, fireWithoutTarget: System.Boolean, framesBeforeRetarget: System.Int32, addsToSharedGrid: System.Boolean, sharedGridRange: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.range = range
		self.targetProvider = targetProvider
		self.offsetX = offsetX
		self.offsetY = offsetY
		self.offsetZ = offsetZ
		self.attackThroughWalls = attackThroughWalls
		self.fireWithoutTarget = fireWithoutTarget
		self.framesBeforeRetarget = framesBeforeRetarget
		self.addsToSharedGrid = addsToSharedGrid
		self.sharedGridRange = sharedGridRange


class AttackFilterModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BrewTargettingModel:

    offsets = {'isSelectable': 72}    
    def __init__(self, isSelectable: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable


class CenterElipsePatternModel:

    offsets = {'widthRadius': 56, 'heightRadius': 60, 'isSelectable': 64, 'reverse': 65, 'display': 72, 'displayCount': 80, 'canSelectPoint': 84, 'pointDisplay': 88}    
    def __init__(self, widthRadius: System.Single, heightRadius: System.Single, isSelectable: System.Boolean, reverse: System.Boolean, display: System.String, displayCount: System.Int32, canSelectPoint: System.Boolean, pointDisplay: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.widthRadius = widthRadius
		self.heightRadius = heightRadius
		self.isSelectable = isSelectable
		self.reverse = reverse
		self.display = display
		self.displayCount = displayCount
		self.canSelectPoint = canSelectPoint
		self.pointDisplay = pointDisplay


class CheckTargetsWithoutOffsetsModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CirclePatternCloseModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CirclePatternFirstModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CirclePatternLastModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CirclePatternModel:

    offsets = {'radius': 56, 'isSelectable': 60, 'reverse': 61, 'display': 64, 'displayCount': 72}    
    def __init__(self, radius: System.Single, isSelectable: System.Boolean, reverse: System.Boolean, display: System.String, displayCount: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.radius = radius
		self.isSelectable = isSelectable
		self.reverse = reverse
		self.display = display
		self.displayCount = displayCount


class CirclePatternStrongModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CloseTargetTrackModel:

    offsets = {'radius': 56, 'isSelectable': 60, 'maxOffset': 64}    
    def __init__(self, radius: System.Single, isSelectable: System.Boolean, maxOffset: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.radius = radius
		self.isSelectable = isSelectable
		self.maxOffset = maxOffset


class CreateEffectWhileAttackingModel:

    offsets = {'effectModel': 48, 'exitEffectModel': 56}    
    def __init__(self, effectModel: Assets.Scripts.Models.Effects.EffectModel, exitEffectModel: Assets.Scripts.Models.Effects.EffectModel, **kwargs):
        super().__init__(self, **kwargs)
		self.effectModel = effectModel
		self.exitEffectModel = exitEffectModel


class FarTargetTrackModel:

    offsets = {'radius': 56, 'isSelectable': 60, 'maxOffset': 64, 'donutRadius': 68}    
    def __init__(self, radius: System.Single, isSelectable: System.Boolean, maxOffset: System.Single, donutRadius: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.radius = radius
		self.isSelectable = isSelectable
		self.maxOffset = maxOffset
		self.donutRadius = donutRadius


class FighterPilotPatternCloseModel:

    offsets = {'isSelectable': 56, 'offsetDistance': 60}    
    def __init__(self, isSelectable: System.Boolean, offsetDistance: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable
		self.offsetDistance = offsetDistance


class FighterPilotPatternFirstModel:

    offsets = {'isSelectable': 56, 'offsetDistance': 60}    
    def __init__(self, isSelectable: System.Boolean, offsetDistance: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable
		self.offsetDistance = offsetDistance


class FighterPilotPatternLastModel:

    offsets = {'isSelectable': 56, 'offsetDistance': 60}    
    def __init__(self, isSelectable: System.Boolean, offsetDistance: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable
		self.offsetDistance = offsetDistance


class FighterPilotPatternStrongModel:

    offsets = {'isSelectable': 56, 'offsetDistance': 60}    
    def __init__(self, isSelectable: System.Boolean, offsetDistance: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable
		self.offsetDistance = offsetDistance


class FigureEightPatternModel:

    offsets = {'radius': 56, 'isSelectable': 60, 'rotated': 61, 'display': 64, 'displayCount': 72}    
    def __init__(self, radius: System.Single, isSelectable: System.Boolean, rotated: System.Boolean, display: System.String, displayCount: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.radius = radius
		self.isSelectable = isSelectable
		self.rotated = rotated
		self.display = display
		self.displayCount = displayCount


class FindDeploymentLocationModel:

    offsets = {'searchRadius': 48, 'pointDistance': 52, 'towerModel': 56}    
    def __init__(self, searchRadius: System.Single, pointDistance: System.Single, towerModel: Assets.Scripts.Models.Towers.TowerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.searchRadius = searchRadius
		self.pointDistance = pointDistance
		self.towerModel = towerModel


class FollowTouchSettingModel:

    offsets = {'isSelectable': 56}    
    def __init__(self, isSelectable: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable


class LockInPlaceSettingModel:

    offsets = {'isSelectable': 56, 'display': 64}    
    def __init__(self, isSelectable: System.Boolean, display: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable
		self.display = display


class NecromancerTargetTrackWithinRangeModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class OffsetToTrackTargetModel:

    offsets = {'trackOffset': 56, 'attackModel': 64, 'isSelectable': 72}    
    def __init__(self, trackOffset: System.Single, attackModel: Assets.Scripts.Models.Towers.Behaviors.Attack.AttackModel, isSelectable: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.trackOffset = trackOffset
		self.attackModel = attackModel
		self.isSelectable = isSelectable


class PathMovementFromScreenCenterPatternModel:

    offsets = {'radius': 56, 'isSelectable': 60}    
    def __init__(self, radius: System.Single, isSelectable: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.radius = radius
		self.isSelectable = isSelectable


class PatrolPointsSettingModel:

    offsets = {'isSelectable': 56, 'pointSwitchDistance': 60, 'pointSwitchDistanceSquared': 64, 'minimumPointDistance': 68, 'minimumPointDistanceSquared': 72, 'dotSpacing': 76, 'dotOffset': 80, 'display': 88, 'lineDisplay': 96, 'lineDelayFrames': 104, 'lineDelay': 108}    
    def __init__(self, isSelectable: System.Boolean, pointSwitchDistance: System.Single, pointSwitchDistanceSquared: System.Single, minimumPointDistance: System.Single, minimumPointDistanceSquared: System.Single, dotSpacing: System.Single, dotOffset: System.Single, display: System.String, lineDisplay: System.String, lineDelayFrames: System.Int32, lineDelay: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable
		self.pointSwitchDistance = pointSwitchDistance
		self.pointSwitchDistanceSquared = pointSwitchDistanceSquared
		self.minimumPointDistance = minimumPointDistance
		self.minimumPointDistanceSquared = minimumPointDistanceSquared
		self.dotSpacing = dotSpacing
		self.dotOffset = dotOffset
		self.display = display
		self.lineDisplay = lineDisplay
		self.lineDelayFrames = lineDelayFrames
		self.lineDelay = lineDelay


class PrioritiseRotationModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PursuitSettingCustomModel:

    offsets = {'initialTargetType': 64, 'useParentForClose': 72, 'mustBeInRangeOfParent': 73}    
    def __init__(self, initialTargetType: System.String, useParentForClose: System.Boolean, mustBeInRangeOfParent: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.initialTargetType = initialTargetType
		self.useParentForClose = useParentForClose
		self.mustBeInRangeOfParent = mustBeInRangeOfParent


class PursuitSettingModel:

    offsets = {'isSelectable': 56, 'pursuitDistance': 60}    
    def __init__(self, isSelectable: System.Boolean, pursuitDistance: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable
		self.pursuitDistance = pursuitDistance


class RandomPositionBasicModel:

    offsets = {'minRadius': 56, 'maxRadius': 60, 'mapBorder': 64, 'useTerrainHeight': 68}    
    def __init__(self, minRadius: System.Single, maxRadius: System.Single, mapBorder: System.Single, useTerrainHeight: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.minRadius = minRadius
		self.maxRadius = maxRadius
		self.mapBorder = mapBorder
		self.useTerrainHeight = useTerrainHeight


class RandomPositionModel:

    offsets = {'minDistance': 56, 'maxDistance': 60, 'targetRadius': 64, 'targetRadiusSquared': 68, 'isSelectable': 72, 'pointDistance': 76, 'dontUseTowerPosition': 80, 'areaType': 88, 'useInverted': 96, 'ignoreTerrain': 97, 'idealDistanceWithinTrack': 100}    
    def __init__(self, minDistance: System.Single, maxDistance: System.Single, targetRadius: System.Single, targetRadiusSquared: System.Single, isSelectable: System.Boolean, pointDistance: System.Single, dontUseTowerPosition: System.Boolean, areaType: System.String, useInverted: System.Boolean, ignoreTerrain: System.Boolean, idealDistanceWithinTrack: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.minDistance = minDistance
		self.maxDistance = maxDistance
		self.targetRadius = targetRadius
		self.targetRadiusSquared = targetRadiusSquared
		self.isSelectable = isSelectable
		self.pointDistance = pointDistance
		self.dontUseTowerPosition = dontUseTowerPosition
		self.areaType = areaType
		self.useInverted = useInverted
		self.ignoreTerrain = ignoreTerrain
		self.idealDistanceWithinTrack = idealDistanceWithinTrack


class RandomTargetModel:

    offsets = {'isSelectable': 56}    
    def __init__(self, isSelectable: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable


class RandomTargetTrackModel:

    offsets = {'isSelectable': 56}    
    def __init__(self, isSelectable: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable


class RotateSideToTargetModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RotateToDefaultPositionModel:

    offsets = {'rotation': 48}    
    def __init__(self, rotation: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.rotation = rotation


class RotateToMiddleOfTargetsModel:

    offsets = {'onlyRotateDuringThrow': 48}    
    def __init__(self, onlyRotateDuringThrow: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.onlyRotateDuringThrow = onlyRotateDuringThrow


class RotateToParentModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RotateToPointerModel:

    offsets = {'rate': 48, 'rateFrames': 52, 'rotateTower': 56, 'weaponEjectZ': 60}    
    def __init__(self, rate: System.Single, rateFrames: System.Single, rotateTower: System.Boolean, weaponEjectZ: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.rate = rate
		self.rateFrames = rateFrames
		self.rotateTower = rotateTower
		self.weaponEjectZ = weaponEjectZ


class RotateToTargetAirUnitModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RotateToTargetAttackOffsetModel:

    offsets = {'ignoreParentRotationTime': 64, 'ignoreParentRotationFrames': 68}    
    def __init__(self, ignoreParentRotationTime: System.Single, ignoreParentRotationFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.ignoreParentRotationTime = ignoreParentRotationTime
		self.ignoreParentRotationFrames = ignoreParentRotationFrames


class RotateToTargetModel:

    offsets = {'onlyRotateDuringThrow': 48, 'useThrowMarkerHeight': 49, 'rotateOnlyOnThrow': 50, 'additionalRotation': 52, 'rotateTower': 56, 'useMainAttackRotation': 57}    
    def __init__(self, onlyRotateDuringThrow: System.Boolean, useThrowMarkerHeight: System.Boolean, rotateOnlyOnThrow: System.Boolean, additionalRotation: System.Int32, rotateTower: System.Boolean, useMainAttackRotation: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.onlyRotateDuringThrow = onlyRotateDuringThrow
		self.useThrowMarkerHeight = useThrowMarkerHeight
		self.rotateOnlyOnThrow = rotateOnlyOnThrow
		self.additionalRotation = additionalRotation
		self.rotateTower = rotateTower
		self.useMainAttackRotation = useMainAttackRotation


class SetTargetIndexFromBaseModel:

    offsets = {'indexOffset': 48}    
    def __init__(self, indexOffset: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.indexOffset = indexOffset


class SmartTargetTrackModel:

    offsets = {'radius': 56, 'isSelectable': 60, 'maxOffset': 64}    
    def __init__(self, radius: System.Single, isSelectable: System.Boolean, maxOffset: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.radius = radius
		self.isSelectable = isSelectable
		self.maxOffset = maxOffset


class SubmergedTargetModel:

    offsets = {'isSelectable': 56}    
    def __init__(self, isSelectable: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable


class TargetCloseAirUnitModel:

    offsets = {'isSelectable': 56}    
    def __init__(self, isSelectable: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable


class TargetCloseModel:

    offsets = {'isSelectable': 56}    
    def __init__(self, isSelectable: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable


class TargetCloseSharedRangeModel:

    offsets = {'isSelectable': 56, 'isSharedRangeEnabled': 57, 'isGlobalRange': 58}    
    def __init__(self, isSelectable: System.Boolean, isSharedRangeEnabled: System.Boolean, isGlobalRange: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable
		self.isSharedRangeEnabled = isSharedRangeEnabled
		self.isGlobalRange = isGlobalRange


class TargetDivideAndConquerModel:

    offsets = {'isSelectable': 56}    
    def __init__(self, isSelectable: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable


class TargetEliteTargettingModel:

    offsets = {'isSelectable': 56, 'percentageThroughMap': 60}    
    def __init__(self, isSelectable: System.Boolean, percentageThroughMap: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable
		self.percentageThroughMap = percentageThroughMap


class TargetExpensiveFriendlyModel:

    offsets = {'ignoreList': 56, 'ignorePrevious': 64, 'previousId': 72, 'useRange': 80, 'isSelectable': 81}    
    def __init__(self, ignoreList: System.String, ignorePrevious: System.Boolean, previousId: System.String, useRange: System.Boolean, isSelectable: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.ignoreList = ignoreList
		self.ignorePrevious = ignorePrevious
		self.previousId = previousId
		self.useRange = useRange
		self.isSelectable = isSelectable


class TargetFirstAirUnitModel:

    offsets = {'isSelectable': 56}    
    def __init__(self, isSelectable: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable


class TargetFirstModel:

    offsets = {'isSelectable': 56}    
    def __init__(self, isSelectable: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable


class TargetFirstSharedRangeModel:

    offsets = {'isSelectable': 56, 'isSharedRangeEnabled': 57, 'isGlobalRange': 58}    
    def __init__(self, isSelectable: System.Boolean, isSharedRangeEnabled: System.Boolean, isGlobalRange: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable
		self.isSharedRangeEnabled = isSharedRangeEnabled
		self.isGlobalRange = isGlobalRange


class TargetFirstWithPreferenceModel:

    offsets = {'isSelectable': 56, 'priorityBloonTags': 64}    
    def __init__(self, isSelectable: System.Boolean, priorityBloonTags: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable
		self.priorityBloonTags = priorityBloonTags


class TargetFriendlyModel:

    offsets = {'ignoreList': 56, 'isSelectable': 64, 'mutationId': 72, 'mustHaveWeapon': 80}    
    def __init__(self, ignoreList: System.String, isSelectable: System.Boolean, mutationId: System.String, mustHaveWeapon: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.ignoreList = ignoreList
		self.isSelectable = isSelectable
		self.mutationId = mutationId
		self.mustHaveWeapon = mustHaveWeapon


class TargetGrapplableModel:

    offsets = {'canHitZomg': 56, 'isSelectable': 57}    
    def __init__(self, canHitZomg: System.Boolean, isSelectable: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.canHitZomg = canHitZomg
		self.isSelectable = isSelectable


class TargetInFrontOfAirUnitModel:

    offsets = {'isSelectable': 56}    
    def __init__(self, isSelectable: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable


class TargetIndependantModel:

    offsets = {'isSelectable': 56, 'targetProvider': 64}    
    def __init__(self, isSelectable: System.Boolean, targetProvider: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetSupplierModel, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable
		self.targetProvider = targetProvider


class TargetLastAirUnitModel:

    offsets = {'isSelectable': 56}    
    def __init__(self, isSelectable: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable


class TargetLastModel:

    offsets = {'isSelectable': 56}    
    def __init__(self, isSelectable: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable


class TargetLastSharedRangeModel:

    offsets = {'isSelectable': 56, 'isSharedRangeEnabled': 57, 'isGlobalRange': 58}    
    def __init__(self, isSelectable: System.Boolean, isSharedRangeEnabled: System.Boolean, isGlobalRange: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable
		self.isSharedRangeEnabled = isSharedRangeEnabled
		self.isGlobalRange = isGlobalRange


class TargetLeftHandModel:

    offsets = {'isSelectable': 56}    
    def __init__(self, isSelectable: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable


class TargetMoabModel:

    offsets = {'isSelectable': 56, 'findStrongest': 57}    
    def __init__(self, isSelectable: System.Boolean, findStrongest: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable
		self.findStrongest = findStrongest


class TargetOppositeModel:

    offsets = {'isSelectable': 56}    
    def __init__(self, isSelectable: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable


class TargetPointerModel:

    offsets = {'isSelectable': 56, 'customName': 64, 'setOnAttached': 72}    
    def __init__(self, isSelectable: System.Boolean, customName: System.String, setOnAttached: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable
		self.customName = customName
		self.setOnAttached = setOnAttached


class TargetRightHandModel:

    offsets = {'isSelectable': 56}    
    def __init__(self, isSelectable: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable


class TargetSelectedPointModel:

    offsets = {'isSelectable': 56, 'display': 64, 'scale': 72, 'customName': 80}    
    def __init__(self, isSelectable: System.Boolean, display: System.String, scale: System.Single, customName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable
		self.display = display
		self.scale = scale
		self.customName = customName


class TargetStaggeredShotsModel:

    offsets = {'filterTower': 88}    
    def __init__(self, filterTower: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.filterTower = filterTower


class TargetStrongAirUnitModel:

    offsets = {'isSelectable': 56}    
    def __init__(self, isSelectable: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable


class TargetStrongModel:

    offsets = {'isSelectable': 56}    
    def __init__(self, isSelectable: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable


class TargetStrongSharedRangeModel:

    offsets = {'isSelectable': 56, 'isSharedRangeEnabled': 57, 'isGlobalRange': 58}    
    def __init__(self, isSelectable: System.Boolean, isSharedRangeEnabled: System.Boolean, isGlobalRange: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable
		self.isSharedRangeEnabled = isSharedRangeEnabled
		self.isGlobalRange = isGlobalRange


class TargetSupplierModel:

    offsets = {'isOnSubTower': 48}    
    def __init__(self, isOnSubTower: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isOnSubTower = isOnSubTower


class TargetTagModel:

    offsets = {'tag': 56, 'isSelectable': 64, 'findStrongest': 65}    
    def __init__(self, tag: System.String, isSelectable: System.Boolean, findStrongest: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.tag = tag
		self.isSelectable = isSelectable
		self.findStrongest = findStrongest


class TargetTrackModel:

    offsets = {'isSelectable': 56, 'maxOffset': 60, 'onlyTargetPathsWithBloons': 64}    
    def __init__(self, isSelectable: System.Boolean, maxOffset: System.Single, onlyTargetPathsWithBloons: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable
		self.maxOffset = maxOffset
		self.onlyTargetPathsWithBloons = onlyTargetPathsWithBloons


class TargetTrackOrDefaultAcidPoolModel:

    offsets = {'radius': 56, 'isSelectable': 60, 'useTowerRange': 61, 'isActive': 62}    
    def __init__(self, radius: System.Single, isSelectable: System.Boolean, useTowerRange: System.Boolean, isActive: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.radius = radius
		self.isSelectable = isSelectable
		self.useTowerRange = useTowerRange
		self.isActive = isActive


class TargetTrackOrDefaultModel:

    offsets = {'radius': 56, 'isSelectable': 60, 'useTowerRange': 61, 'forceTargetTrack': 62, 'useClosestTrack': 63, 'maxTrackOffset': 64}    
    def __init__(self, radius: System.Single, isSelectable: System.Boolean, useTowerRange: System.Boolean, forceTargetTrack: System.Boolean, useClosestTrack: System.Boolean, maxTrackOffset: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.radius = radius
		self.isSelectable = isSelectable
		self.useTowerRange = useTowerRange
		self.forceTargetTrack = forceTargetTrack
		self.useClosestTrack = useClosestTrack
		self.maxTrackOffset = maxTrackOffset


class TargetZoneDefenceModel:

    offsets = {'isSelectable': 56}    
    def __init__(self, isSelectable: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable


class UsePresetTargetModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class UseTowerRangeModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class WingmonkeyPatternModel:

    offsets = {'maxSpeed': 56, 'turningSpeed': 60, 'minDistanceToTargetBeforeFlyover': 64, 'distanceOfFlyover': 68, 'bankAngleMax': 72, 'bankSmoothness': 76, 'updateDelay': 80, 'maximumAdjacentTargetAngle': 84, 'overshootDistance': 88}    
    def __init__(self, maxSpeed: System.Single, turningSpeed: System.Single, minDistanceToTargetBeforeFlyover: System.Single, distanceOfFlyover: System.Single, bankAngleMax: System.Single, bankSmoothness: System.Single, updateDelay: System.Single, maximumAdjacentTargetAngle: System.Single, overshootDistance: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.maxSpeed = maxSpeed
		self.turningSpeed = turningSpeed
		self.minDistanceToTargetBeforeFlyover = minDistanceToTargetBeforeFlyover
		self.distanceOfFlyover = distanceOfFlyover
		self.bankAngleMax = bankAngleMax
		self.bankSmoothness = bankSmoothness
		self.updateDelay = updateDelay
		self.maximumAdjacentTargetAngle = maximumAdjacentTargetAngle
		self.overshootDistance = overshootDistance


class AdoraEmissionModel:

    offsets = {'count': 56, 'angleBetween': 60}    
    def __init__(self, count: System.Int32, angleBetween: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.count = count
		self.angleBetween = angleBetween


class AlternatingArcEmissionModel:

    offsets = {'angle': 56, 'count': 60, 'offsetStart': 64, 'sliceSize': 68, 'useParentRotation': 72}    
    def __init__(self, angle: System.Single, count: System.Int32, offsetStart: System.Single, sliceSize: System.Single, useParentRotation: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.angle = angle
		self.count = count
		self.offsetStart = offsetStart
		self.sliceSize = sliceSize
		self.useParentRotation = useParentRotation


class ArcEmissionModel:

    offsets = {'angle': 56, 'offsetStart': 60, 'offset': 64, 'sliceSize': 68, 'ignoreTowerRotation': 72, 'useProjectileRotation': 73, 'Count': 76}    
    def __init__(self, angle: System.Single, offsetStart: System.Single, offset: System.Single, sliceSize: System.Single, ignoreTowerRotation: System.Boolean, useProjectileRotation: System.Boolean, Count: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.angle = angle
		self.offsetStart = offsetStart
		self.offset = offset
		self.sliceSize = sliceSize
		self.ignoreTowerRotation = ignoreTowerRotation
		self.useProjectileRotation = useProjectileRotation
		self.Count = Count


class EmissionBehaviorModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class EmissionClosestOffsetModel:

    offsets = {'rotateProjectileWithTower': 56, 'animationOriginState': 72, 'effectModel': 80}    
    def __init__(self, rotateProjectileWithTower: System.Boolean, animationOriginState: System.Int32, effectModel: Assets.Scripts.Models.Effects.EffectModel, **kwargs):
        super().__init__(self, **kwargs)
		self.rotateProjectileWithTower = rotateProjectileWithTower
		self.animationOriginState = animationOriginState
		self.effectModel = effectModel


class EmissionModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class EmissionOverTimeModel:

    offsets = {'count': 56, 'timeBetween': 60}    
    def __init__(self, count: System.Int32, timeBetween: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.count = count
		self.timeBetween = timeBetween


class EmissionWithOffsetsModel:

    offsets = {'projectileCount': 64, 'rotateProjectileWithTower': 68, 'randomRotationCone': 72}    
    def __init__(self, projectileCount: System.Int32, rotateProjectileWithTower: System.Boolean, randomRotationCone: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.projectileCount = projectileCount
		self.rotateProjectileWithTower = rotateProjectileWithTower
		self.randomRotationCone = randomRotationCone


class GrappleEmissionModel:

    offsets = {'numGrapples': 56}    
    def __init__(self, numGrapples: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.numGrapples = numGrapples


class InstantDamageEmissionModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class LerpEmissionModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class LineProjectileEmissionModel:

    offsets = {'useTargetAsEndPoint': 56, 'displayPath': 64, 'displayLength': 72, 'displayLifetime': 76, 'ignoreBlockers': 80, 'effectAtEndModel': 88, 'effectAtEndRate': 96, 'effectAtEndRateFrames': 100, 'dontUseTowerPosition': 104, 'useTowerRotation': 105, 'useLengthSpeed': 106, 'lengthSpeed': 108, 'lengthPerFrame': 112, 'projectileAtEndModel': 120, 'emissionAtEndModel': 128, 'endProjectileSharesPierce': 136}    
    def __init__(self, useTargetAsEndPoint: System.Boolean, displayPath: Assets.Scripts.Models.Effects.AssetPathModel, displayLength: System.Single, displayLifetime: System.Single, ignoreBlockers: System.Boolean, effectAtEndModel: Assets.Scripts.Models.Effects.EffectModel, effectAtEndRate: System.Single, effectAtEndRateFrames: System.Int32, dontUseTowerPosition: System.Boolean, useTowerRotation: System.Boolean, useLengthSpeed: System.Boolean, lengthSpeed: System.Single, lengthPerFrame: System.Single, projectileAtEndModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, emissionAtEndModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel, endProjectileSharesPierce: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.useTargetAsEndPoint = useTargetAsEndPoint
		self.displayPath = displayPath
		self.displayLength = displayLength
		self.displayLifetime = displayLifetime
		self.ignoreBlockers = ignoreBlockers
		self.effectAtEndModel = effectAtEndModel
		self.effectAtEndRate = effectAtEndRate
		self.effectAtEndRateFrames = effectAtEndRateFrames
		self.dontUseTowerPosition = dontUseTowerPosition
		self.useTowerRotation = useTowerRotation
		self.useLengthSpeed = useLengthSpeed
		self.lengthSpeed = lengthSpeed
		self.lengthPerFrame = lengthPerFrame
		self.projectileAtEndModel = projectileAtEndModel
		self.emissionAtEndModel = emissionAtEndModel
		self.endProjectileSharesPierce = endProjectileSharesPierce


class MultipleTrackEmissionModel:

    offsets = {'offset': 56, 'count': 60, 'offsetStart': 64}    
    def __init__(self, offset: System.Single, count: System.Int32, offsetStart: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.offset = offset
		self.count = count
		self.offsetStart = offsetStart


class NecromancerEmissionModel:

    offsets = {'minBloonsSpawnedPerWave': 56, 'maxBloonsSpawnedPerWave': 60, 'maxRbeSpawnedPerSecond': 64, 'maxPathRandomRange': 68, 'maxPiercePerBloon': 72, 'maxPathOffset': 76, 'maxRbeStored': 80, 'rateStackMax': 84, 'rateRbePerStack': 88, 'damageStackMax': 92, 'damageRbePerStack': 96, 'roundsBeforeDecay': 100, 'pierceMutators': 104, 'damageMutators': 112}    
    def __init__(self, minBloonsSpawnedPerWave: System.Int32, maxBloonsSpawnedPerWave: System.Int32, maxRbeSpawnedPerSecond: System.Int32, maxPathRandomRange: System.Int32, maxPiercePerBloon: System.Int32, maxPathOffset: System.Int32, maxRbeStored: System.Int32, rateStackMax: System.Int32, rateRbePerStack: System.Int32, damageStackMax: System.Int32, damageRbePerStack: System.Int32, roundsBeforeDecay: System.Int32, pierceMutators: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Models.Towers.Behaviors.Emissions.NecromancerEmissionModel.PierceMutator>, damageMutators: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Models.Towers.Behaviors.Emissions.NecromancerEmissionModel.DamageMutator>, **kwargs):
        super().__init__(self, **kwargs)
		self.minBloonsSpawnedPerWave = minBloonsSpawnedPerWave
		self.maxBloonsSpawnedPerWave = maxBloonsSpawnedPerWave
		self.maxRbeSpawnedPerSecond = maxRbeSpawnedPerSecond
		self.maxPathRandomRange = maxPathRandomRange
		self.maxPiercePerBloon = maxPiercePerBloon
		self.maxPathOffset = maxPathOffset
		self.maxRbeStored = maxRbeStored
		self.rateStackMax = rateStackMax
		self.rateRbePerStack = rateRbePerStack
		self.damageStackMax = damageStackMax
		self.damageRbePerStack = damageRbePerStack
		self.roundsBeforeDecay = roundsBeforeDecay
		self.pierceMutators = pierceMutators
		self.damageMutators = damageMutators


class ParallelEmissionModel:

    offsets = {'spreadLength': 56, 'yOffset': 60, 'count': 64, 'linear': 68, 'offsetStart': 72}    
    def __init__(self, spreadLength: System.Single, yOffset: System.Single, count: System.Int32, linear: System.Boolean, offsetStart: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.spreadLength = spreadLength
		self.yOffset = yOffset
		self.count = count
		self.linear = linear
		self.offsetStart = offsetStart


class PointEmissionModel:

    offsets = {'checkLineOfSight': 56}    
    def __init__(self, checkLineOfSight: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.checkLineOfSight = checkLineOfSight


class PrinceOfDarknessEmissionModel:

    offsets = {'alternateProjectile': 56, 'maxPathRandomRange': 64, 'minPiercePerBloon': 68, 'maxPathOffset': 72}    
    def __init__(self, alternateProjectile: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, maxPathRandomRange: System.Int32, minPiercePerBloon: System.Int32, maxPathOffset: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.alternateProjectile = alternateProjectile
		self.maxPathRandomRange = maxPathRandomRange
		self.minPiercePerBloon = minPiercePerBloon
		self.maxPathOffset = maxPathOffset


class RandomArcEmissionModel:

    offsets = {'randomAngle': 80, 'startOffset': 84}    
    def __init__(self, randomAngle: System.Single, startOffset: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.randomAngle = randomAngle
		self.startOffset = startOffset


class RandomEmissionModel:

    offsets = {'angle': 56, 'count': 60, 'startOffset': 64, 'useSpeedMultiplier': 68, 'speedMultiplierMin': 72, 'speedMultiplierMax': 76, 'ejectPointRandomness': 80, 'useMainAttackRotation': 84}    
    def __init__(self, angle: System.Single, count: System.Int32, startOffset: System.Single, useSpeedMultiplier: System.Boolean, speedMultiplierMin: System.Single, speedMultiplierMax: System.Single, ejectPointRandomness: System.Single, useMainAttackRotation: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.angle = angle
		self.count = count
		self.startOffset = startOffset
		self.useSpeedMultiplier = useSpeedMultiplier
		self.speedMultiplierMin = speedMultiplierMin
		self.speedMultiplierMax = speedMultiplierMax
		self.ejectPointRandomness = ejectPointRandomness
		self.useMainAttackRotation = useMainAttackRotation


class RandomRotationEmissionModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RandomTargetSpreadModel:

    offsets = {'spread': 56}    
    def __init__(self, spread: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.spread = spread


class SendToBankModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SingleEmissionAtTowerModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SingleEmissionDisplayOffsetModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SingleEmissionModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SingleEmmisionTowardsTargetModel:

    offsets = {'offset': 56}    
    def __init__(self, offset: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.offset = offset


class EmissionArcRotationOffDisplayDirectionModel:

    offsets = {'offsetRotation': 48}    
    def __init__(self, offsetRotation: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.offsetRotation = offsetRotation


class EmissionArcRotationOffTowerDirectionModel:

    offsets = {'offsetRotation': 48}    
    def __init__(self, offsetRotation: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.offsetRotation = offsetRotation


class EmissionCamoIfTargetIsCamoModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class EmissionMaxProjectileRadiusModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class EmissionRotationOffAlternateDisplayModel:

    offsets = {'offsetRotation': 48}    
    def __init__(self, offsetRotation: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.offsetRotation = offsetRotation


class EmissionRotationOffBloonDirectionModel:

    offsets = {'useAirUnitPosition': 48, 'dontSetAfterEmit': 49}    
    def __init__(self, useAirUnitPosition: System.Boolean, dontSetAfterEmit: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.useAirUnitPosition = useAirUnitPosition
		self.dontSetAfterEmit = dontSetAfterEmit


class EmissionRotationOffDisplayModel:

    offsets = {'offsetRotation': 48}    
    def __init__(self, offsetRotation: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.offsetRotation = offsetRotation


class EmissionRotationOffDisplayOnEmitModel:

    offsets = {'offsetRotation': 48}    
    def __init__(self, offsetRotation: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.offsetRotation = offsetRotation


class EmissionRotationOffProjectileDirectionModel:

    offsets = {'startingOffset': 48, 'angleInBetween': 52, 'alwaysCentre': 56}    
    def __init__(self, startingOffset: System.Single, angleInBetween: System.Single, alwaysCentre: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.startingOffset = startingOffset
		self.angleInBetween = angleInBetween
		self.alwaysCentre = alwaysCentre


class EmissionRotationOffTowerDirectionModel:

    offsets = {'offsetRotation': 48}    
    def __init__(self, offsetRotation: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.offsetRotation = offsetRotation


class EmissionRotationOffsetModel:

    offsets = {'offsetRotation': 48}    
    def __init__(self, offsetRotation: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.offsetRotation = offsetRotation


class EmissionRotationZeroModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PlacementAreaTypeHeightSettingModel:

    offsets = {'landHeight': 48, 'waterHeight': 52}    
    def __init__(self, landHeight: System.Single, waterHeight: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.landHeight = landHeight
		self.waterHeight = waterHeight


class FilterAllExceptTargetModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class FilterAllModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class FilterAlternateWeaponTargetAngleModel:

    offsets = {'fieldOfView': 48, 'baseTowerRotationOffset': 52}    
    def __init__(self, fieldOfView: System.Single, baseTowerRotationOffset: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.fieldOfView = fieldOfView
		self.baseTowerRotationOffset = baseTowerRotationOffset


class FilterBloonIfDamageTypeModel:

    offsets = {'ifCantHitBloonProperties': 48, 'damageModel': 56}    
    def __init__(self, ifCantHitBloonProperties: BloonProperties, damageModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.DamageModel, **kwargs):
        super().__init__(self, **kwargs)
		self.ifCantHitBloonProperties = ifCantHitBloonProperties
		self.damageModel = damageModel


class FilterCollisionWhileMovingModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class FilterFrozenBloonsModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class FilterGlueLevelModel:

    offsets = {'glueLevel': 48}    
    def __init__(self, glueLevel: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.glueLevel = glueLevel


class FilterInvisibleModel:

    offsets = {'isActive': 48, 'ignoreBroadPhase': 49}    
    def __init__(self, isActive: System.Boolean, ignoreBroadPhase: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isActive = isActive
		self.ignoreBroadPhase = ignoreBroadPhase


class FilterInvisibleSubIntelModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class FilterMoabModel:

    offsets = {'flip': 48}    
    def __init__(self, flip: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.flip = flip


class FilterModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class FilterMutatedTargetModel:

    offsets = {'mutationId': 48}    
    def __init__(self, mutationId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.mutationId = mutationId


class FilterOfftrackModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class FilterOnlyCamoInModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class FilterOutBloonModel:

    offsets = {'bloonId': 48}    
    def __init__(self, bloonId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonId = bloonId


class FilterOutOffscreenModel:

    offsets = {'includeBloonRadius': 48}    
    def __init__(self, includeBloonRadius: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.includeBloonRadius = includeBloonRadius


class FilterOutTagModel:

    offsets = {'tag': 48}    
    def __init__(self, tag: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.tag = tag


class FilterOveridingMutatedTargetModel:

    offsets = {'mutationId': 48, 'highestPriorityMutationId': 64, 'defaultMutationId': 72}    
    def __init__(self, mutationId: System.String, highestPriorityMutationId: System.String, defaultMutationId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.mutationId = mutationId
		self.highestPriorityMutationId = highestPriorityMutationId
		self.defaultMutationId = defaultMutationId


class FilterParentTowerRangeModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class FilterTargetAngleModel:

    offsets = {'fieldOfView': 48, 'baseTowerRotationOffset': 52}    
    def __init__(self, fieldOfView: System.Single, baseTowerRotationOffset: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.fieldOfView = fieldOfView
		self.baseTowerRotationOffset = baseTowerRotationOffset


class FilterWithChanceModel:

    offsets = {'filterChance': 48}    
    def __init__(self, filterChance: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.filterChance = filterChance


class FilterWithTagModel:

    offsets = {'moabTag': 48, 'camoTag': 49, 'growTag': 50, 'fortifiedTag': 51, 'tag': 56, 'inclusive': 64}    
    def __init__(self, moabTag: System.Boolean, camoTag: System.Boolean, growTag: System.Boolean, fortifiedTag: System.Boolean, tag: System.String, inclusive: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.moabTag = moabTag
		self.camoTag = camoTag
		self.growTag = growTag
		self.fortifiedTag = fortifiedTag
		self.tag = tag
		self.inclusive = inclusive


class FilterWithTagsModel:

    offsets = {'inclusive': 56}    
    def __init__(self, inclusive: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.inclusive = inclusive


class KnowledgeLevelModel:

    offsets = {'level': 48, 'mmCost': 52}    
    def __init__(self, level: System.Int32, mmCost: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.level = level
		self.mmCost = mmCost


class KnowledgeModel:

    offsets = {'id': 48, 'mod': 56, 'offsetX': 72, 'offsetY': 76, 'dontPreApply': 80}    
    def __init__(self, id: System.String, mod: Assets.Scripts.Models.Towers.Mods.ModModel, offsetX: System.Single, offsetY: System.Single, dontPreApply: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.id = id
		self.mod = mod
		self.offsetX = offsetX
		self.offsetY = offsetY
		self.dontPreApply = dontPreApply


class KnowledgeSetModel:

    offsets = {'knowledgeSetName': 56}    
    def __init__(self, knowledgeSetName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.knowledgeSetName = knowledgeSetName


class KnowledgeTierModel:

    offsets = {'tier': 48, 'investmentRequired': 52}    
    def __init__(self, tier: System.Int32, investmentRequired: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.tier = tier
		self.investmentRequired = investmentRequired


class AbilityCooldownPercentageModModel:

    offsets = {'cooldownPercentageReduction': 48}    
    def __init__(self, cooldownPercentageReduction: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.cooldownPercentageReduction = cooldownPercentageReduction


class AbilityCooldownTimeModModel:

    offsets = {'cooldownTimeReduction': 48}    
    def __init__(self, cooldownTimeReduction: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.cooldownTimeReduction = cooldownTimeReduction


class AcidPoolModModel:

    offsets = {'additionalTime': 48}    
    def __init__(self, additionalTime: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalTime = additionalTime


class ActivateAttackModModel:

    offsets = {'additionalTime': 48}    
    def __init__(self, additionalTime: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalTime = additionalTime


class AddAbilityToTowerModModel:

    offsets = {'abilityModel': 48}    
    def __init__(self, abilityModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.AbilityModel, **kwargs):
        super().__init__(self, **kwargs)
		self.abilityModel = abilityModel


class AddBehaviourToBloonMutationModModel:

    offsets = {'mutationId': 48}    
    def __init__(self, mutationId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.mutationId = mutationId


class AgeModModel:

    offsets = {'additionalTime': 48}    
    def __init__(self, additionalTime: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalTime = additionalTime


class AlternateArcModModel:

    offsets = {'increase': 48, 'shotCount': 52}    
    def __init__(self, increase: System.Int32, shotCount: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.increase = increase
		self.shotCount = shotCount


class AmbidextrousRangsModModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AmbushTechModModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ApplyModModel:

    offsets = {'mod': 48, 'target': 56}    
    def __init__(self, mod: System.String, target: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.mod = mod
		self.target = target


class BankDepositsModModel:

    offsets = {'depositPercent': 48, 'towerSelectionMenuThemeId': 56, 'displayPath': 64, 'displayLifetime': 72}    
    def __init__(self, depositPercent: System.Single, towerSelectionMenuThemeId: System.String, displayPath: System.String, displayLifetime: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.depositPercent = depositPercent
		self.towerSelectionMenuThemeId = towerSelectionMenuThemeId
		self.displayPath = displayPath
		self.displayLifetime = displayLifetime


class BankModModel:

    offsets = {'additionalCapacity': 48}    
    def __init__(self, additionalCapacity: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalCapacity = additionalCapacity


class BloonHealthModModel:

    offsets = {'percentageHealthReduced': 48}    
    def __init__(self, percentageHealthReduced: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.percentageHealthReduced = percentageHealthReduced


class BloonSetModModel:

    offsets = {'sceneName': 48}    
    def __init__(self, sceneName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.sceneName = sceneName


class BonusCashPerRoundModModel:

    offsets = {'roundMultiple': 48, 'baseCash': 52}    
    def __init__(self, roundMultiple: System.Single, baseCash: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.roundMultiple = roundMultiple
		self.baseCash = baseCash


class CallToArmsModModel:

    offsets = {'additionalTime': 48}    
    def __init__(self, additionalTime: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalTime = additionalTime


class CashIncreaseModModel:

    offsets = {'additionalAmount': 48, 'percentIncrease': 52}    
    def __init__(self, additionalAmount: System.Single, percentIncrease: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalAmount = additionalAmount
		self.percentIncrease = percentIncrease


class CashModModel:

    offsets = {'percentBonus': 48, 'bonusMultiplierBuff': 52}    
    def __init__(self, percentBonus: System.Single, bonusMultiplierBuff: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.percentBonus = percentBonus
		self.bonusMultiplierBuff = bonusMultiplierBuff


class CashPerRoundModModel:

    offsets = {'additionalMoney': 48}    
    def __init__(self, additionalMoney: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalMoney = additionalMoney


class CeramicShockModModel:

    offsets = {'slowModelToUse': 48}    
    def __init__(self, slowModelToUse: Assets.Scripts.Models.Towers.Projectiles.Behaviors.SlowForBloonModel, **kwargs):
        super().__init__(self, **kwargs)
		self.slowModelToUse = slowModelToUse


class ChimpsModModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ColdFrontModModel:

    offsets = {'freeze': 48, 'addBehaviorToBloon': 56, 'chanceToFreeze': 64}    
    def __init__(self, freeze: Assets.Scripts.Models.Towers.Projectiles.Behaviors.FreezeModel, addBehaviorToBloon: Assets.Scripts.Models.Towers.Projectiles.Behaviors.AddBehaviorToBloonModel, chanceToFreeze: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.freeze = freeze
		self.addBehaviorToBloon = addBehaviorToBloon
		self.chanceToFreeze = chanceToFreeze


class ComeOnEverybodyModModel:

    offsets = {'discountMultiplier': 48, 'rateMultiplier': 52, 'buffLocsNameRate': 56, 'buffIconNameRate': 64, 'buffLocsNamePrice': 72, 'buffIconNamePrice': 80}    
    def __init__(self, discountMultiplier: System.Single, rateMultiplier: System.Single, buffLocsNameRate: System.String, buffIconNameRate: System.String, buffLocsNamePrice: System.String, buffIconNamePrice: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.discountMultiplier = discountMultiplier
		self.rateMultiplier = rateMultiplier
		self.buffLocsNameRate = buffLocsNameRate
		self.buffIconNameRate = buffIconNameRate
		self.buffLocsNamePrice = buffLocsNamePrice
		self.buffIconNamePrice = buffIconNamePrice


class CreateEffectOnAbilityModModel:

    offsets = {'additionalLifespan': 48}    
    def __init__(self, additionalLifespan: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalLifespan = additionalLifespan


class CrossTheStreamsModModel:

    offsets = {'projectile': 48, 'effectModel': 56, 'rate': 64, 'rateFrames': 68, 'positionRandomness': 72, 'endPointOffset': 76}    
    def __init__(self, projectile: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, effectModel: Assets.Scripts.Models.Effects.EffectModel, rate: System.Single, rateFrames: System.Int32, positionRandomness: System.Single, endPointOffset: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.projectile = projectile
		self.effectModel = effectModel
		self.rate = rate
		self.rateFrames = rateFrames
		self.positionRandomness = positionRandomness
		self.endPointOffset = endPointOffset


class DamageIncreaseModModel:

    offsets = {'amount': 48, 'optionalDamageScriptIds': 56}    
    def __init__(self, amount: System.Single, optionalDamageScriptIds: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.amount = amount
		self.optionalDamageScriptIds = optionalDamageScriptIds


class DamageModifierForBloonTypeModModel:

    offsets = {'percentMultiplierOverride': 48, 'percentBonus': 52, 'additiveBonus': 56, 'withTag': 64}    
    def __init__(self, percentMultiplierOverride: System.Single, percentBonus: System.Single, additiveBonus: System.Single, withTag: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.percentMultiplierOverride = percentMultiplierOverride
		self.percentBonus = percentBonus
		self.additiveBonus = additiveBonus
		self.withTag = withTag


class DamageModifierForTagModModel:

    offsets = {'bloonTag': 48, 'multiplierAdditive': 56, 'addative': 60}    
    def __init__(self, bloonTag: System.String, multiplierAdditive: System.Single, addative: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonTag = bloonTag
		self.multiplierAdditive = multiplierAdditive
		self.addative = addative


class DamageOverTimeModModel:

    offsets = {'timeReductionAmount': 48, 'damageIncreaseAmount': 52}    
    def __init__(self, timeReductionAmount: System.Single, damageIncreaseAmount: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.timeReductionAmount = timeReductionAmount
		self.damageIncreaseAmount = damageIncreaseAmount


class DamageTypeModModel:

    offsets = {'canHitbloonProperties': 48}    
    def __init__(self, canHitbloonProperties: BloonProperties, **kwargs):
        super().__init__(self, **kwargs)
		self.canHitbloonProperties = canHitbloonProperties


class DisableContinueModModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DisableMonkeyKnowledgeModModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DisablePowersModModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DisableSellTowerModModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DiscountZoneModModel:

    offsets = {'additionalMultiplier': 48, 'specificScriptId': 56}    
    def __init__(self, additionalMultiplier: System.Single, specificScriptId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalMultiplier = additionalMultiplier
		self.specificScriptId = specificScriptId


class DisplayModModel:

    offsets = {'scaleReverseToBaseValueMultiplier': 48, 'baseValueAdditive': 52, 'baseValueMultiplier': 56}    
    def __init__(self, scaleReverseToBaseValueMultiplier: System.Single, baseValueAdditive: System.Single, baseValueMultiplier: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.scaleReverseToBaseValueMultiplier = scaleReverseToBaseValueMultiplier
		self.baseValueAdditive = baseValueAdditive
		self.baseValueMultiplier = baseValueMultiplier


class DoorGunnerModModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class EatBloonModModel:

    offsets = {'additionalTrapAmount': 48}    
    def __init__(self, additionalTrapAmount: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalTrapAmount = additionalTrapAmount


class EffectModModel:

    offsets = {'scaleReverseToBaseValueMultiplier': 48, 'baseValueAdditive': 52, 'baseValueMultiplier': 56}    
    def __init__(self, scaleReverseToBaseValueMultiplier: System.Single, baseValueAdditive: System.Single, baseValueMultiplier: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.scaleReverseToBaseValueMultiplier = scaleReverseToBaseValueMultiplier
		self.baseValueAdditive = baseValueAdditive
		self.baseValueMultiplier = baseValueMultiplier


class EmergencyUnlockModModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class EmissionArcCountModModel:

    offsets = {'additionalCount': 48}    
    def __init__(self, additionalCount: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalCount = additionalCount


class EmissionRandomCountModModel:

    offsets = {'additionalCount': 48}    
    def __init__(self, additionalCount: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalCount = additionalCount


class EndRoundModModel:

    offsets = {'round': 48}    
    def __init__(self, round: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.round = round


class FreeTowerModModel:

    offsets = {'baseTowerID': 48, 'charges': 56}    
    def __init__(self, baseTowerID: System.String, charges: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.baseTowerID = baseTowerID
		self.charges = charges


class FreezeModModel:

    offsets = {'amount': 48}    
    def __init__(self, amount: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.amount = amount


class FreezeModifierModModel:

    offsets = {'durationModifier': 48, 'durationAdd': 52, 'mutationId': 56}    
    def __init__(self, durationModifier: System.Single, durationAdd: System.Single, mutationId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.durationModifier = durationModifier
		self.durationAdd = durationAdd
		self.mutationId = mutationId


class FreezeMutationModModel:

    offsets = {'mutationId': 48}    
    def __init__(self, mutationId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.mutationId = mutationId


class GlobalCostModModel:

    offsets = {'multiplier': 48, 'set': 52}    
    def __init__(self, multiplier: System.Single, set: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.set = set


class GlobalSpeedModModel:

    offsets = {'multiplier': 48, 'addition': 52}    
    def __init__(self, multiplier: System.Single, addition: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.addition = addition


class GorgonStormModModel:

    offsets = {'slowModel': 48}    
    def __init__(self, slowModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.SlowModel, **kwargs):
        super().__init__(self, **kwargs)
		self.slowModel = slowModel


class HealthyBananasModModel:

    offsets = {'marketplaceLives': 48, 'centralMarketLives': 52, 'displayPath': 56, 'displayLifespan': 64}    
    def __init__(self, marketplaceLives: System.Int32, centralMarketLives: System.Int32, displayPath: System.String, displayLifespan: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.marketplaceLives = marketplaceLives
		self.centralMarketLives = centralMarketLives
		self.displayPath = displayPath
		self.displayLifespan = displayLifespan


class HeroCostToLevelModModel:

    offsets = {'costMultiplier': 48}    
    def __init__(self, costMultiplier: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.costMultiplier = costMultiplier


class HeroXpPerRoundModModel:

    offsets = {'additionalXpBonus': 48, 'applyGlobally': 52}    
    def __init__(self, additionalXpBonus: System.Single, applyGlobally: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalXpBonus = additionalXpBonus
		self.applyGlobally = applyGlobally


class IgnoreImmunityForBloonTypeModModel:

    offsets = {'bloonProperties': 48}    
    def __init__(self, bloonProperties: BloonProperties, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonProperties = bloonProperties


class ImfLoanModModel:

    offsets = {'additionalLoanAmount': 48, 'interestRateDecreaseAmount': 52}    
    def __init__(self, additionalLoanAmount: System.Single, interestRateDecreaseAmount: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalLoanAmount = additionalLoanAmount
		self.interestRateDecreaseAmount = interestRateDecreaseAmount


class IncreaseRangeModModel:

    offsets = {'additionalFrames': 48}    
    def __init__(self, additionalFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalFrames = additionalFrames


class KnockbackModModel:

    offsets = {'percentMultiplierAdded': 48}    
    def __init__(self, percentMultiplierAdded: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.percentMultiplierAdded = percentMultiplierAdded


class LivesModModel:

    offsets = {'percentBonus': 48}    
    def __init__(self, percentBonus: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.percentBonus = percentBonus


class MaxHealthModModel:

    offsets = {'multiplier': 48, 'addition': 52, 'set': 56}    
    def __init__(self, multiplier: System.Single, addition: System.Single, set: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.addition = addition
		self.set = set


class ModModel:

    offsets = {'preApplies': 64}    
    def __init__(self, preApplies: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.preApplies = preApplies


class ModifyAllCashModModel:

    offsets = {'multiplier': 48}    
    def __init__(self, multiplier: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier


class MonkeyMoneyModModel:

    offsets = {'multiplier': 48}    
    def __init__(self, multiplier: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier


class MutatorModModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class NavalUpgradesModModel:

    offsets = {'amount': 48}    
    def __init__(self, amount: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.amount = amount


class OnMonkeyKnowledgePurchaseModModel:

    offsets = {'towers': 48, 'xpToAdd': 56}    
    def __init__(self, towers: System.String, xpToAdd: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.towers = towers
		self.xpToAdd = xpToAdd


class PaintStripperModModel:

    offsets = {'filteredRemoveBloonModifiers': 48, 'blacklistTags': 56, 'whitelistTags': 64}    
    def __init__(self, filteredRemoveBloonModifiers: Assets.Scripts.Models.Towers.Projectiles.Behaviors.RemoveBloonModifiersModel, blacklistTags: System.String, whitelistTags: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.filteredRemoveBloonModifiers = filteredRemoveBloonModifiers
		self.blacklistTags = blacklistTags
		self.whitelistTags = whitelistTags


class ProjectilePierceModModel:

    offsets = {'amount': 48}    
    def __init__(self, amount: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.amount = amount


class ProjectileRadiusModModel:

    offsets = {'additiveAmount': 48, 'multiplierAmount': 52}    
    def __init__(self, additiveAmount: System.Single, multiplierAmount: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.additiveAmount = additiveAmount
		self.multiplierAmount = multiplierAmount


class ProjectileRangeModModel:

    offsets = {'amount': 48}    
    def __init__(self, amount: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.amount = amount


class ProjectileRangePercentageModModel:

    offsets = {'percentIncrease': 48}    
    def __init__(self, percentIncrease: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.percentIncrease = percentIncrease


class ProjectileSpeedModModel:

    offsets = {'multiplier': 48}    
    def __init__(self, multiplier: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier


class ProjectileTrackTargetModModel:

    offsets = {'multiplierTurnRate': 48}    
    def __init__(self, multiplierTurnRate: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplierTurnRate = multiplierTurnRate


class PushBackIncreaseModModel:

    offsets = {'amount': 48}    
    def __init__(self, amount: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.amount = amount


class RangeModModel:

    offsets = {'multiplier': 48, 'additive': 52}    
    def __init__(self, multiplier: System.Single, additive: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.additive = additive


class RecurringRangsModModel:

    offsets = {'path1TierMin': 64, 'path1TierMax': 68, 'path2TierMin': 72, 'path2TierMax': 76, 'path3TierMin': 80, 'path3TierMax': 84}    
    def __init__(self, path1TierMin: System.Int32, path1TierMax: System.Int32, path2TierMin: System.Int32, path2TierMax: System.Int32, path3TierMin: System.Int32, path3TierMax: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.path1TierMin = path1TierMin
		self.path1TierMax = path1TierMax
		self.path2TierMin = path2TierMin
		self.path2TierMax = path2TierMax
		self.path3TierMin = path3TierMin
		self.path3TierMax = path3TierMax


class ReduceCostModModel:

    offsets = {'amount': 48}    
    def __init__(self, amount: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.amount = amount


class RemoveAbilityModModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RemoveManaShieldModModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RetargetIncreaseModModel:

    offsets = {'amount': 48}    
    def __init__(self, amount: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.amount = amount


class SelectedDifficultyRatingModModel:

    offsets = {'addition': 48, 'multiplier': 52}    
    def __init__(self, addition: System.Single, multiplier: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.addition = addition
		self.multiplier = multiplier


class SellMultiplierModModel:

    offsets = {'multiplier': 48, 'addition': 52}    
    def __init__(self, multiplier: System.Single, addition: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.addition = addition


class SetHealthForBloonModModel:

    offsets = {'round': 48, 'bloonId': 56, 'healthMultiplier': 64, 'gameMode': 72}    
    def __init__(self, round: System.Int32, bloonId: System.String, healthMultiplier: System.Single, gameMode: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.round = round
		self.bloonId = bloonId
		self.healthMultiplier = healthMultiplier
		self.gameMode = gameMode


class SetHeroLevelOnPlaceModModel:

    offsets = {'level': 48}    
    def __init__(self, level: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.level = level


class SimTowerDiscountModModel:

    offsets = {'tower': 48, 'multiplier': 56, 'subtraction': 60, 'charges': 64}    
    def __init__(self, tower: System.String, multiplier: System.Single, subtraction: System.Single, charges: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.tower = tower
		self.multiplier = multiplier
		self.subtraction = subtraction
		self.charges = charges


class SlowModifierForTagModModel:

    offsets = {'slowModifier': 48, 'tag': 56}    
    def __init__(self, slowModifier: System.Single, tag: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.slowModifier = slowModifier
		self.tag = tag


class SlowModifierModModel:

    offsets = {'durationModifier': 48, 'slowModifier': 52, 'mutationId': 56}    
    def __init__(self, durationModifier: System.Single, slowModifier: System.Single, mutationId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.durationModifier = durationModifier
		self.slowModifier = slowModifier
		self.mutationId = mutationId


class SlowMutationModModel:

    offsets = {'mutationId': 48, 'mutationFilterId': 56}    
    def __init__(self, mutationId: System.String, mutationFilterId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.mutationId = mutationId
		self.mutationFilterId = mutationFilterId


class StartingCashModModel:

    offsets = {'changeBase': 48, 'addition': 52, 'multiplier': 56}    
    def __init__(self, changeBase: System.Single, addition: System.Single, multiplier: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.changeBase = changeBase
		self.addition = addition
		self.multiplier = multiplier


class StartingHealthModModel:

    offsets = {'multiplier': 48, 'addition': 52}    
    def __init__(self, multiplier: System.Single, addition: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.addition = addition


class StartingRoundModModel:

    offsets = {'round': 48}    
    def __init__(self, round: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.round = round


class StartingShieldModModel:

    offsets = {'startingShield': 48, 'maxShield': 52, 'shieldPerRound': 56}    
    def __init__(self, startingShield: System.Single, maxShield: System.Single, shieldPerRound: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.startingShield = startingShield
		self.maxShield = maxShield
		self.shieldPerRound = shieldPerRound


class StrikeDownTheFalseModModel:

    offsets = {'script': 48}    
    def __init__(self, script: Assets.Scripts.Models.Towers.Projectiles.Behaviors.DamageModifierForTagModel, **kwargs):
        super().__init__(self, **kwargs)
		self.script = script


class SupportMaxRangeModModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TCBOOModModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TargetedPineapplesModModel:

    offsets = {'checkAirUnitOverTrackScript': 48}    
    def __init__(self, checkAirUnitOverTrackScript: Assets.Scripts.Models.Towers.Weapons.Behaviors.CheckAirUnitOverTrackModel, **kwargs):
        super().__init__(self, **kwargs)
		self.checkAirUnitOverTrackScript = checkAirUnitOverTrackScript


class TierFiveCountModModel:

    offsets = {'towerBaseId': 48, 'path': 56, 'tier': 60, 'maxCountAdditive': 64}    
    def __init__(self, towerBaseId: System.String, path: System.Int32, tier: System.Int32, maxCountAdditive: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.towerBaseId = towerBaseId
		self.path = path
		self.tier = tier
		self.maxCountAdditive = maxCountAdditive


class TinyTornadoesModModel:

    offsets = {'projectileModel': 48, 'projectileModelHeartOfOak': 56, 'emissionModel': 64, 'emissionBehaviorModel': 72}    
    def __init__(self, projectileModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, projectileModelHeartOfOak: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, emissionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel, emissionBehaviorModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.Behaviors.EmissionRotationOffProjectileDirectionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.projectileModel = projectileModel
		self.projectileModelHeartOfOak = projectileModelHeartOfOak
		self.emissionModel = emissionModel
		self.emissionBehaviorModel = emissionBehaviorModel


class TowerExpireModModel:

    offsets = {'aditionalTimeBonus': 48}    
    def __init__(self, aditionalTimeBonus: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.aditionalTimeBonus = aditionalTimeBonus


class TowerSellModModel:

    offsets = {'mutltiplier': 48, 'additional': 52, 'charges': 56}    
    def __init__(self, mutltiplier: System.Single, additional: System.Single, charges: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.mutltiplier = mutltiplier
		self.additional = additional
		self.charges = charges


class TowerXpModModel:

    offsets = {'multiplier': 48}    
    def __init__(self, multiplier: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier


class TurboDurationIncreaseModModel:

    offsets = {'amount': 48}    
    def __init__(self, amount: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.amount = amount


class UpgradeCostModModel:

    offsets = {'amountReduced': 48, 'percentageReduced': 52, 'upgradeName': 56}    
    def __init__(self, amountReduced: System.Int32, percentageReduced: System.Single, upgradeName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.amountReduced = amountReduced
		self.percentageReduced = percentageReduced
		self.upgradeName = upgradeName


class WeaponClearProjectileHitListModModel:

    offsets = {'reductionAmount': 48}    
    def __init__(self, reductionAmount: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.reductionAmount = reductionAmount


class WeaponReloadPercentageModModel:

    offsets = {'multiplier': 48}    
    def __init__(self, multiplier: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier


class WeaponReloadPercentageOnTargetPrioModModel:

    offsets = {'multiplier': 48, 'targetType': 56}    
    def __init__(self, multiplier: System.Single, targetType: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.targetType = targetType


class WeaponReloadReductionModModel:

    offsets = {'reductionAmount': 48}    
    def __init__(self, reductionAmount: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.reductionAmount = reductionAmount


class WindModModel:

    offsets = {'chanceIncrease': 48}    
    def __init__(self, chanceIncrease: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.chanceIncrease = chanceIncrease


class WingmonkeyModModel:

    offsets = {'wingmonkeyPatternModel': 48}    
    def __init__(self, wingmonkeyPatternModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.WingmonkeyPatternModel, **kwargs):
        super().__init__(self, **kwargs)
		self.wingmonkeyPatternModel = wingmonkeyPatternModel


class AddAttackTowerMutatorModel:

    offsets = {'attackModel': 64, 'lifespan': 72, 'lifespanFrames': 76}    
    def __init__(self, attackModel: Assets.Scripts.Models.Towers.TowerBehaviorModel, lifespan: System.Single, lifespanFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.attackModel = attackModel
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames


class AddBehaviorToTowerMutatorModel:

    offsets = {'lifespan': 64, 'lifespanFrames': 68}    
    def __init__(self, lifespan: System.Single, lifespanFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames


class AddTowerToTowerMutatorModel:

    offsets = {'towerModel': 64, 'lifespan': 72, 'lifespanFrames': 76}    
    def __init__(self, towerModel: Assets.Scripts.Models.Towers.TowerModel, lifespan: System.Single, lifespanFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.towerModel = towerModel
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames


class DamageTowerMutatorModel:

    offsets = {'damage': 64, 'lifespan': 68, 'lifespanFrames': 72}    
    def __init__(self, damage: System.Single, lifespan: System.Single, lifespanFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.damage = damage
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames


class PierceTowerMutatorModel:

    offsets = {'pierce': 64, 'lifespan': 68, 'lifespanFrames': 72}    
    def __init__(self, pierce: System.Int32, lifespan: System.Single, lifespanFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.pierce = pierce
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames


class ProjectileSizeTowerMutatorModel:

    offsets = {'sizeModifier': 64, 'lifespan': 68, 'lifespanFrames': 72}    
    def __init__(self, sizeModifier: System.Single, lifespan: System.Single, lifespanFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.sizeModifier = sizeModifier
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames


class ProjectileSpeedTowerMutatorModel:

    offsets = {'speedModifier': 64, 'lifespan': 68, 'lifespanFrames': 72}    
    def __init__(self, speedModifier: System.Single, lifespan: System.Single, lifespanFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.speedModifier = speedModifier
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames


class RangeTowerMutatorModel:

    offsets = {'rangeIncrease': 64, 'lifespan': 68, 'lifespanFrames': 72}    
    def __init__(self, rangeIncrease: System.Single, lifespan: System.Single, lifespanFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.rangeIncrease = rangeIncrease
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames


class ReloadTimeTowerMutatorModel:

    offsets = {'multiplier': 64, 'lifespan': 68, 'lifespanFrames': 72}    
    def __init__(self, multiplier: System.Single, lifespan: System.Single, lifespanFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames


class TowerMutatorModel:

    offsets = {'mutationId': 48, 'conditionalId': 56}    
    def __init__(self, mutationId: System.String, conditionalId: Assets.Scripts.Models.Towers.Mutators.Conditions.ConditionalModel, **kwargs):
        super().__init__(self, **kwargs)
		self.mutationId = mutationId
		self.conditionalId = conditionalId


class WindChanceTowerMutatorModel:

    offsets = {'windChance': 64, 'lifespan': 68, 'lifespanFrames': 72}    
    def __init__(self, windChance: System.Single, lifespan: System.Single, lifespanFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.windChance = windChance
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames


class ConditionalModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CheckAcademyUnderLevelModel:

    offsets = {'cost': 48, 'towerBaseId': 56}    
    def __init__(self, cost: System.Int32, towerBaseId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.cost = cost
		self.towerBaseId = towerBaseId


class CheckTempleUnderLevelModel:

    offsets = {'cost': 48, 'towerSet': 56, 'templeType': 64}    
    def __init__(self, cost: System.Int32, towerSet: System.String, templeType: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.cost = cost
		self.towerSet = towerSet
		self.templeType = templeType


class PetBehaviorModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PetCreateEffectOnPlaceModel:

    offsets = {'<Effect>k__BackingField': 48, '<Lifespan>k__BackingField': 56}    
    def __init__(self, <Effect>k__BackingField: System.String, <Lifespan>k__BackingField: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.<Effect>k__BackingField = <Effect>k__BackingField
		self.<Lifespan>k__BackingField = <Lifespan>k__BackingField


class PetCreateEffectOnSellModel:

    offsets = {'<Effect>k__BackingField': 48, '<Lifespan>k__BackingField': 56}    
    def __init__(self, <Effect>k__BackingField: System.String, <Lifespan>k__BackingField: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.<Effect>k__BackingField = <Effect>k__BackingField
		self.<Lifespan>k__BackingField = <Lifespan>k__BackingField


class PetCreateSoundOnIdleModel:

    offsets = {'<sound1Id>k__BackingField': 48, '<sound2Id>k__BackingField': 56, '<sound3Id>k__BackingField': 64, '<sound4Id>k__BackingField': 72, '<idleMin>k__BackingField': 80, '<idleMax>k__BackingField': 84}    
    def __init__(self, <sound1Id>k__BackingField: System.String, <sound2Id>k__BackingField: System.String, <sound3Id>k__BackingField: System.String, <sound4Id>k__BackingField: System.String, <idleMin>k__BackingField: System.Int32, <idleMax>k__BackingField: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.<sound1Id>k__BackingField = <sound1Id>k__BackingField
		self.<sound2Id>k__BackingField = <sound2Id>k__BackingField
		self.<sound3Id>k__BackingField = <sound3Id>k__BackingField
		self.<sound4Id>k__BackingField = <sound4Id>k__BackingField
		self.<idleMin>k__BackingField = <idleMin>k__BackingField
		self.<idleMax>k__BackingField = <idleMax>k__BackingField


class PetCreateSoundOnPlaceModel:

    offsets = {'<soundId>k__BackingField': 48, '<delay>k__BackingField': 56}    
    def __init__(self, <soundId>k__BackingField: System.String, <delay>k__BackingField: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.<soundId>k__BackingField = <soundId>k__BackingField
		self.<delay>k__BackingField = <delay>k__BackingField


class PetModel:

    offsets = {'isFlying': 56, 'display': 64}    
    def __init__(self, isFlying: System.Boolean, display: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.isFlying = isFlying
		self.display = display


class PetTerrainHandlerModel:

    offsets = {'<LandHeightOffset>k__BackingField': 48, '<WaterHeightOffset>k__BackingField': 52, '<MoveSpeed>k__BackingField': 56}    
    def __init__(self, <LandHeightOffset>k__BackingField: System.Single, <WaterHeightOffset>k__BackingField: System.Single, <MoveSpeed>k__BackingField: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.<LandHeightOffset>k__BackingField = <LandHeightOffset>k__BackingField
		self.<WaterHeightOffset>k__BackingField = <WaterHeightOffset>k__BackingField
		self.<MoveSpeed>k__BackingField = <MoveSpeed>k__BackingField


class WanderModel:

    offsets = {'<StayInArea>k__BackingField': 48, '<Speed>k__BackingField': 52, '<InnerRadius>k__BackingField': 56, '<OuterRadius>k__BackingField': 60, '<IdleTimeMin>k__BackingField': 64, '<IdleTimeMax>k__BackingField': 68, '<MotionCurve>k__BackingField': 72}    
    def __init__(self, <StayInArea>k__BackingField: System.Boolean, <Speed>k__BackingField: System.Single, <InnerRadius>k__BackingField: System.Single, <OuterRadius>k__BackingField: System.Single, <IdleTimeMin>k__BackingField: System.Single, <IdleTimeMax>k__BackingField: System.Single, <MotionCurve>k__BackingField: UnityEngine.AnimationCurve, **kwargs):
        super().__init__(self, **kwargs)
		self.<StayInArea>k__BackingField = <StayInArea>k__BackingField
		self.<Speed>k__BackingField = <Speed>k__BackingField
		self.<InnerRadius>k__BackingField = <InnerRadius>k__BackingField
		self.<OuterRadius>k__BackingField = <OuterRadius>k__BackingField
		self.<IdleTimeMin>k__BackingField = <IdleTimeMin>k__BackingField
		self.<IdleTimeMax>k__BackingField = <IdleTimeMax>k__BackingField
		self.<MotionCurve>k__BackingField = <MotionCurve>k__BackingField


class PlacementBehaviorModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DamageModifierModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ProjectileBehaviorModel:

    offsets = {'collisionPass': 48}    
    def __init__(self, collisionPass: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.collisionPass = collisionPass


class ProjectileModel:

    offsets = {'display': 48, 'id': 56, 'maxPierce': 64, 'pierce': 68, 'scale': 72, 'ignoreBlockers': 76, 'usePointCollisionWithBloons': 77, 'canCollisionBeBlockedByMapLos': 78, 'canCollideWithBloons': 104, 'radius': 108, 'vsBlockerRadius': 112, 'hasDamageModifiers': 116, 'dontUseCollisionChecker': 117, 'checkCollisionFrames': 120, 'ignoreNonTargetable': 124, 'ignorePierceExhaustion': 125, 'saveId': 128}    
    def __init__(self, display: System.String, id: System.String, maxPierce: System.Single, pierce: System.Single, scale: System.Single, ignoreBlockers: System.Boolean, usePointCollisionWithBloons: System.Boolean, canCollisionBeBlockedByMapLos: System.Boolean, canCollideWithBloons: System.Boolean, radius: System.Single, vsBlockerRadius: System.Single, hasDamageModifiers: System.Boolean, dontUseCollisionChecker: System.Boolean, checkCollisionFrames: System.Int32, ignoreNonTargetable: System.Boolean, ignorePierceExhaustion: System.Boolean, saveId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.display = display
		self.id = id
		self.maxPierce = maxPierce
		self.pierce = pierce
		self.scale = scale
		self.ignoreBlockers = ignoreBlockers
		self.usePointCollisionWithBloons = usePointCollisionWithBloons
		self.canCollisionBeBlockedByMapLos = canCollisionBeBlockedByMapLos
		self.canCollideWithBloons = canCollideWithBloons
		self.radius = radius
		self.vsBlockerRadius = vsBlockerRadius
		self.hasDamageModifiers = hasDamageModifiers
		self.dontUseCollisionChecker = dontUseCollisionChecker
		self.checkCollisionFrames = checkCollisionFrames
		self.ignoreNonTargetable = ignoreNonTargetable
		self.ignorePierceExhaustion = ignorePierceExhaustion
		self.saveId = saveId


class AccelerateModel:

    offsets = {'acceleration': 56, 'accelerationFrames': 60, 'maxSpeed': 64, 'maxSpeedFrames': 68, 'turnRateChange': 72, 'turnRateChangeFrames': 76, 'maxTurnRate': 80, 'maxTurnRateFrames': 84, 'decelerate': 88}    
    def __init__(self, acceleration: System.Single, accelerationFrames: System.Single, maxSpeed: System.Single, maxSpeedFrames: System.Single, turnRateChange: System.Single, turnRateChangeFrames: System.Single, maxTurnRate: System.Single, maxTurnRateFrames: System.Single, decelerate: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.acceleration = acceleration
		self.accelerationFrames = accelerationFrames
		self.maxSpeed = maxSpeed
		self.maxSpeedFrames = maxSpeedFrames
		self.turnRateChange = turnRateChange
		self.turnRateChangeFrames = turnRateChangeFrames
		self.maxTurnRate = maxTurnRate
		self.maxTurnRateFrames = maxTurnRateFrames
		self.decelerate = decelerate


class AcidPoolModel:

    offsets = {'lifespan': 56, 'lifespanFrames': 60, 'lifespanIfMisses': 64, 'lifespanFramesIfMisses': 68, 'radiusIfMisses': 72, 'pierce': 76}    
    def __init__(self, lifespan: System.Single, lifespanFrames: System.Int32, lifespanIfMisses: System.Single, lifespanFramesIfMisses: System.Int32, radiusIfMisses: System.Single, pierce: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames
		self.lifespanIfMisses = lifespanIfMisses
		self.lifespanFramesIfMisses = lifespanFramesIfMisses
		self.radiusIfMisses = radiusIfMisses
		self.pierce = pierce


class AddAcidicMixtureToProjectileModel:

    offsets = {'mutationId': 56, 'cap': 64, 'assetId': 96, 'ignoreList': 104, 'buffLocsName': 112, 'buffIconName': 120, 'mutator': 128}    
    def __init__(self, mutationId: System.String, cap: System.Int32, assetId: System.String, ignoreList: System.String, buffLocsName: System.String, buffIconName: System.String, mutator: Assets.Scripts.Models.Towers.Projectiles.Behaviors.AddAcidicMixtureToProjectileModel.AddAcidicMixtureToProjectileMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.mutationId = mutationId
		self.cap = cap
		self.assetId = assetId
		self.ignoreList = ignoreList
		self.buffLocsName = buffLocsName
		self.buffIconName = buffIconName
		self.mutator = mutator


class AddBehaviorToBloonModel:

    offsets = {'mutationId': 56, 'lifespan': 64, 'layers': 68, 'lifespanFrames': 72, 'filter': 80, 'overlays': 104, 'overlayLayer': 112, 'isUnique': 116, 'lastAppliesFirst': 117, 'collideThisFrame': 118, 'cascadeMutators': 119, 'glueLevel': 120, 'applyOnlyIfDamaged': 124, 'stackCount': 128, 'mutators': 136}    
    def __init__(self, mutationId: System.String, lifespan: System.Single, layers: System.Int32, lifespanFrames: System.Int32, filter: Assets.Scripts.Models.Towers.Filters.FilterModel, overlays: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Effects.AssetPathModel>, overlayLayer: System.Int32, isUnique: System.Boolean, lastAppliesFirst: System.Boolean, collideThisFrame: System.Boolean, cascadeMutators: System.Boolean, glueLevel: System.Int32, applyOnlyIfDamaged: System.Boolean, stackCount: System.Int32, mutators: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Models.Towers.Projectiles.Behaviors.AddBehaviorToBloonModel.Mutator>, **kwargs):
        super().__init__(self, **kwargs)
		self.mutationId = mutationId
		self.lifespan = lifespan
		self.layers = layers
		self.lifespanFrames = lifespanFrames
		self.filter = filter
		self.overlays = overlays
		self.overlayLayer = overlayLayer
		self.isUnique = isUnique
		self.lastAppliesFirst = lastAppliesFirst
		self.collideThisFrame = collideThisFrame
		self.cascadeMutators = cascadeMutators
		self.glueLevel = glueLevel
		self.applyOnlyIfDamaged = applyOnlyIfDamaged
		self.stackCount = stackCount
		self.mutators = mutators


class AddBerserkerBrewToProjectileModel:
	blockerMutationId: System.String
    offsets = {'blockerMutationId': 0, 'cap': 56, 'ignoreList': 64, 'mutationId': 72, 'lifespan': 80, 'lifespanFrames': 84, 'damageUp': 88, 'pierceUp': 92, 'rateUp': 96, 'rangeUp': 100, 'rebuffBlockTime': 104, 'rebuffBlockTimeFrames': 108, 'assetId': 136, 'buffLocsName': 144, 'buffIconName': 152, 'mutatorsToRemove': 160, 'mutator': 176, 'blocker': 184}    
    def __init__(self, blockerMutationId: System.String, cap: System.Int32, ignoreList: System.String, mutationId: System.String, lifespan: System.Single, lifespanFrames: System.Int32, damageUp: System.Single, pierceUp: System.Single, rateUp: System.Single, rangeUp: System.Single, rebuffBlockTime: System.Single, rebuffBlockTimeFrames: System.Int32, assetId: System.String, buffLocsName: System.String, buffIconName: System.String, mutatorsToRemove: System.String, mutator: Assets.Scripts.Models.Towers.Projectiles.Behaviors.AddBerserkerBrewToProjectileModel.BeserkerBrewMutator, blocker: Assets.Scripts.Models.Towers.Projectiles.Behaviors.AddBerserkerBrewToProjectileModel.BlockerMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.blockerMutationId = blockerMutationId
		self.cap = cap
		self.ignoreList = ignoreList
		self.mutationId = mutationId
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames
		self.damageUp = damageUp
		self.pierceUp = pierceUp
		self.rateUp = rateUp
		self.rangeUp = rangeUp
		self.rebuffBlockTime = rebuffBlockTime
		self.rebuffBlockTimeFrames = rebuffBlockTimeFrames
		self.assetId = assetId
		self.buffLocsName = buffLocsName
		self.buffIconName = buffIconName
		self.mutatorsToRemove = mutatorsToRemove
		self.mutator = mutator
		self.blocker = blocker


class AddBonusDamagePerHitToBloonModel:

    offsets = {'mutationId': 56, 'lifespan': 64, 'lifespanFrames': 68, 'perHitDamageAddition': 72, 'layers': 76, 'isUnique': 80, 'lastAppliesFirst': 81, 'cascadeMutators': 82, '_mutator': 88}    
    def __init__(self, mutationId: System.String, lifespan: System.Single, lifespanFrames: System.Int32, perHitDamageAddition: System.Single, layers: System.Int32, isUnique: System.Boolean, lastAppliesFirst: System.Boolean, cascadeMutators: System.Boolean, _mutator: Assets.Scripts.Models.Towers.Projectiles.Behaviors.AddBonusDamagePerHitToBloonModel.Mutator, **kwargs):
        super().__init__(self, **kwargs)
		self.mutationId = mutationId
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames
		self.perHitDamageAddition = perHitDamageAddition
		self.layers = layers
		self.isUnique = isUnique
		self.lastAppliesFirst = lastAppliesFirst
		self.cascadeMutators = cascadeMutators
		self._mutator = _mutator


class AddTagToBloonModel:

    offsets = {'bloonTag': 56, 'lifespan': 64, 'lifespanFrames': 68, 'layers': 72, 'mutationId': 80, 'isUnique': 88, '_mutator': 96, 'overlays': 104, 'overlayLayer': 112}    
    def __init__(self, bloonTag: System.String, lifespan: System.Single, lifespanFrames: System.Int32, layers: System.Int32, mutationId: System.String, isUnique: System.Boolean, _mutator: Assets.Scripts.Models.Towers.Projectiles.Behaviors.AddTagToBloonModel.Mutator, overlays: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Effects.AssetPathModel>, overlayLayer: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonTag = bloonTag
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames
		self.layers = layers
		self.mutationId = mutationId
		self.isUnique = isUnique
		self._mutator = _mutator
		self.overlays = overlays
		self.overlayLayer = overlayLayer


class AddbehaviorToWeaponModel:

    offsets = {'mutationId': 56, 'lifespan': 64, 'lifespanFrames': 68}    
    def __init__(self, mutationId: System.String, lifespan: System.Single, lifespanFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.mutationId = mutationId
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames


class AdoraTrackTargetModel:

    offsets = {'rotation': 56, 'minimumSpeed': 60, 'minimumSpeedFrames': 64, 'maximumSpeed': 68, 'maximumSpeedFrames': 72, 'acceleration': 76, 'accelerationFrames': 80, 'lifespan': 84, 'lifespanFrames': 88, 'accelerateInAngle': 92, 'startDeceleratingIfAngleGreaterThan': 96}    
    def __init__(self, rotation: System.Single, minimumSpeed: System.Single, minimumSpeedFrames: System.Single, maximumSpeed: System.Single, maximumSpeedFrames: System.Single, acceleration: System.Single, accelerationFrames: System.Single, lifespan: System.Single, lifespanFrames: System.Int32, accelerateInAngle: System.Single, startDeceleratingIfAngleGreaterThan: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.rotation = rotation
		self.minimumSpeed = minimumSpeed
		self.minimumSpeedFrames = minimumSpeedFrames
		self.maximumSpeed = maximumSpeed
		self.maximumSpeedFrames = maximumSpeedFrames
		self.acceleration = acceleration
		self.accelerationFrames = accelerationFrames
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames
		self.accelerateInAngle = accelerateInAngle
		self.startDeceleratingIfAngleGreaterThan = startDeceleratingIfAngleGreaterThan


class AgeModel:

    offsets = {'rounds': 56, 'lifespanFrames': 60, 'useRoundTime': 64, 'lifespan': 68, 'endOfRoundClearBypassModel': 72}    
    def __init__(self, rounds: System.Int32, lifespanFrames: System.Int32, useRoundTime: System.Boolean, lifespan: System.Single, endOfRoundClearBypassModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.EndOfRoundClearBypassModel, **kwargs):
        super().__init__(self, **kwargs)
		self.rounds = rounds
		self.lifespanFrames = lifespanFrames
		self.useRoundTime = useRoundTime
		self.lifespan = lifespan
		self.endOfRoundClearBypassModel = endOfRoundClearBypassModel


class AgeRandomModel:

    offsets = {'minLifespan': 80, 'maxLifespan': 84, 'minLifespanFrames': 88, 'maxLifespanFrames': 92}    
    def __init__(self, minLifespan: System.Single, maxLifespan: System.Single, minLifespanFrames: System.Int32, maxLifespanFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.minLifespan = minLifespan
		self.maxLifespan = maxLifespan
		self.minLifespanFrames = minLifespanFrames
		self.maxLifespanFrames = maxLifespanFrames


class AnimateOnCollideModel:

    offsets = {'animationState': 56}    
    def __init__(self, animationState: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.animationState = animationState


class ArriveAtTargetModel:

    offsets = {'timeToTake': 56, 'filterCollisionWhileMoving': 72, 'expireOnArrival': 73, 'altSpeed': 76, 'stopOnTargetReached': 80, 'curve': 88}    
    def __init__(self, timeToTake: System.Single, filterCollisionWhileMoving: System.Boolean, expireOnArrival: System.Boolean, altSpeed: System.Single, stopOnTargetReached: System.Boolean, curve: Assets.Scripts.Simulation.Towers.Projectiles.Behaviors.Curve, **kwargs):
        super().__init__(self, **kwargs)
		self.timeToTake = timeToTake
		self.filterCollisionWhileMoving = filterCollisionWhileMoving
		self.expireOnArrival = expireOnArrival
		self.altSpeed = altSpeed
		self.stopOnTargetReached = stopOnTargetReached
		self.curve = curve


class BigSqueezeFortifiedEffectModel:

    offsets = {'randomRotation': 56, 'effectModel': 64}    
    def __init__(self, randomRotation: System.Boolean, effectModel: Assets.Scripts.Models.Effects.EffectModel, **kwargs):
        super().__init__(self, **kwargs)
		self.randomRotation = randomRotation
		self.effectModel = effectModel


class BloonSlapModel:

    offsets = {'valueForNormalBloons': 56, 'valueForCeramicBloons': 60, 'heavyMultiplier': 64, 'lightMultiplier': 68, 'lifespan': 72, 'lifespanFrames': 76, 'mutationId': 80, 'mutator': 88}    
    def __init__(self, valueForNormalBloons: System.Int32, valueForCeramicBloons: System.Int32, heavyMultiplier: System.Int32, lightMultiplier: System.Int32, lifespan: System.Single, lifespanFrames: System.Int32, mutationId: System.String, mutator: Assets.Scripts.Models.Towers.Projectiles.Behaviors.BloonSlapModel.SlapMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.valueForNormalBloons = valueForNormalBloons
		self.valueForCeramicBloons = valueForCeramicBloons
		self.heavyMultiplier = heavyMultiplier
		self.lightMultiplier = lightMultiplier
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames
		self.mutationId = mutationId
		self.mutator = mutator


class BrickellFreezeOtherMinesModel:

    offsets = {'freezeDuration': 56, 'freezeDurationFrames': 60}    
    def __init__(self, freezeDuration: System.Single, freezeDurationFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.freezeDuration = freezeDuration
		self.freezeDurationFrames = freezeDurationFrames


class CashModel:

    offsets = {'minimum': 56, 'maximum': 60, 'bonusMultiplier': 64, 'salvage': 68, 'noTransformCash': 72, 'distributeSalvage': 73}    
    def __init__(self, minimum: System.Single, maximum: System.Single, bonusMultiplier: System.Single, salvage: System.Single, noTransformCash: System.Boolean, distributeSalvage: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.minimum = minimum
		self.maximum = maximum
		self.bonusMultiplier = bonusMultiplier
		self.salvage = salvage
		self.noTransformCash = noTransformCash
		self.distributeSalvage = distributeSalvage


class ChipMapBasedObjectModel:

    offsets = {'chipTag': 56}    
    def __init__(self, chipTag: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.chipTag = chipTag


class ClearHitBloonsModel:

    offsets = {'interval': 56, 'intervalFrames': 60}    
    def __init__(self, interval: System.Single, intervalFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.interval = interval
		self.intervalFrames = intervalFrames


class ClearHitBloonsWhenNoLongerCollidingModel:

    offsets = {'interval': 56, 'intervalFrames': 60}    
    def __init__(self, interval: System.Single, intervalFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.interval = interval
		self.intervalFrames = intervalFrames


class CollectModel:

    offsets = {'collectRadius': 56, 'timeToTake': 60, 'anchorMinRadius': 64, 'anchorMaxRadius': 68, 'sound': 72}    
    def __init__(self, collectRadius: System.Single, timeToTake: System.Single, anchorMinRadius: System.Single, anchorMaxRadius: System.Single, sound: Assets.Scripts.Models.Audio.SoundModel, **kwargs):
        super().__init__(self, **kwargs)
		self.collectRadius = collectRadius
		self.timeToTake = timeToTake
		self.anchorMinRadius = anchorMinRadius
		self.anchorMaxRadius = anchorMaxRadius
		self.sound = sound


class CollideExtraPierceReductionModel:

    offsets = {'bloonTag': 56, 'extraAmount': 64, 'destroyProjectileIfPierceNotEnough': 68}    
    def __init__(self, bloonTag: System.String, extraAmount: System.Int32, destroyProjectileIfPierceNotEnough: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonTag = bloonTag
		self.extraAmount = extraAmount
		self.destroyProjectileIfPierceNotEnough = destroyProjectileIfPierceNotEnough


class CollideOnlyWithTargetModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CreateEffectFollowProjectileModel:

    offsets = {'offset': 56, 'effectModel': 72}    
    def __init__(self, offset: Assets.Scripts.Simulation.SMath.Vector3, effectModel: Assets.Scripts.Models.Effects.EffectModel, **kwargs):
        super().__init__(self, **kwargs)
		self.offset = offset
		self.effectModel = effectModel


class CreateEffectFromCollisionToCollisionModel:

    offsets = {'effectModel': 56, 'effectLength': 64}    
    def __init__(self, effectModel: Assets.Scripts.Models.Effects.EffectModel, effectLength: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.effectModel = effectModel
		self.effectLength = effectLength


class CreateEffectOnContactModel:

    offsets = {'effectModel': 56}    
    def __init__(self, effectModel: Assets.Scripts.Models.Effects.EffectModel, **kwargs):
        super().__init__(self, **kwargs)
		self.effectModel = effectModel


class CreateEffectOnExhaustFractionModel:

    offsets = {'assetId': 56, 'lifespan': 64, 'fullscreen': 68, 'fraction': 72, 'durationFraction': 76, 'randomRotation': 80, 'effectModel': 88}    
    def __init__(self, assetId: System.String, lifespan: System.Single, fullscreen: System.Boolean, fraction: System.Single, durationFraction: System.Single, randomRotation: System.Boolean, effectModel: Assets.Scripts.Models.Effects.EffectModel, **kwargs):
        super().__init__(self, **kwargs)
		self.assetId = assetId
		self.lifespan = lifespan
		self.fullscreen = fullscreen
		self.fraction = fraction
		self.durationFraction = durationFraction
		self.randomRotation = randomRotation
		self.effectModel = effectModel


class CreateEffectOnExhaustedModel:

    offsets = {'effectModel': 56, 'assetId': 64, 'lifespan': 72, 'fullscreen': 76, 'randomRotation': 77}    
    def __init__(self, effectModel: Assets.Scripts.Models.Effects.EffectModel, assetId: System.String, lifespan: System.Single, fullscreen: System.Boolean, randomRotation: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.effectModel = effectModel
		self.assetId = assetId
		self.lifespan = lifespan
		self.fullscreen = fullscreen
		self.randomRotation = randomRotation


class CreateEffectOnExpireModel:

    offsets = {'assetId': 56, 'lifespan': 64, 'fullscreen': 68, 'randomRotation': 69, 'effectModel': 72}    
    def __init__(self, assetId: System.String, lifespan: System.Single, fullscreen: System.Boolean, randomRotation: System.Boolean, effectModel: Assets.Scripts.Models.Effects.EffectModel, **kwargs):
        super().__init__(self, **kwargs)
		self.assetId = assetId
		self.lifespan = lifespan
		self.fullscreen = fullscreen
		self.randomRotation = randomRotation
		self.effectModel = effectModel


class CreateEffectProjectileAfterTimeModel:

    offsets = {'effectModel': 56, 'time': 64, 'timeFrames': 68}    
    def __init__(self, effectModel: Assets.Scripts.Models.Effects.EffectModel, time: System.Single, timeFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.effectModel = effectModel
		self.time = time
		self.timeFrames = timeFrames


class CreateLightningEffectModel:

    offsets = {'lifeSpan': 56}    
    def __init__(self, lifeSpan: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.lifeSpan = lifeSpan


class CreateProjectileOnBlockerCollideModel:

    offsets = {'projectile': 56, 'emission': 64, 'assetId': 72, 'displayLifetime': 80}    
    def __init__(self, projectile: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, emission: Assets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel, assetId: System.String, displayLifetime: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.projectile = projectile
		self.emission = emission
		self.assetId = assetId
		self.displayLifetime = displayLifetime


class CreateProjectileOnContactModel:

    offsets = {'projectile': 56, 'emission': 64, 'passOnCollidedWith': 72, 'dontCreateAtBloon': 73, 'passOnDirectionToContact': 74}    
    def __init__(self, projectile: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, emission: Assets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel, passOnCollidedWith: System.Boolean, dontCreateAtBloon: System.Boolean, passOnDirectionToContact: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.projectile = projectile
		self.emission = emission
		self.passOnCollidedWith = passOnCollidedWith
		self.dontCreateAtBloon = dontCreateAtBloon
		self.passOnDirectionToContact = passOnDirectionToContact


class CreateProjectileOnExhaustFractionModel:

    offsets = {'projectile': 56, 'emission': 64, 'fraction': 72, 'durationfraction': 76, 'canCreateInBetweenRounds': 80}    
    def __init__(self, projectile: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, emission: Assets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel, fraction: System.Single, durationfraction: System.Single, canCreateInBetweenRounds: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.projectile = projectile
		self.emission = emission
		self.fraction = fraction
		self.durationfraction = durationfraction
		self.canCreateInBetweenRounds = canCreateInBetweenRounds


class CreateProjectileOnExhaustPierceModel:

    offsets = {'projectile': 56, 'emission': 64, 'pierceInterval': 72, 'count': 76, 'minimumTimeDifferenceInFrames': 80, 'destroyProjectile': 84, 'assetId': 88, 'displayLifetime': 96, 'displayFullscreen': 100}    
    def __init__(self, projectile: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, emission: Assets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel, pierceInterval: System.Single, count: System.Int32, minimumTimeDifferenceInFrames: System.Int32, destroyProjectile: System.Boolean, assetId: System.String, displayLifetime: System.Single, displayFullscreen: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.projectile = projectile
		self.emission = emission
		self.pierceInterval = pierceInterval
		self.count = count
		self.minimumTimeDifferenceInFrames = minimumTimeDifferenceInFrames
		self.destroyProjectile = destroyProjectile
		self.assetId = assetId
		self.displayLifetime = displayLifetime
		self.displayFullscreen = displayFullscreen


class CreateProjectileOnExpireModel:

    offsets = {'projectile': 56, 'emission': 64, 'useRotation': 72}    
    def __init__(self, projectile: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, emission: Assets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel, useRotation: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.projectile = projectile
		self.emission = emission
		self.useRotation = useRotation


class CreateProjectileOnIntervalModel:

    offsets = {'projectile': 56, 'emission': 64, 'intervalFrames': 72, 'onlyIfHasTarget': 76, 'range': 80, 'targetType': 88}    
    def __init__(self, projectile: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, emission: Assets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel, intervalFrames: System.Int32, onlyIfHasTarget: System.Boolean, range: System.Single, targetType: Assets.Scripts.Models.Towers.TargetType, **kwargs):
        super().__init__(self, **kwargs)
		self.projectile = projectile
		self.emission = emission
		self.intervalFrames = intervalFrames
		self.onlyIfHasTarget = onlyIfHasTarget
		self.range = range
		self.targetType = targetType


class CreateRopeEffectModel:

    offsets = {'assetId': 56, 'endAssetId': 64, 'spriteSpacing': 72, 'spriteOffset': 76, 'spriteRadius': 80}    
    def __init__(self, assetId: System.String, endAssetId: System.String, spriteSpacing: System.Single, spriteOffset: System.Single, spriteRadius: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.assetId = assetId
		self.endAssetId = endAssetId
		self.spriteSpacing = spriteSpacing
		self.spriteOffset = spriteOffset
		self.spriteRadius = spriteRadius


class CreateSoundOnDelayedCollisionModel:

    offsets = {'sound1': 56, 'sound2': 64, 'sound3': 72, 'sound4': 80, 'delay': 88}    
    def __init__(self, sound1: Assets.Scripts.Models.Audio.SoundModel, sound2: Assets.Scripts.Models.Audio.SoundModel, sound3: Assets.Scripts.Models.Audio.SoundModel, sound4: Assets.Scripts.Models.Audio.SoundModel, delay: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.sound1 = sound1
		self.sound2 = sound2
		self.sound3 = sound3
		self.sound4 = sound4
		self.delay = delay


class CreateSoundOnPickupModel:

    offsets = {'sound': 56}    
    def __init__(self, sound: Assets.Scripts.Models.Audio.SoundModel, **kwargs):
        super().__init__(self, **kwargs)
		self.sound = sound


class CreateSoundOnProjectileCollisionModel:

    offsets = {'sound1': 56, 'sound2': 64, 'sound3': 72, 'sound4': 80, 'sound5': 88}    
    def __init__(self, sound1: Assets.Scripts.Models.Audio.SoundModel, sound2: Assets.Scripts.Models.Audio.SoundModel, sound3: Assets.Scripts.Models.Audio.SoundModel, sound4: Assets.Scripts.Models.Audio.SoundModel, sound5: Assets.Scripts.Models.Audio.SoundModel, **kwargs):
        super().__init__(self, **kwargs)
		self.sound1 = sound1
		self.sound2 = sound2
		self.sound3 = sound3
		self.sound4 = sound4
		self.sound5 = sound5


class CreateSoundOnProjectileExhaustModel:

    offsets = {'sound1': 56, 'sound2': 64, 'sound3': 72, 'sound4': 80, 'sound5': 88}    
    def __init__(self, sound1: Assets.Scripts.Models.Audio.SoundModel, sound2: Assets.Scripts.Models.Audio.SoundModel, sound3: Assets.Scripts.Models.Audio.SoundModel, sound4: Assets.Scripts.Models.Audio.SoundModel, sound5: Assets.Scripts.Models.Audio.SoundModel, **kwargs):
        super().__init__(self, **kwargs)
		self.sound1 = sound1
		self.sound2 = sound2
		self.sound3 = sound3
		self.sound4 = sound4
		self.sound5 = sound5


class CreateSoundOnProjectileExpireModel:

    offsets = {'sound1': 56, 'sound2': 64, 'sound3': 72, 'sound4': 80, 'sound5': 88}    
    def __init__(self, sound1: Assets.Scripts.Models.Audio.SoundModel, sound2: Assets.Scripts.Models.Audio.SoundModel, sound3: Assets.Scripts.Models.Audio.SoundModel, sound4: Assets.Scripts.Models.Audio.SoundModel, sound5: Assets.Scripts.Models.Audio.SoundModel, **kwargs):
        super().__init__(self, **kwargs)
		self.sound1 = sound1
		self.sound2 = sound2
		self.sound3 = sound3
		self.sound4 = sound4
		self.sound5 = sound5


class CreateTextEffectModel:

    offsets = {'assetId': 56, 'lifespan': 64, 'useTowerPosition': 68}    
    def __init__(self, assetId: System.String, lifespan: System.Single, useTowerPosition: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.assetId = assetId
		self.lifespan = lifespan
		self.useTowerPosition = useTowerPosition


class CreateTowerModel:

    offsets = {'tower': 56, 'height': 64, 'positionAtTarget': 68, 'destroySubTowersOnCreateNewTower': 69, 'useProjectileRotation': 70, 'useParentTargetPriority': 71, 'carryMutatorsFromDestroyedTower': 72}    
    def __init__(self, tower: Assets.Scripts.Models.Towers.TowerModel, height: System.Single, positionAtTarget: System.Boolean, destroySubTowersOnCreateNewTower: System.Boolean, useProjectileRotation: System.Boolean, useParentTargetPriority: System.Boolean, carryMutatorsFromDestroyedTower: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.tower = tower
		self.height = height
		self.positionAtTarget = positionAtTarget
		self.destroySubTowersOnCreateNewTower = destroySubTowersOnCreateNewTower
		self.useProjectileRotation = useProjectileRotation
		self.useParentTargetPriority = useParentTargetPriority
		self.carryMutatorsFromDestroyedTower = carryMutatorsFromDestroyedTower


class CreateTypedTowerModel:

    offsets = {'crushingTower': 56, 'boomTower': 64, 'coldTower': 72, 'energyTower': 80, 'crushingDisplay': 88, 'boomDisplay': 96, 'coldDisplay': 104, 'energyDisplay': 112}    
    def __init__(self, crushingTower: Assets.Scripts.Models.Towers.TowerModel, boomTower: Assets.Scripts.Models.Towers.TowerModel, coldTower: Assets.Scripts.Models.Towers.TowerModel, energyTower: Assets.Scripts.Models.Towers.TowerModel, crushingDisplay: System.String, boomDisplay: System.String, coldDisplay: System.String, energyDisplay: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.crushingTower = crushingTower
		self.boomTower = boomTower
		self.coldTower = coldTower
		self.energyTower = energyTower
		self.crushingDisplay = crushingDisplay
		self.boomDisplay = boomDisplay
		self.coldDisplay = coldDisplay
		self.energyDisplay = energyDisplay


class DamageInRingRadiusModel:

    offsets = {'innerRingRadius': 72}    
    def __init__(self, innerRingRadius: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.innerRingRadius = innerRingRadius


class DamageModel:

    offsets = {'damage': 56, 'maxDamage': 60, 'distributeToChildren': 64, 'overrideDistributeBlocker': 65, 'createPopEffect': 66, 'immuneBloonProperties': 68}    
    def __init__(self, damage: System.Single, maxDamage: System.Single, distributeToChildren: System.Boolean, overrideDistributeBlocker: System.Boolean, createPopEffect: System.Boolean, immuneBloonProperties: BloonProperties, **kwargs):
        super().__init__(self, **kwargs)
		self.damage = damage
		self.maxDamage = maxDamage
		self.distributeToChildren = distributeToChildren
		self.overrideDistributeBlocker = overrideDistributeBlocker
		self.createPopEffect = createPopEffect
		self.immuneBloonProperties = immuneBloonProperties


class DamageModifierForBloonStateModel:

    offsets = {'bloonState': 56, 'damageMultiplier': 72, 'damageAdditive': 76, 'mustIncludeAllStates': 80, 'applyOverMaxDamage': 81, 'mustBeModified': 82}    
    def __init__(self, bloonState: System.String, damageMultiplier: System.Single, damageAdditive: System.Single, mustIncludeAllStates: System.Boolean, applyOverMaxDamage: System.Boolean, mustBeModified: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonState = bloonState
		self.damageMultiplier = damageMultiplier
		self.damageAdditive = damageAdditive
		self.mustIncludeAllStates = mustIncludeAllStates
		self.applyOverMaxDamage = applyOverMaxDamage
		self.mustBeModified = mustBeModified


class DamageModifierForBloonTypeModel:

    offsets = {'bloonId': 56, 'damageMultiplier': 64, 'damageAdditive': 68, 'includeChildren': 72}    
    def __init__(self, bloonId: System.String, damageMultiplier: System.Single, damageAdditive: System.Single, includeChildren: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonId = bloonId
		self.damageMultiplier = damageMultiplier
		self.damageAdditive = damageAdditive
		self.includeChildren = includeChildren


class DamageModifierForModifiersModel:

    offsets = {'modifier': 56, 'damageMultiplier': 72, 'damageAddative': 76}    
    def __init__(self, modifier: System.String, damageMultiplier: System.Single, damageAddative: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.modifier = modifier
		self.damageMultiplier = damageMultiplier
		self.damageAddative = damageAddative


class DamageModifierForTagModel:

    offsets = {'tag': 56, 'damageMultiplier': 72, 'damageAddative': 76, 'mustIncludeAllTags': 80, 'applyOverMaxDamage': 81}    
    def __init__(self, tag: System.String, damageMultiplier: System.Single, damageAddative: System.Single, mustIncludeAllTags: System.Boolean, applyOverMaxDamage: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.tag = tag
		self.damageMultiplier = damageMultiplier
		self.damageAddative = damageAddative
		self.mustIncludeAllTags = mustIncludeAllTags
		self.applyOverMaxDamage = applyOverMaxDamage


class DamageModifierUnstableConcoctionModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DamageModifierWrathModel:

    offsets = {'rbeThreshold': 56, 'damage': 60, 'maxDamageBoost': 64}    
    def __init__(self, rbeThreshold: System.Int32, damage: System.Int32, maxDamageBoost: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.rbeThreshold = rbeThreshold
		self.damage = damage
		self.maxDamageBoost = maxDamageBoost


class DamagePercentOfMaxModel:

    offsets = {'percent': 56, 'damageBloonsOffscreenOnly': 72}    
    def __init__(self, percent: System.Single, damageBloonsOffscreenOnly: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.percent = percent
		self.damageBloonsOffscreenOnly = damageBloonsOffscreenOnly


class DamageUpTagTowersModel:

    offsets = {'increase': 56, 'bloonTag': 64, 'lifespan': 80, 'lifespanFrames': 84, 'useClosest': 88, 'mutatorId': 96, 'priority': 104, 'useTowerPosition': 108, 'mutator': 112, 'damageModifierForTagModel': 120}    
    def __init__(self, increase: System.Int32, bloonTag: System.String, lifespan: System.Single, lifespanFrames: System.Int32, useClosest: System.Boolean, mutatorId: System.String, priority: System.Int32, useTowerPosition: System.Boolean, mutator: Assets.Scripts.Models.Towers.Projectiles.Behaviors.DamageUpTagTowersModel.DamageUpTagMutator, damageModifierForTagModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.DamageModifierForTagModel, **kwargs):
        super().__init__(self, **kwargs)
		self.increase = increase
		self.bloonTag = bloonTag
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames
		self.useClosest = useClosest
		self.mutatorId = mutatorId
		self.priority = priority
		self.useTowerPosition = useTowerPosition
		self.mutator = mutator
		self.damageModifierForTagModel = damageModifierForTagModel


class DamageUpTowersModel:

    offsets = {'increase': 56, 'lifespan': 60, 'lifespanFrames': 64, 'useClosest': 68, 'mutatorId': 72, 'priority': 80, 'useTowerPosition': 84, 'mutator': 88}    
    def __init__(self, increase: System.Int32, lifespan: System.Single, lifespanFrames: System.Int32, useClosest: System.Boolean, mutatorId: System.String, priority: System.Int32, useTowerPosition: System.Boolean, mutator: Assets.Scripts.Models.Towers.Projectiles.Behaviors.DamageUpTowersModel.DamageUpMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.increase = increase
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames
		self.useClosest = useClosest
		self.mutatorId = mutatorId
		self.priority = priority
		self.useTowerPosition = useTowerPosition
		self.mutator = mutator


class DelayBloonChildrenSpawningModel:

    offsets = {'createWindEffectOnChildBloons': 56, 'ejectLocation': 60, 'lifespanFrames': 72, 'lifespan': 76}    
    def __init__(self, createWindEffectOnChildBloons: System.Boolean, ejectLocation: Assets.Scripts.Simulation.SMath.Vector3, lifespanFrames: System.Int32, lifespan: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.createWindEffectOnChildBloons = createWindEffectOnChildBloons
		self.ejectLocation = ejectLocation
		self.lifespanFrames = lifespanFrames
		self.lifespan = lifespan


class DepletionToCashModel:

    offsets = {'minimum': 56, 'maximum': 60, 'salvage': 64}    
    def __init__(self, minimum: System.Single, maximum: System.Single, salvage: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.minimum = minimum
		self.maximum = maximum
		self.salvage = salvage


class DestroyIfTargetLostModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DestroyProjectileIfTowerDestroyedModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DestroyWhenHitImmuneModel:

    offsets = {'getsDestroyed': 56}    
    def __init__(self, getsDestroyed: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.getsDestroyed = getsDestroyed


class DistributeToChildrenBloonModifierModel:

    offsets = {'bloonTag': 56, '_mutator': 72}    
    def __init__(self, bloonTag: System.String, _mutator: Assets.Scripts.Models.Towers.Projectiles.Behaviors.DistributeToChildrenBloonModifierModel.Mutator, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonTag = bloonTag
		self._mutator = _mutator


class DistributeToChildrenSetModel:

    offsets = {'layers': 56, '_mutator': 64}    
    def __init__(self, layers: System.Int32, _mutator: Assets.Scripts.Models.Towers.Projectiles.Behaviors.DistributeToChildrenSetModel.Mutator, **kwargs):
        super().__init__(self, **kwargs)
		self.layers = layers
		self._mutator = _mutator


class DontDestroyOnContinueModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class EatBloonModel:

    offsets = {'rbeCapacity': 56, 'rbeCashMultiplier': 60, 'projectile': 64, 'emission': 72, 'animationStateOpen': 80, 'animationStateClosed': 84, 'timeUntilClose': 88, 'timeUntilCloseFrames': 92, 'effectOnEatModel': 96, 'bloonTrapOpenSound': 104, 'bloonTrapCloseSound': 112}    
    def __init__(self, rbeCapacity: System.Single, rbeCashMultiplier: System.Single, projectile: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, emission: Assets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel, animationStateOpen: System.Int32, animationStateClosed: System.Int32, timeUntilClose: System.Single, timeUntilCloseFrames: System.Int32, effectOnEatModel: Assets.Scripts.Models.Effects.EffectModel, bloonTrapOpenSound: Assets.Scripts.Models.Audio.SoundModel, bloonTrapCloseSound: Assets.Scripts.Models.Audio.SoundModel, **kwargs):
        super().__init__(self, **kwargs)
		self.rbeCapacity = rbeCapacity
		self.rbeCashMultiplier = rbeCashMultiplier
		self.projectile = projectile
		self.emission = emission
		self.animationStateOpen = animationStateOpen
		self.animationStateClosed = animationStateClosed
		self.timeUntilClose = timeUntilClose
		self.timeUntilCloseFrames = timeUntilCloseFrames
		self.effectOnEatModel = effectOnEatModel
		self.bloonTrapOpenSound = bloonTrapOpenSound
		self.bloonTrapCloseSound = bloonTrapCloseSound


class EmitOnDamageModel:

    offsets = {'projectile': 56, 'emission': 64}    
    def __init__(self, projectile: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, emission: Assets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.projectile = projectile
		self.emission = emission


class EndOfRoundClearBypassModel:

    offsets = {'gameModes': 56}    
    def __init__(self, gameModes: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.gameModes = gameModes


class ExperiencePointsModel:

    offsets = {'amount': 56}    
    def __init__(self, amount: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.amount = amount


class ExpireProjectileAtScreenEdgeModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class FadeProjectileModel:

    offsets = {'startFadingAt': 56, 'startFadingAtFrames': 60}    
    def __init__(self, startFadingAt: System.Single, startFadingAtFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.startFadingAt = startFadingAt
		self.startFadingAtFrames = startFadingAtFrames


class FallToGroundModel:

    offsets = {'timeToTake': 56, 'expireOnContact': 60, 'groundOffset': 64}    
    def __init__(self, timeToTake: System.Single, expireOnContact: System.Boolean, groundOffset: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.timeToTake = timeToTake
		self.expireOnContact = expireOnContact
		self.groundOffset = groundOffset


class FilterFractionOfBloonTypeModel:

    offsets = {'fraction': 56, 'bloon': 64}    
    def __init__(self, fraction: System.Single, bloon: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.fraction = fraction
		self.bloon = bloon


class FollowPathModel:

    offsets = {'speed': 72, 'speedFrames': 76, 'destroyAtEndOfPath': 80}    
    def __init__(self, speed: System.Single, speedFrames: System.Single, destroyAtEndOfPath: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.speed = speed
		self.speedFrames = speedFrames
		self.destroyAtEndOfPath = destroyAtEndOfPath


class FreezeModel:

    offsets = {'speed': 56, 'layers': 60, 'overlays': 64, 'overlayLayer': 72, 'mutationId': 80, 'percentChanceToFreeze': 88, 'enablePercentChanceToFreeze': 92, 'damageModel': 96, 'lifespan': 104, 'lifespanFrames': 108, '_mutator': 112, 'cascadeMutators': 120, 'growBlockModel': 128}    
    def __init__(self, speed: System.Single, layers: System.Int32, overlays: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Effects.AssetPathModel>, overlayLayer: System.Int32, mutationId: System.String, percentChanceToFreeze: System.Single, enablePercentChanceToFreeze: System.Boolean, damageModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.DamageModel, lifespan: System.Single, lifespanFrames: System.Int32, _mutator: Assets.Scripts.Models.Towers.Projectiles.Behaviors.FreezeModel.Mutator, cascadeMutators: System.Boolean, growBlockModel: Assets.Scripts.Models.Bloons.Behaviors.GrowBlockModel, **kwargs):
        super().__init__(self, **kwargs)
		self.speed = speed
		self.layers = layers
		self.overlays = overlays
		self.overlayLayer = overlayLayer
		self.mutationId = mutationId
		self.percentChanceToFreeze = percentChanceToFreeze
		self.enablePercentChanceToFreeze = enablePercentChanceToFreeze
		self.damageModel = damageModel
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames
		self._mutator = _mutator
		self.cascadeMutators = cascadeMutators
		self.growBlockModel = growBlockModel


class FreezeModifierForTagsModel:

    offsets = {'freezeId': 64, 'freezeTimeMultiplier': 72, 'resetToUnmodified': 76, 'preventMutation': 77}    
    def __init__(self, freezeId: System.String, freezeTimeMultiplier: System.Single, resetToUnmodified: System.Boolean, preventMutation: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.freezeId = freezeId
		self.freezeTimeMultiplier = freezeTimeMultiplier
		self.resetToUnmodified = resetToUnmodified
		self.preventMutation = preventMutation


class GrabBloonModel:

    offsets = {'grabDuration': 56, 'projectile': 64, 'emission': 72}    
    def __init__(self, grabDuration: System.Single, projectile: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, emission: Assets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.grabDuration = grabDuration
		self.projectile = projectile
		self.emission = emission


class HeatItUpDamageBuffModel:

    offsets = {'lifespan': 56, 'lifespanFrames': 60, 'mutatorId': 64, 'useTowerPosition': 72, 'buffLocsName': 80, 'buffIconName': 88, 'mutator': 96}    
    def __init__(self, lifespan: System.Single, lifespanFrames: System.Int32, mutatorId: System.String, useTowerPosition: System.Boolean, buffLocsName: System.String, buffIconName: System.String, mutator: Assets.Scripts.Models.Towers.Projectiles.Behaviors.HeatItUpDamageBuffModel.HeatItUpDamageMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames
		self.mutatorId = mutatorId
		self.useTowerPosition = useTowerPosition
		self.buffLocsName = buffLocsName
		self.buffIconName = buffIconName
		self.mutator = mutator


class HeightOffsetProjectileModel:

    offsets = {'curve': 64}    
    def __init__(self, curve: Assets.Scripts.Simulation.Towers.Projectiles.Behaviors.Curve, **kwargs):
        super().__init__(self, **kwargs)
		self.curve = curve


class IgnoreInsufficientPierceModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class IncreaseBloonWorthModel:

    offsets = {'mutatorId': 56, 'cash': 64, 'cashMultiplier': 68, 'filter': 72, 'charges': 80, 'overlays': 88, 'overlayLayer': 96, '_mutator': 104}    
    def __init__(self, mutatorId: System.String, cash: System.Single, cashMultiplier: System.Single, filter: Assets.Scripts.Models.Towers.Filters.FilterModel, charges: System.Int32, overlays: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Effects.AssetPathModel>, overlayLayer: System.Int32, _mutator: Assets.Scripts.Models.Towers.Projectiles.Behaviors.IncreaseBloonWorthModel.BloonWorthMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.mutatorId = mutatorId
		self.cash = cash
		self.cashMultiplier = cashMultiplier
		self.filter = filter
		self.charges = charges
		self.overlays = overlays
		self.overlayLayer = overlayLayer
		self._mutator = _mutator


class IncreaseBloonWorthWithTierModel:

    offsets = {'mutatorId': 56, 'cashPerTier': 64, 'overlays': 72, 'overlayLayer': 80, '_mutator': 88}    
    def __init__(self, mutatorId: System.String, cashPerTier: System.Single, overlays: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Effects.AssetPathModel>, overlayLayer: System.Int32, _mutator: Assets.Scripts.Models.Towers.Projectiles.Behaviors.IncreaseBloonWorthWithTierModel.BloonWorthMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.mutatorId = mutatorId
		self.cashPerTier = cashPerTier
		self.overlays = overlays
		self.overlayLayer = overlayLayer
		self._mutator = _mutator


class InstantModel:

    offsets = {'destroyIfInvalid': 56}    
    def __init__(self, destroyIfInvalid: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.destroyIfInvalid = destroyIfInvalid


class JungleVineEffectModel:

    offsets = {'displayFrontAssetId': 56, 'displayBackAssetId': 64, 'fullscreen': 72, 'destroyAfterPopTime': 76, 'sound1': 80, 'sound2': 88, 'sound3': 96, 'sound4': 104, 'ageingDestroyModel': 112, 'backEffectDisplayModel': 120, 'bloonEffectDisplayModel': 128, 'frontEffectDisplayModel': 136}    
    def __init__(self, displayFrontAssetId: System.String, displayBackAssetId: System.String, fullscreen: System.Boolean, destroyAfterPopTime: System.Single, sound1: Assets.Scripts.Models.Audio.SoundModel, sound2: Assets.Scripts.Models.Audio.SoundModel, sound3: Assets.Scripts.Models.Audio.SoundModel, sound4: Assets.Scripts.Models.Audio.SoundModel, ageingDestroyModel: Assets.Scripts.Models.Behaviors.AgeingDestroyModel, backEffectDisplayModel: Assets.Scripts.Models.GenericBehaviors.DisplayModel, bloonEffectDisplayModel: Assets.Scripts.Models.GenericBehaviors.DisplayModel, frontEffectDisplayModel: Assets.Scripts.Models.GenericBehaviors.DisplayModel, **kwargs):
        super().__init__(self, **kwargs)
		self.displayFrontAssetId = displayFrontAssetId
		self.displayBackAssetId = displayBackAssetId
		self.fullscreen = fullscreen
		self.destroyAfterPopTime = destroyAfterPopTime
		self.sound1 = sound1
		self.sound2 = sound2
		self.sound3 = sound3
		self.sound4 = sound4
		self.ageingDestroyModel = ageingDestroyModel
		self.backEffectDisplayModel = backEffectDisplayModel
		self.bloonEffectDisplayModel = bloonEffectDisplayModel
		self.frontEffectDisplayModel = frontEffectDisplayModel


class KeepInBoundsModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class KnockbackModel:

    offsets = {'moabMultiplier': 56, 'heavyMultiplier': 60, 'lightMultiplier': 64, 'mutationId': 72, 'lifespanFrames': 80, 'lifespan': 84, '_mutator': 88}    
    def __init__(self, moabMultiplier: System.Single, heavyMultiplier: System.Single, lightMultiplier: System.Single, mutationId: System.String, lifespanFrames: System.Int32, lifespan: System.Single, _mutator: Assets.Scripts.Models.Towers.Projectiles.Behaviors.KnockbackModel.KnockbackMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.moabMultiplier = moabMultiplier
		self.heavyMultiplier = heavyMultiplier
		self.lightMultiplier = lightMultiplier
		self.mutationId = mutationId
		self.lifespanFrames = lifespanFrames
		self.lifespan = lifespan
		self._mutator = _mutator


class LightningModel:

    offsets = {'splits': 56, 'emissionModel': 64, 'splitRange': 72, 'delay': 76, 'delayFrames': 80}    
    def __init__(self, splits: System.Int32, emissionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel, splitRange: System.Single, delay: System.Single, delayFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.splits = splits
		self.emissionModel = emissionModel
		self.splitRange = splitRange
		self.delay = delay
		self.delayFrames = delayFrames


class LightningSplitOnContactModel:

    offsets = {'targets': 56, 'projectileModel': 64, 'emissionModel': 72, 'splitRange': 80, 'delay': 84, 'delayFrames': 88}    
    def __init__(self, targets: System.Int32, projectileModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, emissionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel, splitRange: System.Single, delay: System.Single, delayFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.targets = targets
		self.projectileModel = projectileModel
		self.emissionModel = emissionModel
		self.splitRange = splitRange
		self.delay = delay
		self.delayFrames = delayFrames


class LivesModel:

    offsets = {'minimum': 56, 'maximum': 60, 'salvage': 64}    
    def __init__(self, minimum: System.Single, maximum: System.Single, salvage: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.minimum = minimum
		self.maximum = maximum
		self.salvage = salvage


class MoabTakedownModel:

    offsets = {'speed': 56, 'speedFrames': 60, 'increaseMoabBloonWorth': 64, 'multiplier': 68, 'additive': 72, 'increaseWorthTextEffectModel': 80, 'bloonWorthMutator': 88}    
    def __init__(self, speed: System.Single, speedFrames: System.Single, increaseMoabBloonWorth: System.Boolean, multiplier: System.Single, additive: System.Single, increaseWorthTextEffectModel: Assets.Scripts.Models.Bloons.Behaviors.IncreaseWorthTextEffectModel, bloonWorthMutator: Assets.Scripts.Models.Towers.Projectiles.Behaviors.MoabTakedownModel.BloonWorthMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.speed = speed
		self.speedFrames = speedFrames
		self.increaseMoabBloonWorth = increaseMoabBloonWorth
		self.multiplier = multiplier
		self.additive = additive
		self.increaseWorthTextEffectModel = increaseWorthTextEffectModel
		self.bloonWorthMutator = bloonWorthMutator


class MorphBloonModel:

    offsets = {'bloonId': 56}    
    def __init__(self, bloonId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonId = bloonId


class MoveBackModel:

    offsets = {'multiplier': 56, 'lifespan': 60, 'lifespanFrames': 64, 'layers': 68, 'mutationId': 72, 'mutator': 80}    
    def __init__(self, multiplier: System.Single, lifespan: System.Single, lifespanFrames: System.Int32, layers: System.Int32, mutationId: System.String, mutator: Assets.Scripts.Models.Towers.Projectiles.Behaviors.MoveBackModel.MoveBackMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames
		self.layers = layers
		self.mutationId = mutationId
		self.mutator = mutator


class PickupModel:

    offsets = {'collectRadius': 56, 'delay': 60, 'delayFrames': 64}    
    def __init__(self, collectRadius: System.Single, delay: System.Single, delayFrames: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.collectRadius = collectRadius
		self.delay = delay
		self.delayFrames = delayFrames


class PierceUpTowersModel:

    offsets = {'increase': 56, 'lifespan': 60, 'lifespanFrames': 64, 'useClosest': 68, 'mutatorId': 72, 'priority': 80, 'useTowerPosition': 84, 'displayToAddPath': 88, 'displayModel': 96, 'mutator': 104}    
    def __init__(self, increase: System.Single, lifespan: System.Single, lifespanFrames: System.Int32, useClosest: System.Boolean, mutatorId: System.String, priority: System.Int32, useTowerPosition: System.Boolean, displayToAddPath: System.String, displayModel: Assets.Scripts.Models.GenericBehaviors.DisplayModel, mutator: Assets.Scripts.Models.Towers.Projectiles.Behaviors.PierceUpTowersModel.PierceUpMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.increase = increase
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames
		self.useClosest = useClosest
		self.mutatorId = mutatorId
		self.priority = priority
		self.useTowerPosition = useTowerPosition
		self.displayToAddPath = displayToAddPath
		self.displayModel = displayModel
		self.mutator = mutator


class PowerProjectileModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ProjectileBlockerCollisionReboundModel:

    offsets = {'clearCollidedWith': 56}    
    def __init__(self, clearCollidedWith: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.clearCollidedWith = clearCollidedWith


class ProjectileFilterModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ProjectileHeightModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ProjectileSetAnimationOnContactModel:

    offsets = {'onContactAnimationId': 56}    
    def __init__(self, onContactAnimationId: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.onContactAnimationId = onContactAnimationId


class ProjectileZeroRotationModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PsiEffectModel:

    offsets = {'overlays': 56, 'overlayLayer': 64, 'damagePerTick': 68, 'tickRate': 72, 'bloonBehavior': 80, 'trembleSpeed': 88, 'trembleDistanceMin': 92, 'trembleDistanceMax': 96, 'trembleTimeThresholdMin': 100, 'trembleTimeThresholdMax': 104, 'projectileOnBloonDestroyModel': 112, 'effectOnBloonDestroyModel': 120, 'superCeramicPenalty': 128, 'maxDuration': 132, 'maxDurationFrames': 136, 'emissionOnBloonDestroy': 144, 'createSoundOnBloonDegradeModel': 152, 'mutators': 160}    
    def __init__(self, overlays: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Effects.AssetPathModel>, overlayLayer: System.Int32, damagePerTick: System.Int32, tickRate: System.Single, bloonBehavior: Assets.Scripts.Models.Bloons.Behaviors.PsiBloonBehaviorModel, trembleSpeed: System.Single, trembleDistanceMin: System.Single, trembleDistanceMax: System.Single, trembleTimeThresholdMin: System.Single, trembleTimeThresholdMax: System.Single, projectileOnBloonDestroyModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, effectOnBloonDestroyModel: Assets.Scripts.Models.Effects.EffectModel, superCeramicPenalty: System.Int32, maxDuration: System.Single, maxDurationFrames: System.Int32, emissionOnBloonDestroy: Assets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel, createSoundOnBloonDegradeModel: Assets.Scripts.Models.Bloons.Behaviors.CreateSoundOnBloonDegradeModel, mutators: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Models.Towers.Projectiles.Behaviors.PsiEffectModel.PsiBloonMutator>, **kwargs):
        super().__init__(self, **kwargs)
		self.overlays = overlays
		self.overlayLayer = overlayLayer
		self.damagePerTick = damagePerTick
		self.tickRate = tickRate
		self.bloonBehavior = bloonBehavior
		self.trembleSpeed = trembleSpeed
		self.trembleDistanceMin = trembleDistanceMin
		self.trembleDistanceMax = trembleDistanceMax
		self.trembleTimeThresholdMin = trembleTimeThresholdMin
		self.trembleTimeThresholdMax = trembleTimeThresholdMax
		self.projectileOnBloonDestroyModel = projectileOnBloonDestroyModel
		self.effectOnBloonDestroyModel = effectOnBloonDestroyModel
		self.superCeramicPenalty = superCeramicPenalty
		self.maxDuration = maxDuration
		self.maxDurationFrames = maxDurationFrames
		self.emissionOnBloonDestroy = emissionOnBloonDestroy
		self.createSoundOnBloonDegradeModel = createSoundOnBloonDegradeModel
		self.mutators = mutators


class PsiPsionicScreamModel:

    offsets = {'psiEffectModel': 56, 'distractionOverlayDictionary': 64, 'distractionOverlayLayer': 72, 'psiEffectChance': 76, 'distractDistanceMin': 80, 'distractDistanceMax': 84, 'windMutators': 88, 'psiEffectMutators': 96}    
    def __init__(self, psiEffectModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.PsiEffectModel, distractionOverlayDictionary: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Effects.AssetPathModel>, distractionOverlayLayer: System.Int32, psiEffectChance: System.Single, distractDistanceMin: System.Single, distractDistanceMax: System.Single, windMutators: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Models.Towers.Projectiles.Behaviors.WindModel.AddBehaviorToBloonMutator>, psiEffectMutators: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Models.Towers.Projectiles.Behaviors.PsiEffectModel.PsiBloonMutator>, **kwargs):
        super().__init__(self, **kwargs)
		self.psiEffectModel = psiEffectModel
		self.distractionOverlayDictionary = distractionOverlayDictionary
		self.distractionOverlayLayer = distractionOverlayLayer
		self.psiEffectChance = psiEffectChance
		self.distractDistanceMin = distractDistanceMin
		self.distractDistanceMax = distractDistanceMax
		self.windMutators = windMutators
		self.psiEffectMutators = psiEffectMutators


class PushBackModel:

    offsets = {'pushAmount': 56, 'tag': 64, 'multiplierBFB': 72, 'multiplierDDT': 76, 'multiplierZOMG': 80, 'multiplierBAD': 84}    
    def __init__(self, pushAmount: System.Single, tag: System.String, multiplierBFB: System.Single, multiplierDDT: System.Single, multiplierZOMG: System.Single, multiplierBAD: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.pushAmount = pushAmount
		self.tag = tag
		self.multiplierBFB = multiplierBFB
		self.multiplierDDT = multiplierDDT
		self.multiplierZOMG = multiplierZOMG
		self.multiplierBAD = multiplierBAD


class RandomDisplayModel:

    offsets = {'applyRandomRotation': 64}    
    def __init__(self, applyRandomRotation: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.applyRandomRotation = applyRandomRotation


class RandomRangeTravelStraightModel:

    offsets = {'minRange': 56, 'maxRange': 60, 'speed': 64, 'speedFrames': 68}    
    def __init__(self, minRange: System.Single, maxRange: System.Single, speed: System.Single, speedFrames: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.minRange = minRange
		self.maxRange = maxRange
		self.speed = speed
		self.speedFrames = speedFrames


class RangeUpTowersModel:

    offsets = {'increase': 56, 'lifespan': 60, 'isUnique': 64, 'useClosest': 65, 'lifespanFrames': 68, 'mutatorId': 72, 'priority': 80, 'mutator': 88}    
    def __init__(self, increase: System.Single, lifespan: System.Single, isUnique: System.Boolean, useClosest: System.Boolean, lifespanFrames: System.Int32, mutatorId: System.String, priority: System.Int32, mutator: Assets.Scripts.Models.Towers.Projectiles.Behaviors.RangeUpTowersModel.RangeUpMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.increase = increase
		self.lifespan = lifespan
		self.isUnique = isUnique
		self.useClosest = useClosest
		self.lifespanFrames = lifespanFrames
		self.mutatorId = mutatorId
		self.priority = priority
		self.mutator = mutator


class RefreshMutatorsOnBloonModel:

    offsets = {'mutatorId': 56, 'mutatorKey': 72}    
    def __init__(self, mutatorId: System.String, mutatorKey: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.mutatorId = mutatorId
		self.mutatorKey = mutatorKey


class RefreshPierceModel:

    offsets = {'interval': 56, 'intervalFrames': 60}    
    def __init__(self, interval: System.Single, intervalFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.interval = interval
		self.intervalFrames = intervalFrames


class RemoveBloonModifiersModel:

    offsets = {'cleanseRegen': 56, 'cleanseCamo': 57, 'cleanseLead': 58, 'cleanseFortified': 59, 'cleanseOnlyIfDamaged': 60, 'hasBeenModded': 72, 'whitelistTagModFilter': 80, 'blacklistTagModFilter': 88}    
    def __init__(self, cleanseRegen: System.Boolean, cleanseCamo: System.Boolean, cleanseLead: System.Boolean, cleanseFortified: System.Boolean, cleanseOnlyIfDamaged: System.Boolean, hasBeenModded: System.Boolean, whitelistTagModFilter: System.Collections.Generic.List<System.String>, blacklistTagModFilter: System.Collections.Generic.List<System.String>, **kwargs):
        super().__init__(self, **kwargs)
		self.cleanseRegen = cleanseRegen
		self.cleanseCamo = cleanseCamo
		self.cleanseLead = cleanseLead
		self.cleanseFortified = cleanseFortified
		self.cleanseOnlyIfDamaged = cleanseOnlyIfDamaged
		self.hasBeenModded = hasBeenModded
		self.whitelistTagModFilter = whitelistTagModFilter
		self.blacklistTagModFilter = blacklistTagModFilter


class RemoveDamageTypeModifierModel:

    offsets = {'lifespan': 56, 'lifespanFrames': 60, 'layers': 64, 'mutationId': 72, '_mutator': 80}    
    def __init__(self, lifespan: System.Single, lifespanFrames: System.Int32, layers: System.Int32, mutationId: System.String, _mutator: Assets.Scripts.Models.Towers.Projectiles.Behaviors.RemoveDamageTypeModifierModel.RemoveDamageTypeModifierMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames
		self.layers = layers
		self.mutationId = mutationId
		self._mutator = _mutator


class RemoveMutatorsFromBloonModel:

    offsets = {'key': 56, 'mutatorIds': 72}    
    def __init__(self, key: System.String, mutatorIds: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.key = key
		self.mutatorIds = mutatorIds


class ResetAgeOnContactModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RetargetOnContactDelayModel:

    offsets = {'distance': 56, 'maxBounces': 60, 'delayFrames': 64, 'onlyIfFirstBloonDestroyed': 68, 'displayPath': 72, 'displayLength': 80, 'displayLifetime': 84, 'displayLengthScale': 88}    
    def __init__(self, distance: System.Single, maxBounces: System.Int32, delayFrames: System.Int32, onlyIfFirstBloonDestroyed: System.Boolean, displayPath: System.String, displayLength: System.Single, displayLifetime: System.Single, displayLengthScale: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.distance = distance
		self.maxBounces = maxBounces
		self.delayFrames = delayFrames
		self.onlyIfFirstBloonDestroyed = onlyIfFirstBloonDestroyed
		self.displayPath = displayPath
		self.displayLength = displayLength
		self.displayLifetime = displayLifetime
		self.displayLengthScale = displayLengthScale


class RetargetOnContactModel:

    offsets = {'distance': 56, 'maxBounces': 60, 'delay': 64, 'delayFrames': 68, 'targetType': 72, 'expireIfNoTargetFound': 88}    
    def __init__(self, distance: System.Single, maxBounces: System.Int32, delay: System.Single, delayFrames: System.Int32, targetType: Assets.Scripts.Models.Towers.TargetType, expireIfNoTargetFound: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.distance = distance
		self.maxBounces = maxBounces
		self.delay = delay
		self.delayFrames = delayFrames
		self.targetType = targetType
		self.expireIfNoTargetFound = expireIfNoTargetFound


class RotateModel:

    offsets = {'angle': 56, 'rotationFrames': 60}    
    def __init__(self, angle: System.Single, rotationFrames: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.angle = angle
		self.rotationFrames = rotationFrames


class SaudaAfflictionDamageModifierModel:

    offsets = {'lv7Tags': 56, 'lv7NonMoabBonus': 72, 'lv7MoabBonus': 76, 'lv11ExcludeTags': 80, 'lv11NonMoabBonus': 96, 'lv11MoabBonus': 100, 'lv19BloonTags': 104, 'lv19NonMoabBonus': 120, 'lv19MoabBonus': 124}    
    def __init__(self, lv7Tags: System.String, lv7NonMoabBonus: System.Single, lv7MoabBonus: System.Single, lv11ExcludeTags: System.String, lv11NonMoabBonus: System.Single, lv11MoabBonus: System.Single, lv19BloonTags: System.String, lv19NonMoabBonus: System.Single, lv19MoabBonus: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.lv7Tags = lv7Tags
		self.lv7NonMoabBonus = lv7NonMoabBonus
		self.lv7MoabBonus = lv7MoabBonus
		self.lv11ExcludeTags = lv11ExcludeTags
		self.lv11NonMoabBonus = lv11NonMoabBonus
		self.lv11MoabBonus = lv11MoabBonus
		self.lv19BloonTags = lv19BloonTags
		self.lv19NonMoabBonus = lv19NonMoabBonus
		self.lv19MoabBonus = lv19MoabBonus


class ScaleProjectileModel:

    offsets = {'curve': 64}    
    def __init__(self, curve: Assets.Scripts.Simulation.Towers.Projectiles.Behaviors.Curve, **kwargs):
        super().__init__(self, **kwargs)
		self.curve = curve


class SetSpriteFromPierceModel:

    offsets = {'loopMode': 64}    
    def __init__(self, loopMode: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.loopMode = loopMode


class ShowTextOnHitModel:

    offsets = {'assetId': 56, 'lifespan': 64, 'useTowerPosition': 68, 'text': 72}    
    def __init__(self, assetId: System.String, lifespan: System.Single, useTowerPosition: System.Boolean, text: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.assetId = assetId
		self.lifespan = lifespan
		self.useTowerPosition = useTowerPosition
		self.text = text


class SlowForBloonModel:

    offsets = {'bloonId': 128, 'bloonTag': 144, 'excluding': 160}    
    def __init__(self, bloonId: System.String, bloonTag: System.String, excluding: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonId = bloonId
		self.bloonTag = bloonTag
		self.excluding = excluding


class SlowMaimMoabModel:

    offsets = {'moabDuration': 56, 'bfbDuration': 60, 'zomgDuration': 64, 'ddtDuration': 68, 'badDuration': 72, 'moabDurationFrames': 76, 'bfbDurationFrames': 80, 'zomgDurationFrames': 84, 'ddtDurationFrames': 88, 'badDurationFrames': 92, 'multiplier': 96, 'moabMutator': 104, 'bfbMutator': 112, 'zomgMutator': 120, 'ddtMutator': 128, 'badMutator': 136, 'bloonPerHitDamageAddition': 144, 'overlays': 152, 'overlayLayer': 160}    
    def __init__(self, moabDuration: System.Single, bfbDuration: System.Single, zomgDuration: System.Single, ddtDuration: System.Single, badDuration: System.Single, moabDurationFrames: System.Int32, bfbDurationFrames: System.Int32, zomgDurationFrames: System.Int32, ddtDurationFrames: System.Int32, badDurationFrames: System.Int32, multiplier: System.Single, moabMutator: Assets.Scripts.Models.Towers.Projectiles.Behaviors.SlowMaimMoabModel.Mutator, bfbMutator: Assets.Scripts.Models.Towers.Projectiles.Behaviors.SlowMaimMoabModel.Mutator, zomgMutator: Assets.Scripts.Models.Towers.Projectiles.Behaviors.SlowMaimMoabModel.Mutator, ddtMutator: Assets.Scripts.Models.Towers.Projectiles.Behaviors.SlowMaimMoabModel.Mutator, badMutator: Assets.Scripts.Models.Towers.Projectiles.Behaviors.SlowMaimMoabModel.Mutator, bloonPerHitDamageAddition: System.Single, overlays: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Effects.AssetPathModel>, overlayLayer: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.moabDuration = moabDuration
		self.bfbDuration = bfbDuration
		self.zomgDuration = zomgDuration
		self.ddtDuration = ddtDuration
		self.badDuration = badDuration
		self.moabDurationFrames = moabDurationFrames
		self.bfbDurationFrames = bfbDurationFrames
		self.zomgDurationFrames = zomgDurationFrames
		self.ddtDurationFrames = ddtDurationFrames
		self.badDurationFrames = badDurationFrames
		self.multiplier = multiplier
		self.moabMutator = moabMutator
		self.bfbMutator = bfbMutator
		self.zomgMutator = zomgMutator
		self.ddtMutator = ddtMutator
		self.badMutator = badMutator
		self.bloonPerHitDamageAddition = bloonPerHitDamageAddition
		self.overlays = overlays
		self.overlayLayer = overlayLayer


class SlowMinusAbilityDurationModel:

    offsets = {'abilityId': 128}    
    def __init__(self, abilityId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.abilityId = abilityId


class SlowModel:

    offsets = {'overlays': 56, 'effectModel': 64, 'multiplier': 72, 'lifespan': 76, 'lifespanFrames': 80, 'layers': 84, 'overlayLayer': 88, 'glueLevel': 92, 'isUnique': 96, 'dontRefreshDuration': 97, 'cascadeMutators': 98, 'removeMutatorIfNotMatching': 99, 'mutationId': 104, 'mutationFilter': 112, 'mutator': 120}    
    def __init__(self, overlays: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Effects.AssetPathModel>, effectModel: Assets.Scripts.Models.Effects.EffectModel, multiplier: System.Single, lifespan: System.Single, lifespanFrames: System.Int32, layers: System.Int32, overlayLayer: System.Int32, glueLevel: System.Int32, isUnique: System.Boolean, dontRefreshDuration: System.Boolean, cascadeMutators: System.Boolean, removeMutatorIfNotMatching: System.Boolean, mutationId: System.String, mutationFilter: System.String, mutator: Assets.Scripts.Models.Towers.Projectiles.Behaviors.SlowModel.SlowMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.overlays = overlays
		self.effectModel = effectModel
		self.multiplier = multiplier
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames
		self.layers = layers
		self.overlayLayer = overlayLayer
		self.glueLevel = glueLevel
		self.isUnique = isUnique
		self.dontRefreshDuration = dontRefreshDuration
		self.cascadeMutators = cascadeMutators
		self.removeMutatorIfNotMatching = removeMutatorIfNotMatching
		self.mutationId = mutationId
		self.mutationFilter = mutationFilter
		self.mutator = mutator


class SlowModifierForTagModel:

    offsets = {'tag': 56, 'slowId': 64, 'slowMultiplier': 72, 'resetToUnmodified': 76, 'preventMutation': 77, 'lifespanOverride': 80}    
    def __init__(self, tag: System.String, slowId: System.String, slowMultiplier: System.Single, resetToUnmodified: System.Boolean, preventMutation: System.Boolean, lifespanOverride: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.tag = tag
		self.slowId = slowId
		self.slowMultiplier = slowMultiplier
		self.resetToUnmodified = resetToUnmodified
		self.preventMutation = preventMutation
		self.lifespanOverride = lifespanOverride


class SlowOnPopModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SpeedUpTowersModel:

    offsets = {'increase': 56, 'lifespan': 60, 'isUnique': 64, 'lifespanFrames': 68, 'useClosest': 72, 'mutatorId': 80, 'priority': 88, 'mutator': 96}    
    def __init__(self, increase: System.Single, lifespan: System.Single, isUnique: System.Boolean, lifespanFrames: System.Int32, useClosest: System.Boolean, mutatorId: System.String, priority: System.Int32, mutator: Assets.Scripts.Models.Towers.Projectiles.Behaviors.SpeedUpTowersModel.SpeedUpMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.increase = increase
		self.lifespan = lifespan
		self.isUnique = isUnique
		self.lifespanFrames = lifespanFrames
		self.useClosest = useClosest
		self.mutatorId = mutatorId
		self.priority = priority
		self.mutator = mutator


class StripChildrenModel:

    offsets = {'overlays': 56, 'overlayLayer': 64, 'mutator': 72, 'destroyOnDegradeModel': 80, 'displayModel': 88}    
    def __init__(self, overlays: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Effects.AssetPathModel>, overlayLayer: System.Int32, mutator: Assets.Scripts.Models.Towers.Projectiles.Behaviors.StripChildrenModel.StripChildrenMutator, destroyOnDegradeModel: Assets.Scripts.Models.Bloons.Behaviors.DestroyOnDegradeModel, displayModel: Assets.Scripts.Models.GenericBehaviors.DisplayModel, **kwargs):
        super().__init__(self, **kwargs)
		self.overlays = overlays
		self.overlayLayer = overlayLayer
		self.mutator = mutator
		self.destroyOnDegradeModel = destroyOnDegradeModel
		self.displayModel = displayModel


class TrackTargetModel:

    offsets = {'distance': 56, 'trackNewTargets': 60, 'constantlyAquireNewTarget': 61, 'maxSeekAngle': 64, 'ignoreSeekAngle': 68, 'overrideRotation': 69, 'useLifetimeAsDistance': 70, 'turnRatePerFrame': 72, 'turnRate': 76}    
    def __init__(self, distance: System.Single, trackNewTargets: System.Boolean, constantlyAquireNewTarget: System.Boolean, maxSeekAngle: System.Single, ignoreSeekAngle: System.Boolean, overrideRotation: System.Boolean, useLifetimeAsDistance: System.Boolean, turnRatePerFrame: System.Single, turnRate: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.distance = distance
		self.trackNewTargets = trackNewTargets
		self.constantlyAquireNewTarget = constantlyAquireNewTarget
		self.maxSeekAngle = maxSeekAngle
		self.ignoreSeekAngle = ignoreSeekAngle
		self.overrideRotation = overrideRotation
		self.useLifetimeAsDistance = useLifetimeAsDistance
		self.turnRatePerFrame = turnRatePerFrame
		self.turnRate = turnRate


class TrackTargetSharedRangeModel:

    offsets = {'sharedRangeEnabled': 56, 'turnRate': 60, 'reaquireTargetDelay': 64}    
    def __init__(self, sharedRangeEnabled: System.Boolean, turnRate: System.Single, reaquireTargetDelay: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.sharedRangeEnabled = sharedRangeEnabled
		self.turnRate = turnRate
		self.reaquireTargetDelay = reaquireTargetDelay


class TrackTargetWithinTimeModel:

    offsets = {'timeInFrames': 80}    
    def __init__(self, timeInFrames: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.timeInFrames = timeInFrames


class TravelAlongPathModel:

    offsets = {'range': 56, 'reverse': 60, 'disableRotateWithPathDirection': 61, 'lifespanFrames': 64, 'speedFrames': 68, 'rotationLerp': 72}    
    def __init__(self, range: System.Single, reverse: System.Boolean, disableRotateWithPathDirection: System.Boolean, lifespanFrames: System.Int32, speedFrames: System.Single, rotationLerp: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.range = range
		self.reverse = reverse
		self.disableRotateWithPathDirection = disableRotateWithPathDirection
		self.lifespanFrames = lifespanFrames
		self.speedFrames = speedFrames
		self.rotationLerp = rotationLerp


class TravelCurvyModel:

    offsets = {'turnRate': 72, 'maxTurnAngle': 76, 'turnRatePerFrame': 80}    
    def __init__(self, turnRate: System.Single, maxTurnAngle: System.Single, turnRatePerFrame: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.turnRate = turnRate
		self.maxTurnAngle = maxTurnAngle
		self.turnRatePerFrame = turnRatePerFrame


class TravelStraightSlowdownModel:

    offsets = {'slowdownSpeed': 72, 'slowdownSpeedFrames': 76, 'minSpeed': 80, 'minSpeedFrames': 84, 'maxDistance': 88, 'canReducePierce': 92, 'startingPierce': 96, 'endPierce': 100}    
    def __init__(self, slowdownSpeed: System.Single, slowdownSpeedFrames: System.Single, minSpeed: System.Single, minSpeedFrames: System.Single, maxDistance: System.Single, canReducePierce: System.Boolean, startingPierce: System.Int32, endPierce: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.slowdownSpeed = slowdownSpeed
		self.slowdownSpeedFrames = slowdownSpeedFrames
		self.minSpeed = minSpeed
		self.minSpeedFrames = minSpeedFrames
		self.maxDistance = maxDistance
		self.canReducePierce = canReducePierce
		self.startingPierce = startingPierce
		self.endPierce = endPierce


class TravelStraitModel:

    offsets = {'lifespan': 56, 'lifespanFrames': 60, 'speed': 64, 'speedFrames': 68}    
    def __init__(self, lifespan: System.Single, lifespanFrames: System.Int32, speed: System.Single, speedFrames: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames
		self.speed = speed
		self.speedFrames = speedFrames


class TravelTowardsEmitTowerModel:

    offsets = {'lockRotation': 56, 'lifespan': 60, 'lifespanFrames': 64, 'range': 68, 'speed': 72, 'speedFrames': 76, 'delayedActivation': 80}    
    def __init__(self, lockRotation: System.Boolean, lifespan: System.Single, lifespanFrames: System.Int32, range: System.Single, speed: System.Single, speedFrames: System.Single, delayedActivation: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.lockRotation = lockRotation
		self.lifespan = lifespan
		self.lifespanFrames = lifespanFrames
		self.range = range
		self.speed = speed
		self.speedFrames = speedFrames
		self.delayedActivation = delayedActivation


class WallOfTreesModel:

    offsets = {'rbeCapacity': 56, 'rbeCashMultiplier': 60, 'projectile': 64, 'emission': 72, 'animationStateSpawnIn': 80, 'onlyDamageLastBloon': 84}    
    def __init__(self, rbeCapacity: System.Single, rbeCashMultiplier: System.Single, projectile: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, emission: Assets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel, animationStateSpawnIn: System.Int32, onlyDamageLastBloon: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.rbeCapacity = rbeCapacity
		self.rbeCashMultiplier = rbeCashMultiplier
		self.projectile = projectile
		self.emission = emission
		self.animationStateSpawnIn = animationStateSpawnIn
		self.onlyDamageLastBloon = onlyDamageLastBloon


class WindModel:

    offsets = {'distanceMin': 56, 'distanceMax': 60, 'chance': 64, 'affectMoab': 68, 'overlays': 72, 'overlayLayer': 80, '_mutator': 88}    
    def __init__(self, distanceMin: System.Single, distanceMax: System.Single, chance: System.Single, affectMoab: System.Boolean, overlays: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Effects.AssetPathModel>, overlayLayer: System.Int32, _mutator: Assets.Scripts.Models.Towers.Projectiles.Behaviors.WindModel.AddBehaviorToBloonMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.distanceMin = distanceMin
		self.distanceMax = distanceMax
		self.chance = chance
		self.affectMoab = affectMoab
		self.overlays = overlays
		self.overlayLayer = overlayLayer
		self._mutator = _mutator


class TagMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PropBehaviorModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PropModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class FilterInBaseTowerIdModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class FilterInSetModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class FilterTowerByPlaceableAreaModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TowerFilterModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class UpgradeModel:

    offsets = {'cost': 48, 'xpCost': 52, 'icon': 56, 'path': 64, 'tier': 68, 'locked': 72, 'confirmation': 80, 'localizedNameOverride': 88}    
    def __init__(self, cost: System.Int32, xpCost: System.Int32, icon: Assets.Scripts.Utils.SpriteReference, path: System.Int32, tier: System.Int32, locked: System.Int32, confirmation: System.String, localizedNameOverride: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.cost = cost
		self.xpCost = xpCost
		self.icon = icon
		self.path = path
		self.tier = tier
		self.locked = locked
		self.confirmation = confirmation
		self.localizedNameOverride = localizedNameOverride


class UpgradePathModel:

    offsets = {'tower': 16, 'upgrade': 24}    
    def __init__(self, tower: System.String, upgrade: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.tower = tower
		self.upgrade = upgrade


class RotationAnchor:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class WeaponBehaviorModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class WeaponModel:

    offsets = {'animation': 48, 'animationOffset': 52, 'animationOffsetFrames': 56, 'emission': 64, 'ejectX': 72, 'ejectY': 76, 'ejectZ': 80, 'projectile': 88, 'rateFrames': 96, 'fireWithoutTarget': 100, 'fireBetweenRounds': 101, 'rate': 112, 'useAttackPosition': 116, 'startInCooldown': 117, 'customStartCooldown': 120, 'customStartCooldownFrames': 124, 'animateOnMainAttack': 128}    
    def __init__(self, animation: System.Int32, animationOffset: System.Single, animationOffsetFrames: System.Int32, emission: Assets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel, ejectX: System.Single, ejectY: System.Single, ejectZ: System.Single, projectile: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, rateFrames: System.Int32, fireWithoutTarget: System.Boolean, fireBetweenRounds: System.Boolean, rate: System.Single, useAttackPosition: System.Boolean, startInCooldown: System.Boolean, customStartCooldown: System.Single, customStartCooldownFrames: System.Int32, animateOnMainAttack: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.animation = animation
		self.animationOffset = animationOffset
		self.animationOffsetFrames = animationOffsetFrames
		self.emission = emission
		self.ejectX = ejectX
		self.ejectY = ejectY
		self.ejectZ = ejectZ
		self.projectile = projectile
		self.rateFrames = rateFrames
		self.fireWithoutTarget = fireWithoutTarget
		self.fireBetweenRounds = fireBetweenRounds
		self.rate = rate
		self.useAttackPosition = useAttackPosition
		self.startInCooldown = startInCooldown
		self.customStartCooldown = customStartCooldown
		self.customStartCooldownFrames = customStartCooldownFrames
		self.animateOnMainAttack = animateOnMainAttack


class AcidicMixtureModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AlternateAnimationModel:

    offsets = {'states': 48, 'originState': 52}    
    def __init__(self, states: System.Int32, originState: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.states = states
		self.originState = originState


class AlternateProjectileModel:

    offsets = {'projectile': 48, 'emissionModel': 56, 'interval': 64, 'alternateAnimation': 68}    
    def __init__(self, projectile: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, emissionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel, interval: System.Int32, alternateAnimation: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.projectile = projectile
		self.emissionModel = emissionModel
		self.interval = interval
		self.alternateAnimation = alternateAnimation


class AlternatingEjectEffectModel:

    offsets = {'secondAssetId': 80, 'secondEffectModel': 88, 'secondEffectLifespan': 96}    
    def __init__(self, secondAssetId: System.String, secondEffectModel: Assets.Scripts.Models.Effects.EffectModel, secondEffectLifespan: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.secondAssetId = secondAssetId
		self.secondEffectModel = secondEffectModel
		self.secondEffectLifespan = secondEffectLifespan


class AngleToMapCenterModel:

    offsets = {'range': 48}    
    def __init__(self, range: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.range = range


class AnimateAirUnitOnFireModel:

    offsets = {'animationState': 48}    
    def __init__(self, animationState: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.animationState = animationState


class AnimationStateOverrideModel:

    offsets = {'stateFrom': 48, 'stateTo': 52, 'overrideWith': 56}    
    def __init__(self, stateFrom: System.Int32, stateTo: System.Int32, overrideWith: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.stateFrom = stateFrom
		self.stateTo = stateTo
		self.overrideWith = overrideWith


class BerserkerBrewModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BonusProjectileAfterIntervalModel:

    offsets = {'interval': 48, 'expInterval': 56, 'projectileModel': 64, 'emissionModel': 72, 'useTowerPosition': 80, 'cooldown': 84, 'cooldownFrames': 88}    
    def __init__(self, interval: System.Int32, expInterval: System.String, projectileModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, emissionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel, useTowerPosition: System.Boolean, cooldown: System.Single, cooldownFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.interval = interval
		self.expInterval = expInterval
		self.projectileModel = projectileModel
		self.emissionModel = emissionModel
		self.useTowerPosition = useTowerPosition
		self.cooldown = cooldown
		self.cooldownFrames = cooldownFrames


class CheckAdoraCanFireModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CheckAirUnitOverTrackModel:

    offsets = {'futureTime': 48, 'futureTimeFrames': 52}    
    def __init__(self, futureTime: System.Single, futureTimeFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.futureTime = futureTime
		self.futureTimeFrames = futureTimeFrames


class CheckAmmoBeltModel:

    offsets = {'fireRate': 48, 'fireRateFrames': 52}    
    def __init__(self, fireRate: System.Single, fireRateFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.fireRate = fireRate
		self.fireRateFrames = fireRateFrames


class CheckTempleCanFireModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ClearProjectileHitListModel:

    offsets = {'rateFrames': 48, 'rate': 52}    
    def __init__(self, rateFrames: System.Int32, rate: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.rateFrames = rateFrames
		self.rate = rate


class CreateSoundOnProjectileCreatedModel:

    offsets = {'sound1': 48, 'sound2': 56, 'sound3': 64, 'sound4': 72, 'sound5': 80, 'type': 88}    
    def __init__(self, sound1: Assets.Scripts.Models.Audio.SoundModel, sound2: Assets.Scripts.Models.Audio.SoundModel, sound3: Assets.Scripts.Models.Audio.SoundModel, sound4: Assets.Scripts.Models.Audio.SoundModel, sound5: Assets.Scripts.Models.Audio.SoundModel, type: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.sound1 = sound1
		self.sound2 = sound2
		self.sound3 = sound3
		self.sound4 = sound4
		self.sound5 = sound5
		self.type = type


class CreateTypedTowerCurrentIndexModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CritMultiplierModel:

    offsets = {'damage': 48, 'lower': 52, 'upper': 56, 'display': 64, 'distributeToChildren': 72}    
    def __init__(self, damage: System.Single, lower: System.Int32, upper: System.Int32, display: System.String, distributeToChildren: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.damage = damage
		self.lower = lower
		self.upper = upper
		self.display = display
		self.distributeToChildren = distributeToChildren


class CycleAnimationModel:

    offsets = {'minAnimationState': 48, 'maxAnimationState': 52, 'loopMode': 56, 'randomize': 64}    
    def __init__(self, minAnimationState: System.Int32, maxAnimationState: System.Int32, loopMode: System.String, randomize: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.minAnimationState = minAnimationState
		self.maxAnimationState = maxAnimationState
		self.loopMode = loopMode
		self.randomize = randomize


class EjectAnimationModel:

    offsets = {'animationState': 48}    
    def __init__(self, animationState: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.animationState = animationState


class EjectEffectModel:

    offsets = {'assetId': 48, 'effectModel': 56, 'lifespan': 64, 'fullscreen': 68, 'rotateToWeapon': 69, 'useEjectPoint': 70, 'useEmittedFrom': 71, 'useMainAttackRotation': 72}    
    def __init__(self, assetId: System.String, effectModel: Assets.Scripts.Models.Effects.EffectModel, lifespan: System.Single, fullscreen: System.Boolean, rotateToWeapon: System.Boolean, useEjectPoint: System.Boolean, useEmittedFrom: System.Boolean, useMainAttackRotation: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.assetId = assetId
		self.effectModel = effectModel
		self.lifespan = lifespan
		self.fullscreen = fullscreen
		self.rotateToWeapon = rotateToWeapon
		self.useEjectPoint = useEjectPoint
		self.useEmittedFrom = useEmittedFrom
		self.useMainAttackRotation = useMainAttackRotation


class EjectEffectWithOffsetsModel:

    offsets = {'assetId': 48, 'effectModel': 56, 'rotateToWeapon': 64}    
    def __init__(self, assetId: System.String, effectModel: Assets.Scripts.Models.Effects.EffectModel, rotateToWeapon: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.assetId = assetId
		self.effectModel = effectModel
		self.rotateToWeapon = rotateToWeapon


class EjectMultipleTestEffectModel:

    offsets = {'assetId': 48, 'lifespan': 56, 'count': 60, 'fullscreen': 64, 'rotateToWeapon': 65}    
    def __init__(self, assetId: System.String, lifespan: System.Single, count: System.Int32, fullscreen: System.Boolean, rotateToWeapon: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.assetId = assetId
		self.lifespan = lifespan
		self.count = count
		self.fullscreen = fullscreen
		self.rotateToWeapon = rotateToWeapon


class EmissionsPerRoundFilterModel:

    offsets = {'count': 48, 'allowSpawnOnInitialise': 52, 'ignoreInSandbox': 53}    
    def __init__(self, count: System.Int32, allowSpawnOnInitialise: System.Boolean, ignoreInSandbox: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.count = count
		self.allowSpawnOnInitialise = allowSpawnOnInitialise
		self.ignoreInSandbox = ignoreInSandbox


class FilterTargetAngleFilterModel:

    offsets = {'fieldOfView': 48, 'baseTowerRotationOffset': 52, 'shareFilterTargets': 56, 'minTimeBetweenFilterTargetsFrames': 60}    
    def __init__(self, fieldOfView: System.Single, baseTowerRotationOffset: System.Single, shareFilterTargets: System.Boolean, minTimeBetweenFilterTargetsFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.fieldOfView = fieldOfView
		self.baseTowerRotationOffset = baseTowerRotationOffset
		self.shareFilterTargets = shareFilterTargets
		self.minTimeBetweenFilterTargetsFrames = minTimeBetweenFilterTargetsFrames


class FireAlternateWeaponModel:

    offsets = {'weaponId': 48}    
    def __init__(self, weaponId: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.weaponId = weaponId


class FireFromAirUnitModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class FireWhenAlternateWeaponIsReadyModel:

    offsets = {'weaponId': 48}    
    def __init__(self, weaponId: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.weaponId = weaponId


class FlagshipAttackSpeedIncreaseModel:

    offsets = {'attackSpeedIncrease': 72}    
    def __init__(self, attackSpeedIncrease: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.attackSpeedIncrease = attackSpeedIncrease


class FlipFollowPathModel:

    offsets = {'flipTowerDisplayX': 48, 'flipTowerDisplayY': 49, 'effectOnFlip': 56}    
    def __init__(self, flipTowerDisplayX: System.Boolean, flipTowerDisplayY: System.Boolean, effectOnFlip: Assets.Scripts.Models.Effects.EffectModel, **kwargs):
        super().__init__(self, **kwargs)
		self.flipTowerDisplayX = flipTowerDisplayX
		self.flipTowerDisplayY = flipTowerDisplayY
		self.effectOnFlip = effectOnFlip


class IgnoreThrowMarkerModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class JungleVineLimitProjectileModel:

    offsets = {'limit': 48, 'delayInFrames': 52}    
    def __init__(self, limit: System.Int32, delayInFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.limit = limit
		self.delayInFrames = delayInFrames


class LeakDangerAttackSpeedModel:

    offsets = {'maxRateIncreasePercent': 48}    
    def __init__(self, maxRateIncreasePercent: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.maxRateIncreasePercent = maxRateIncreasePercent


class LifeBasedAttackSpeedModel:

    offsets = {'ratePerLife': 48, 'lifeCap': 52, 'baseRateIncrease': 56, 'saveId': 64}    
    def __init__(self, ratePerLife: System.Single, lifeCap: System.Int32, baseRateIncrease: System.Single, saveId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.ratePerLife = ratePerLife
		self.lifeCap = lifeCap
		self.baseRateIncrease = baseRateIncrease
		self.saveId = saveId


class LimitProjectileModel:

    offsets = {'projectileId': 48, 'limit': 56, 'delayInFrames': 60, 'limitByDestroyedPriorProjectile': 64, 'globalForPlayer': 65}    
    def __init__(self, projectileId: System.String, limit: System.Int32, delayInFrames: System.Int32, limitByDestroyedPriorProjectile: System.Boolean, globalForPlayer: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.projectileId = projectileId
		self.limit = limit
		self.delayInFrames = delayInFrames
		self.limitByDestroyedPriorProjectile = limitByDestroyedPriorProjectile
		self.globalForPlayer = globalForPlayer


class LineEffectModel:

    offsets = {'lineDisplayPath': 48, 'lineDisplayLength': 56, 'effectAtEnd': 64, 'effectAtStart': 72, 'isLineDisplayEndless': 80, 'useDisplayLengthSpeed': 81, 'displayLengthSpeed': 84, 'displayLengthPerFrame': 88, 'useWeaponEjectForDisplay': 92, 'useRotateToPointer': 93, 'ignoreBlockers': 94, 'useLineProjectileEmissionShowEffect': 95}    
    def __init__(self, lineDisplayPath: Assets.Scripts.Models.Effects.AssetPathModel, lineDisplayLength: System.Single, effectAtEnd: Assets.Scripts.Models.Effects.EffectModel, effectAtStart: Assets.Scripts.Models.Effects.EffectModel, isLineDisplayEndless: System.Boolean, useDisplayLengthSpeed: System.Boolean, displayLengthSpeed: System.Single, displayLengthPerFrame: System.Single, useWeaponEjectForDisplay: System.Boolean, useRotateToPointer: System.Boolean, ignoreBlockers: System.Boolean, useLineProjectileEmissionShowEffect: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.lineDisplayPath = lineDisplayPath
		self.lineDisplayLength = lineDisplayLength
		self.effectAtEnd = effectAtEnd
		self.effectAtStart = effectAtStart
		self.isLineDisplayEndless = isLineDisplayEndless
		self.useDisplayLengthSpeed = useDisplayLengthSpeed
		self.displayLengthSpeed = displayLengthSpeed
		self.displayLengthPerFrame = displayLengthPerFrame
		self.useWeaponEjectForDisplay = useWeaponEjectForDisplay
		self.useRotateToPointer = useRotateToPointer
		self.ignoreBlockers = ignoreBlockers
		self.useLineProjectileEmissionShowEffect = useLineProjectileEmissionShowEffect


class NecroEmissionFilterModel:

    offsets = {'isPriceOfDakrnessEmission': 48}    
    def __init__(self, isPriceOfDakrnessEmission: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isPriceOfDakrnessEmission = isPriceOfDakrnessEmission


class OffsetModel:

    offsets = {'range': 48, 'angleOffset': 52}    
    def __init__(self, range: System.Single, angleOffset: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.range = range
		self.angleOffset = angleOffset


class PsiLimitProjectileModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RandomAngleOffsetModel:

    offsets = {'minOffset': 48, 'maxOffset': 52}    
    def __init__(self, minOffset: System.Int32, maxOffset: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.minOffset = minOffset
		self.maxOffset = maxOffset


class RandomRateModel:

    offsets = {'offsetRate': 48, 'offsetRateFrames': 52}    
    def __init__(self, offsetRate: System.Single, offsetRateFrames: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.offsetRate = offsetRate
		self.offsetRateFrames = offsetRateFrames


class RandomRotationWeaponBehaviorModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RandomSpeedOffsetModel:

    offsets = {'minOffset': 48, 'maxOffset': 52, 'mutators': 56}    
    def __init__(self, minOffset: System.Int32, maxOffset: System.Int32, mutators: System.Collections.Generic.List<Assets.Scripts.Models.Towers.Weapons.Behaviors.RandomSpeedOffsetModel.ProjectileSpeedMutator>, **kwargs):
        super().__init__(self, **kwargs)
		self.minOffset = minOffset
		self.maxOffset = maxOffset
		self.mutators = mutators


class RateBasedAnimationOffsetModel:

    offsets = {'baseRate': 48, 'offset': 52}    
    def __init__(self, baseRate: System.Single, offset: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.baseRate = baseRate
		self.offset = offset


class ResetRateOnInitialiseModel:

    offsets = {'weaponModel': 48}    
    def __init__(self, weaponModel: Assets.Scripts.Models.Towers.Weapons.WeaponModel, **kwargs):
        super().__init__(self, **kwargs)
		self.weaponModel = weaponModel


class SetTriggerOnAirUnitFireModel:

    offsets = {'triggerState': 48}    
    def __init__(self, triggerState: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.triggerState = triggerState


class SpinModel:

    offsets = {'rotationPerSecond': 48, 'rotationPerFrame': 52}    
    def __init__(self, rotationPerSecond: System.Single, rotationPerFrame: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.rotationPerSecond = rotationPerSecond
		self.rotationPerFrame = rotationPerFrame


class StaggeredShotsWeaponBehaviorModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SubTowerFilterModel:

    offsets = {'baseSubTowerId': 48, 'maxNumberOfSubTowers': 64, 'checkForPreExisting': 68}    
    def __init__(self, baseSubTowerId: System.String, maxNumberOfSubTowers: System.Single, checkForPreExisting: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.baseSubTowerId = baseSubTowerId
		self.maxNumberOfSubTowers = maxNumberOfSubTowers
		self.checkForPreExisting = checkForPreExisting


class SwitchAnimStateForBloonTypeModel:

    offsets = {'nonMoabsAnimId': 48, 'moabAnimId': 52, 'bfbAnimId': 56, 'zomgAnimId': 60, 'ddtAnimId': 64, 'badAnimId': 68}    
    def __init__(self, nonMoabsAnimId: System.Int32, moabAnimId: System.Int32, bfbAnimId: System.Int32, zomgAnimId: System.Int32, ddtAnimId: System.Int32, badAnimId: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.nonMoabsAnimId = nonMoabsAnimId
		self.moabAnimId = moabAnimId
		self.bfbAnimId = bfbAnimId
		self.zomgAnimId = zomgAnimId
		self.ddtAnimId = ddtAnimId
		self.badAnimId = badAnimId


class SwitchProjectileDisplayModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ThrowMarkerOffsetModel:

    offsets = {'ejectX': 48, 'ejectY': 52, 'ejectZ': 56, 'rotation': 60}    
    def __init__(self, ejectX: System.Single, ejectY: System.Single, ejectZ: System.Single, rotation: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.ejectX = ejectX
		self.ejectY = ejectY
		self.ejectZ = ejectZ
		self.rotation = rotation


class UseAttackRotationModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class UseParentEjectModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class WeaponRateMinModel:

    offsets = {'min': 48}    
    def __init__(self, min: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.min = min


class WobbleMeshDisplayModel:

    offsets = {'min': 48, 'max': 52, 'time': 56}    
    def __init__(self, min: System.Single, max: System.Single, time: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.min = min
		self.max = max
		self.time = time


class ZeroRotationModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class VisibilityType:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class DiscordProvider:
	<Client>k__BackingField: Discord.Discord
    offsets = {'<Client>k__BackingField': 0, 'update': 16}    
    def __init__(self, <Client>k__BackingField: Discord.Discord, update: Assets.Scripts.Utils.DiscordUpdate, **kwargs):
        super().__init__(self, **kwargs)
		self.<Client>k__BackingField = <Client>k__BackingField
		self.update = update


class IRichPresence:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RichPresenceBrowsing:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class RichPresenceDifficulty:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class RichPresenceManager:
	richPresenceProviders: System.Collections.Generic.List<Assets.Scripts.RichPresence.IRichPresence>
    offsets = {'richPresenceProviders': 0}    
    def __init__(self, richPresenceProviders: System.Collections.Generic.List<Assets.Scripts.RichPresence.IRichPresence>, **kwargs):
        super().__init__(self, **kwargs)
		self.richPresenceProviders = richPresenceProviders


class RichPresencePlaying:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class RichPresenceStatus:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RichPresenceStatusExtensions:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RichPresenceText:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SteamProvider:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Simulation:

    offsets = {'entity': 16, 'model': 24, 'idNext': 32, 'localIdNext': 36, 'time': 40, 'roundTime': 48, 'canEarnXP': 56, 'debugOptions': 57, 'instantCooldowns': 58, 'pauseWeapons': 59, 'factory': 64, 'bloonManager': 72, 'towerManager': 80, 'powerManager': 88, '_inputManager': 96, 'towerInventories': 104, 'powerInventories': 112, 'placementAreas': 120, 'cashInventories': 128, 'tsmThemeInfo': 136, 'audioManager': 144, 'coopManager': 152, 'trackArrowManager': 160, 'progressiveDifficultyManager': 168, 'audioLimiterManager': 176, 'collisionChecker': 184, 'effectLimitManager': 192, 'analyticsTrackerSimManager': 200, 'process': 208, 'endOnRoundAdditionalTime': 216, 'actions': 224, 'throwawayEffects': 232, 'hasCashChanged': 240, 'hasHealthChanged': 241, 'alternateHeliControls': 242, 'OnVictory': 248, 'OnRoundStart': 256, 'OnEarlyRoundEnd': 264, 'OnRoundEnd': 272, 'OnLateRoundEnd': 280, 'OnCashChanged': 288, 'OnHealthChanged': 296, 'OnDefeatScreen': 304, 'OnSelectionChanged': 312, 'OnAbilitiesChanged': 320, 'OnCustomUIChanged': 328, 'OnTowerTransformed': 336, 'OnTargetTypeChanged': 344, 'OnTowerRangeTransformed': 352, 'OnStartRaceRound': 360, 'OnTowerInventoryChanged': 368, 'OnUpgradePricesChanged': 376, 'OnAdoraDarkModeActivated': 384, 'OnPrimeCustomAbilityInput': 392, 'OnReleaseTower': 400, 'OnSetHelperMessage': 408, 'OnThriveStatusChanged': 416, 'OnSandboxBloonsCleared': 424, 'showCancel': 432, 'immunity': 436, 'maxHealthIncrease': 440, 'startingHealth': 448, 'softcapHealthPercentModifier': 456, 'maxSoftcapHealth': 464, 'maxHealth': 472, 'maxShield': 480, 'gameStartTimeStamp': 488, 'gameFinishTimeStamp': 496, 'currentRaceEventTimeRounds': 504, 'helperMessage': 512, 'unlocalizedhelperMessage': 520, 'gameStarted': 528, 'gameWon': 529, 'gameLost': 530, 'noLivesLost': 531, 'cashStartedWith': 536, 'behaviorCache': 544, 'sharedTowerGrid': 552, 'cashManagers': 560, 'shield': 568, 'prevShield': 576, 'health': 584, 'prevHealth': 592, 'map': 600, 'random': 608, 'unsyncedRandom': 616, '<WasDoubleCashUsed>k__BackingField': 624, 'distributePlayerAreaRandomSeed': 632, 'spawnEffectModels': 640, 'flushList': 648, '<SelectedObj>k__BackingField': 656, 'sandbox': 664, 'lastSetHealth': 668, 'sandBoxResetHealthTimer': 672, 'raceSendRoundCount': 676, 'raceSendRoundTimer': 680, 'cursorTarget': 696, 'cachedSimBehaviorCashModifier': 704, 'appliedBloonWorthSimBehaviors': 712}    
    def __init__(self, entity: Assets.Scripts.Simulation.Objects.Entity, model: Assets.Scripts.Models.GameModel, idNext: System.Int32, localIdNext: System.Int32, time: Assets.Scripts.Simulation.Time, roundTime: Assets.Scripts.Simulation.Time, canEarnXP: System.Boolean, debugOptions: System.Boolean, instantCooldowns: System.Boolean, pauseWeapons: System.Boolean, factory: Assets.Scripts.Simulation.Factory.FactoryFactory, bloonManager: Assets.Scripts.Simulation.Bloons.BloonManager, towerManager: Assets.Scripts.Simulation.Towers.TowerManager, powerManager: Assets.Scripts.Simulation.Powers.PowerManager, _inputManager: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Simulation.Input.InputManager>, towerInventories: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Simulation.Input.TowerInventory>, powerInventories: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Simulation.Input.PowerInventory>, placementAreas: System.Collections.Generic.Dictionary<System.Int32,System.Int32>, cashInventories: System.Collections.Generic.Dictionary<System.Int32,System.Int32>, tsmThemeInfo: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.TowerSelectionMenuTheme.TSMInfoModel>, audioManager: Assets.Scripts.Simulation.Input.AudioManagerSim, coopManager: Assets.Scripts.Simulation.Behaviors.CoopManager, trackArrowManager: Assets.Scripts.Simulation.Bloons.TrackArrowManager, progressiveDifficultyManager: Assets.Scripts.Simulation.Freeplay.ProgressiveDifficultyManager, audioLimiterManager: Assets.Scripts.Simulation.Audio.AudioLimiterManager, collisionChecker: Assets.Scripts.Simulation.Physics.CollisionChecker, effectLimitManager: Assets.Scripts.Simulation.Effects.EffectLimitManager, analyticsTrackerSimManager: Assets.Scripts.Simulation.Tracking.AnalyticsTrackerSimManager, process: Assets.Scripts.Utils.LockList<Assets.Scripts.Simulation.Objects.RootObject>, endOnRoundAdditionalTime: System.Single, actions: System.Collections.Generic.List<Assets.Scripts.Simulation.Action.InputAction>, throwawayEffects: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Simulation.ThrowawayEffect>, hasCashChanged: System.Boolean, hasHealthChanged: System.Boolean, alternateHeliControls: System.Boolean, OnVictory: System.Action, OnRoundStart: System.Action, OnEarlyRoundEnd: System.Action, OnRoundEnd: System.Action, OnLateRoundEnd: System.Action<System.Int32,System.Int32>, OnCashChanged: System.Action, OnHealthChanged: System.Action, OnDefeatScreen: System.Action, OnSelectionChanged: System.Action<Assets.Scripts.Simulation.Objects.SelectableObject>, OnAbilitiesChanged: System.Action, OnCustomUIChanged: System.Action<Assets.Scripts.Simulation.Towers.Tower>, OnTowerTransformed: System.Action, OnTargetTypeChanged: System.Action<Assets.Scripts.Simulation.Towers.Tower,Assets.Scripts.Models.Towers.TargetType>, OnTowerRangeTransformed: System.Action, OnStartRaceRound: System.Action, OnTowerInventoryChanged: System.Action, OnUpgradePricesChanged: System.Action<Assets.Scripts.Simulation.Towers.Tower>, OnAdoraDarkModeActivated: System.Action, OnPrimeCustomAbilityInput: System.Action<Assets.Scripts.Simulation.Towers.Behaviors.Abilities.Ability,System.String>, OnReleaseTower: System.Action<System.String>, OnSetHelperMessage: System.Action<System.String,System.Single>, OnThriveStatusChanged: System.Action<System.Boolean>, OnSandboxBloonsCleared: System.Action, showCancel: System.Int32, immunity: System.Int32, maxHealthIncrease: Assets.Scripts.Utils.KonFuze, startingHealth: Assets.Scripts.Utils.KonFuze, softcapHealthPercentModifier: Assets.Scripts.Utils.KonFuze, maxSoftcapHealth: Assets.Scripts.Utils.KonFuze, maxHealth: Assets.Scripts.Utils.KonFuze, maxShield: Assets.Scripts.Utils.KonFuze, gameStartTimeStamp: Assets.Scripts.Utils.KonFuze, gameFinishTimeStamp: Assets.Scripts.Utils.KonFuze, currentRaceEventTimeRounds: System.Collections.Generic.Dictionary<System.Int32,System.Single>, helperMessage: System.String, unlocalizedhelperMessage: System.String, gameStarted: System.Boolean, gameWon: System.Boolean, gameLost: System.Boolean, noLivesLost: System.Boolean, cashStartedWith: System.Collections.Generic.Dictionary<System.Int32,System.Int32>, behaviorCache: System.Collections.Generic.List<Assets.Scripts.Simulation.SimulationBehaviors.SimulationBehavior>, sharedTowerGrid: Assets.Scripts.Simulation.SimulationBehaviors.SharedTowerGrid, cashManagers: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Simulation.Simulation.CashManager>, shield: Assets.Scripts.Utils.KonFuze, prevShield: Assets.Scripts.Utils.KonFuze, health: Assets.Scripts.Utils.KonFuze, prevHealth: Assets.Scripts.Utils.KonFuze, map: Assets.Scripts.Simulation.Track.Map, random: System.Random, unsyncedRandom: System.Random, <WasDoubleCashUsed>k__BackingField: System.Boolean, distributePlayerAreaRandomSeed: System.Double, spawnEffectModels: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Simulation.Simulation.SpawnEffectModel>, flushList: Assets.Scripts.Utils.SizedList<System.Int32>, <SelectedObj>k__BackingField: Assets.Scripts.Simulation.Objects.SelectableObject, sandbox: System.Boolean, lastSetHealth: System.Single, sandBoxResetHealthTimer: System.Int32, raceSendRoundCount: System.Int32, raceSendRoundTimer: System.Int32, cursorTarget: Assets.Scripts.Simulation.Bloons.Bloon, cachedSimBehaviorCashModifier: System.Single, appliedBloonWorthSimBehaviors: System.Collections.Generic.List<System.String>, **kwargs):
        super().__init__(self, **kwargs)
		self.entity = entity
		self.model = model
		self.idNext = idNext
		self.localIdNext = localIdNext
		self.time = time
		self.roundTime = roundTime
		self.canEarnXP = canEarnXP
		self.debugOptions = debugOptions
		self.instantCooldowns = instantCooldowns
		self.pauseWeapons = pauseWeapons
		self.factory = factory
		self.bloonManager = bloonManager
		self.towerManager = towerManager
		self.powerManager = powerManager
		self._inputManager = _inputManager
		self.towerInventories = towerInventories
		self.powerInventories = powerInventories
		self.placementAreas = placementAreas
		self.cashInventories = cashInventories
		self.tsmThemeInfo = tsmThemeInfo
		self.audioManager = audioManager
		self.coopManager = coopManager
		self.trackArrowManager = trackArrowManager
		self.progressiveDifficultyManager = progressiveDifficultyManager
		self.audioLimiterManager = audioLimiterManager
		self.collisionChecker = collisionChecker
		self.effectLimitManager = effectLimitManager
		self.analyticsTrackerSimManager = analyticsTrackerSimManager
		self.process = process
		self.endOnRoundAdditionalTime = endOnRoundAdditionalTime
		self.actions = actions
		self.throwawayEffects = throwawayEffects
		self.hasCashChanged = hasCashChanged
		self.hasHealthChanged = hasHealthChanged
		self.alternateHeliControls = alternateHeliControls
		self.OnVictory = OnVictory
		self.OnRoundStart = OnRoundStart
		self.OnEarlyRoundEnd = OnEarlyRoundEnd
		self.OnRoundEnd = OnRoundEnd
		self.OnLateRoundEnd = OnLateRoundEnd
		self.OnCashChanged = OnCashChanged
		self.OnHealthChanged = OnHealthChanged
		self.OnDefeatScreen = OnDefeatScreen
		self.OnSelectionChanged = OnSelectionChanged
		self.OnAbilitiesChanged = OnAbilitiesChanged
		self.OnCustomUIChanged = OnCustomUIChanged
		self.OnTowerTransformed = OnTowerTransformed
		self.OnTargetTypeChanged = OnTargetTypeChanged
		self.OnTowerRangeTransformed = OnTowerRangeTransformed
		self.OnStartRaceRound = OnStartRaceRound
		self.OnTowerInventoryChanged = OnTowerInventoryChanged
		self.OnUpgradePricesChanged = OnUpgradePricesChanged
		self.OnAdoraDarkModeActivated = OnAdoraDarkModeActivated
		self.OnPrimeCustomAbilityInput = OnPrimeCustomAbilityInput
		self.OnReleaseTower = OnReleaseTower
		self.OnSetHelperMessage = OnSetHelperMessage
		self.OnThriveStatusChanged = OnThriveStatusChanged
		self.OnSandboxBloonsCleared = OnSandboxBloonsCleared
		self.showCancel = showCancel
		self.immunity = immunity
		self.maxHealthIncrease = maxHealthIncrease
		self.startingHealth = startingHealth
		self.softcapHealthPercentModifier = softcapHealthPercentModifier
		self.maxSoftcapHealth = maxSoftcapHealth
		self.maxHealth = maxHealth
		self.maxShield = maxShield
		self.gameStartTimeStamp = gameStartTimeStamp
		self.gameFinishTimeStamp = gameFinishTimeStamp
		self.currentRaceEventTimeRounds = currentRaceEventTimeRounds
		self.helperMessage = helperMessage
		self.unlocalizedhelperMessage = unlocalizedhelperMessage
		self.gameStarted = gameStarted
		self.gameWon = gameWon
		self.gameLost = gameLost
		self.noLivesLost = noLivesLost
		self.cashStartedWith = cashStartedWith
		self.behaviorCache = behaviorCache
		self.sharedTowerGrid = sharedTowerGrid
		self.cashManagers = cashManagers
		self.shield = shield
		self.prevShield = prevShield
		self.health = health
		self.prevHealth = prevHealth
		self.map = map
		self.random = random
		self.unsyncedRandom = unsyncedRandom
		self.<WasDoubleCashUsed>k__BackingField = <WasDoubleCashUsed>k__BackingField
		self.distributePlayerAreaRandomSeed = distributePlayerAreaRandomSeed
		self.spawnEffectModels = spawnEffectModels
		self.flushList = flushList
		self.<SelectedObj>k__BackingField = <SelectedObj>k__BackingField
		self.sandbox = sandbox
		self.lastSetHealth = lastSetHealth
		self.sandBoxResetHealthTimer = sandBoxResetHealthTimer
		self.raceSendRoundCount = raceSendRoundCount
		self.raceSendRoundTimer = raceSendRoundTimer
		self.cursorTarget = cursorTarget
		self.cachedSimBehaviorCashModifier = cachedSimBehaviorCashModifier
		self.appliedBloonWorthSimBehaviors = appliedBloonWorthSimBehaviors


class SimulationFloatExtensions:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Time:

    offsets = {'elapsed': 16}    
    def __init__(self, elapsed: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.elapsed = elapsed


class InputAction:

    offsets = {'frame': 16}    
    def __init__(self, frame: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.frame = frame


class SellTower:

    offsets = {'towerId': 24, 'inputId': 28}    
    def __init__(self, towerId: System.Int32, inputId: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.towerId = towerId
		self.inputId = inputId


class StartRound:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AudioLimiter:

    offsets = {'groupLimitId': 16, 'lastPlayedCounter': 24, 'lastPlayedCounterReset': 28, 'canPlaySound': 32}    
    def __init__(self, groupLimitId: System.String, lastPlayedCounter: System.Int32, lastPlayedCounterReset: System.Int32, canPlaySound: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.groupLimitId = groupLimitId
		self.lastPlayedCounter = lastPlayedCounter
		self.lastPlayedCounterReset = lastPlayedCounterReset
		self.canPlaySound = canPlaySound


class AudioLimiterManager:

    offsets = {'audioLimiters': 88}    
    def __init__(self, audioLimiters: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Simulation.Audio.AudioLimiter>, **kwargs):
        super().__init__(self, **kwargs)
		self.audioLimiters = audioLimiters


class AgeingDestroy:

    offsets = {'ageingDestroyModel': 88, 'lifespan': 96, 'createdAt': 100}    
    def __init__(self, ageingDestroyModel: Assets.Scripts.Models.Behaviors.AgeingDestroyModel, lifespan: System.Int32, createdAt: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.ageingDestroyModel = ageingDestroyModel
		self.lifespan = lifespan
		self.createdAt = createdAt


class AreaIndicator:

    offsets = {'positionSim': 16, 'playerNumber': 28, 'areaIndex': 32, 'isFreeForAll': 36}    
    def __init__(self, positionSim: Assets.Scripts.Simulation.SMath.Vector3, playerNumber: System.Int32, areaIndex: System.Int32, isFreeForAll: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.positionSim = positionSim
		self.playerNumber = playerNumber
		self.areaIndex = areaIndex
		self.isFreeForAll = isFreeForAll


class CoopManager:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CoopPlacementMesh:

    offsets = {'coopPlayerMarkers': 120}    
    def __init__(self, coopPlayerMarkers: System.Collections.Generic.List<Assets.Scripts.Simulation.Objects.Entity>, **kwargs):
        super().__init__(self, **kwargs)
		self.coopPlayerMarkers = coopPlayerMarkers


class DestroyOnAbilityEnd:

    offsets = {'destroyOnAbilityEndModel': 88}    
    def __init__(self, destroyOnAbilityEndModel: Assets.Scripts.Models.Behaviors.DestroyOnAbilityEndModel, **kwargs):
        super().__init__(self, **kwargs)
		self.destroyOnAbilityEndModel = destroyOnAbilityEndModel


class DestroyOnTowerSold:

    offsets = {'tower': 88}    
    def __init__(self, tower: Assets.Scripts.Simulation.Towers.Tower, **kwargs):
        super().__init__(self, **kwargs)
		self.tower = tower


class DestroyOnTransformDestroy:

    offsets = {'transform': 88}    
    def __init__(self, transform: Assets.Scripts.Simulation.Objects.RootBehavior, **kwargs):
        super().__init__(self, **kwargs)
		self.transform = transform


class DisplayBehavior:

    offsets = {'displayModel': 88, 'node': 96, 'processing': 104, 'transBeh': 112, 'positionOffset': 120, 'scaleOffset': 132}    
    def __init__(self, displayModel: Assets.Scripts.Models.GenericBehaviors.DisplayModel, node: Assets.Scripts.Simulation.Display.DisplayNode, processing: System.Boolean, transBeh: Assets.Scripts.Simulation.Behaviors.TransformBehavior, positionOffset: Assets.Scripts.Simulation.SMath.Vector3, scaleOffset: Assets.Scripts.Simulation.SMath.Vector3, **kwargs):
        super().__init__(self, **kwargs)
		self.displayModel = displayModel
		self.node = node
		self.processing = processing
		self.transBeh = transBeh
		self.positionOffset = positionOffset
		self.scaleOffset = scaleOffset


class FollowTransformPosition:

    offsets = {'entityTransform': 88, 'followTransform': 96}    
    def __init__(self, entityTransform: Assets.Scripts.Simulation.Behaviors.TransformBehavior, followTransform: Assets.Scripts.Simulation.Behaviors.TransformBehavior, **kwargs):
        super().__init__(self, **kwargs)
		self.entityTransform = entityTransform
		self.followTransform = followTransform


class FollowTransformRotation:

    offsets = {'entityTransform': 88, 'followTransform': 96}    
    def __init__(self, entityTransform: Assets.Scripts.Simulation.Behaviors.TransformBehavior, followTransform: Assets.Scripts.Simulation.Behaviors.TransformBehavior, **kwargs):
        super().__init__(self, **kwargs)
		self.entityTransform = entityTransform
		self.followTransform = followTransform


class GetRangeDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class GlobalRangeMesh:
	meshPool: System.Collections.Generic.List<Assets.Scripts.Simulation.Display.Mesh>
    offsets = {'meshPool': 0, 'edges': 8, 'polyPoints': 16, 'polyPointsToExterior': 24}    
    def __init__(self, meshPool: System.Collections.Generic.List<Assets.Scripts.Simulation.Display.Mesh>, edges: System.Collections.Generic.List<Assets.Scripts.Simulation.Track.Map.BlockerEdge>, polyPoints: System.Collections.Generic.List<Assets.Scripts.Simulation.SMath.Vector3>, polyPointsToExterior: System.Collections.Generic.List<Assets.Scripts.Simulation.Behaviors.GlobalRangeMesh.Pex>, **kwargs):
        super().__init__(self, **kwargs)
		self.meshPool = meshPool
		self.edges = edges
		self.polyPoints = polyPoints
		self.polyPointsToExterior = polyPointsToExterior


class HeliGroupOffset:

    offsets = {'heliGroupOffsetModel': 88, 'availableOffsets': 96, 'idsOfHelisUsingOffset': 104, 'helis': 112, 'needsUpdate': 120, 'targetTypeId': 128, 'baseTowerId': 136}    
    def __init__(self, heliGroupOffsetModel: Assets.Scripts.Models.Behaviors.HeliGroupOffsetModel, availableOffsets: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.SMath.Vector2>, idsOfHelisUsingOffset: Assets.Scripts.Utils.SizedList<System.Int32>, helis: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Tower>, needsUpdate: System.Boolean, targetTypeId: System.String, baseTowerId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.heliGroupOffsetModel = heliGroupOffsetModel
		self.availableOffsets = availableOffsets
		self.idsOfHelisUsingOffset = idsOfHelisUsingOffset
		self.helis = helis
		self.needsUpdate = needsUpdate
		self.targetTypeId = targetTypeId
		self.baseTowerId = baseTowerId


class MeshBehavior:

    offsets = {'mesh': 88, 'currentRange': 96, 'currentPosition': 100, 'sharedRangeMesh': 112}    
    def __init__(self, mesh: Assets.Scripts.Simulation.Display.Mesh, currentRange: System.Single, currentPosition: Assets.Scripts.Simulation.SMath.Vector3, sharedRangeMesh: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.mesh = mesh
		self.currentRange = currentRange
		self.currentPosition = currentPosition
		self.sharedRangeMesh = sharedRangeMesh


class RangeMesh:
	meshPool: System.Collections.Generic.List<Assets.Scripts.Simulation.Display.Mesh>
    offsets = {'meshPool': 0, 'walls': 8, 'sortwallsPosition': 16}    
    def __init__(self, meshPool: System.Collections.Generic.List<Assets.Scripts.Simulation.Display.Mesh>, walls: System.Collections.Generic.List<Assets.Scripts.Simulation.Track.Map.BlockerWall>, sortwallsPosition: Assets.Scripts.Simulation.SMath.Vector3, **kwargs):
        super().__init__(self, **kwargs)
		self.meshPool = meshPool
		self.walls = walls
		self.sortwallsPosition = sortwallsPosition


class SubStepTransform:

    offsets = {'position': 88, 'rotation': 96}    
    def __init__(self, position: Assets.Scripts.Simulation.SMath.Vector3Boxed, rotation: Assets.Scripts.Simulation.SMath.FloatBoxed, **kwargs):
        super().__init__(self, **kwargs)
		self.position = position
		self.rotation = rotation


class TextDisplayBehavior:

    offsets = {'node': 88}    
    def __init__(self, node: Assets.Scripts.Simulation.Display.TextDisplayNode, **kwargs):
        super().__init__(self, **kwargs)
		self.node = node


class TransformBehavior:

    offsets = {'position': 88, 'rotation': 96, 'scale': 104, 'parentTransform': 112, 'parentPositionOffset': 120, 'parentRotationOffset': 132, 'updatePositionFromParent': 136, 'ignoreParentRotation': 144}    
    def __init__(self, position: Assets.Scripts.Simulation.SMath.Vector3Boxed, rotation: Assets.Scripts.Simulation.SMath.FloatBoxed, scale: Assets.Scripts.Simulation.SMath.Vector3Boxed, parentTransform: Assets.Scripts.Simulation.Behaviors.TransformBehavior, parentPositionOffset: Assets.Scripts.Simulation.SMath.Vector3, parentRotationOffset: System.Single, updatePositionFromParent: Assets.Scripts.Simulation.Simulation.ProcessDelegate, ignoreParentRotation: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.position = position
		self.rotation = rotation
		self.scale = scale
		self.parentTransform = parentTransform
		self.parentPositionOffset = parentPositionOffset
		self.parentRotationOffset = parentRotationOffset
		self.updatePositionFromParent = updatePositionFromParent
		self.ignoreParentRotation = ignoreParentRotation


class ViewFilter:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Viewer<T>:

    offsets = {'viewing': 0, 'sampler': 0, 'enter': 0, 'exit': 0}    
    def __init__(self, viewing: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Behaviors.Viewer.IdObjectMap<T>>, sampler: Assets.Scripts.Utils.SizedList<T>, enter: Assets.Scripts.Simulation.Factory.ForEachDelegate<T>, exit: Assets.Scripts.Simulation.Factory.ForEachDelegate<T>, **kwargs):
        super().__init__(self, **kwargs)
		self.viewing = viewing
		self.sampler = sampler
		self.enter = enter
		self.exit = exit


class WhiteLineInfo:

    offsets = {'positionSim': 16, 'rotation': 28}    
    def __init__(self, positionSim: Assets.Scripts.Simulation.SMath.Vector3, rotation: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.positionSim = positionSim
		self.rotation = rotation


class Zoned<T>:

    offsets = {'transform': 0, 'getRange': 0, 'zoneEnter': 0, 'zoneExit': 0, 'filter': 0, 'range': 0, 'inZone': 0, 'outZone': 0}    
    def __init__(self, transform: Assets.Scripts.Simulation.Behaviors.TransformBehavior, getRange: Assets.Scripts.Simulation.Behaviors.GetRangeDelegate, zoneEnter: Assets.Scripts.Simulation.Factory.ForEachDelegate<T>, zoneExit: Assets.Scripts.Simulation.Factory.ForEachDelegate<T>, filter: Assets.Scripts.Simulation.Behaviors.ViewFilter, range: System.Single, inZone: Assets.Scripts.Utils.SizedList<T>, outZone: Assets.Scripts.Utils.SizedList<T>, **kwargs):
        super().__init__(self, **kwargs)
		self.transform = transform
		self.getRange = getRange
		self.zoneEnter = zoneEnter
		self.zoneExit = zoneExit
		self.filter = filter
		self.range = range
		self.inZone = inZone
		self.outZone = outZone


class Bloon:

    offsets = {'health': 176, '_path': 184, 'bloonModel': 192, 'layerId': 200, 'lowestLayerNumber': 204, 'spawnRound': 208, 'emissionIndex': 212, 'lineage': 216, 'damageResult': 224, 'modelBehaviors': 232, 'childrenCreatedOut': 240, 'collidingWith': 248, 'behavioursToRemove': 256, 'bloonBehaviors': 264, 'trackScale': 272, 'baseScale': 276, 'nonTargetable': 280, 'distanceTraveled': 284, 'offTrackCount': 288, 'chargedMutators': 296, 'pendingDamageTasks': 304, 'isDamaging': 312, 'isInvunerable': 313, 'OnBloonDegrade': 320, 'OnBloonExhausted': 328, 'OnBloonLeaked': 336, 'prevRot': 344}    
    def __init__(self, health: System.Single, _path: Assets.Scripts.Simulation.Track.Path, bloonModel: Assets.Scripts.Models.Bloons.BloonModel, layerId: System.Int32, lowestLayerNumber: System.Int32, spawnRound: System.Int32, emissionIndex: System.Int32, lineage: Assets.Scripts.Utils.SizedList<System.Int32>, damageResult: Assets.Scripts.Simulation.Bloons.BloonDegradeStepper.DamageResult, modelBehaviors: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.RootBehavior>, childrenCreatedOut: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Bloons.Bloon>, collidingWith: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Projectiles.Projectile>, behavioursToRemove: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.BehaviorMutator>, bloonBehaviors: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Bloons.BloonBehavior>, trackScale: System.Single, baseScale: System.Single, nonTargetable: System.Boolean, distanceTraveled: System.Single, offTrackCount: System.Int32, chargedMutators: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Bloons.Bloon.ChargedMutator>, pendingDamageTasks: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Bloons.Bloon.DamageTask>, isDamaging: System.Boolean, isInvunerable: System.Boolean, OnBloonDegrade: System.Action<Assets.Scripts.Simulation.Bloons.Bloon,Assets.Scripts.Simulation.Bloons.BloonDegradeStepper.DamageResult>, OnBloonExhausted: System.Action<Assets.Scripts.Simulation.Bloons.Bloon>, OnBloonLeaked: System.Action<Assets.Scripts.Simulation.Bloons.Bloon>, prevRot: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.health = health
		self._path = _path
		self.bloonModel = bloonModel
		self.layerId = layerId
		self.lowestLayerNumber = lowestLayerNumber
		self.spawnRound = spawnRound
		self.emissionIndex = emissionIndex
		self.lineage = lineage
		self.damageResult = damageResult
		self.modelBehaviors = modelBehaviors
		self.childrenCreatedOut = childrenCreatedOut
		self.collidingWith = collidingWith
		self.behavioursToRemove = behavioursToRemove
		self.bloonBehaviors = bloonBehaviors
		self.trackScale = trackScale
		self.baseScale = baseScale
		self.nonTargetable = nonTargetable
		self.distanceTraveled = distanceTraveled
		self.offTrackCount = offTrackCount
		self.chargedMutators = chargedMutators
		self.pendingDamageTasks = pendingDamageTasks
		self.isDamaging = isDamaging
		self.isInvunerable = isInvunerable
		self.OnBloonDegrade = OnBloonDegrade
		self.OnBloonExhausted = OnBloonExhausted
		self.OnBloonLeaked = OnBloonLeaked
		self.prevRot = prevRot


class BloonBehavior:

    offsets = {'bloon': 88}    
    def __init__(self, bloon: Assets.Scripts.Simulation.Bloons.Bloon, **kwargs):
        super().__init__(self, **kwargs)
		self.bloon = bloon


class BloonDegradeStep:

    offsets = {'sim': 16, 'bloonModel': 24, 'maxHealth': 32, 'totalHealth': 36, 'totalLayers': 40, 'totalDegrades': 44, 'effectiveHealth': 48, 'connections': 56, 'stepsForLayerIndex': 64, 'degradesForTotalHealth': 72, 'bloonDegradeStepper': 80, 'nextChildSteps': 88, 'childSteps': 96}    
    def __init__(self, sim: Assets.Scripts.Simulation.Simulation, bloonModel: Assets.Scripts.Models.Bloons.BloonModel, maxHealth: System.Single, totalHealth: System.Int32, totalLayers: System.Int32, totalDegrades: System.Int32, effectiveHealth: System.Int32, connections: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Bloons.BloonDegradeStep>>, stepsForLayerIndex: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Bloons.BloonDegradeStep>>, degradesForTotalHealth: System.Collections.Generic.Dictionary<System.Int32,System.Int32>, bloonDegradeStepper: Assets.Scripts.Simulation.Bloons.BloonDegradeStepper, nextChildSteps: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Bloons.BloonDegradeStep>, childSteps: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Bloons.BloonDegradeStep>, **kwargs):
        super().__init__(self, **kwargs)
		self.sim = sim
		self.bloonModel = bloonModel
		self.maxHealth = maxHealth
		self.totalHealth = totalHealth
		self.totalLayers = totalLayers
		self.totalDegrades = totalDegrades
		self.effectiveHealth = effectiveHealth
		self.connections = connections
		self.stepsForLayerIndex = stepsForLayerIndex
		self.degradesForTotalHealth = degradesForTotalHealth
		self.bloonDegradeStepper = bloonDegradeStepper
		self.nextChildSteps = nextChildSteps
		self.childSteps = childSteps


class BloonDegradeStepper:

    offsets = {'Sim': 16, 'bloonDegradeStepsByName': 24, 'nextChildSteps': 32, 'childSteps': 40, 'currentHealths': 48, 'nextHealths': 56, 'currentSteps': 64, 'nextSteps': 72}    
    def __init__(self, Sim: Assets.Scripts.Simulation.Simulation, bloonDegradeStepsByName: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Simulation.Bloons.BloonDegradeStep>, nextChildSteps: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Bloons.BloonDegradeStep>, childSteps: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Bloons.BloonDegradeStep>, currentHealths: Assets.Scripts.Utils.SizedList<System.Int32>, nextHealths: Assets.Scripts.Utils.SizedList<System.Int32>, currentSteps: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Bloons.BloonDegradeStep>, nextSteps: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Bloons.BloonDegradeStep>, **kwargs):
        super().__init__(self, **kwargs)
		self.Sim = Sim
		self.bloonDegradeStepsByName = bloonDegradeStepsByName
		self.nextChildSteps = nextChildSteps
		self.childSteps = childSteps
		self.currentHealths = currentHealths
		self.nextHealths = nextHealths
		self.currentSteps = currentSteps
		self.nextSteps = nextSteps


class BloonManager:

    offsets = {'OnBloonLeaked': 88, 'OnBloonDegrade': 96, 'OnBloonSpawned': 104, 'bloonDegradeStepper': 112, 'mutatorRemovalExceptions': 120, 'brackets': 128, 'compareClosePosition': 136, 'lastCacheFrame': 144, 'lastCachedRBE': 148}    
    def __init__(self, OnBloonLeaked: Assets.Scripts.Simulation.Bloons.BloonManager.BloonLeakCallback, OnBloonDegrade: Assets.Scripts.Simulation.Bloons.BloonManager.BloonDegradeDelegate, OnBloonSpawned: Assets.Scripts.Simulation.Bloons.BloonManager.BloonSpawnedDelegate, bloonDegradeStepper: Assets.Scripts.Simulation.Bloons.BloonDegradeStepper, mutatorRemovalExceptions: System.Collections.Generic.List<System.String>, brackets: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Behaviors.Attack.PathSegmentInRange>, compareClosePosition: Assets.Scripts.Simulation.SMath.Vector2, lastCacheFrame: System.Int32, lastCachedRBE: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.OnBloonLeaked = OnBloonLeaked
		self.OnBloonDegrade = OnBloonDegrade
		self.OnBloonSpawned = OnBloonSpawned
		self.bloonDegradeStepper = bloonDegradeStepper
		self.mutatorRemovalExceptions = mutatorRemovalExceptions
		self.brackets = brackets
		self.compareClosePosition = compareClosePosition
		self.lastCacheFrame = lastCacheFrame
		self.lastCachedRBE = lastCachedRBE


class Targetting:
	tempTargetList: System.Collections.Generic.List<Assets.Scripts.Simulation.Towers.Target>
    offsets = {'tempTargetList': 0}    
    def __init__(self, tempTargetList: System.Collections.Generic.List<Assets.Scripts.Simulation.Towers.Target>, **kwargs):
        super().__init__(self, **kwargs)
		self.tempTargetList = tempTargetList


class TrackArrowManager:

    offsets = {'trackArrowModel': 88, 'arrows': 96, 'isActive': 104, 'timeUntilNextPulse': 108, 'timeUntilNextArrow': 112, 'subArrowIndex': 116, 'spawnPaths': 120, 'leakPaths': 128, 'roundCount': 136}    
    def __init__(self, trackArrowModel: Assets.Scripts.Models.Map.TrackArrowModel, arrows: System.Collections.Generic.List<Assets.Scripts.Simulation.Track.TrackArrow>, isActive: System.Boolean, timeUntilNextPulse: System.Single, timeUntilNextArrow: System.Single, subArrowIndex: System.Int32, spawnPaths: System.Collections.Generic.List<Assets.Scripts.Simulation.Track.Path>, leakPaths: System.Collections.Generic.List<Assets.Scripts.Simulation.Track.Path>, roundCount: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.trackArrowModel = trackArrowModel
		self.arrows = arrows
		self.isActive = isActive
		self.timeUntilNextPulse = timeUntilNextPulse
		self.timeUntilNextArrow = timeUntilNextArrow
		self.subArrowIndex = subArrowIndex
		self.spawnPaths = spawnPaths
		self.leakPaths = leakPaths
		self.roundCount = roundCount


class AddAnimatorMutator:

    offsets = {'startPos': 112, 'startRotation': 124, 'animCurveId': 128, 'animLength': 136, 'isInvulnerable': 140, 'animateToTrackPosition': 141}    
    def __init__(self, startPos: Assets.Scripts.Simulation.SMath.Vector3, startRotation: System.Single, animCurveId: System.String, animLength: System.Single, isInvulnerable: System.Boolean, animateToTrackPosition: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.startPos = startPos
		self.startRotation = startRotation
		self.animCurveId = animCurveId
		self.animLength = animLength
		self.isInvulnerable = isInvulnerable
		self.animateToTrackPosition = animateToTrackPosition


class AddBossSkinMutator:

    offsets = {'bossName': 112}    
    def __init__(self, bossName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.bossName = bossName


class AnimDamageState:

    offsets = {'modl': 96}    
    def __init__(self, modl: Assets.Scripts.Models.Bloons.Behaviors.AnimDamageStateModel, **kwargs):
        super().__init__(self, **kwargs)
		self.modl = modl


class BadImmunity:

    offsets = {'badImmunityModel': 96}    
    def __init__(self, badImmunityModel: Assets.Scripts.Models.Bloons.Behaviors.BadImmunityModel, **kwargs):
        super().__init__(self, **kwargs)
		self.badImmunityModel = badImmunityModel


class BloonBehaviorAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CarryProjectile:

    offsets = {'carryProjectileModel': 96, 'emission': 104, 'projectilesCreated': 112, 'removeList': 120}    
    def __init__(self, carryProjectileModel: Assets.Scripts.Models.Bloons.Behaviors.CarryProjectileModel, emission: Assets.Scripts.Simulation.Towers.Emissions.Emission, projectilesCreated: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Projectiles.Projectile>, removeList: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Projectiles.Projectile>, **kwargs):
        super().__init__(self, **kwargs)
		self.carryProjectileModel = carryProjectileModel
		self.emission = emission
		self.projectilesCreated = projectilesCreated
		self.removeList = removeList


class ChangeGrowType:

    offsets = {'changeGrowTypeModel': 96}    
    def __init__(self, changeGrowTypeModel: Assets.Scripts.Models.Bloons.Behaviors.ChangeGrowTypeModel, **kwargs):
        super().__init__(self, **kwargs)
		self.changeGrowTypeModel = changeGrowTypeModel


class Color:

    offsets = {'colorModel': 96}    
    def __init__(self, colorModel: Assets.Scripts.Models.Bloons.Behaviors.ColorModel, **kwargs):
        super().__init__(self, **kwargs)
		self.colorModel = colorModel


class CreateEffectOnBloonOverTime:

    offsets = {'createEffectOnBloonOverTimeModel': 96, 'lastTick': 104, 'effects': 112, 'towerName': 120}    
    def __init__(self, createEffectOnBloonOverTimeModel: Assets.Scripts.Models.Bloons.Behaviors.CreateEffectOnBloonOverTimeModel, lastTick: System.Int32, effects: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.Entity>, towerName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.createEffectOnBloonOverTimeModel = createEffectOnBloonOverTimeModel
		self.lastTick = lastTick
		self.effects = effects
		self.towerName = towerName


class CreateSoundOnBloonDegrade:

    offsets = {'createSoundOnBloonDegradeModel': 96}    
    def __init__(self, createSoundOnBloonDegradeModel: Assets.Scripts.Models.Bloons.Behaviors.CreateSoundOnBloonDegradeModel, **kwargs):
        super().__init__(self, **kwargs)
		self.createSoundOnBloonDegradeModel = createSoundOnBloonDegradeModel


class CreateSoundOnDamageBloon:
	groupIds: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Simulation.Bloons.Behaviors.CreateSoundOnDamageBloon.BloonDamageSoundGroupIds>
    offsets = {'groupIds': 0, 'createSoundOnDamageBloonModel': 96}    
    def __init__(self, groupIds: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Simulation.Bloons.Behaviors.CreateSoundOnDamageBloon.BloonDamageSoundGroupIds>, createSoundOnDamageBloonModel: Assets.Scripts.Models.Bloons.Behaviors.CreateSoundOnDamageBloonModel, **kwargs):
        super().__init__(self, **kwargs)
		self.groupIds = groupIds
		self.createSoundOnDamageBloonModel = createSoundOnDamageBloonModel


class CreateSoundOnSpawnBloon:

    offsets = {'createSoundOnSpawnBloonModel': 96}    
    def __init__(self, createSoundOnSpawnBloonModel: Assets.Scripts.Models.Bloons.Behaviors.CreateSoundOnSpawnBloonModel, **kwargs):
        super().__init__(self, **kwargs)
		self.createSoundOnSpawnBloonModel = createSoundOnSpawnBloonModel


class DamageOverTime:

    offsets = {'damageOverTimeModel': 96, 'lastTick': 104}    
    def __init__(self, damageOverTimeModel: Assets.Scripts.Models.Bloons.Behaviors.DamageOverTimeModel, lastTick: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.damageOverTimeModel = damageOverTimeModel
		self.lastTick = lastTick


class DamageOverTimeCustom:

    offsets = {'damageOverTimeCustomModel': 112}    
    def __init__(self, damageOverTimeCustomModel: Assets.Scripts.Models.Bloons.Behaviors.DamageOverTimeCustomModel, **kwargs):
        super().__init__(self, **kwargs)
		self.damageOverTimeCustomModel = damageOverTimeCustomModel


class DamageOverTimeForTag:

    offsets = {'damageOverTimeForTagModel': 96, 'lastTick': 104}    
    def __init__(self, damageOverTimeForTagModel: Assets.Scripts.Models.Bloons.Behaviors.DamageOverTimeForTagModel, lastTick: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.damageOverTimeForTagModel = damageOverTimeForTagModel
		self.lastTick = lastTick


class DartTimeBloonBehavior:

    offsets = {'dartTimeBloonBehaviorModel': 96}    
    def __init__(self, dartTimeBloonBehaviorModel: Assets.Scripts.Models.Bloons.Behaviors.DartTimeBloonBehaviorModel, **kwargs):
        super().__init__(self, **kwargs)
		self.dartTimeBloonBehaviorModel = dartTimeBloonBehaviorModel


class DestroyOnDegrade:

    offsets = {'destroyOnDegradeModel': 96}    
    def __init__(self, destroyOnDegradeModel: Assets.Scripts.Models.Bloons.Behaviors.DestroyOnDegradeModel, **kwargs):
        super().__init__(self, **kwargs)
		self.destroyOnDegradeModel = destroyOnDegradeModel


class DisableDisplaysOnBloon:

    offsets = {'disableDisplaysOnBloonModel': 96}    
    def __init__(self, disableDisplaysOnBloonModel: Assets.Scripts.Models.Bloons.Behaviors.DisableDisplaysOnBloonModel, **kwargs):
        super().__init__(self, **kwargs)
		self.disableDisplaysOnBloonModel = disableDisplaysOnBloonModel


class DistributeCash:

    offsets = {'distributeCashModel': 96, 'calculateButDontAwardCashThisFrame': 104}    
    def __init__(self, distributeCashModel: Assets.Scripts.Models.Bloons.Behaviors.DistributeCashModel, calculateButDontAwardCashThisFrame: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.distributeCashModel = distributeCashModel
		self.calculateButDontAwardCashThisFrame = calculateButDontAwardCashThisFrame


class EffectOnPop:

    offsets = {'effectOnPopModel': 96}    
    def __init__(self, effectOnPopModel: Assets.Scripts.Models.Bloons.Behaviors.EffectOnPopModel, **kwargs):
        super().__init__(self, **kwargs)
		self.effectOnPopModel = effectOnPopModel


class EmitOnDestroy:

    offsets = {'_emitOnDestroyModel': 96, 'emission': 104}    
    def __init__(self, _emitOnDestroyModel: Assets.Scripts.Models.Bloons.Behaviors.EmitOnDestroyModel, emission: Assets.Scripts.Simulation.Towers.Emissions.Emission, **kwargs):
        super().__init__(self, **kwargs)
		self._emitOnDestroyModel = _emitOnDestroyModel
		self.emission = emission


class EmitOnPop:

    offsets = {'emitOnPopModel': 96, 'emission': 104, 'ignoringSameFrameDegrade': 112}    
    def __init__(self, emitOnPopModel: Assets.Scripts.Models.Bloons.Behaviors.EmitOnPopModel, emission: Assets.Scripts.Simulation.Towers.Emissions.Emission, ignoringSameFrameDegrade: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.emitOnPopModel = emitOnPopModel
		self.emission = emission
		self.ignoringSameFrameDegrade = ignoringSameFrameDegrade


class FollowCursor:

    offsets = {'followCursorModel': 88, 'bloon': 96}    
    def __init__(self, followCursorModel: Assets.Scripts.Models.Bloons.Behaviors.FollowCursorModel, bloon: Assets.Scripts.Simulation.Bloons.Bloon, **kwargs):
        super().__init__(self, **kwargs)
		self.followCursorModel = followCursorModel
		self.bloon = bloon


class FreezeImmunityRemoval:

    offsets = {'freezeImmunityRemovalModel': 96}    
    def __init__(self, freezeImmunityRemovalModel: Assets.Scripts.Models.Bloons.Behaviors.FreezeImmunityRemovalModel, **kwargs):
        super().__init__(self, **kwargs)
		self.freezeImmunityRemovalModel = freezeImmunityRemovalModel


class GiveLife:

    offsets = {'giveLifeModel': 96}    
    def __init__(self, giveLifeModel: Assets.Scripts.Models.Bloons.Behaviors.GiveLifeModel, **kwargs):
        super().__init__(self, **kwargs)
		self.giveLifeModel = giveLifeModel


class GoldenBloon:

    offsets = {'def': 96, 'jumpTimer': 104, 'invulnerableMutator': 112, 'speedUpMutator': 120}    
    def __init__(self, def: Assets.Scripts.Models.Bloons.Behaviors.GoldenBloonModel, jumpTimer: System.Int32, invulnerableMutator: Assets.Scripts.Simulation.Bloons.Behaviors.InvulnerableMutator, speedUpMutator: Assets.Scripts.Simulation.Bloons.Behaviors.SpeedUpMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def
		self.jumpTimer = jumpTimer
		self.invulnerableMutator = invulnerableMutator
		self.speedUpMutator = speedUpMutator


class GrappleSlot:

    offsets = {'grappleSlotModel': 96}    
    def __init__(self, grappleSlotModel: Assets.Scripts.Models.Bloons.Behaviors.GrappleSlotModel, **kwargs):
        super().__init__(self, **kwargs)
		self.grappleSlotModel = grappleSlotModel


class Grow:

    offsets = {'growModel': 96, 'timeTillGrow': 104, 'growCeilingLayerNumber': 108, 'growTo': 112, 'growToChildBaseId': 120, 'growToParentBaseId': 128, 'init': 136, 'growBlockCount': 140}    
    def __init__(self, growModel: Assets.Scripts.Models.Bloons.Behaviors.GrowModel, timeTillGrow: System.Int32, growCeilingLayerNumber: System.Int32, growTo: System.String, growToChildBaseId: System.String, growToParentBaseId: System.String, init: System.Boolean, growBlockCount: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.growModel = growModel
		self.timeTillGrow = timeTillGrow
		self.growCeilingLayerNumber = growCeilingLayerNumber
		self.growTo = growTo
		self.growToChildBaseId = growToChildBaseId
		self.growToParentBaseId = growToParentBaseId
		self.init = init
		self.growBlockCount = growBlockCount


class GrowBlock:

    offsets = {'growBlockModel': 96}    
    def __init__(self, growBlockModel: Assets.Scripts.Models.Bloons.Behaviors.GrowBlockModel, **kwargs):
        super().__init__(self, **kwargs)
		self.growBlockModel = growBlockModel


class HealthPercentTrigger:

    offsets = {'modl': 96, 'actions': 104}    
    def __init__(self, modl: Assets.Scripts.Models.Bloons.Behaviors.HealthPercentTriggerModel, actions: System.Collections.Generic.List<Assets.Scripts.Simulation.Bloons.Behaviors.BloonBehaviorAction>, **kwargs):
        super().__init__(self, **kwargs)
		self.modl = modl
		self.actions = actions


class Hex:

    offsets = {'hexModel': 96, 'lastTick': 104, 'firstTick': 108, 'appliedFinalDamage': 112, 'ticksLeft': 116}    
    def __init__(self, hexModel: Assets.Scripts.Models.Bloons.Behaviors.HexModel, lastTick: System.Int32, firstTick: System.Int32, appliedFinalDamage: System.Boolean, ticksLeft: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.hexModel = hexModel
		self.lastTick = lastTick
		self.firstTick = firstTick
		self.appliedFinalDamage = appliedFinalDamage
		self.ticksLeft = ticksLeft


class IgnoreDmgImmunity:

    offsets = {'ignoreDmgImmunityModel': 96, 'checkedProjectiles': 104, 'addedMutator': 112}    
    def __init__(self, ignoreDmgImmunityModel: Assets.Scripts.Models.Bloons.Behaviors.IgnoreDmgImmunityModel, checkedProjectiles: System.Collections.Generic.HashSet<System.Int32>, addedMutator: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.ignoreDmgImmunityModel = ignoreDmgImmunityModel
		self.checkedProjectiles = checkedProjectiles
		self.addedMutator = addedMutator


class IncreaseWorthTextEffect:

    offsets = {'increaseWorthTextEffectModel': 96}    
    def __init__(self, increaseWorthTextEffectModel: Assets.Scripts.Models.Bloons.Behaviors.IncreaseWorthTextEffectModel, **kwargs):
        super().__init__(self, **kwargs)
		self.increaseWorthTextEffectModel = increaseWorthTextEffectModel


class InvulnerableMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MoabBarrageBloonBehavior:

    offsets = {'moabBarrageBloonBehaviorModel': 96, 'lastMissileTick': 104, 'lastExplosionTick': 108, 'missileEffects': 112, 'towerName': 120, 'missileCount': 128, 'explosionCount': 132}    
    def __init__(self, moabBarrageBloonBehaviorModel: Assets.Scripts.Models.Bloons.Behaviors.MoabBarrageBloonBehaviorModel, lastMissileTick: System.Int32, lastExplosionTick: System.Int32, missileEffects: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.Entity>, towerName: System.String, missileCount: System.Int32, explosionCount: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.moabBarrageBloonBehaviorModel = moabBarrageBloonBehaviorModel
		self.lastMissileTick = lastMissileTick
		self.lastExplosionTick = lastExplosionTick
		self.missileEffects = missileEffects
		self.towerName = towerName
		self.missileCount = missileCount
		self.explosionCount = explosionCount


class MoveWithAnimator:

    offsets = {'modl': 96, 'animTimer': 104, 'animLengthFrames': 108, 'travelToPath': 112, 'curveData': 120, 'startPos': 128, 'destPos': 140, 'diff': 152}    
    def __init__(self, modl: Assets.Scripts.Models.Bloons.Behaviors.MoveWithAnimatorModel, animTimer: System.Int32, animLengthFrames: System.Single, travelToPath: System.Boolean, curveData: Assets.Scripts.Data.AnimCurves.AnimCurveData, startPos: Assets.Scripts.Simulation.SMath.Vector3, destPos: Assets.Scripts.Simulation.SMath.Vector3, diff: Assets.Scripts.Simulation.SMath.Vector3, **kwargs):
        super().__init__(self, **kwargs)
		self.modl = modl
		self.animTimer = animTimer
		self.animLengthFrames = animLengthFrames
		self.travelToPath = travelToPath
		self.curveData = curveData
		self.startPos = startPos
		self.destPos = destPos
		self.diff = diff


class MoveWithWind:

    offsets = {'moveWithWindModel': 96}    
    def __init__(self, moveWithWindModel: Assets.Scripts.Models.Bloons.Behaviors.MoveWithWindModel, **kwargs):
        super().__init__(self, **kwargs)
		self.moveWithWindModel = moveWithWindModel


class MutationImunity:

    offsets = {'mutationImunityDef': 96}    
    def __init__(self, mutationImunityDef: Assets.Scripts.Models.Bloons.Behaviors.MutationImunityDef, **kwargs):
        super().__init__(self, **kwargs)
		self.mutationImunityDef = mutationImunityDef


class PatsBigSqueezeWind:

    offsets = {'behaviorModel': 96, 'distanceTraveledToReturnTo': 104, 'returnToLocation': 108, 'framesAtStart': 120}    
    def __init__(self, behaviorModel: Assets.Scripts.Models.Bloons.Behaviors.PatsBigSqueezeWindModel, distanceTraveledToReturnTo: System.Single, returnToLocation: Assets.Scripts.Simulation.SMath.Vector3, framesAtStart: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.behaviorModel = behaviorModel
		self.distanceTraveledToReturnTo = distanceTraveledToReturnTo
		self.returnToLocation = returnToLocation
		self.framesAtStart = framesAtStart


class PauseMovementMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PlayAnimTriggerAction:

    offsets = {'modl': 96}    
    def __init__(self, modl: Assets.Scripts.Models.Bloons.Behaviors.PlayAnimTriggerActionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.modl = modl


class PopEffect:

    offsets = {'def': 96, 'lastEffect': 104}    
    def __init__(self, def: Assets.Scripts.Models.Bloons.Behaviors.PopEffectModel, lastEffect: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def
		self.lastEffect = lastEffect


class ProjectileOverTime:

    offsets = {'projectileOverTimeModel': 96, 'lastTick': 104, 'emission': 112}    
    def __init__(self, projectileOverTimeModel: Assets.Scripts.Models.Bloons.Behaviors.ProjectileOverTimeModel, lastTick: System.Int32, emission: Assets.Scripts.Simulation.Towers.Emissions.Emission, **kwargs):
        super().__init__(self, **kwargs)
		self.projectileOverTimeModel = projectileOverTimeModel
		self.lastTick = lastTick
		self.emission = emission


class PsiBloonBehavior:

    offsets = {'psiBloonBehaviorModel': 96, 'emission': 104, 'addedAt': 112}    
    def __init__(self, psiBloonBehaviorModel: Assets.Scripts.Models.Bloons.Behaviors.PsiBloonBehaviorModel, emission: Assets.Scripts.Simulation.Towers.Emissions.Emission, addedAt: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.psiBloonBehaviorModel = psiBloonBehaviorModel
		self.emission = emission
		self.addedAt = addedAt


class SetGrowToOnChildren:

    offsets = {'setGrowToOnChildrenModel': 96}    
    def __init__(self, setGrowToOnChildrenModel: Assets.Scripts.Models.Bloons.Behaviors.SetGrowToOnChildrenModel, **kwargs):
        super().__init__(self, **kwargs)
		self.setGrowToOnChildrenModel = setGrowToOnChildrenModel


class ShowDamageText:

    offsets = {'showDamageTextModel': 96, 'health': 104}    
    def __init__(self, showDamageTextModel: Assets.Scripts.Models.Bloons.Behaviors.ShowDamageTextModel, health: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.showDamageTextModel = showDamageTextModel
		self.health = health


class SpawnBloonsAction:

    offsets = {'modl': 96, 'blankChildTrans': 104, 'animIndex': 112, 'moabAnimIndex': 116, 'spawnTimes': 120, 'childModel': 128, 'animationCurveId': 136}    
    def __init__(self, modl: Assets.Scripts.Models.Bloons.Behaviors.SpawnBloonsActionModel, blankChildTrans: Assets.Scripts.Models.Behaviors.TransformModel, animIndex: System.Int32, moabAnimIndex: System.Int32, spawnTimes: System.Collections.Generic.List<System.Int32>, childModel: Assets.Scripts.Models.Bloons.BloonModel, animationCurveId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.modl = modl
		self.blankChildTrans = blankChildTrans
		self.animIndex = animIndex
		self.moabAnimIndex = moabAnimIndex
		self.spawnTimes = spawnTimes
		self.childModel = childModel
		self.animationCurveId = animationCurveId


class SpawnChildren:

    offsets = {'spawnChildrenModel': 96, 'newChildTransformModel': 104}    
    def __init__(self, spawnChildrenModel: Assets.Scripts.Models.Bloons.Behaviors.SpawnChildrenModel, newChildTransformModel: Assets.Scripts.Models.Behaviors.TransformModel, **kwargs):
        super().__init__(self, **kwargs)
		self.spawnChildrenModel = spawnChildrenModel
		self.newChildTransformModel = newChildTransformModel


class SpawnDeathAnim:

    offsets = {'modl': 96, 'endSpawnAnimTime': 104, 'endDeathAnimTime': 108}    
    def __init__(self, modl: Assets.Scripts.Models.Bloons.Behaviors.SpawnDeathAnimModel, endSpawnAnimTime: System.Int32, endDeathAnimTime: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.modl = modl
		self.endSpawnAnimTime = endSpawnAnimTime
		self.endDeathAnimTime = endDeathAnimTime


class SpeedUpMutator:

    offsets = {'speedMultiplier': 112}    
    def __init__(self, speedMultiplier: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.speedMultiplier = speedMultiplier


class UnstableConcoctionSplash:

    offsets = {'unstableConcoctionSplash': 120, 'emission': 128}    
    def __init__(self, unstableConcoctionSplash: Assets.Scripts.Models.Bloons.Behaviors.UnstableConcoctionSplashModel, emission: Assets.Scripts.Simulation.Towers.Emissions.Emission, **kwargs):
        super().__init__(self, **kwargs)
		self.unstableConcoctionSplash = unstableConcoctionSplash
		self.emission = emission


class DisplayNode:

    offsets = {'<State>k__BackingField': 16, 'animationState': 20, '<AnimationSpeed>k__BackingField': 24, 'stateTriggers': 32, 'animTriggers': 40, 'framesTillReveal': 48, 'isActive': 52, 'isHilighted': 53, 'isFullscreen': 54, 'objectId': 56, 'position': 64, 'rotation': 72, 'rotationQuat': 80, 'mesh': 96, 'layer': 104, 'groupId': 108, 'flipLayers': 112, 'transparency': 116, 'modifyColor': 120, 'colorRed': 124, 'colorGreen': 128, 'colorBlue': 132, 'animationChanges': 136, 'graphic': 144}    
    def __init__(self, <State>k__BackingField: Assets.Scripts.Simulation.Display.DisplayNodeState, animationState: System.Int32, <AnimationSpeed>k__BackingField: System.Single, stateTriggers: System.Collections.Generic.List<System.Int32>, animTriggers: System.Collections.Generic.List<System.String>, framesTillReveal: System.Int32, isActive: System.Boolean, isHilighted: System.Boolean, isFullscreen: System.Boolean, objectId: System.String, position: Assets.Scripts.Simulation.SMath.Vector3Boxed, rotation: Assets.Scripts.Simulation.SMath.FloatBoxed, rotationQuat: Assets.Scripts.Simulation.SMath.Quaternion, mesh: Assets.Scripts.Simulation.Display.Mesh, layer: System.Int32, groupId: System.Int32, flipLayers: System.Boolean, transparency: System.Single, modifyColor: System.Boolean, colorRed: System.Single, colorGreen: System.Single, colorBlue: System.Single, animationChanges: System.Collections.Generic.List<Assets.Scripts.Models.GenericBehaviors.AnimationChange>, graphic: Assets.Scripts.Unity.Display.UnityDisplayNode, **kwargs):
        super().__init__(self, **kwargs)
		self.<State>k__BackingField = <State>k__BackingField
		self.animationState = animationState
		self.<AnimationSpeed>k__BackingField = <AnimationSpeed>k__BackingField
		self.stateTriggers = stateTriggers
		self.animTriggers = animTriggers
		self.framesTillReveal = framesTillReveal
		self.isActive = isActive
		self.isHilighted = isHilighted
		self.isFullscreen = isFullscreen
		self.objectId = objectId
		self.position = position
		self.rotation = rotation
		self.rotationQuat = rotationQuat
		self.mesh = mesh
		self.layer = layer
		self.groupId = groupId
		self.flipLayers = flipLayers
		self.transparency = transparency
		self.modifyColor = modifyColor
		self.colorRed = colorRed
		self.colorGreen = colorGreen
		self.colorBlue = colorBlue
		self.animationChanges = animationChanges
		self.graphic = graphic


class DisplayNodeState:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class IDisplayNode:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Mesh:

    offsets = {'triangles': 16, 'uvs': 24, 'verticies': 32, 'position': 40, 'isValid': 52, 'Released': 56}    
    def __init__(self, triangles: System.Collections.Generic.List<System.Int32>, uvs: System.Collections.Generic.List<Assets.Scripts.Simulation.SMath.Vector2>, verticies: System.Collections.Generic.List<Assets.Scripts.Simulation.SMath.Vector3>, position: Assets.Scripts.Simulation.SMath.Vector3, isValid: System.Boolean, Released: System.Action<Assets.Scripts.Simulation.Display.Mesh>, **kwargs):
        super().__init__(self, **kwargs)
		self.triangles = triangles
		self.uvs = uvs
		self.verticies = verticies
		self.position = position
		self.isValid = isValid
		self.Released = Released


class TextDisplayNode:

    offsets = {'<State>k__BackingField': 16, 'animationState': 20, 'isHilighted': 24, 'text': 32, 'notLocalized': 40, 'objectId': 48, 'position': 56, 'rotation': 64, 'layer': 72, 'graphic': 80}    
    def __init__(self, <State>k__BackingField: Assets.Scripts.Simulation.Display.DisplayNodeState, animationState: System.Int32, isHilighted: System.Boolean, text: System.String, notLocalized: System.Boolean, objectId: System.String, position: Assets.Scripts.Simulation.SMath.Vector3Boxed, rotation: Assets.Scripts.Simulation.SMath.FloatBoxed, layer: System.Int32, graphic: Assets.Scripts.Unity.Display.UnityDisplayNode, **kwargs):
        super().__init__(self, **kwargs)
		self.<State>k__BackingField = <State>k__BackingField
		self.animationState = animationState
		self.isHilighted = isHilighted
		self.text = text
		self.notLocalized = notLocalized
		self.objectId = objectId
		self.position = position
		self.rotation = rotation
		self.layer = layer
		self.graphic = graphic


class EffectLimitManager:

    offsets = {'effectLimitersById': 88}    
    def __init__(self, effectLimitersById: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Simulation.Effects.EffectLimiter>, **kwargs):
        super().__init__(self, **kwargs)
		self.effectLimitersById = effectLimitersById


class EffectLimiter:

    offsets = {'currentAmount': 88, 'limit': 92}    
    def __init__(self, currentAmount: System.Int32, limit: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.currentAmount = currentAmount
		self.limit = limit


class Factory<T>:

    offsets = {'all': 0, 'free': 0, 'up': 0, 'sampleCreatedTo': 0, 'sim': 0}    
    def __init__(self, all: Assets.Scripts.Utils.SizedList<T>, free: Assets.Scripts.Utils.SizedList<T>, up: Assets.Scripts.Utils.LockList<T>, sampleCreatedTo: System.Collections.Generic.List<Assets.Scripts.Utils.SizedList<T>>, sim: Assets.Scripts.Simulation.Simulation, **kwargs):
        super().__init__(self, **kwargs)
		self.all = all
		self.free = free
		self.up = up
		self.sampleCreatedTo = sampleCreatedTo
		self.sim = sim


class FactoryFactory:

    offsets = {'simulation': 16, 'factories': 24, 'getCache': 32, 'elapsedSinceFlush': 40, 'implemetationLookup': 48, 'factoryCache': 56}    
    def __init__(self, simulation: Assets.Scripts.Simulation.Simulation, factories: System.Collections.Generic.Dictionary<System.Type,Assets.Scripts.Simulation.Factory.IFactory>, getCache: System.Collections.Generic.Dictionary<System.Type,Assets.Scripts.Simulation.Factory.FactoryFactory.BlanketAdd>, elapsedSinceFlush: System.Int32, implemetationLookup: System.Collections.Generic.Dictionary<System.Type,Assets.Scripts.Simulation.Factory.FactoryFactory.CreationInfo>, factoryCache: System.Collections.Generic.Dictionary<System.Type,System.Collections.Generic.List<Assets.Scripts.Simulation.Factory.IFactory>>, **kwargs):
        super().__init__(self, **kwargs)
		self.simulation = simulation
		self.factories = factories
		self.getCache = getCache
		self.elapsedSinceFlush = elapsedSinceFlush
		self.implemetationLookup = implemetationLookup
		self.factoryCache = factoryCache


class FactoryFactory_StaticFields:
	instanceCounts: System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Int32>
    offsets = {'instanceCounts': 0}    
    def __init__(self, instanceCounts: System.Collections.Concurrent.ConcurrentDictionary<System.Type,System.Int32>, **kwargs):
        super().__init__(self, **kwargs)
		self.instanceCounts = instanceCounts


class ForEachDelegate<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class IFactory:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ProgressiveDifficultyManager:

    offsets = {'isEnabled': 88, 'ceramicsChanged': 89}    
    def __init__(self, isEnabled: System.Boolean, ceramicsChanged: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isEnabled = isEnabled
		self.ceramicsChanged = ceramicsChanged


class BuffIndicator:

    offsets = {'buffIndicatorModel': 88}    
    def __init__(self, buffIndicatorModel: Assets.Scripts.Models.GenericBehaviors.BuffIndicatorModel, **kwargs):
        super().__init__(self, **kwargs)
		self.buffIndicatorModel = buffIndicatorModel


class AudioManagerSim:

    offsets = {'audioTasks': 88}    
    def __init__(self, audioTasks: Assets.Scripts.Utils.SizedList<Assets.Scripts.Unity.Bridge.AudioTask>, **kwargs):
        super().__init__(self, **kwargs)
		self.audioTasks = audioTasks


class InputManager:

    offsets = {'id': 88, 'validCoopAreas': 96, 'xp': 104, 'canEarnXP': 112, 'cursorLocation': 116, 'cursorActive': 124, 'ignoreCursor': 125, 'coopMesh': 128, 'coopMeshYours': 136, 'OnTowerOwnerReassigned': 144, 'supportBuffs': 152}    
    def __init__(self, id: System.Int32, validCoopAreas: System.Collections.Generic.List<System.Int32>, xp: Assets.Scripts.Unity.Bridge.Xp, canEarnXP: System.Boolean, cursorLocation: Assets.Scripts.Simulation.SMath.Vector2, cursorActive: System.Boolean, ignoreCursor: System.Boolean, coopMesh: Assets.Scripts.Simulation.Behaviors.CoopPlacementMesh, coopMeshYours: Assets.Scripts.Simulation.Behaviors.CoopPlacementMesh, OnTowerOwnerReassigned: Assets.Scripts.Simulation.Input.InputManager.OnTowerOwnerReassignedDelegate, supportBuffs: System.Collections.Generic.List<Assets.Scripts.Unity.Bridge.BuffQuery>, **kwargs):
        super().__init__(self, **kwargs)
		self.id = id
		self.validCoopAreas = validCoopAreas
		self.xp = xp
		self.canEarnXP = canEarnXP
		self.cursorLocation = cursorLocation
		self.cursorActive = cursorActive
		self.ignoreCursor = ignoreCursor
		self.coopMesh = coopMesh
		self.coopMeshYours = coopMeshYours
		self.OnTowerOwnerReassigned = OnTowerOwnerReassigned
		self.supportBuffs = supportBuffs


class PowerDiscount:

    offsets = {'id': 16, 'charges': 32, 'multiplier': 36, 'subtraction': 40}    
    def __init__(self, id: System.String, charges: System.Int32, multiplier: System.Single, subtraction: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.id = id
		self.charges = charges
		self.multiplier = multiplier
		self.subtraction = subtraction


class PowerInventory:

    offsets = {'totalPowerCount': 16, 'totalPowerMax': 20, 'powerCounts': 24, 'powerMaxes': 32, 'powerDisplayOrder': 40, 'freePowers': 48, 'powerDiscounts': 56}    
    def __init__(self, totalPowerCount: System.Int32, totalPowerMax: System.Int32, powerCounts: System.Collections.Generic.Dictionary<System.String,System.Int32>, powerMaxes: System.Collections.Generic.Dictionary<System.String,System.Int32>, powerDisplayOrder: System.Collections.Generic.List<System.String>, freePowers: System.Collections.Generic.Dictionary<System.String,System.Int32>, powerDiscounts: System.Collections.Generic.List<Assets.Scripts.Simulation.Input.PowerDiscount>, **kwargs):
        super().__init__(self, **kwargs)
		self.totalPowerCount = totalPowerCount
		self.totalPowerMax = totalPowerMax
		self.powerCounts = powerCounts
		self.powerMaxes = powerMaxes
		self.powerDisplayOrder = powerDisplayOrder
		self.freePowers = freePowers
		self.powerDiscounts = powerDiscounts


class TowerDiscount:

    offsets = {'id': 16, 'charges': 32, 'multiplier': 36, 'subtraction': 40}    
    def __init__(self, id: System.String, charges: System.Int32, multiplier: System.Single, subtraction: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.id = id
		self.charges = charges
		self.multiplier = multiplier
		self.subtraction = subtraction


class TowerInventory:

    offsets = {'totalTowerCount': 16, 'totalTowerMax': 20, 'towerCounts': 24, 'towerMaxes': 32, 'towerDisplayOrder': 56, 'freeTowers': 64, 'towerDiscounts': 72}    
    def __init__(self, totalTowerCount: System.Int32, totalTowerMax: System.Int32, towerCounts: System.Collections.Generic.Dictionary<System.String,System.Int32>, towerMaxes: System.Collections.Generic.Dictionary<System.String,System.Int32>, towerDisplayOrder: System.Collections.Generic.List<System.String>, freeTowers: System.Collections.Generic.Dictionary<System.String,System.Int32>, towerDiscounts: System.Collections.Generic.List<Assets.Scripts.Simulation.Input.TowerDiscount>, **kwargs):
        super().__init__(self, **kwargs)
		self.totalTowerCount = totalTowerCount
		self.totalTowerMax = totalTowerMax
		self.towerCounts = towerCounts
		self.towerMaxes = towerMaxes
		self.towerDisplayOrder = towerDisplayOrder
		self.freeTowers = freeTowers
		self.towerDiscounts = towerDiscounts


class ChangeEmitProjectileAction:

    offsets = {'changeEmitProjectileActionModel': 104}    
    def __init__(self, changeEmitProjectileActionModel: Assets.Scripts.Models.Map.Actions.ChangeEmitProjectileActionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.changeEmitProjectileActionModel = changeEmitProjectileActionModel


class ChangeSimTimeElapsedTriggerAction:

    offsets = {'changeSimTimeElapsedTriggerActionModel': 104}    
    def __init__(self, changeSimTimeElapsedTriggerActionModel: Assets.Scripts.Models.Map.Actions.ChangeSimTimeElapsedTriggerActionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.changeSimTimeElapsedTriggerActionModel = changeSimTimeElapsedTriggerActionModel


class CreateAreaAction:

    offsets = {'areaName': 104}    
    def __init__(self, areaName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.areaName = areaName


class CreateTowerAction:

    offsets = {'createTowerActionModel': 104, 'simBehavior': 112}    
    def __init__(self, createTowerActionModel: Assets.Scripts.Models.Map.Actions.CreateTowerActionModel, simBehavior: Assets.Scripts.Simulation.SimulationBehaviors.CreateTowerActionSimBehavior, **kwargs):
        super().__init__(self, **kwargs)
		self.createTowerActionModel = createTowerActionModel
		self.simBehavior = simBehavior


class DestroyAreaAction:

    offsets = {'areaName': 104}    
    def __init__(self, areaName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.areaName = areaName


class EmitProjectileAction:

    offsets = {'emitProjectileActionModel': 104, 'emission': 112, 'projectileModel': 120, 'emitProjectileAt': 128}    
    def __init__(self, emitProjectileActionModel: Assets.Scripts.Models.Map.Actions.EmitProjectileActionModel, emission: Assets.Scripts.Simulation.Towers.Emissions.Emission, projectileModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, emitProjectileAt: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.emitProjectileActionModel = emitProjectileActionModel
		self.emission = emission
		self.projectileModel = projectileModel
		self.emitProjectileAt = emitProjectileAt


class MapAction:

    offsets = {'actionModel': 88, 'saveData': 96}    
    def __init__(self, actionModel: Assets.Scripts.Models.Map.Actions.MapActionModel, saveData: Assets.Scripts.Models.Profile.MapEventActionSaveData, **kwargs):
        super().__init__(self, **kwargs)
		self.actionModel = actionModel
		self.saveData = saveData


class MapEventActiveAction:

    offsets = {'mapEventActiveActionModel': 104}    
    def __init__(self, mapEventActiveActionModel: Assets.Scripts.Models.Map.Actions.MapEventActiveActionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.mapEventActiveActionModel = mapEventActiveActionModel


class MovingPlatformAction:

    offsets = {'mpModel': 104, 'processMovement': 112, 'triggerCount': 128, 'playableGraph': 136, 'playableClip': 152, 'currentTime': 168, 'destinationTime': 176, 'needToUpdateThrowCache': 184}    
    def __init__(self, mpModel: Assets.Scripts.Models.Map.Actions.MovingPlatformActionModel, processMovement: System.Boolean, triggerCount: System.Int32, playableGraph: UnityEngine.Playables.PlayableGraph, playableClip: UnityEngine.Animations.AnimationClipPlayable, currentTime: System.Double, destinationTime: System.Double, needToUpdateThrowCache: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.mpModel = mpModel
		self.processMovement = processMovement
		self.triggerCount = triggerCount
		self.playableGraph = playableGraph
		self.playableClip = playableClip
		self.currentTime = currentTime
		self.destinationTime = destinationTime
		self.needToUpdateThrowCache = needToUpdateThrowCache


class PathActiveAction:

    offsets = {'setActiveToo': 104, 'pathName': 112}    
    def __init__(self, setActiveToo: System.Boolean, pathName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.setActiveToo = setActiveToo
		self.pathName = pathName


class RemovableActiveAction:

    offsets = {'setActiveToo': 104, 'removeableName': 112}    
    def __init__(self, setActiveToo: System.Boolean, removeableName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.setActiveToo = setActiveToo
		self.removeableName = removeableName


class RotateAreaAction:

    offsets = {'raaModel': 104, 'rotationPerFrame': 112, 'durationFrames': 116, 'areaToRotate': 120, 'currRotation': 128, 'spinList': 136, 'processAddedd': 144, 'loopIsPlaying': 145}    
    def __init__(self, raaModel: Assets.Scripts.Models.Map.Actions.RotateAreaActionModel, rotationPerFrame: System.Single, durationFrames: System.Int32, areaToRotate: Assets.Scripts.Simulation.Track.Area, currRotation: System.Single, spinList: System.Collections.Generic.List<System.Int32>, processAddedd: System.Boolean, loopIsPlaying: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.raaModel = raaModel
		self.rotationPerFrame = rotationPerFrame
		self.durationFrames = durationFrames
		self.areaToRotate = areaToRotate
		self.currRotation = currRotation
		self.spinList = spinList
		self.processAddedd = processAddedd
		self.loopIsPlaying = loopIsPlaying


class SellRemoveableAction:

    offsets = {'removeableName': 104}    
    def __init__(self, removeableName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.removeableName = removeableName


class MapGizmo:

    offsets = {'gizmoModel': 160, 'DisplayChangedAction': 168, 'behaviors': 176}    
    def __init__(self, gizmoModel: Assets.Scripts.Models.Map.Gizmos.MapGizmoModel, DisplayChangedAction: System.Action, behaviors: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Map.Gizmos.MapGizmoBehavior>, **kwargs):
        super().__init__(self, **kwargs)
		self.gizmoModel = gizmoModel
		self.DisplayChangedAction = DisplayChangedAction
		self.behaviors = behaviors


class MapGizmoBehavior:

    offsets = {'gizmo': 88}    
    def __init__(self, gizmo: Assets.Scripts.Simulation.Map.Gizmos.MapGizmo, **kwargs):
        super().__init__(self, **kwargs)
		self.gizmo = gizmo


class WorkshopPowerCore:

    offsets = {'modl': 96, 'timesActivated': 104, 'isActive': 108, 'durationFrames': 112, 'activatedUntilFrame': 116}    
    def __init__(self, modl: Assets.Scripts.Models.Map.Gizmos.WorkshopPowerCoreModel, timesActivated: System.Int32, isActive: System.Boolean, durationFrames: System.Int32, activatedUntilFrame: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.modl = modl
		self.timesActivated = timesActivated
		self.isActive = isActive
		self.durationFrames = durationFrames
		self.activatedUntilFrame = activatedUntilFrame


class WorkshopReverseMotor:

    offsets = {'modl': 96, 'timesActivated': 104, 'isActive': 108, 'durationFrames': 112, 'activatedUntilFrame': 116, 'mapBloonSpeedBefore': 120}    
    def __init__(self, modl: Assets.Scripts.Models.Map.Gizmos.WorkshopReverseMotorModel, timesActivated: System.Int32, isActive: System.Boolean, durationFrames: System.Int32, activatedUntilFrame: System.Int32, mapBloonSpeedBefore: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.modl = modl
		self.timesActivated = timesActivated
		self.isActive = isActive
		self.durationFrames = durationFrames
		self.activatedUntilFrame = activatedUntilFrame
		self.mapBloonSpeedBefore = mapBloonSpeedBefore


class AdoraSunGodDarkMapTrigger:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AfterRoundTrigger:

    offsets = {'modl': 128}    
    def __init__(self, modl: Assets.Scripts.Models.Map.Triggers.AfterRoundTriggerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.modl = modl


class InteractableClickSequenceTrigger:

    offsets = {'icsModel': 128}    
    def __init__(self, icsModel: Assets.Scripts.Models.Map.Triggers.InteractableClickSequenceTriggerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.icsModel = icsModel


class InteractableClickTrigger:

    offsets = {'icsModel': 128}    
    def __init__(self, icsModel: Assets.Scripts.Models.Map.Triggers.InteractableClickTriggerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.icsModel = icsModel


class MapEvent:

    offsets = {'triggers': 88, 'actions': 96, 'mapEventModel': 104, 'triggerCount': 112, 'isActive': 116}    
    def __init__(self, triggers: System.Collections.Generic.List<Assets.Scripts.Simulation.Map.Triggers.MapTrigger>, actions: System.Collections.Generic.List<Assets.Scripts.Simulation.Map.Actions.MapAction>, mapEventModel: Assets.Scripts.Models.Map.Triggers.MapEventModel, triggerCount: System.Int32, isActive: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.triggers = triggers
		self.actions = actions
		self.mapEventModel = mapEventModel
		self.triggerCount = triggerCount
		self.isActive = isActive


class MapTrigger:

    offsets = {'triggerModel': 88, 'Triggered': 96, 'hasTriggered': 104, 'triggerCount': 108, 'saveData': 112, 'SpecialCheckEvent': 120}    
    def __init__(self, triggerModel: Assets.Scripts.Models.Map.Triggers.MapTriggerModel, Triggered: System.Action, hasTriggered: System.Boolean, triggerCount: System.Int32, saveData: Assets.Scripts.Models.Profile.MapEventTriggerSaveData, SpecialCheckEvent: System.Action, **kwargs):
        super().__init__(self, **kwargs)
		self.triggerModel = triggerModel
		self.Triggered = Triggered
		self.hasTriggered = hasTriggered
		self.triggerCount = triggerCount
		self.saveData = saveData
		self.SpecialCheckEvent = SpecialCheckEvent


class OnProjectileHitTrigger:

    offsets = {'onProjectileHitTriggerModel': 128, 'hitCount': 136, 'simBehavior': 144}    
    def __init__(self, onProjectileHitTriggerModel: Assets.Scripts.Models.Map.Triggers.OnProjectileHitTriggerModel, hitCount: System.Int32, simBehavior: Assets.Scripts.Simulation.SimulationBehaviors.MapItemVsProjectileBehavior, **kwargs):
        super().__init__(self, **kwargs)
		self.onProjectileHitTriggerModel = onProjectileHitTriggerModel
		self.hitCount = hitCount
		self.simBehavior = simBehavior


class PreBloonSpawnTrigger:

    offsets = {'bloonTag': 128}    
    def __init__(self, bloonTag: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonTag = bloonTag


class RemoveableSoldTrigger:

    offsets = {'removableName': 128}    
    def __init__(self, removableName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.removableName = removableName


class ReverseModeTrigger:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SimTimeElapsedTrigger:

    offsets = {'simTimeElapsedTriggerModel': 128, 'startedCountingAt': 136, 'timeFrames': 140}    
    def __init__(self, simTimeElapsedTriggerModel: Assets.Scripts.Models.Map.Triggers.SimTimeElapsedTriggerModel, startedCountingAt: System.Int32, timeFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.simTimeElapsedTriggerModel = simTimeElapsedTriggerModel
		self.startedCountingAt = startedCountingAt
		self.timeFrames = timeFrames


class StartMapTrigger:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class StartRoundTrigger:

    offsets = {'modl': 128}    
    def __init__(self, modl: Assets.Scripts.Models.Map.Triggers.StartRoundTriggerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.modl = modl


class TowerInAreaTrigger:

    offsets = {'towerInAreaTriggerModel': 128}    
    def __init__(self, towerInAreaTriggerModel: Assets.Scripts.Models.Map.Triggers.TowerInAreaTriggerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.towerInAreaTriggerModel = towerInAreaTriggerModel


class BehaviorMutator:
	bloonMutators: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.BehaviorMutator>
    offsets = {'bloonMutators': 0, 'id': 16, 'usesSplitId': 24, 'idMajor': 32, 'idMajorMinor': 40, 'isExclusiveInMutationList': 48, 'priority': 52, 'glueLevel': 56, 'isFreeze': 60, 'dontCopy': 61, 'buffIndicator': 64, 'includesSubTowers': 72, 'saveId': 80, 'limiters': 88, 'resultCache': 96, 'mutated': 104}    
    def __init__(self, bloonMutators: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.BehaviorMutator>, id: System.String, usesSplitId: System.Boolean, idMajor: System.String, idMajorMinor: System.String, isExclusiveInMutationList: System.Boolean, priority: System.Int32, glueLevel: System.Int32, isFreeze: System.Boolean, dontCopy: System.Boolean, buffIndicator: Assets.Scripts.Models.GenericBehaviors.BuffIndicatorModel, includesSubTowers: System.Boolean, saveId: System.String, limiters: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.BehaviorMutator.MutationLimiter>, resultCache: System.Collections.Generic.Dictionary<Assets.Scripts.Models.Model,Assets.Scripts.Models.Model>, mutated: System.Collections.Generic.HashSet<System.Int32>, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonMutators = bloonMutators
		self.id = id
		self.usesSplitId = usesSplitId
		self.idMajor = idMajor
		self.idMajorMinor = idMajorMinor
		self.isExclusiveInMutationList = isExclusiveInMutationList
		self.priority = priority
		self.glueLevel = glueLevel
		self.isFreeze = isFreeze
		self.dontCopy = dontCopy
		self.buffIndicator = buffIndicator
		self.includesSubTowers = includesSubTowers
		self.saveId = saveId
		self.limiters = limiters
		self.resultCache = resultCache
		self.mutated = mutated


class BehaviorMutatorFilter:

    offsets = {'effectScale': 16, 'modifyEffectScale': 20, 'durationScale': 24, 'modifyDurationScale': 28, 'preventMutation': 29}    
    def __init__(self, effectScale: System.Single, modifyEffectScale: System.Boolean, durationScale: System.Single, modifyDurationScale: System.Boolean, preventMutation: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.effectScale = effectScale
		self.modifyEffectScale = modifyEffectScale
		self.durationScale = durationScale
		self.modifyDurationScale = modifyDurationScale
		self.preventMutation = preventMutation


class BehaviorMutatorWithFilters:

    offsets = {'filters': 112}    
    def __init__(self, filters: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.BehaviorMutatorFilter>, **kwargs):
        super().__init__(self, **kwargs)
		self.filters = filters


class CommonBehaviorProxy:

    offsets = {'transform': 144, 'display': 152}    
    def __init__(self, transform: Assets.Scripts.Simulation.Behaviors.TransformBehavior, display: Assets.Scripts.Simulation.Behaviors.DisplayBehavior, **kwargs):
        super().__init__(self, **kwargs)
		self.transform = transform
		self.display = display


class Entity:

    offsets = {'behaviors': 72, 'transformBehaviorCache': 80, 'transformBehaviorParentCache': 88, 'displayBehaviorCache': 96, '<Parent>k__BackingField': 104, 'dependants': 112, 'dependantEntities': 120}    
    def __init__(self, behaviors: Assets.Scripts.Utils.LockList<Assets.Scripts.Simulation.Objects.RootBehavior>, transformBehaviorCache: Assets.Scripts.Simulation.Behaviors.TransformBehavior, transformBehaviorParentCache: Assets.Scripts.Simulation.Behaviors.TransformBehavior, displayBehaviorCache: Assets.Scripts.Simulation.Behaviors.DisplayBehavior, <Parent>k__BackingField: Assets.Scripts.Simulation.Objects.Entity, dependants: Assets.Scripts.Utils.LockList<Assets.Scripts.Simulation.Objects.RootObject>, dependantEntities: Assets.Scripts.Utils.LockList<Assets.Scripts.Simulation.Objects.Entity>, **kwargs):
        super().__init__(self, **kwargs)
		self.behaviors = behaviors
		self.transformBehaviorCache = transformBehaviorCache
		self.transformBehaviorParentCache = transformBehaviorParentCache
		self.displayBehaviorCache = displayBehaviorCache
		self.<Parent>k__BackingField = <Parent>k__BackingField
		self.dependants = dependants
		self.dependantEntities = dependantEntities


class Mutable:

    offsets = {'mutatedModel': 88, 'mutators': 96, 'highestGlueLevel': 104, 'activeMutation': 108, 'rootModel': 112, 'lastRoundTimeElapsed': 120, 'filters': 128, 'mutatedWith': 136}    
    def __init__(self, mutatedModel: Assets.Scripts.Models.Model, mutators: Assets.Scripts.Utils.SortedSizedList<Assets.Scripts.Simulation.Objects.TimedMutator>, highestGlueLevel: System.Int32, activeMutation: System.Boolean, rootModel: Assets.Scripts.Models.Model, lastRoundTimeElapsed: System.Int32, filters: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.BehaviorMutatorFilter>, mutatedWith: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.BehaviorMutator>, **kwargs):
        super().__init__(self, **kwargs)
		self.mutatedModel = mutatedModel
		self.mutators = mutators
		self.highestGlueLevel = highestGlueLevel
		self.activeMutation = activeMutation
		self.rootModel = rootModel
		self.lastRoundTimeElapsed = lastRoundTimeElapsed
		self.filters = filters
		self.mutatedWith = mutatedWith


class RootBehavior:

    offsets = {'entity': 72, 'model': 80}    
    def __init__(self, entity: Assets.Scripts.Simulation.Objects.Entity, model: Assets.Scripts.Models.Model, **kwargs):
        super().__init__(self, **kwargs)
		self.entity = entity
		self.model = model


class RootObject:

    offsets = {'Id': 16, 'Sim': 24, 'isPaused': 32, 'isDestroyed': 33, 'pauseCount': 36, 'isProcessOrderImportant': 40, 'processAdded': 41, 'processInternal': 48, 'onDestroyEvent': 56, 'holdUntilNextProcess': 64}    
    def __init__(self, Id: System.Int32, Sim: Assets.Scripts.Simulation.Simulation, isPaused: System.Boolean, isDestroyed: System.Boolean, pauseCount: System.Int32, isProcessOrderImportant: System.Boolean, processAdded: System.Boolean, processInternal: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Simulation.ProcessDelegate>, onDestroyEvent: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.RootObject.DestroyedEventHandler>, holdUntilNextProcess: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.Id = Id
		self.Sim = Sim
		self.isPaused = isPaused
		self.isDestroyed = isDestroyed
		self.pauseCount = pauseCount
		self.isProcessOrderImportant = isProcessOrderImportant
		self.processAdded = processAdded
		self.processInternal = processInternal
		self.onDestroyEvent = onDestroyEvent
		self.holdUntilNextProcess = holdUntilNextProcess


class RootObject_StaticFields:
	UseLocalIds: System.Int32
    offsets = {'UseLocalIds': 0}    
    def __init__(self, UseLocalIds: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.UseLocalIds = UseLocalIds


class SelectableObject:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TimedBehavior:

    offsets = {'behavior': 16, 'removeAt': 24, 'exclusiveId': 32}    
    def __init__(self, behavior: Assets.Scripts.Simulation.Objects.RootBehavior, removeAt: System.Int32, exclusiveId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.behavior = behavior
		self.removeAt = removeAt
		self.exclusiveId = exclusiveId


class TimedMutator:

    offsets = {'mutator': 16, 'removeAt': 24, 'onlyTimeoutWhenActive': 28, 'useRoundTime': 29, 'includeSubTowers': 30, 'totalDuration': 32}    
    def __init__(self, mutator: Assets.Scripts.Simulation.Objects.BehaviorMutator, removeAt: System.Int32, onlyTimeoutWhenActive: System.Boolean, useRoundTime: System.Boolean, includeSubTowers: System.Boolean, totalDuration: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.mutator = mutator
		self.removeAt = removeAt
		self.onlyTimeoutWhenActive = onlyTimeoutWhenActive
		self.useRoundTime = useRoundTime
		self.includeSubTowers = includeSubTowers
		self.totalDuration = totalDuration


class Bucket<T>:

    offsets = {'centre': 0, 'largestRadius': 0, 'largestCellSpan': 0, 'collidables': 0}    
    def __init__(self, centre: Assets.Scripts.Simulation.SMath.Vector2, largestRadius: System.Single, largestCellSpan: System.Int32, collidables: Assets.Scripts.Utils.SizedList<T>, **kwargs):
        super().__init__(self, **kwargs)
		self.centre = centre
		self.largestRadius = largestRadius
		self.largestCellSpan = largestCellSpan
		self.collidables = collidables


class Collidable:

    offsets = {'radius': 160, 'vsBlockerRadius': 164, 'additionalCollisions': 168}    
    def __init__(self, radius: System.Single, vsBlockerRadius: System.Single, additionalCollisions: Assets.Scripts.Utils.SizedList<Assets.Scripts.Models.Physics.CollisionGroupModel.CollisionGroupData>, **kwargs):
        super().__init__(self, **kwargs)
		self.radius = radius
		self.vsBlockerRadius = vsBlockerRadius
		self.additionalCollisions = additionalCollisions


class CollisionChecker:

    offsets = {'grids': 88, 'projectiles': 96}    
    def __init__(self, grids: System.Collections.Generic.Dictionary<System.Type,System.Object>, projectiles: Assets.Scripts.Utils.LockList<Assets.Scripts.Simulation.Towers.Projectiles.Projectile>, **kwargs):
        super().__init__(self, **kwargs)
		self.grids = grids
		self.projectiles = projectiles


class CollisionGrid<T>:

    offsets = {'bucketsW': 0, 'bucketsH': 0, 'bucketCount': 0, 'source': 0, 'orderedNeighborOffsetsLength': 0, 'isEmpty': 0, 'currentCollisionState': 0}    
    def __init__(self, bucketsW: System.Int32, bucketsH: System.Int32, bucketCount: System.Int32, source: Assets.Scripts.Utils.LockList<T>, orderedNeighborOffsetsLength: System.Int32, isEmpty: System.Boolean, currentCollisionState: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.bucketsW = bucketsW
		self.bucketsH = bucketsH
		self.bucketCount = bucketCount
		self.source = source
		self.orderedNeighborOffsetsLength = orderedNeighborOffsetsLength
		self.isEmpty = isEmpty
		self.currentCollisionState = currentCollisionState


class CamoTrap:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CashDrop:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DamageAll:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DartTime:

    offsets = {'dartTimeModel': 24, 'endFrame': 32}    
    def __init__(self, dartTimeModel: Assets.Scripts.Models.Powers.DartTimeModel, endFrame: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.dartTimeModel = dartTimeModel
		self.endFrame = endFrame


class GlueTrap:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class InstaTower:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MoabMine:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MonkeyBoost:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Power:

    offsets = {'sim': 16}    
    def __init__(self, sim: Assets.Scripts.Simulation.Simulation, **kwargs):
        super().__init__(self, **kwargs)
		self.sim = sim


class PowerManager:

    offsets = {'OnActivate': 88, 'powerPlaceHistory': 96}    
    def __init__(self, OnActivate: Assets.Scripts.Simulation.Powers.PowerManager.PowerActivateDef, powerPlaceHistory: System.Collections.Generic.List<Assets.Scripts.Models.Profile.PowerSaveDataModel>, **kwargs):
        super().__init__(self, **kwargs)
		self.OnActivate = OnActivate
		self.powerPlaceHistory = powerPlaceHistory


class RoadSpikes:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Thrive:

    offsets = {'thriveModel': 24, 'mutator': 32, 'roundsLeft': 40, 'increaseBloonWorthSimBehavior': 48}    
    def __init__(self, thriveModel: Assets.Scripts.Models.Powers.ThriveModel, mutator: Assets.Scripts.Simulation.Powers.Thrive.ThriveMutator, roundsLeft: System.Int32, increaseBloonWorthSimBehavior: Assets.Scripts.Simulation.SimulationBehaviors.IncreaseBloonWorthSimBehavior, **kwargs):
        super().__init__(self, **kwargs)
		self.thriveModel = thriveModel
		self.mutator = mutator
		self.roundsLeft = roundsLeft
		self.increaseBloonWorthSimBehavior = increaseBloonWorthSimBehavior


class TrackPower:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CreateEffectOnPower:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CreateSoundOnPower:

    offsets = {'createSoundOnPowerModel': 24}    
    def __init__(self, createSoundOnPowerModel: Assets.Scripts.Models.Powers.Effects.CreateSoundOnPowerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.createSoundOnPowerModel = createSoundOnPowerModel


class AABB:

    offsets = {'minBounds': 16, 'maxBounds': 24, 'center': 32, 'width': 40, 'height': 44}    
    def __init__(self, minBounds: Assets.Scripts.Simulation.SMath.Vector2, maxBounds: Assets.Scripts.Simulation.SMath.Vector2, center: Assets.Scripts.Simulation.SMath.Vector2, width: System.Single, height: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.minBounds = minBounds
		self.maxBounds = maxBounds
		self.center = center
		self.width = width
		self.height = height


class Circle:

    offsets = {'position': 16, 'radius': 28}    
    def __init__(self, position: Assets.Scripts.Simulation.SMath.Vector3, radius: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.position = position
		self.radius = radius


class Color:

    offsets = {'r': 16, 'g': 20, 'b': 24, 'a': 28}    
    def __init__(self, r: System.Single, g: System.Single, b: System.Single, a: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.r = r
		self.g = g
		self.b = b
		self.a = a


class ColorDefaults:
	black: Assets.Scripts.Simulation.SMath.Color
    offsets = {'black': 0, 'blue': 16, 'clear': 32, 'cyan': 48, 'green': 64, 'grey': 80, 'magenta': 96, 'red': 112, 'white': 128, 'yellow': 144, 'pink': 160, 'purple': 176, 'ceramic': 192}    
    def __init__(self, black: Assets.Scripts.Simulation.SMath.Color, blue: Assets.Scripts.Simulation.SMath.Color, clear: Assets.Scripts.Simulation.SMath.Color, cyan: Assets.Scripts.Simulation.SMath.Color, green: Assets.Scripts.Simulation.SMath.Color, grey: Assets.Scripts.Simulation.SMath.Color, magenta: Assets.Scripts.Simulation.SMath.Color, red: Assets.Scripts.Simulation.SMath.Color, white: Assets.Scripts.Simulation.SMath.Color, yellow: Assets.Scripts.Simulation.SMath.Color, pink: Assets.Scripts.Simulation.SMath.Color, purple: Assets.Scripts.Simulation.SMath.Color, ceramic: Assets.Scripts.Simulation.SMath.Color, **kwargs):
        super().__init__(self, **kwargs)
		self.black = black
		self.blue = blue
		self.clear = clear
		self.cyan = cyan
		self.green = green
		self.grey = grey
		self.magenta = magenta
		self.red = red
		self.white = white
		self.yellow = yellow
		self.pink = pink
		self.purple = purple
		self.ceramic = ceramic


class CubicSpline:

    offsets = {'_lastIndex': 48}    
    def __init__(self, _lastIndex: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self._lastIndex = _lastIndex


class FloatBoxed:

    offsets = {'value': 16}    
    def __init__(self, value: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.value = value


class Math:
	rotationCache: System.Collections.Generic.List<Assets.Scripts.Simulation.SMath.Vector3Boxed>
    offsets = {'rotationCache': 0}    
    def __init__(self, rotationCache: System.Collections.Generic.List<Assets.Scripts.Simulation.SMath.Vector3Boxed>, **kwargs):
        super().__init__(self, **kwargs)
		self.rotationCache = rotationCache


class Polygon:

    offsets = {'points': 16, 'pathImplPoints': 24, 'minPoint': 32, 'maxPoint': 40}    
    def __init__(self, points: System.Collections.Generic.List<Assets.Scripts.Simulation.SMath.Vector2>, pathImplPoints: System.Collections.Generic.List<Assets.Scripts.Simulation.SMath.Vector2>, minPoint: Assets.Scripts.Simulation.SMath.Vector2, maxPoint: Assets.Scripts.Simulation.SMath.Vector2, **kwargs):
        super().__init__(self, **kwargs)
		self.points = points
		self.pathImplPoints = pathImplPoints
		self.minPoint = minPoint
		self.maxPoint = maxPoint


class Quaternion:
	identity: Assets.Scripts.Simulation.SMath.Quaternion
    offsets = {'identity': 0, 'x': 16, 'y': 20, 'z': 24, 'w': 28}    
    def __init__(self, identity: Assets.Scripts.Simulation.SMath.Quaternion, x: System.Single, y: System.Single, z: System.Single, w: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.identity = identity
		self.x = x
		self.y = y
		self.z = z
		self.w = w


class TriDiagonalMatrixF:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Vector2:
	zero: Assets.Scripts.Simulation.SMath.Vector2
    offsets = {'zero': 0, 'forward': 8, 'x': 16, 'y': 20}    
    def __init__(self, zero: Assets.Scripts.Simulation.SMath.Vector2, forward: Assets.Scripts.Simulation.SMath.Vector2, x: System.Single, y: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.zero = zero
		self.forward = forward
		self.x = x
		self.y = y


class Vector3:
	up: Assets.Scripts.Simulation.SMath.Vector3
    offsets = {'up': 0, 'forward': 12, 'back': 24, 'left': 36, 'right': 48, 'zero': 60, 'one': 72, 'invalid': 84, 'cameraAdjustmentCache': 96, 'x': 16, 'y': 20, 'z': 24}    
    def __init__(self, up: Assets.Scripts.Simulation.SMath.Vector3, forward: Assets.Scripts.Simulation.SMath.Vector3, back: Assets.Scripts.Simulation.SMath.Vector3, left: Assets.Scripts.Simulation.SMath.Vector3, right: Assets.Scripts.Simulation.SMath.Vector3, zero: Assets.Scripts.Simulation.SMath.Vector3, one: Assets.Scripts.Simulation.SMath.Vector3, invalid: Assets.Scripts.Simulation.SMath.Vector3, cameraAdjustmentCache: System.Single, x: System.Single, y: System.Single, z: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.up = up
		self.forward = forward
		self.back = back
		self.left = left
		self.right = right
		self.zero = zero
		self.one = one
		self.invalid = invalid
		self.cameraAdjustmentCache = cameraAdjustmentCache
		self.x = x
		self.y = y
		self.z = z


class Vector3Boxed:
	zero: Assets.Scripts.Simulation.SMath.Vector3Boxed
    offsets = {'zero': 0, 'foward': 8, 'data': 16}    
    def __init__(self, zero: Assets.Scripts.Simulation.SMath.Vector3Boxed, foward: Assets.Scripts.Simulation.SMath.Vector3Boxed, data: Assets.Scripts.Simulation.SMath.Vector3, **kwargs):
        super().__init__(self, **kwargs)
		self.zero = zero
		self.foward = foward
		self.data = data


class BonusCashPerRound:

    offsets = {'bonusCashPerRoundModel': 88, 'cashBefore': 96}    
    def __init__(self, bonusCashPerRoundModel: Assets.Scripts.Models.SimulationBehaviors.BonusCashPerRoundModel, cashBefore: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.bonusCashPerRoundModel = bonusCashPerRoundModel
		self.cashBefore = cashBefore


class CandyEventManager:

    offsets = {'eventModel': 88, 'candySpawnTimes': 96, 'currCandyCount': 104, 'candyUIDestination': 108, 'ghostSpawnPathIndex': 120, 'exitPathsForRoundSpawnPaths': 128, 'ghostSpawnTimes': 136, 'ghostsSpawned': 144}    
    def __init__(self, eventModel: Assets.Scripts.Models.Events.CandyEvent.CandyEventManagerModel, candySpawnTimes: System.Collections.Generic.List<System.Int32>, currCandyCount: System.Int32, candyUIDestination: Assets.Scripts.Simulation.SMath.Vector3, ghostSpawnPathIndex: System.Int32, exitPathsForRoundSpawnPaths: System.Collections.Generic.List<Assets.Scripts.Simulation.Track.Path>, ghostSpawnTimes: System.Collections.Generic.List<System.Int32>, ghostsSpawned: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.eventModel = eventModel
		self.candySpawnTimes = candySpawnTimes
		self.currCandyCount = currCandyCount
		self.candyUIDestination = candyUIDestination
		self.ghostSpawnPathIndex = ghostSpawnPathIndex
		self.exitPathsForRoundSpawnPaths = exitPathsForRoundSpawnPaths
		self.ghostSpawnTimes = ghostSpawnTimes
		self.ghostsSpawned = ghostsSpawned


class ComeOnEverybody:

    offsets = {'comeOnEverybodyModel': 88}    
    def __init__(self, comeOnEverybodyModel: Assets.Scripts.Models.SimulationBehaviors.ComeOnEverybodyModel, **kwargs):
        super().__init__(self, **kwargs)
		self.comeOnEverybodyModel = comeOnEverybodyModel


class CreateTowerActionSimBehavior:

    offsets = {'createTowerActionSimBehaviorModel': 88, 'towerModel': 96, 'isReleased': 104, 'possibleOffsets': 112, 'inRangeUnblocked': 120, 'inRangeBlocked': 128, 'towerModelBlocks': 136, 'towerModelDoesNotBlock': 144, 'destination': 152, 'placeholderTower': 168, 'releaseAt': 176, 'ownerOfReleasedTower': 180}    
    def __init__(self, createTowerActionSimBehaviorModel: Assets.Scripts.Models.SimulationBehaviors.CreateTowerActionSimBehaviorModel, towerModel: Assets.Scripts.Models.Towers.TowerModel, isReleased: System.Boolean, possibleOffsets: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.SMath.Vector3>, inRangeUnblocked: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.SMath.Vector3>, inRangeBlocked: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.SMath.Vector3>, towerModelBlocks: Assets.Scripts.Models.Towers.TowerModel, towerModelDoesNotBlock: Assets.Scripts.Models.Towers.TowerModel, destination: Assets.Scripts.Simulation.SMath.Vector3, placeholderTower: Assets.Scripts.Simulation.Towers.Tower, releaseAt: System.Int32, ownerOfReleasedTower: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.createTowerActionSimBehaviorModel = createTowerActionSimBehaviorModel
		self.towerModel = towerModel
		self.isReleased = isReleased
		self.possibleOffsets = possibleOffsets
		self.inRangeUnblocked = inRangeUnblocked
		self.inRangeBlocked = inRangeBlocked
		self.towerModelBlocks = towerModelBlocks
		self.towerModelDoesNotBlock = towerModelDoesNotBlock
		self.destination = destination
		self.placeholderTower = placeholderTower
		self.releaseAt = releaseAt
		self.ownerOfReleasedTower = ownerOfReleasedTower


class CrossTheStreamsSimBehavior:

    offsets = {'crossTheStreamsSimBehaviorModel': 88, 'timeOfLastExplosion': 96, 'emission': 104, 'emittedForPairs': 112}    
    def __init__(self, crossTheStreamsSimBehaviorModel: Assets.Scripts.Models.SimulationBehaviors.CrossTheStreamsSimBehaviorModel, timeOfLastExplosion: System.Int32, emission: Assets.Scripts.Simulation.Towers.Emissions.SingleEmission, emittedForPairs: Assets.Scripts.Utils.SizedList<System.Collections.Generic.KeyValuePair<Assets.Scripts.Simulation.Towers.Tower,Assets.Scripts.Simulation.Towers.Tower>>, **kwargs):
        super().__init__(self, **kwargs)
		self.crossTheStreamsSimBehaviorModel = crossTheStreamsSimBehaviorModel
		self.timeOfLastExplosion = timeOfLastExplosion
		self.emission = emission
		self.emittedForPairs = emittedForPairs


class EmergencyUnlockSimBehavior:

    offsets = {'emergencyUnlockSimBehaviorModel': 88, 'activatedAtForPlayer': 96}    
    def __init__(self, emergencyUnlockSimBehaviorModel: Assets.Scripts.Models.SimulationBehaviors.EmergencyUnlockSimBehaviorModel, activatedAtForPlayer: System.Collections.Generic.Dictionary<System.Int32,System.Int32>, **kwargs):
        super().__init__(self, **kwargs)
		self.emergencyUnlockSimBehaviorModel = emergencyUnlockSimBehaviorModel
		self.activatedAtForPlayer = activatedAtForPlayer


class FreePower:

    offsets = {'chargesRemaining': 88, 'freePowerModel': 96}    
    def __init__(self, chargesRemaining: System.Int32, freePowerModel: Assets.Scripts.Models.SimulationBehaviors.FreePowerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.chargesRemaining = chargesRemaining
		self.freePowerModel = freePowerModel


class FreeTower:

    offsets = {'chargesRemaining': 88, 'freeTowerModel': 96}    
    def __init__(self, chargesRemaining: System.Int32, freeTowerModel: Assets.Scripts.Models.SimulationBehaviors.FreeTowerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.chargesRemaining = chargesRemaining
		self.freeTowerModel = freeTowerModel


class HeroXPBonus:

    offsets = {'xpBonus': 88, 'heroXPBonusModel': 96}    
    def __init__(self, xpBonus: System.Single, heroXPBonusModel: Assets.Scripts.Models.SimulationBehaviors.HeroXPBonusModel, **kwargs):
        super().__init__(self, **kwargs)
		self.xpBonus = xpBonus
		self.heroXPBonusModel = heroXPBonusModel


class ImfLoanCollection:

    offsets = {'collected': 88, 'imfLoanCollectionModel': 96, 'towerId': 104, 'inputId': 108}    
    def __init__(self, collected: System.Single, imfLoanCollectionModel: Assets.Scripts.Models.SimulationBehaviors.ImfLoanCollectionModel, towerId: System.Int32, inputId: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.collected = collected
		self.imfLoanCollectionModel = imfLoanCollectionModel
		self.towerId = towerId
		self.inputId = inputId


class IncreaseBloonWorthSimBehavior:

    offsets = {'increaseBloonWorthSimBehaviorModel': 88}    
    def __init__(self, increaseBloonWorthSimBehaviorModel: Assets.Scripts.Models.SimulationBehaviors.IncreaseBloonWorthSimBehaviorModel, **kwargs):
        super().__init__(self, **kwargs)
		self.increaseBloonWorthSimBehaviorModel = increaseBloonWorthSimBehaviorModel


class MapItemVsProjectileBehavior:

    offsets = {'mapItemVsProjectileBehaviorModel': 88, 'OnProjectileEnter': 96, 'OnProjectileExit': 104, 'collision': 112}    
    def __init__(self, mapItemVsProjectileBehaviorModel: Assets.Scripts.Models.SimulationBehaviors.MapItemVsProjectileBehaviorModel, OnProjectileEnter: Assets.Scripts.Simulation.SimulationBehaviors.MapItemVsProjectileBehavior.OnProjectileEnterDelegate, OnProjectileExit: Assets.Scripts.Simulation.SimulationBehaviors.MapItemVsProjectileBehavior.OnProjectileExitDelegate, collision: Assets.Scripts.Simulation.Objects.Entity, **kwargs):
        super().__init__(self, **kwargs)
		self.mapItemVsProjectileBehaviorModel = mapItemVsProjectileBehaviorModel
		self.OnProjectileEnter = OnProjectileEnter
		self.OnProjectileExit = OnProjectileExit
		self.collision = collision


class NecroData:

    offsets = {'tower': 16, 'emission': 24, 'rbeDecayByRoundsRemaining': 32}    
    def __init__(self, tower: Assets.Scripts.Simulation.Towers.Tower, emission: Assets.Scripts.Simulation.Towers.Emissions.NecromancerEmission, rbeDecayByRoundsRemaining: System.Collections.Generic.List<System.Int32>, **kwargs):
        super().__init__(self, **kwargs)
		self.tower = tower
		self.emission = emission
		self.rbeDecayByRoundsRemaining = rbeDecayByRoundsRemaining


class PreGamePrep:

    offsets = {'prepModel': 88}    
    def __init__(self, prepModel: Assets.Scripts.Models.SimulationBehaviors.PreGamePrepModel, **kwargs):
        super().__init__(self, **kwargs)
		self.prepModel = prepModel


class SetMaxHealthOfBloonBehavior:

    offsets = {'setMaxHealthOfBloonBehaviorModel': 88}    
    def __init__(self, setMaxHealthOfBloonBehaviorModel: Assets.Scripts.Models.SimulationBehaviors.SetMaxHealthOfBloonBehaviorModel, **kwargs):
        super().__init__(self, **kwargs)
		self.setMaxHealthOfBloonBehaviorModel = setMaxHealthOfBloonBehaviorModel


class SharedTowerGrid:

    offsets = {'pathSegmentCounts': 88, 'OnGridChanged': 96}    
    def __init__(self, pathSegmentCounts: System.Collections.Generic.Dictionary<Assets.Scripts.Simulation.Track.PathSegment,Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Behaviors.Attack.PathSegmentInRange>>, OnGridChanged: Assets.Scripts.Simulation.SimulationBehaviors.SharedTowerGrid.GridChanged, **kwargs):
        super().__init__(self, **kwargs)
		self.pathSegmentCounts = pathSegmentCounts
		self.OnGridChanged = OnGridChanged


class ShieldPerRound:

    offsets = {'shieldModel': 88}    
    def __init__(self, shieldModel: Assets.Scripts.Models.SimulationBehaviors.ShieldPerRoundModel, **kwargs):
        super().__init__(self, **kwargs)
		self.shieldModel = shieldModel


class SimNecromancerGraveyardManager:

    offsets = {'simNecromancerGraveyardManagerModel': 88, 'necroTowers': 96, 'towerNecroTier5': 104, 'bloonIdLastChecked': 112, 'bloonIdLayerId': 116}    
    def __init__(self, simNecromancerGraveyardManagerModel: Assets.Scripts.Models.SimulationBehaviors.SimNecromancerGraveyardManagerModel, necroTowers: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Simulation.SimulationBehaviors.NecroData>, towerNecroTier5: Assets.Scripts.Simulation.Towers.Tower, bloonIdLastChecked: System.Int32, bloonIdLayerId: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.simNecromancerGraveyardManagerModel = simNecromancerGraveyardManagerModel
		self.necroTowers = necroTowers
		self.towerNecroTier5 = towerNecroTier5
		self.bloonIdLastChecked = bloonIdLastChecked
		self.bloonIdLayerId = bloonIdLayerId


class SimPowerDiscount:

    offsets = {'chargesRemaining': 88, 'powerDiscountModel': 96}    
    def __init__(self, chargesRemaining: System.Int32, powerDiscountModel: Assets.Scripts.Models.SimulationBehaviors.SimPowerDiscountModel, **kwargs):
        super().__init__(self, **kwargs)
		self.chargesRemaining = chargesRemaining
		self.powerDiscountModel = powerDiscountModel


class SimTowerDiscount:

    offsets = {'chargesRemaining': 88, 'towerDiscountModel': 96}    
    def __init__(self, chargesRemaining: System.Int32, towerDiscountModel: Assets.Scripts.Models.SimulationBehaviors.SimTowerDiscountModel, **kwargs):
        super().__init__(self, **kwargs)
		self.chargesRemaining = chargesRemaining
		self.towerDiscountModel = towerDiscountModel


class SimulationBehavior:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class WingmonkeySimulation:

    offsets = {'wingmonkeySimulationModel': 88, 'wingmonkeys': 96}    
    def __init__(self, wingmonkeySimulationModel: Assets.Scripts.Models.SimulationBehaviors.WingmonkeySimulationModel, wingmonkeys: System.Collections.Generic.List<Assets.Scripts.Simulation.Towers.Behaviors.Attack.Behaviors.WingmonkeyPattern>, **kwargs):
        super().__init__(self, **kwargs)
		self.wingmonkeySimulationModel = wingmonkeySimulationModel
		self.wingmonkeys = wingmonkeys


class BloonTargetProxy:

    offsets = {'bloon': 16, 'segment': 24}    
    def __init__(self, bloon: Assets.Scripts.Simulation.Bloons.Bloon, segment: Assets.Scripts.Simulation.Track.PathSegment, **kwargs):
        super().__init__(self, **kwargs)
		self.bloon = bloon
		self.segment = segment


class IgnoreBlockers:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Target:

    offsets = {'bloon': 16, 'pathSegment': 24, 'position': 32, 'tower': 48, 'bloonTargetOffset': 56, 'lastBloonPosition': 68}    
    def __init__(self, bloon: Assets.Scripts.Simulation.Bloons.Bloon, pathSegment: Assets.Scripts.Simulation.Track.PathSegment, position: Assets.Scripts.Utils.Optional<Assets.Scripts.Simulation.SMath.Vector3>, tower: Assets.Scripts.Simulation.Towers.Tower, bloonTargetOffset: Assets.Scripts.Simulation.SMath.Vector3, lastBloonPosition: Assets.Scripts.Simulation.SMath.Vector3, **kwargs):
        super().__init__(self, **kwargs)
		self.bloon = bloon
		self.pathSegment = pathSegment
		self.position = position
		self.tower = tower
		self.bloonTargetOffset = bloonTargetOffset
		self.lastBloonPosition = lastBloonPosition


class Tower:

    offsets = {'worth': 160, 'damageDealt': 168, 'cashEarned': 176, 'appliedCash': 184, 'createdAt': 188, 'createdAtRoundTime': 192, 'owner': 196, 'parentTowerId': 200, 'ignoreBlockersCheckIfChanged': 204, 'shouldShowCashIconInstead': 205, 'canTargetCamo': 206, 'isBeingRedeployed': 207, 'isSelectionBlocked': 208, 'towerModel': 216, 'targetType': 224, 'modelBehaviors': 240, 'towerBehaviors': 248, 'weaponBehaviorsInDependants': 256, 'attackBehaviorsInDependants': 264, 'towerUpgradeLocks': 272, 'necroBloonsReanimated': 280, 'areaPlacedOn': 288, 'OnAreaChanged': 296, 'createdAreas': 304, 'towerRepositioned': 312, 'lostTargetType': 320, 'idLastSave': 328, 'onUpgraded': 336, 'onUpgradedWithTower': 344, 'onSelectionBlocked': 352, 'namedMonkeyKey': 360, 'namedMonkeyName': 368, 'activeBuffs': 376}    
    def __init__(self, worth: System.Single, damageDealt: System.Int64, cashEarned: System.Int64, appliedCash: System.Single, createdAt: System.Int32, createdAtRoundTime: System.Int32, owner: System.Int32, parentTowerId: System.Int32, ignoreBlockersCheckIfChanged: System.Boolean, shouldShowCashIconInstead: System.Boolean, canTargetCamo: System.Boolean, isBeingRedeployed: System.Boolean, isSelectionBlocked: System.Boolean, towerModel: Assets.Scripts.Models.Towers.TowerModel, targetType: Assets.Scripts.Models.Towers.TargetType, modelBehaviors: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.RootBehavior>, towerBehaviors: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.TowerBehavior>, weaponBehaviorsInDependants: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Weapons.WeaponBehavior>, attackBehaviorsInDependants: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Behaviors.Attack.AttackBehavior>, towerUpgradeLocks: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.TowerUpgradeLock>, necroBloonsReanimated: System.Int64, areaPlacedOn: System.Int32, OnAreaChanged: System.Action<Assets.Scripts.Simulation.Towers.Tower,System.Int32,System.Int32>, createdAreas: System.Collections.Generic.List<Assets.Scripts.Simulation.Track.Area>, towerRepositioned: System.Action<System.Boolean>, lostTargetType: System.String, idLastSave: System.Int32, onUpgraded: Assets.Scripts.Simulation.Towers.Tower.OnUpgradedDelegate, onUpgradedWithTower: Assets.Scripts.Simulation.Towers.Tower.OnUpgradedWithTowerDelegate, onSelectionBlocked: System.Action, namedMonkeyKey: System.String, namedMonkeyName: System.String, activeBuffs: System.Collections.Generic.List<Assets.Scripts.Simulation.Towers.Buffs.BuffQuery>, **kwargs):
        super().__init__(self, **kwargs)
		self.worth = worth
		self.damageDealt = damageDealt
		self.cashEarned = cashEarned
		self.appliedCash = appliedCash
		self.createdAt = createdAt
		self.createdAtRoundTime = createdAtRoundTime
		self.owner = owner
		self.parentTowerId = parentTowerId
		self.ignoreBlockersCheckIfChanged = ignoreBlockersCheckIfChanged
		self.shouldShowCashIconInstead = shouldShowCashIconInstead
		self.canTargetCamo = canTargetCamo
		self.isBeingRedeployed = isBeingRedeployed
		self.isSelectionBlocked = isSelectionBlocked
		self.towerModel = towerModel
		self.targetType = targetType
		self.modelBehaviors = modelBehaviors
		self.towerBehaviors = towerBehaviors
		self.weaponBehaviorsInDependants = weaponBehaviorsInDependants
		self.attackBehaviorsInDependants = attackBehaviorsInDependants
		self.towerUpgradeLocks = towerUpgradeLocks
		self.necroBloonsReanimated = necroBloonsReanimated
		self.areaPlacedOn = areaPlacedOn
		self.OnAreaChanged = OnAreaChanged
		self.createdAreas = createdAreas
		self.towerRepositioned = towerRepositioned
		self.lostTargetType = lostTargetType
		self.idLastSave = idLastSave
		self.onUpgraded = onUpgraded
		self.onUpgradedWithTower = onUpgradedWithTower
		self.onSelectionBlocked = onSelectionBlocked
		self.namedMonkeyKey = namedMonkeyKey
		self.namedMonkeyName = namedMonkeyName
		self.activeBuffs = activeBuffs


class TowerBehavior:

    offsets = {'tower': 88}    
    def __init__(self, tower: Assets.Scripts.Simulation.Towers.Tower, **kwargs):
        super().__init__(self, **kwargs)
		self.tower = tower


class TowerManager:

    offsets = {'OnTowerCreated': 88, 'OnTowerUpgraded': 96, 'OnTowerSold': 104, 'OnTowerDestroyed': 112, 'OnPostTowerDestroyed': 120, 'OnTowerXpUpdated': 128, 'OnTowerSacrificed': 136, 'OnTowerMutated': 144, 'OnTowerAreaChanged': 152, 'towerPlaceHistoryBySet': 160, 'towerTypeMaxPlacedHistory': 168, 'discountStacks': 176, 'discountGroups': 184, 'cashbackGroups': 192, 'cashbackGroupsMax': 200, 'closestTowersList': 208, 'closestTowerDistances': 216}    
    def __init__(self, OnTowerCreated: Assets.Scripts.Simulation.Towers.TowerManager.TowerCreateDef, OnTowerUpgraded: Assets.Scripts.Simulation.Towers.TowerManager.TowerUpgradeDef, OnTowerSold: Assets.Scripts.Simulation.Towers.TowerManager.TowerSellDelegate, OnTowerDestroyed: Assets.Scripts.Simulation.Towers.TowerManager.TowerDestroyedDelegate, OnPostTowerDestroyed: Assets.Scripts.Simulation.Towers.TowerManager.TowerDestroyedDelegate, OnTowerXpUpdated: Assets.Scripts.Simulation.Towers.TowerManager.TowerUpdateDelegate, OnTowerSacrificed: Assets.Scripts.Simulation.Towers.TowerManager.TowerSacrificedDelegate, OnTowerMutated: Assets.Scripts.Simulation.Towers.TowerManager.TowerMutatedDelegate, OnTowerAreaChanged: System.Action<Assets.Scripts.Simulation.Towers.Tower,System.Int32,System.Int32>, towerPlaceHistoryBySet: System.Collections.Generic.Dictionary<System.String,System.Int32>, towerTypeMaxPlacedHistory: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Profile.TowerMaxCountPlacedHistory>, discountStacks: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.List<Assets.Scripts.Simulation.Towers.Behaviors.DiscountZone>>, discountGroups: System.Collections.Generic.Dictionary<System.String,System.Single>, cashbackGroups: System.Collections.Generic.Dictionary<System.String,System.Single>, cashbackGroupsMax: System.Collections.Generic.Dictionary<System.String,System.Single>, closestTowersList: System.Collections.Generic.List<Assets.Scripts.Simulation.Towers.Tower>, closestTowerDistances: System.Collections.Generic.List<System.Single>, **kwargs):
        super().__init__(self, **kwargs)
		self.OnTowerCreated = OnTowerCreated
		self.OnTowerUpgraded = OnTowerUpgraded
		self.OnTowerSold = OnTowerSold
		self.OnTowerDestroyed = OnTowerDestroyed
		self.OnPostTowerDestroyed = OnPostTowerDestroyed
		self.OnTowerXpUpdated = OnTowerXpUpdated
		self.OnTowerSacrificed = OnTowerSacrificed
		self.OnTowerMutated = OnTowerMutated
		self.OnTowerAreaChanged = OnTowerAreaChanged
		self.towerPlaceHistoryBySet = towerPlaceHistoryBySet
		self.towerTypeMaxPlacedHistory = towerTypeMaxPlacedHistory
		self.discountStacks = discountStacks
		self.discountGroups = discountGroups
		self.cashbackGroups = cashbackGroups
		self.cashbackGroupsMax = cashbackGroupsMax
		self.closestTowersList = closestTowersList
		self.closestTowerDistances = closestTowerDistances


class TowerUpgradeLock:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AbilityCooldownScaleSupport:

    offsets = {'abilityCooldownScaleSupportModel': 136}    
    def __init__(self, abilityCooldownScaleSupportModel: Assets.Scripts.Models.Towers.Behaviors.AbilityCooldownScaleSupportModel, **kwargs):
        super().__init__(self, **kwargs)
		self.abilityCooldownScaleSupportModel = abilityCooldownScaleSupportModel


class AcademyTowerMutatorGroup:

    offsets = {'academyTowerMutatorGroupModel': 128}    
    def __init__(self, academyTowerMutatorGroupModel: Assets.Scripts.Models.Towers.Behaviors.AcademyTowerMutatorGroupModel, **kwargs):
        super().__init__(self, **kwargs)
		self.academyTowerMutatorGroupModel = academyTowerMutatorGroupModel


class AcidicMixtureCheck:

    offsets = {'acidicMixtureCheckModel': 96, 'count': 104, 'removed': 108}    
    def __init__(self, acidicMixtureCheckModel: Assets.Scripts.Models.Towers.Behaviors.AcidicMixtureCheckModel, count: System.Int32, removed: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.acidicMixtureCheckModel = acidicMixtureCheckModel
		self.count = count
		self.removed = removed


class ActivateAbilityAfterInterval:

    offsets = {'activateAbilityAfterIntervalModel': 96, 'ability': 104, 'lastActivatedAt': 112}    
    def __init__(self, activateAbilityAfterIntervalModel: Assets.Scripts.Models.Towers.Behaviors.ActivateAbilityAfterIntervalModel, ability: Assets.Scripts.Simulation.Towers.Behaviors.Abilities.Ability, lastActivatedAt: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.activateAbilityAfterIntervalModel = activateAbilityAfterIntervalModel
		self.ability = ability
		self.lastActivatedAt = lastActivatedAt


class ActivateAbilityOnRoundStart:

    offsets = {'activateAbilityOnRoundStartModel': 96, 'ability': 104, 'activating': 112}    
    def __init__(self, activateAbilityOnRoundStartModel: Assets.Scripts.Models.Towers.Behaviors.ActivateAbilityOnRoundStartModel, ability: Assets.Scripts.Simulation.Towers.Behaviors.Abilities.Ability, activating: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.activateAbilityOnRoundStartModel = activateAbilityOnRoundStartModel
		self.ability = ability
		self.activating = activating


class AddBehaviorToBloonInZone:

    offsets = {'addBehaviorToBloonInZoneModel': 96, 'createdBehaviors': 104}    
    def __init__(self, addBehaviorToBloonInZoneModel: Assets.Scripts.Models.Towers.Behaviors.AddBehaviorToBloonInZoneModel, createdBehaviors: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.RootBehavior>, **kwargs):
        super().__init__(self, **kwargs)
		self.addBehaviorToBloonInZoneModel = addBehaviorToBloonInZoneModel
		self.createdBehaviors = createdBehaviors


class AddBehaviorToTowerSupport:

    offsets = {'addBehaviorToTowerSupportModel': 136}    
    def __init__(self, addBehaviorToTowerSupportModel: Assets.Scripts.Models.Towers.Behaviors.AddBehaviorToTowerSupportModel, **kwargs):
        super().__init__(self, **kwargs)
		self.addBehaviorToTowerSupportModel = addBehaviorToTowerSupportModel


class AddMakeshiftArea:

    offsets = {'addMakeshiftAreaModel': 96, 'addedArea': 104}    
    def __init__(self, addMakeshiftAreaModel: Assets.Scripts.Models.Towers.Behaviors.AddMakeshiftAreaModel, addedArea: Assets.Scripts.Simulation.Track.Area, **kwargs):
        super().__init__(self, **kwargs)
		self.addMakeshiftAreaModel = addMakeshiftAreaModel
		self.addedArea = addedArea


class AdoraSunGodTransformation:

    offsets = {'adoraSunGodTransformationModel': 96, 'lastTransformed': 104, 'isTransformed': 108, 'isDark': 109}    
    def __init__(self, adoraSunGodTransformationModel: Assets.Scripts.Models.Towers.Behaviors.AdoraSunGodTransformationModel, lastTransformed: System.Int32, isTransformed: System.Boolean, isDark: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.adoraSunGodTransformationModel = adoraSunGodTransformationModel
		self.lastTransformed = lastTransformed
		self.isTransformed = isTransformed
		self.isDark = isDark


class AdoraTransformSound:

    offsets = {'adoraSunGodTransformationSoundModel': 96}    
    def __init__(self, adoraSunGodTransformationSoundModel: Assets.Scripts.Models.Towers.Behaviors.AdoraTransformSoundModel, **kwargs):
        super().__init__(self, **kwargs)
		self.adoraSunGodTransformationSoundModel = adoraSunGodTransformationSoundModel


class AirUnit:

    offsets = {'airUnitModel': 96, 'transform': 104, 'modelBehaviors': 112, 'display': 120}    
    def __init__(self, airUnitModel: Assets.Scripts.Models.Towers.Behaviors.AirUnitModel, transform: Assets.Scripts.Simulation.Behaviors.TransformBehavior, modelBehaviors: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.RootBehavior>, display: Assets.Scripts.Simulation.Behaviors.DisplayBehavior, **kwargs):
        super().__init__(self, **kwargs)
		self.airUnitModel = airUnitModel
		self.transform = transform
		self.modelBehaviors = modelBehaviors
		self.display = display


class AmmoBelt:

    offsets = {'ammoBeltModel': 96, 'count': 104, 'lastRegen': 108}    
    def __init__(self, ammoBeltModel: Assets.Scripts.Models.Towers.Behaviors.AmmoBeltModel, count: System.Int32, lastRegen: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.ammoBeltModel = ammoBeltModel
		self.count = count
		self.lastRegen = lastRegen


class BananaBonusCashZone:

    offsets = {'bananaBonusCashZoneModel': 96}    
    def __init__(self, bananaBonusCashZoneModel: Assets.Scripts.Models.Towers.Behaviors.BananaBonusCashZoneModel, **kwargs):
        super().__init__(self, **kwargs)
		self.bananaBonusCashZoneModel = bananaBonusCashZoneModel


class BananaCashIncreaseSupport:

    offsets = {'bananaCashIncreaseSupportModel': 136}    
    def __init__(self, bananaCashIncreaseSupportModel: Assets.Scripts.Models.Towers.Behaviors.BananaCashIncreaseSupportModel, **kwargs):
        super().__init__(self, **kwargs)
		self.bananaCashIncreaseSupportModel = bananaCashIncreaseSupportModel


class BananaCentralBuff:

    offsets = {'bananaCentralBuffModel': 104, 'mutator': 112}    
    def __init__(self, bananaCentralBuffModel: Assets.Scripts.Models.Towers.Behaviors.BananaCentralBuffModel, mutator: Assets.Scripts.Simulation.Towers.Behaviors.BananaCentralBuff.Mutator, **kwargs):
        super().__init__(self, **kwargs)
		self.bananaCentralBuffModel = bananaCentralBuffModel
		self.mutator = mutator


class Bank:

    offsets = {'bankModel': 96, 'fullOnPriorRound': 104, 'displayedFull': 105, 'fullEffect': 112, 'cash': 120, 'depositedCash': 124, 'calculateInterestFrom': 128}    
    def __init__(self, bankModel: Assets.Scripts.Models.Towers.Behaviors.BankModel, fullOnPriorRound: System.Boolean, displayedFull: System.Boolean, fullEffect: Assets.Scripts.Simulation.Objects.Entity, cash: System.Single, depositedCash: System.Single, calculateInterestFrom: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.bankModel = bankModel
		self.fullOnPriorRound = fullOnPriorRound
		self.displayedFull = displayedFull
		self.fullEffect = fullEffect
		self.cash = cash
		self.depositedCash = depositedCash
		self.calculateInterestFrom = calculateInterestFrom


class BankDeposits:

    offsets = {'bankDepositsModel': 96, 'bank': 104, 'tsmInfoModel': 112}    
    def __init__(self, bankDepositsModel: Assets.Scripts.Models.Towers.Behaviors.BankDepositsModel, bank: Assets.Scripts.Simulation.Towers.Behaviors.Bank, tsmInfoModel: Assets.Scripts.Models.TowerSelectionMenuTheme.TSMInfoModel, **kwargs):
        super().__init__(self, **kwargs)
		self.bankDepositsModel = bankDepositsModel
		self.bank = bank
		self.tsmInfoModel = tsmInfoModel


class BaseTowersInRadius:

    offsets = {'baseTowersInRadiusModel': 96, 'selectedBaseId': 104, 'selectedBaseCost': 112}    
    def __init__(self, baseTowersInRadiusModel: Assets.Scripts.Models.Towers.Behaviors.BaseTowersInRadiusModel, selectedBaseId: System.String, selectedBaseCost: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.baseTowersInRadiusModel = baseTowersInRadiusModel
		self.selectedBaseId = selectedBaseId
		self.selectedBaseCost = selectedBaseCost


class BerserkerBrewCheck:

    offsets = {'berserkerBrewCheckModel': 96, 'count': 104, 'removed': 108}    
    def __init__(self, berserkerBrewCheckModel: Assets.Scripts.Models.Towers.Behaviors.BerserkerBrewCheckModel, count: System.Int32, removed: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.berserkerBrewCheckModel = berserkerBrewCheckModel
		self.count = count
		self.removed = removed


class BonusCashZone:

    offsets = {'bounsBonusCashZoneModel': 96, 'mutator': 104, 'zone': 112}    
    def __init__(self, bounsBonusCashZoneModel: Assets.Scripts.Models.Towers.Behaviors.BonusCashZoneModel, mutator: Assets.Scripts.Simulation.Objects.BehaviorMutator, zone: Assets.Scripts.Simulation.Behaviors.Zoned<Assets.Scripts.Simulation.Bloons.Bloon>, **kwargs):
        super().__init__(self, **kwargs)
		self.bounsBonusCashZoneModel = bounsBonusCashZoneModel
		self.mutator = mutator
		self.zone = zone


class BonusLivesPerRound:

    offsets = {'bonusLivesPerRoundModel': 96}    
    def __init__(self, bonusLivesPerRoundModel: Assets.Scripts.Models.Towers.Behaviors.BonusLivesPerRoundModel, **kwargs):
        super().__init__(self, **kwargs)
		self.bonusLivesPerRoundModel = bonusLivesPerRoundModel


class CanBuffIndicator:

    offsets = {'canBuffIndicatorModel': 104}    
    def __init__(self, canBuffIndicatorModel: Assets.Scripts.Models.Towers.Behaviors.CanBuffIndicatorModel, **kwargs):
        super().__init__(self, **kwargs)
		self.canBuffIndicatorModel = canBuffIndicatorModel


class CashIncrease:

    offsets = {'cashIncreaseModel': 96, 'mutator': 104}    
    def __init__(self, cashIncreaseModel: Assets.Scripts.Models.Towers.Behaviors.CashIncreaseModel, mutator: Assets.Scripts.Simulation.Towers.Behaviors.CashIncrease.BloonWorthMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.cashIncreaseModel = cashIncreaseModel
		self.mutator = mutator


class CashbackZone:

    offsets = {'cashbackZoneModel': 96}    
    def __init__(self, cashbackZoneModel: Assets.Scripts.Models.Towers.Behaviors.CashbackZoneModel, **kwargs):
        super().__init__(self, **kwargs)
		self.cashbackZoneModel = cashbackZoneModel


class CentralMarketBuff:

    offsets = {'centralMarketBuffModel': 104, 'mutator': 112}    
    def __init__(self, centralMarketBuffModel: Assets.Scripts.Models.Towers.Behaviors.CentralMarketBuffModel, mutator: Assets.Scripts.Simulation.Towers.Behaviors.CentralMarketBuff.CentralMarketMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.centralMarketBuffModel = centralMarketBuffModel
		self.mutator = mutator


class ChurchillBaseRotation:

    offsets = {'churchillBaseRotationModel': 96, 'rotationTargetAngle': 104, 'pausedRotation': 108, 'rotateToTarget': 109, 'MAX_PAUSE_TIME': 112, 'elapsedPaused': 116, 'display': 120}    
    def __init__(self, churchillBaseRotationModel: Assets.Scripts.Models.Towers.Behaviors.ChurchillBaseRotationModel, rotationTargetAngle: System.Single, pausedRotation: System.Boolean, rotateToTarget: System.Boolean, MAX_PAUSE_TIME: System.Int32, elapsedPaused: System.Int32, display: Assets.Scripts.Simulation.Behaviors.DisplayBehavior, **kwargs):
        super().__init__(self, **kwargs)
		self.churchillBaseRotationModel = churchillBaseRotationModel
		self.rotationTargetAngle = rotationTargetAngle
		self.pausedRotation = pausedRotation
		self.rotateToTarget = rotateToTarget
		self.MAX_PAUSE_TIME = MAX_PAUSE_TIME
		self.elapsedPaused = elapsedPaused
		self.display = display


class CircleFootprint:

    offsets = {'circleFootprintModel': 96}    
    def __init__(self, circleFootprintModel: Assets.Scripts.Models.Towers.Behaviors.CircleFootprintModel, **kwargs):
        super().__init__(self, **kwargs)
		self.circleFootprintModel = circleFootprintModel


class CircleMovement:

    offsets = {'currentAngle': 96, 'circleMovementModel': 104}    
    def __init__(self, currentAngle: System.Single, circleMovementModel: Assets.Scripts.Models.Towers.Behaviors.CircleMovementModel, **kwargs):
        super().__init__(self, **kwargs)
		self.currentAngle = currentAngle
		self.circleMovementModel = circleMovementModel


class CollectCashZone:

    offsets = {'collectCashZoneModel': 96, 'collectPoint': 104}    
    def __init__(self, collectCashZoneModel: Assets.Scripts.Models.Towers.Behaviors.CollectCashZoneModel, collectPoint: Assets.Scripts.Simulation.SMath.Vector3Boxed, **kwargs):
        super().__init__(self, **kwargs)
		self.collectCashZoneModel = collectCashZoneModel
		self.collectPoint = collectPoint


class CollectCreatedProjectile:

    offsets = {'collectCreatedProjectileModel': 96}    
    def __init__(self, collectCreatedProjectileModel: Assets.Scripts.Models.Towers.Behaviors.CollectCreatedProjectileModel, **kwargs):
        super().__init__(self, **kwargs)
		self.collectCreatedProjectileModel = collectCreatedProjectileModel


class ComancheDefence:

    offsets = {'comancheDefenceModel': 96, 'canDetectCamo': 104, 'activationTime': 108, 'comancheDefenceHelis': 112, 'activated25': 120, 'activated50': 121, 'activated75': 122}    
    def __init__(self, comancheDefenceModel: Assets.Scripts.Models.Towers.Behaviors.ComancheDefenceModel, canDetectCamo: System.Boolean, activationTime: System.Int32, comancheDefenceHelis: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Behaviors.ComancheDefence.ComancheDefenceHeli>, activated25: System.Boolean, activated50: System.Boolean, activated75: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.comancheDefenceModel = comancheDefenceModel
		self.canDetectCamo = canDetectCamo
		self.activationTime = activationTime
		self.comancheDefenceHelis = comancheDefenceHelis
		self.activated25 = activated25
		self.activated50 = activated50
		self.activated75 = activated75


class CreateEffectAfterTime:

    offsets = {'createEffectAfterTimeModel': 96, 'lifespan': 104, 'lastRoundTimeElapsed': 108, 'spawnedEffect': 112}    
    def __init__(self, createEffectAfterTimeModel: Assets.Scripts.Models.Towers.Behaviors.CreateEffectAfterTimeModel, lifespan: System.Int32, lastRoundTimeElapsed: System.Int32, spawnedEffect: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.createEffectAfterTimeModel = createEffectAfterTimeModel
		self.lifespan = lifespan
		self.lastRoundTimeElapsed = lastRoundTimeElapsed
		self.spawnedEffect = spawnedEffect


class CreateEffectOnAirUnit:

    offsets = {'createEffectOnAirUnitModel': 96, 'effect': 104, 'airUnitTransform': 112}    
    def __init__(self, createEffectOnAirUnitModel: Assets.Scripts.Models.Towers.Behaviors.CreateEffectOnAirUnitModel, effect: Assets.Scripts.Simulation.Objects.Entity, airUnitTransform: Assets.Scripts.Simulation.Behaviors.TransformBehavior, **kwargs):
        super().__init__(self, **kwargs)
		self.createEffectOnAirUnitModel = createEffectOnAirUnitModel
		self.effect = effect
		self.airUnitTransform = airUnitTransform


class CreateEffectOnAirUnitDestroy:

    offsets = {'createEffectOnAirUnitDestroyModel': 96, 'airUnitTransform': 104}    
    def __init__(self, createEffectOnAirUnitDestroyModel: Assets.Scripts.Models.Towers.Behaviors.CreateEffectOnAirUnitDestroyModel, airUnitTransform: Assets.Scripts.Simulation.Behaviors.TransformBehavior, **kwargs):
        super().__init__(self, **kwargs)
		self.createEffectOnAirUnitDestroyModel = createEffectOnAirUnitDestroyModel
		self.airUnitTransform = airUnitTransform


class CreateEffectOnExpire:

    offsets = {'createEffectOnExpireModel': 96, 'scaleOverride': 104}    
    def __init__(self, createEffectOnExpireModel: Assets.Scripts.Models.Towers.Behaviors.CreateEffectOnExpireModel, scaleOverride: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.createEffectOnExpireModel = createEffectOnExpireModel
		self.scaleOverride = scaleOverride


class CreateEffectOnPlace:

    offsets = {'createEffectOnPlace': 96}    
    def __init__(self, createEffectOnPlace: Assets.Scripts.Models.Towers.Behaviors.CreateEffectOnPlaceModel, **kwargs):
        super().__init__(self, **kwargs)
		self.createEffectOnPlace = createEffectOnPlace


class CreateEffectOnSell:

    offsets = {'createEffectOnSellModel': 96, 'scaleOverride': 104}    
    def __init__(self, createEffectOnSellModel: Assets.Scripts.Models.Towers.Behaviors.CreateEffectOnSellModel, scaleOverride: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.createEffectOnSellModel = createEffectOnSellModel
		self.scaleOverride = scaleOverride


class CreateEffectOnUpgrade:

    offsets = {'createEffectOnUpgradeModel': 96}    
    def __init__(self, createEffectOnUpgradeModel: Assets.Scripts.Models.Towers.Behaviors.CreateEffectOnUpgradeModel, **kwargs):
        super().__init__(self, **kwargs)
		self.createEffectOnUpgradeModel = createEffectOnUpgradeModel


class CreateProjectileOnTowerDestroy:

    offsets = {'createProjectileOnTowerDestroyModel': 96, 'emission': 104, 'sold': 112}    
    def __init__(self, createProjectileOnTowerDestroyModel: Assets.Scripts.Models.Towers.Behaviors.CreateProjectileOnTowerDestroyModel, emission: Assets.Scripts.Simulation.Towers.Emissions.Emission, sold: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.createProjectileOnTowerDestroyModel = createProjectileOnTowerDestroyModel
		self.emission = emission
		self.sold = sold


class CreateSoundOnAttached:

    offsets = {'createSoundOnAttachedModel': 96}    
    def __init__(self, createSoundOnAttachedModel: Assets.Scripts.Models.Towers.Behaviors.CreateSoundOnAttachedModel, **kwargs):
        super().__init__(self, **kwargs)
		self.createSoundOnAttachedModel = createSoundOnAttachedModel


class CreateSoundOnBloonEnterTrack:

    offsets = {'createSoundOnBloonEnterTrackModel': 96, 'playedMoabThisRound': 104, 'playedBFBThisRound': 105, 'playedDDTThisRound': 106, 'playedZOMGThisRound': 107, 'playedBADThisRound': 108}    
    def __init__(self, createSoundOnBloonEnterTrackModel: Assets.Scripts.Models.Towers.Behaviors.CreateSoundOnBloonEnterTrackModel, playedMoabThisRound: System.Boolean, playedBFBThisRound: System.Boolean, playedDDTThisRound: System.Boolean, playedZOMGThisRound: System.Boolean, playedBADThisRound: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.createSoundOnBloonEnterTrackModel = createSoundOnBloonEnterTrackModel
		self.playedMoabThisRound = playedMoabThisRound
		self.playedBFBThisRound = playedBFBThisRound
		self.playedDDTThisRound = playedDDTThisRound
		self.playedZOMGThisRound = playedZOMGThisRound
		self.playedBADThisRound = playedBADThisRound


class CreateSoundOnBloonLeak:

    offsets = {'createSoundOnBloonLeakModel': 96}    
    def __init__(self, createSoundOnBloonLeakModel: Assets.Scripts.Models.Towers.Behaviors.CreateSoundOnBloonLeakModel, **kwargs):
        super().__init__(self, **kwargs)
		self.createSoundOnBloonLeakModel = createSoundOnBloonLeakModel


class CreateSoundOnMonkeyMoneyActivated:

    offsets = {'createSoundOnMonkeyMoneyActivatedModel': 96}    
    def __init__(self, createSoundOnMonkeyMoneyActivatedModel: Assets.Scripts.Models.Towers.Behaviors.CreateSoundOnMonkeyMoneyActivatedModel, **kwargs):
        super().__init__(self, **kwargs)
		self.createSoundOnMonkeyMoneyActivatedModel = createSoundOnMonkeyMoneyActivatedModel


class CreateSoundOnSelected:

    offsets = {'createSoundOnSelectedModel': 96, 'selectTimer': 104, 'selectCounter': 108, 'timerOn': 112}    
    def __init__(self, createSoundOnSelectedModel: Assets.Scripts.Models.Towers.Behaviors.CreateSoundOnSelectedModel, selectTimer: System.Int32, selectCounter: System.Int32, timerOn: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.createSoundOnSelectedModel = createSoundOnSelectedModel
		self.selectTimer = selectTimer
		self.selectCounter = selectCounter
		self.timerOn = timerOn


class CreateSoundOnSell:

    offsets = {'createSoundOnSellModel': 96}    
    def __init__(self, createSoundOnSellModel: Assets.Scripts.Models.Towers.Behaviors.CreateSoundOnSellModel, **kwargs):
        super().__init__(self, **kwargs)
		self.createSoundOnSellModel = createSoundOnSellModel


class CreateSoundOnTowerPlace:

    offsets = {'createSoundOnTowerPlaceModel': 96}    
    def __init__(self, createSoundOnTowerPlaceModel: Assets.Scripts.Models.Towers.Behaviors.CreateSoundOnTowerPlaceModel, **kwargs):
        super().__init__(self, **kwargs)
		self.createSoundOnTowerPlaceModel = createSoundOnTowerPlaceModel


class CreateSoundOnUpgrade:

    offsets = {'createSoundOnUpgradeModel': 96}    
    def __init__(self, createSoundOnUpgradeModel: Assets.Scripts.Models.Towers.Behaviors.CreateSoundOnUpgradeModel, **kwargs):
        super().__init__(self, **kwargs)
		self.createSoundOnUpgradeModel = createSoundOnUpgradeModel


class CreditPopsToParentTower:

    offsets = {'creditPopsToParentTowerModel': 96}    
    def __init__(self, creditPopsToParentTowerModel: Assets.Scripts.Models.Towers.Behaviors.CreditPopsToParentTowerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.creditPopsToParentTowerModel = creditPopsToParentTowerModel


class DamageBasedAttackSpeed:
	mutators: System.Collections.Generic.List<Assets.Scripts.Simulation.Towers.Behaviors.DamageBasedAttackSpeed.RateMutator>
    offsets = {'mutators': 0, 'damageBasedAttackSpeedModel': 96, 'currentDamage': 104, 'currentDamageThisFrame': 108, 'timeOfLastDamage': 112, 'baseRateFrames': 116, 'roundStartAdditionalTimeBonus': 120, 'mutator': 128}    
    def __init__(self, mutators: System.Collections.Generic.List<Assets.Scripts.Simulation.Towers.Behaviors.DamageBasedAttackSpeed.RateMutator>, damageBasedAttackSpeedModel: Assets.Scripts.Models.Towers.Behaviors.DamageBasedAttackSpeedModel, currentDamage: System.Single, currentDamageThisFrame: System.Single, timeOfLastDamage: System.Single, baseRateFrames: System.Int32, roundStartAdditionalTimeBonus: System.Int32, mutator: Assets.Scripts.Simulation.Towers.Behaviors.DamageBasedAttackSpeed.RateMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.mutators = mutators
		self.damageBasedAttackSpeedModel = damageBasedAttackSpeedModel
		self.currentDamage = currentDamage
		self.currentDamageThisFrame = currentDamageThisFrame
		self.timeOfLastDamage = timeOfLastDamage
		self.baseRateFrames = baseRateFrames
		self.roundStartAdditionalTimeBonus = roundStartAdditionalTimeBonus
		self.mutator = mutator


class DamageOverTimeZone:

    offsets = {'damageOverTimeZoneModel': 96, 'bloonMutator': 104, 'zone': 112}    
    def __init__(self, damageOverTimeZoneModel: Assets.Scripts.Models.Towers.Behaviors.DamageOverTimeZoneModel, bloonMutator: Assets.Scripts.Simulation.Towers.Behaviors.DamageOverTimeZone.Mutator, zone: Assets.Scripts.Simulation.Behaviors.Zoned<Assets.Scripts.Simulation.Bloons.Bloon>, **kwargs):
        super().__init__(self, **kwargs)
		self.damageOverTimeZoneModel = damageOverTimeZoneModel
		self.bloonMutator = bloonMutator
		self.zone = zone


class DamageSupport:

    offsets = {'damageSupportModel': 136}    
    def __init__(self, damageSupportModel: Assets.Scripts.Models.Towers.Behaviors.DamageSupportModel, **kwargs):
        super().__init__(self, **kwargs)
		self.damageSupportModel = damageSupportModel


class DamageTypeSupport:

    offsets = {'damageTypeSupportModel': 136}    
    def __init__(self, damageTypeSupportModel: Assets.Scripts.Models.Towers.Behaviors.DamageTypeSupportModel, **kwargs):
        super().__init__(self, **kwargs)
		self.damageTypeSupportModel = damageTypeSupportModel


class DartlingMaintainLastPos:

    offsets = {'dartlingMaintainLastPosModel': 96, 'positionToMaintain': 104, 'rotations': 120, 'rotateToPointers': 128}    
    def __init__(self, dartlingMaintainLastPosModel: Assets.Scripts.Models.Towers.Behaviors.DartlingMaintainLastPosModel, positionToMaintain: Assets.Scripts.Utils.Optional<Assets.Scripts.Simulation.SMath.Vector2>, rotations: System.Collections.Generic.List<Assets.Scripts.Utils.Optional<System.Single>>, rotateToPointers: System.Collections.Generic.List<Assets.Scripts.Simulation.Towers.Behaviors.Attack.Behaviors.RotateToPointer>, **kwargs):
        super().__init__(self, **kwargs)
		self.dartlingMaintainLastPosModel = dartlingMaintainLastPosModel
		self.positionToMaintain = positionToMaintain
		self.rotations = rotations
		self.rotateToPointers = rotateToPointers


class DelayedShutoff:

    offsets = {'delayedShutoffModel': 96, 'startedAt': 104}    
    def __init__(self, delayedShutoffModel: Assets.Scripts.Models.Towers.Behaviors.DelayedShutoffModel, startedAt: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.delayedShutoffModel = delayedShutoffModel
		self.startedAt = startedAt


class DestroyChildTowersOnUpgrade:

    offsets = {'destroyChildTowersOnUpgradeModel': 96}    
    def __init__(self, destroyChildTowersOnUpgradeModel: Assets.Scripts.Models.Towers.Behaviors.DestroyChildTowersOnUpgradeModel, **kwargs):
        super().__init__(self, **kwargs)
		self.destroyChildTowersOnUpgradeModel = destroyChildTowersOnUpgradeModel


class DiscountZone:

    offsets = {'discountZoneModel': 104}    
    def __init__(self, discountZoneModel: Assets.Scripts.Models.Towers.Behaviors.DiscountZoneModel, **kwargs):
        super().__init__(self, **kwargs)
		self.discountZoneModel = discountZoneModel


class DroneIdle:

    offsets = {'droneIdleModel': 96, 'canEndCustomMovement': 104, 'inactiveFrames': 108, 'ignoreTargetingFrames': 112, 'framesOutsideOfRange': 116, 'framesSinceValidTarget': 120, 'framesSinceIdleReposition': 124, 'forceMoveWhenNotBeingRedeployed': 128, 'mainAttack': 136, 'parentTower': 144, 'heliMovement': 152, 'airUnit': 160, 'currentIdleRepositionFrames': 168, 'currentLight': 176, 'pursuitSettingCustom': 184}    
    def __init__(self, droneIdleModel: Assets.Scripts.Models.Towers.Behaviors.DroneIdleModel, canEndCustomMovement: System.Boolean, inactiveFrames: System.Int32, ignoreTargetingFrames: System.Int32, framesOutsideOfRange: System.Int32, framesSinceValidTarget: System.Int32, framesSinceIdleReposition: System.Int32, forceMoveWhenNotBeingRedeployed: System.Boolean, mainAttack: Assets.Scripts.Simulation.Towers.Behaviors.Attack.Attack, parentTower: Assets.Scripts.Simulation.Towers.Tower, heliMovement: Assets.Scripts.Simulation.Towers.Behaviors.HeliMovement, airUnit: Assets.Scripts.Simulation.Towers.Behaviors.AirUnit, currentIdleRepositionFrames: System.Int32, currentLight: Assets.Scripts.Simulation.Behaviors.DisplayBehavior, pursuitSettingCustom: Assets.Scripts.Simulation.Towers.Behaviors.Attack.Behaviors.PursuitSettingCustom, **kwargs):
        super().__init__(self, **kwargs)
		self.droneIdleModel = droneIdleModel
		self.canEndCustomMovement = canEndCustomMovement
		self.inactiveFrames = inactiveFrames
		self.ignoreTargetingFrames = ignoreTargetingFrames
		self.framesOutsideOfRange = framesOutsideOfRange
		self.framesSinceValidTarget = framesSinceValidTarget
		self.framesSinceIdleReposition = framesSinceIdleReposition
		self.forceMoveWhenNotBeingRedeployed = forceMoveWhenNotBeingRedeployed
		self.mainAttack = mainAttack
		self.parentTower = parentTower
		self.heliMovement = heliMovement
		self.airUnit = airUnit
		self.currentIdleRepositionFrames = currentIdleRepositionFrames
		self.currentLight = currentLight
		self.pursuitSettingCustom = pursuitSettingCustom


class DroneSupport:

    offsets = {'droneSupportModel': 96, 'drones': 104, 'droneHeliMovements': 112, 'toRemoveList': 120, 'spawnAndUpdateDrones': 128, 'canMakeDrones': 129}    
    def __init__(self, droneSupportModel: Assets.Scripts.Models.Towers.Behaviors.DroneSupportModel, drones: System.Collections.Generic.List<Assets.Scripts.Simulation.Towers.Tower>, droneHeliMovements: System.Collections.Generic.List<Assets.Scripts.Simulation.Towers.Behaviors.HeliMovement>, toRemoveList: System.Collections.Generic.List<Assets.Scripts.Simulation.Objects.TimedMutator>, spawnAndUpdateDrones: System.Boolean, canMakeDrones: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.droneSupportModel = droneSupportModel
		self.drones = drones
		self.droneHeliMovements = droneHeliMovements
		self.toRemoveList = toRemoveList
		self.spawnAndUpdateDrones = spawnAndUpdateDrones
		self.canMakeDrones = canMakeDrones


class DruidOfWrathBuff:

    offsets = {'druidOfWrathBuffModel': 96}    
    def __init__(self, druidOfWrathBuffModel: Assets.Scripts.Models.Towers.Behaviors.DruidOfWrathBuffModel, **kwargs):
        super().__init__(self, **kwargs)
		self.druidOfWrathBuffModel = druidOfWrathBuffModel


class DruidVengeanceEffect:

    offsets = {'druidVengeanceEffectModel': 96, 'currentEffectTier': 104, 'currentEffect': 112}    
    def __init__(self, druidVengeanceEffectModel: Assets.Scripts.Models.Towers.Behaviors.DruidVengeanceEffectModel, currentEffectTier: System.Int32, currentEffect: Assets.Scripts.Simulation.Objects.Entity, **kwargs):
        super().__init__(self, **kwargs)
		self.druidVengeanceEffectModel = druidVengeanceEffectModel
		self.currentEffectTier = currentEffectTier
		self.currentEffect = currentEffect


class DynamicDuo:

    offsets = {'dynamicDuoModel': 96}    
    def __init__(self, dynamicDuoModel: Assets.Scripts.Models.Towers.Behaviors.DynamicDuoModel, **kwargs):
        super().__init__(self, **kwargs)
		self.dynamicDuoModel = dynamicDuoModel


class DynamicDuoRemoval:

    offsets = {'dynamicDuoRemovalModel': 96}    
    def __init__(self, dynamicDuoRemovalModel: Assets.Scripts.Models.Towers.Behaviors.DynamicDuoRemovalModel, **kwargs):
        super().__init__(self, **kwargs)
		self.dynamicDuoRemovalModel = dynamicDuoRemovalModel


class EnergisingTotemAnimState:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class EnergisingTotemBehavior:

    offsets = {'energisingTotemBehaviorModel': 96, 'roundsRemaining': 104, 'currentEffectIndex': 108, 'currentEffect': 112, 'tsmInfoModel': 120}    
    def __init__(self, energisingTotemBehaviorModel: Assets.Scripts.Models.Towers.Behaviors.EnergisingTotemBehaviorModel, roundsRemaining: System.Int32, currentEffectIndex: System.Int32, currentEffect: Assets.Scripts.Simulation.Objects.Entity, tsmInfoModel: Assets.Scripts.Models.TowerSelectionMenuTheme.TSMInfoModel, **kwargs):
        super().__init__(self, **kwargs)
		self.energisingTotemBehaviorModel = energisingTotemBehaviorModel
		self.roundsRemaining = roundsRemaining
		self.currentEffectIndex = currentEffectIndex
		self.currentEffect = currentEffect
		self.tsmInfoModel = tsmInfoModel


class EziliSupport:

    offsets = {'eziliSupportModel': 96, 'zone': 104}    
    def __init__(self, eziliSupportModel: Assets.Scripts.Models.Towers.Behaviors.EziliSupportModel, zone: Assets.Scripts.Simulation.Behaviors.Zoned<Assets.Scripts.Simulation.Towers.Tower>, **kwargs):
        super().__init__(self, **kwargs)
		self.eziliSupportModel = eziliSupportModel
		self.zone = zone


class FighterMovement:

    offsets = {'fighterMovementModel': 96, 'flyoverEngaged': 104, 'flyoverTarget': 108, 'lastElapsed': 120, 'pathSuppliers': 136, 'currentPathSupplier': 144, 'timer': 152, 'updatePathTime': 156, 'transform': 160, 'transformPosition': 168, 'directionToTarget': 180, 'rotation': 192, 'targetPosition': 204, 'lastBank': 216, 'lastTimeDidABarrelRoll': 220, 'lastTimeCheckedForABarrelRoll': 224, 'doingABarrelRoll': 228, 'lastTimeDidALoopDeLoop': 232, 'lastTimeCheckedForALoopDeLoop': 236, 'doingALoopDeLoop': 240, 'loopDeLoopCenter': 244, 'loopDeLoopRotationAxis': 256}    
    def __init__(self, fighterMovementModel: Assets.Scripts.Models.Towers.Behaviors.FighterMovementModel, flyoverEngaged: System.Boolean, flyoverTarget: Assets.Scripts.Simulation.SMath.Vector3, lastElapsed: System.Int32, pathSuppliers: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Behaviors.Attack.Behaviors.PathSupplier>, currentPathSupplier: Assets.Scripts.Simulation.Towers.Behaviors.Attack.Behaviors.PathSupplier, timer: System.Int32, updatePathTime: System.Int32, transform: Assets.Scripts.Simulation.Behaviors.TransformBehavior, transformPosition: Assets.Scripts.Simulation.SMath.Vector3, directionToTarget: Assets.Scripts.Simulation.SMath.Vector3, rotation: Assets.Scripts.Simulation.SMath.Vector3, targetPosition: Assets.Scripts.Simulation.SMath.Vector3, lastBank: System.Single, lastTimeDidABarrelRoll: System.Int32, lastTimeCheckedForABarrelRoll: System.Int32, doingABarrelRoll: System.Boolean, lastTimeDidALoopDeLoop: System.Int32, lastTimeCheckedForALoopDeLoop: System.Int32, doingALoopDeLoop: System.Boolean, loopDeLoopCenter: Assets.Scripts.Simulation.SMath.Vector3, loopDeLoopRotationAxis: Assets.Scripts.Simulation.SMath.Vector3, **kwargs):
        super().__init__(self, **kwargs)
		self.fighterMovementModel = fighterMovementModel
		self.flyoverEngaged = flyoverEngaged
		self.flyoverTarget = flyoverTarget
		self.lastElapsed = lastElapsed
		self.pathSuppliers = pathSuppliers
		self.currentPathSupplier = currentPathSupplier
		self.timer = timer
		self.updatePathTime = updatePathTime
		self.transform = transform
		self.transformPosition = transformPosition
		self.directionToTarget = directionToTarget
		self.rotation = rotation
		self.targetPosition = targetPosition
		self.lastBank = lastBank
		self.lastTimeDidABarrelRoll = lastTimeDidABarrelRoll
		self.lastTimeCheckedForABarrelRoll = lastTimeCheckedForABarrelRoll
		self.doingABarrelRoll = doingABarrelRoll
		self.lastTimeDidALoopDeLoop = lastTimeDidALoopDeLoop
		self.lastTimeCheckedForALoopDeLoop = lastTimeCheckedForALoopDeLoop
		self.doingALoopDeLoop = doingALoopDeLoop
		self.loopDeLoopCenter = loopDeLoopCenter
		self.loopDeLoopRotationAxis = loopDeLoopRotationAxis


class FigureEightMovement:

    offsets = {'currentAngle': 96, 'figureEightMovementModel': 104}    
    def __init__(self, currentAngle: System.Single, figureEightMovementModel: Assets.Scripts.Models.Towers.Behaviors.FigureEightMovementModel, **kwargs):
        super().__init__(self, **kwargs)
		self.currentAngle = currentAngle
		self.figureEightMovementModel = figureEightMovementModel


class FootprintZone:

    offsets = {'footprintSupportModel': 136}    
    def __init__(self, footprintSupportModel: Assets.Scripts.Models.Towers.Behaviors.FootprintZoneModel, **kwargs):
        super().__init__(self, **kwargs)
		self.footprintSupportModel = footprintSupportModel


class FreeUpgradeSupport:

    offsets = {'freeUpgradeSupportModel': 136}    
    def __init__(self, freeUpgradeSupportModel: Assets.Scripts.Models.Towers.Behaviors.FreeUpgradeSupportModel, **kwargs):
        super().__init__(self, **kwargs)
		self.freeUpgradeSupportModel = freeUpgradeSupportModel


class FreezeNearbyWater:

    offsets = {'freezeNearbyWaterModel': 96, 'iceMutator': 104, 'zone': 112}    
    def __init__(self, freezeNearbyWaterModel: Assets.Scripts.Models.Towers.Behaviors.FreezeNearbyWaterModel, iceMutator: AddBehaviorToIceTowerMutator, zone: Assets.Scripts.Simulation.Behaviors.Zoned<Assets.Scripts.Simulation.Towers.Tower>, **kwargs):
        super().__init__(self, **kwargs)
		self.freezeNearbyWaterModel = freezeNearbyWaterModel
		self.iceMutator = iceMutator
		self.zone = zone


class GlobalRangeCircle:

    offsets = {'globalRangeCircleModel': 96, 'rangeMesh': 104}    
    def __init__(self, globalRangeCircleModel: Assets.Scripts.Models.Towers.Behaviors.GlobalRangeCircleModel, rangeMesh: Assets.Scripts.Simulation.Behaviors.GlobalRangeMesh, **kwargs):
        super().__init__(self, **kwargs)
		self.globalRangeCircleModel = globalRangeCircleModel
		self.rangeMesh = rangeMesh


class HeliMovement:

    offsets = {'heliMovementModel': 96, 'heliPositionsInRepulseRange': 104, 'currentVelocity': 112, 'heliGroupOffsetTouch': 120, 'heliGroupOffsetPursuit': 128, 'canMoveOutsideScreen': 136, 'ignoreRepulsion': 137, 'lastGroupOffset': 140, 'customMovement': 152, 'attacks': 160, 'pathSuppliers': 168, 'currentPathSupplier': 176, 'heliTransformBehavior': 184, 'pathIndex': 200}    
    def __init__(self, heliMovementModel: Assets.Scripts.Models.Towers.Behaviors.HeliMovementModel, heliPositionsInRepulseRange: System.Collections.Generic.List<Assets.Scripts.Simulation.Towers.Behaviors.HeliMovement>, currentVelocity: Assets.Scripts.Simulation.SMath.Vector2, heliGroupOffsetTouch: Assets.Scripts.Simulation.Behaviors.HeliGroupOffset, heliGroupOffsetPursuit: Assets.Scripts.Simulation.Behaviors.HeliGroupOffset, canMoveOutsideScreen: System.Boolean, ignoreRepulsion: System.Boolean, lastGroupOffset: Assets.Scripts.Simulation.SMath.Vector2, customMovement: Assets.Scripts.Simulation.Towers.Behaviors.HeliMovement.CustomMovement, attacks: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Behaviors.Attack.Attack>, pathSuppliers: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Behaviors.Attack.Behaviors.PathSupplier>, currentPathSupplier: Assets.Scripts.Simulation.Towers.Behaviors.Attack.Behaviors.PathSupplier, heliTransformBehavior: Assets.Scripts.Simulation.Behaviors.TransformBehavior, pathIndex: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.heliMovementModel = heliMovementModel
		self.heliPositionsInRepulseRange = heliPositionsInRepulseRange
		self.currentVelocity = currentVelocity
		self.heliGroupOffsetTouch = heliGroupOffsetTouch
		self.heliGroupOffsetPursuit = heliGroupOffsetPursuit
		self.canMoveOutsideScreen = canMoveOutsideScreen
		self.ignoreRepulsion = ignoreRepulsion
		self.lastGroupOffset = lastGroupOffset
		self.customMovement = customMovement
		self.attacks = attacks
		self.pathSuppliers = pathSuppliers
		self.currentPathSupplier = currentPathSupplier
		self.heliTransformBehavior = heliTransformBehavior
		self.pathIndex = pathIndex


class Hero:

    offsets = {'heroModel': 96, 'upgrade': 104, 'xp': 112, 'totalXp': 116, 'xpBonus': 120, 'maxLevel': 124, 'levelsGainedThisRound': 128}    
    def __init__(self, heroModel: Assets.Scripts.Models.Towers.Behaviors.HeroModel, upgrade: Assets.Scripts.Models.Towers.Upgrades.UpgradeModel, xp: System.Single, totalXp: System.Single, xpBonus: System.Single, maxLevel: System.Int32, levelsGainedThisRound: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.heroModel = heroModel
		self.upgrade = upgrade
		self.xp = xp
		self.totalXp = totalXp
		self.xpBonus = xpBonus
		self.maxLevel = maxLevel
		self.levelsGainedThisRound = levelsGainedThisRound


class HeroXpPerRound:

    offsets = {'xpPerRoundModel': 96}    
    def __init__(self, xpPerRoundModel: Assets.Scripts.Models.Towers.Behaviors.HeroXpPerRoundModel, **kwargs):
        super().__init__(self, **kwargs)
		self.xpPerRoundModel = xpPerRoundModel


class HeroXpScaleSupport:

    offsets = {'heroXpScaleSupportModel': 136}    
    def __init__(self, heroXpScaleSupportModel: Assets.Scripts.Models.Towers.Behaviors.HeroXpScaleSupportModel, **kwargs):
        super().__init__(self, **kwargs)
		self.heroXpScaleSupportModel = heroXpScaleSupportModel


class HexManager:

    offsets = {'hexManagerModel': 96, 'findNewTarget': 104, 'ticksRemaining': 108, 'position': 112, 'attack': 128}    
    def __init__(self, hexManagerModel: Assets.Scripts.Models.Towers.Behaviors.HexManagerModel, findNewTarget: System.Boolean, ticksRemaining: System.Int32, position: Assets.Scripts.Simulation.SMath.Vector3, attack: Assets.Scripts.Simulation.Towers.Behaviors.Attack.Attack, **kwargs):
        super().__init__(self, **kwargs)
		self.hexManagerModel = hexManagerModel
		self.findNewTarget = findNewTarget
		self.ticksRemaining = ticksRemaining
		self.position = position
		self.attack = attack


class IgnoreAllMutatorsTower:

    offsets = {'ignoreAllMutatorsTowerModel': 96}    
    def __init__(self, ignoreAllMutatorsTowerModel: Assets.Scripts.Models.Towers.Behaviors.IgnoreAllMutatorsTowerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.ignoreAllMutatorsTowerModel = ignoreAllMutatorsTowerModel


class IgnoreTower:

    offsets = {'ignoreTowerModel': 96}    
    def __init__(self, ignoreTowerModel: Assets.Scripts.Models.Towers.Behaviors.IgnoreTowerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.ignoreTowerModel = ignoreTowerModel


class IgnoreTowersBlocker:

    offsets = {'ignoreTowersBlockerModel': 96}    
    def __init__(self, ignoreTowersBlockerModel: Assets.Scripts.Models.Towers.Behaviors.IgnoreTowersBlockerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.ignoreTowersBlockerModel = ignoreTowersBlockerModel


class LifeRegen:

    offsets = {'lifeRegenModel': 96}    
    def __init__(self, lifeRegenModel: Assets.Scripts.Models.Towers.Behaviors.LifeRegenModel, **kwargs):
        super().__init__(self, **kwargs)
		self.lifeRegenModel = lifeRegenModel


class LinkDisplayScaleToTowerRange:

    offsets = {'modl': 96}    
    def __init__(self, modl: Assets.Scripts.Models.Towers.Behaviors.LinkDisplayScaleToTowerRangeModel, **kwargs):
        super().__init__(self, **kwargs)
		self.modl = modl


class LinkProjectileRadiusToTowerRange:

    offsets = {'modl': 96}    
    def __init__(self, modl: Assets.Scripts.Models.Towers.Behaviors.LinkProjectileRadiusToTowerRangeModel, **kwargs):
        super().__init__(self, **kwargs)
		self.modl = modl


class LoadAlchemistBrewInfo:

    offsets = {'loadAlchemistBrewInfoModel': 96}    
    def __init__(self, loadAlchemistBrewInfoModel: Assets.Scripts.Models.Towers.Behaviors.LoadAlchemistBrewInfoModel, **kwargs):
        super().__init__(self, **kwargs)
		self.loadAlchemistBrewInfoModel = loadAlchemistBrewInfoModel


class MerchantShip:

    offsets = {'merchantShipModel': 96}    
    def __init__(self, merchantShipModel: Assets.Scripts.Models.Towers.Behaviors.MerchantShipModel, **kwargs):
        super().__init__(self, **kwargs)
		self.merchantShipModel = merchantShipModel


class MoabShoveZone:

    offsets = {'moabShoveZoneModel': 96, 'mutators': 104, 'active': 112, 'helicopterTransform': 120, 'lastApplied': 128}    
    def __init__(self, moabShoveZoneModel: Assets.Scripts.Models.Towers.Behaviors.MoabShoveZoneModel, mutators: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Simulation.Towers.Behaviors.MoabShoveZone.Mutator>, active: System.Collections.Generic.List<Assets.Scripts.Simulation.Towers.Behaviors.MoabShoveZone.ActiveBloon>, helicopterTransform: Assets.Scripts.Simulation.Behaviors.TransformBehavior, lastApplied: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.moabShoveZoneModel = moabShoveZoneModel
		self.mutators = mutators
		self.active = active
		self.helicopterTransform = helicopterTransform
		self.lastApplied = lastApplied


class MonkeyCity:

    offsets = {'cityModel': 96, 'roundCount': 104}    
    def __init__(self, cityModel: Assets.Scripts.Models.Towers.Behaviors.MonkeyCityModel, roundCount: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.cityModel = cityModel
		self.roundCount = roundCount


class MonkeyCityIncomeSupport:

    offsets = {'monkeyCityIncomeSupportModel': 136}    
    def __init__(self, monkeyCityIncomeSupportModel: Assets.Scripts.Models.Towers.Behaviors.MonkeyCityIncomeSupportModel, **kwargs):
        super().__init__(self, **kwargs)
		self.monkeyCityIncomeSupportModel = monkeyCityIncomeSupportModel


class MonkeyTemple:

    offsets = {'monkeyTempleModel': 96, 'lastSacrificed': 104, 'lastTransformed': 108, 'weaponLastEmission': 112, 'selectedTowers': 120, 'mutatorsToApply': 128, 'templeTowers': 136, 'trueTempleTowers': 144, 'runSacrifice': 152, 'placed': 153, 'towersToApplyTCBOOTo': 160, 'checkTCBOO': 168, 'mutatorsToRemove': 176, 'createdTCBOO': 184}    
    def __init__(self, monkeyTempleModel: Assets.Scripts.Models.Towers.Behaviors.MonkeyTempleModel, lastSacrificed: System.Int32, lastTransformed: System.Int32, weaponLastEmission: System.Collections.Generic.Dictionary<System.String,System.Int32>, selectedTowers: System.Collections.Generic.Dictionary<System.String,System.Single>, mutatorsToApply: Assets.Scripts.Utils.SortedSizedList<Assets.Scripts.Simulation.Objects.BehaviorMutator>, templeTowers: System.Collections.Generic.Dictionary<System.String,System.Single>, trueTempleTowers: System.Collections.Generic.Dictionary<System.String,System.Single>, runSacrifice: System.Boolean, placed: System.Boolean, towersToApplyTCBOOTo: System.Collections.Generic.List<System.Int32>, checkTCBOO: System.Boolean, mutatorsToRemove: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.TimedMutator>, createdTCBOO: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.monkeyTempleModel = monkeyTempleModel
		self.lastSacrificed = lastSacrificed
		self.lastTransformed = lastTransformed
		self.weaponLastEmission = weaponLastEmission
		self.selectedTowers = selectedTowers
		self.mutatorsToApply = mutatorsToApply
		self.templeTowers = templeTowers
		self.trueTempleTowers = trueTempleTowers
		self.runSacrifice = runSacrifice
		self.placed = placed
		self.towersToApplyTCBOOTo = towersToApplyTCBOOTo
		self.checkTCBOO = checkTCBOO
		self.mutatorsToRemove = mutatorsToRemove
		self.createdTCBOO = createdTCBOO


class Monkeyopolis:

    offsets = {'monkeyopolisModel': 96, 'activated': 104, 'cratesPerRound': 108, 'cashFromCrate': 112}    
    def __init__(self, monkeyopolisModel: Assets.Scripts.Models.Towers.Behaviors.MonkeyopolisModel, activated: System.Boolean, cratesPerRound: System.Int32, cashFromCrate: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.monkeyopolisModel = monkeyopolisModel
		self.activated = activated
		self.cratesPerRound = cratesPerRound
		self.cashFromCrate = cashFromCrate


class MonkeyopolisUpgradeCost:

    offsets = {'monkeyopolisUpgradeModel': 96}    
    def __init__(self, monkeyopolisUpgradeModel: Assets.Scripts.Models.Towers.Behaviors.MonkeyopolisUpgradeCostModel, **kwargs):
        super().__init__(self, **kwargs)
		self.monkeyopolisUpgradeModel = monkeyopolisUpgradeModel


class MutationImunityTower:

    offsets = {'mutationImunityTowerModel': 96}    
    def __init__(self, mutationImunityTowerModel: Assets.Scripts.Models.Towers.Behaviors.MutationImunityTowerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.mutationImunityTowerModel = mutationImunityTowerModel


class NecromancerZone:
	necroEmissionsInRange: System.Collections.Generic.List<Assets.Scripts.Simulation.SimulationBehaviors.NecroData>
    offsets = {'necroEmissionsInRange': 0, 'necromancerZoneModel': 96, 'zone': 104, 'emission': 112, 'graveyardManager': 120, 'tsmInfoModel': 128}    
    def __init__(self, necroEmissionsInRange: System.Collections.Generic.List<Assets.Scripts.Simulation.SimulationBehaviors.NecroData>, necromancerZoneModel: Assets.Scripts.Models.Towers.Behaviors.NecromancerZoneModel, zone: Assets.Scripts.Simulation.Behaviors.Zoned<Assets.Scripts.Simulation.Bloons.Bloon>, emission: Assets.Scripts.Simulation.Towers.Emissions.NecromancerEmission, graveyardManager: Assets.Scripts.Simulation.SimulationBehaviors.SimNecromancerGraveyardManager, tsmInfoModel: Assets.Scripts.Models.TowerSelectionMenuTheme.TSMInfoModel, **kwargs):
        super().__init__(self, **kwargs)
		self.necroEmissionsInRange = necroEmissionsInRange
		self.necromancerZoneModel = necromancerZoneModel
		self.zone = zone
		self.emission = emission
		self.graveyardManager = graveyardManager
		self.tsmInfoModel = tsmInfoModel


class Orbit:

    offsets = {'orbitModel': 96, 'currentSpeed': 104, 'angle': 108, 'projectiles': 112, 'bloonInRange': 120, 'isActive': 128}    
    def __init__(self, orbitModel: Assets.Scripts.Models.Towers.Behaviors.OrbitModel, currentSpeed: System.Single, angle: System.Single, projectiles: System.Collections.Generic.List<Assets.Scripts.Simulation.Towers.Projectiles.Projectile>, bloonInRange: Assets.Scripts.Simulation.Bloons.Bloon, isActive: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.orbitModel = orbitModel
		self.currentSpeed = currentSpeed
		self.angle = angle
		self.projectiles = projectiles
		self.bloonInRange = bloonInRange
		self.isActive = isActive


class OrbitingTower:

    offsets = {'orbitingTowerModel': 96, 'currentDirection': 104, 'parentTower': 112}    
    def __init__(self, orbitingTowerModel: Assets.Scripts.Models.Towers.Behaviors.OrbitingTowerModel, currentDirection: Assets.Scripts.Simulation.SMath.Vector2, parentTower: Assets.Scripts.Simulation.Towers.Tower, **kwargs):
        super().__init__(self, **kwargs)
		self.orbitingTowerModel = orbitingTowerModel
		self.currentDirection = currentDirection
		self.parentTower = parentTower


class OverrideCamoDetection:

    offsets = {'overrideCamoDetectionModel': 96, 'mutator': 104, 'previousDetectCamo': 112}    
    def __init__(self, overrideCamoDetectionModel: Assets.Scripts.Models.Towers.Behaviors.OverrideCamoDetectionModel, mutator: Assets.Scripts.Simulation.Towers.Behaviors.OverrideCamoDetection.MutatorTower, previousDetectCamo: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.overrideCamoDetectionModel = overrideCamoDetectionModel
		self.mutator = mutator
		self.previousDetectCamo = previousDetectCamo


class ParagonAssetSwap:

    offsets = {'paragonAssetSwapModel': 96}    
    def __init__(self, paragonAssetSwapModel: Assets.Scripts.Models.Towers.Behaviors.ParagonAssetSwapModel, **kwargs):
        super().__init__(self, **kwargs)
		self.paragonAssetSwapModel = paragonAssetSwapModel


class ParagonTower:

    offsets = {'paragonTowerModel': 96, 'effectDuring': 104, 'investmentEffects': 112, 'isActive': 120, 'activeAt': 124, 'pausedAttacks': 128, 'effectsStartMovingAt': 136, 'effectsStartScalingAt': 140, 'investmentInfo': 144}    
    def __init__(self, paragonTowerModel: Assets.Scripts.Models.Towers.Behaviors.ParagonTowerModel, effectDuring: Assets.Scripts.Simulation.Objects.Entity, investmentEffects: System.Collections.Generic.List<Assets.Scripts.Simulation.Towers.Behaviors.ParagonTower.InvestmentEffect>, isActive: System.Boolean, activeAt: System.Int32, pausedAttacks: System.Collections.Generic.List<Assets.Scripts.Simulation.Towers.Behaviors.Attack.Attack>, effectsStartMovingAt: System.Int32, effectsStartScalingAt: System.Int32, investmentInfo: Assets.Scripts.Simulation.Towers.Behaviors.ParagonTower.InvestmentInfo, **kwargs):
        super().__init__(self, **kwargs)
		self.paragonTowerModel = paragonTowerModel
		self.effectDuring = effectDuring
		self.investmentEffects = investmentEffects
		self.isActive = isActive
		self.activeAt = activeAt
		self.pausedAttacks = pausedAttacks
		self.effectsStartMovingAt = effectsStartMovingAt
		self.effectsStartScalingAt = effectsStartScalingAt
		self.investmentInfo = investmentInfo


class PathMovement:

    offsets = {'pathMovementModel': 96, 'pathSuppliers': 104, 'currPathSupplier': 112, 'tpf': 120, 'lastBank': 124, 't': 128, 'onPath': 132, 'takingOff': 133, 'tt': 136, 'ttpf': 140, 'pitch': 144, 'beforeOnTheMovePos': 148, 'onTheMove': 156}    
    def __init__(self, pathMovementModel: Assets.Scripts.Models.Towers.Behaviors.PathMovementModel, pathSuppliers: System.Collections.Generic.List<Assets.Scripts.Simulation.Towers.Behaviors.Attack.Behaviors.PathSupplier>, currPathSupplier: Assets.Scripts.Simulation.Towers.Behaviors.Attack.Behaviors.PathSupplier, tpf: System.Single, lastBank: System.Single, t: System.Single, onPath: System.Boolean, takingOff: System.Boolean, tt: System.Single, ttpf: System.Single, pitch: System.Single, beforeOnTheMovePos: Assets.Scripts.Simulation.SMath.Vector2, onTheMove: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.pathMovementModel = pathMovementModel
		self.pathSuppliers = pathSuppliers
		self.currPathSupplier = currPathSupplier
		self.tpf = tpf
		self.lastBank = lastBank
		self.t = t
		self.onPath = onPath
		self.takingOff = takingOff
		self.tt = tt
		self.ttpf = ttpf
		self.pitch = pitch
		self.beforeOnTheMovePos = beforeOnTheMovePos
		self.onTheMove = onTheMove


class PathMovementFromScreenCenter:

    offsets = {'pathMovementFromScreenCenterModel': 96, 'pathIndex': 104, 'prevTargetId': 112}    
    def __init__(self, pathMovementFromScreenCenterModel: Assets.Scripts.Models.Towers.Behaviors.PathMovementFromScreenCenterModel, pathIndex: System.Int32, prevTargetId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.pathMovementFromScreenCenterModel = pathMovementFromScreenCenterModel
		self.pathIndex = pathIndex
		self.prevTargetId = prevTargetId


class PerRoundCashBonusTower:

    offsets = {'perRoundCashBonusTowerModel': 96}    
    def __init__(self, perRoundCashBonusTowerModel: Assets.Scripts.Models.Towers.Behaviors.PerRoundCashBonusTowerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.perRoundCashBonusTowerModel = perRoundCashBonusTowerModel


class PermanentBeserkerBrew:

    offsets = {'permanentBeserkerBrewModel': 96, 'mutator': 104, 'affectedTowers': 112}    
    def __init__(self, permanentBeserkerBrewModel: Assets.Scripts.Models.Towers.Behaviors.PermanentBeserkerBrewModel, mutator: Assets.Scripts.Simulation.Objects.BehaviorMutator, affectedTowers: System.Collections.Generic.List<Assets.Scripts.Simulation.Towers.Tower>, **kwargs):
        super().__init__(self, **kwargs)
		self.permanentBeserkerBrewModel = permanentBeserkerBrewModel
		self.mutator = mutator
		self.affectedTowers = affectedTowers


class PierceSupport:

    offsets = {'pierceSupportModel': 136}    
    def __init__(self, pierceSupportModel: Assets.Scripts.Models.Towers.Behaviors.PierceSupportModel, **kwargs):
        super().__init__(self, **kwargs)
		self.pierceSupportModel = pierceSupportModel


class PlaceAlongTrack:

    offsets = {'placeAlongTrackModel': 96, 'entities': 104}    
    def __init__(self, placeAlongTrackModel: Assets.Scripts.Models.Towers.Behaviors.PlaceAlongTrackModel, entities: System.Collections.Generic.List<Assets.Scripts.Simulation.Objects.Entity>, **kwargs):
        super().__init__(self, **kwargs)
		self.placeAlongTrackModel = placeAlongTrackModel
		self.entities = entities


class PlayAnimationIndex:

    offsets = {'playAnimationOnUpgradeModel': 96, 'animationToSet': 104}    
    def __init__(self, playAnimationOnUpgradeModel: Assets.Scripts.Models.Towers.Behaviors.PlayAnimationIndexModel, animationToSet: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.playAnimationOnUpgradeModel = playAnimationOnUpgradeModel
		self.animationToSet = animationToSet


class PoplustSupport:

    offsets = {'poplustSupportModel': 104, 'previousMultiplier': 112, 'zone': 120, 'ignore': 128}    
    def __init__(self, poplustSupportModel: Assets.Scripts.Models.Towers.Behaviors.PoplustSupportModel, previousMultiplier: System.Int32, zone: Assets.Scripts.Simulation.Behaviors.Zoned<Assets.Scripts.Simulation.Towers.Tower>, ignore: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.poplustSupportModel = poplustSupportModel
		self.previousMultiplier = previousMultiplier
		self.zone = zone
		self.ignore = ignore


class PreEmptiveStrikeLauncher:

    offsets = {'preEmptiveStrikeLauncherModel': 96, 'emission': 104, 'targettedBloons': 112}    
    def __init__(self, preEmptiveStrikeLauncherModel: Assets.Scripts.Models.Towers.Behaviors.PreEmptiveStrikeLauncherModel, emission: Assets.Scripts.Simulation.Towers.Emissions.Emission, targettedBloons: System.Collections.Generic.List<System.Int32>, **kwargs):
        super().__init__(self, **kwargs)
		self.preEmptiveStrikeLauncherModel = preEmptiveStrikeLauncherModel
		self.emission = emission
		self.targettedBloons = targettedBloons


class PrinceOfDarknessZombieBuff:

    offsets = {'princeOfDarknessZombieBuffModel': 104, 'mutator': 112, 'zone': 120}    
    def __init__(self, princeOfDarknessZombieBuffModel: Assets.Scripts.Models.Towers.Behaviors.PrinceOfDarknessZombieBuffModel, mutator: Assets.Scripts.Simulation.Towers.Behaviors.PrinceOfDarknessZombieBuff.PrinceOfDarknessZombieBuffMutator, zone: Assets.Scripts.Simulation.Behaviors.Zoned<Assets.Scripts.Simulation.Towers.Tower>, **kwargs):
        super().__init__(self, **kwargs)
		self.princeOfDarknessZombieBuffModel = princeOfDarknessZombieBuffModel
		self.mutator = mutator
		self.zone = zone


class ProjectileRadiusSupport:

    offsets = {'projectileRadiusSupportModel': 136}    
    def __init__(self, projectileRadiusSupportModel: Assets.Scripts.Models.Towers.Behaviors.ProjectileRadiusSupportModel, **kwargs):
        super().__init__(self, **kwargs)
		self.projectileRadiusSupportModel = projectileRadiusSupportModel


class ProjectileSpeedSupport:

    offsets = {'projectileSpeedSupportModel': 136}    
    def __init__(self, projectileSpeedSupportModel: Assets.Scripts.Models.Towers.Behaviors.ProjectileSpeedSupportModel, **kwargs):
        super().__init__(self, **kwargs)
		self.projectileSpeedSupportModel = projectileSpeedSupportModel


class RangeSupport:

    offsets = {'rangeSupportModel': 136}    
    def __init__(self, rangeSupportModel: Assets.Scripts.Models.Towers.Behaviors.RangeSupportModel, **kwargs):
        super().__init__(self, **kwargs)
		self.rangeSupportModel = rangeSupportModel


class RangeUpFromUpgrade:

    offsets = {'rangeUpFromUpgradeModel': 96, 'mutator': 104, 'upgradeCount': 112}    
    def __init__(self, rangeUpFromUpgradeModel: Assets.Scripts.Models.Towers.Behaviors.RangeUpFromUpgradeModel, mutator: Assets.Scripts.Simulation.Towers.Behaviors.RangeUpFromUpgrade.Mutator, upgradeCount: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.rangeUpFromUpgradeModel = rangeUpFromUpgradeModel
		self.mutator = mutator
		self.upgradeCount = upgradeCount


class RateSupport:

    offsets = {'rateSupportModel': 136}    
    def __init__(self, rateSupportModel: Assets.Scripts.Models.Towers.Behaviors.RateSupportModel, **kwargs):
        super().__init__(self, **kwargs)
		self.rateSupportModel = rateSupportModel


class RateSupportBombExpert:

    offsets = {'rateSupportBombExpertModel': 136}    
    def __init__(self, rateSupportBombExpertModel: Assets.Scripts.Models.Towers.Behaviors.RateSupportBombExpertModel, **kwargs):
        super().__init__(self, **kwargs)
		self.rateSupportBombExpertModel = rateSupportBombExpertModel


class RateSupportExplosive:

    offsets = {'rateSupportExplosiveModel': 136}    
    def __init__(self, rateSupportExplosiveModel: Assets.Scripts.Models.Towers.Behaviors.RateSupportExplosiveModel, **kwargs):
        super().__init__(self, **kwargs)
		self.rateSupportExplosiveModel = rateSupportExplosiveModel


class RectangleFootprint:

    offsets = {'rectangleFootprintModel': 96}    
    def __init__(self, rectangleFootprintModel: Assets.Scripts.Models.Towers.Behaviors.RectangleFootprintModel, **kwargs):
        super().__init__(self, **kwargs)
		self.rectangleFootprintModel = rectangleFootprintModel


class RemoveMutatorOnUpgrade:

    offsets = {'removeMutatorOnUpgradeModel': 96, 'mutator': 104}    
    def __init__(self, removeMutatorOnUpgradeModel: Assets.Scripts.Models.Towers.Behaviors.RemoveMutatorOnUpgradeModel, mutator: Assets.Scripts.Simulation.Objects.BehaviorMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.removeMutatorOnUpgradeModel = removeMutatorOnUpgradeModel
		self.mutator = mutator


class RemovePermaBrew:

    offsets = {'bModel': 96}    
    def __init__(self, bModel: Assets.Scripts.Models.Towers.Behaviors.RemovePermaBrewModel, **kwargs):
        super().__init__(self, **kwargs)
		self.bModel = bModel


class RotateToDefaultPositionTower:

    offsets = {'modl': 96}    
    def __init__(self, modl: Assets.Scripts.Models.Towers.Behaviors.RotateToDefaultPositionTowerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.modl = modl


class SavedSubTower:

    offsets = {'savedSubTowerModel': 96}    
    def __init__(self, savedSubTowerModel: Assets.Scripts.Models.Towers.Behaviors.SavedSubTowerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.savedSubTowerModel = savedSubTowerModel


class SelfStackingSupport:

    offsets = {'selfStackingSupportModel': 96, 'mutator': 104, 'zone': 112, 'thisUniqueMutatorId': 120}    
    def __init__(self, selfStackingSupportModel: Assets.Scripts.Models.Towers.Behaviors.SelfStackingSupportModel, mutator: Assets.Scripts.Simulation.Objects.BehaviorMutator, zone: Assets.Scripts.Simulation.Behaviors.Zoned<Assets.Scripts.Simulation.Towers.Tower>, thisUniqueMutatorId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.selfStackingSupportModel = selfStackingSupportModel
		self.mutator = mutator
		self.zone = zone
		self.thisUniqueMutatorId = thisUniqueMutatorId


class SelfStackingSupportCompounding:

    offsets = {'selfStackingSupportCompoundingModel': 104, 'mutator': 112, 'zone': 120, 'thisUniqueMutatorId': 128, 'createdBehaviors': 136, 'count': 144}    
    def __init__(self, selfStackingSupportCompoundingModel: Assets.Scripts.Models.Towers.Behaviors.SelfStackingSupportCompoundingModel, mutator: Assets.Scripts.Simulation.Objects.BehaviorMutator, zone: Assets.Scripts.Simulation.Behaviors.Zoned<Assets.Scripts.Simulation.Towers.Tower>, thisUniqueMutatorId: System.String, createdBehaviors: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.RootBehavior>, count: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.selfStackingSupportCompoundingModel = selfStackingSupportCompoundingModel
		self.mutator = mutator
		self.zone = zone
		self.thisUniqueMutatorId = thisUniqueMutatorId
		self.createdBehaviors = createdBehaviors
		self.count = count


class SellIncreaseZone:

    offsets = {'sellIncreaseZoneModel': 96, 'createdBehaviors': 104}    
    def __init__(self, sellIncreaseZoneModel: Assets.Scripts.Models.Towers.Behaviors.SellIncreaseZoneModel, createdBehaviors: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.RootBehavior>, **kwargs):
        super().__init__(self, **kwargs)
		self.sellIncreaseZoneModel = sellIncreaseZoneModel
		self.createdBehaviors = createdBehaviors


class SellStackedTowers:

    offsets = {'sellStackedTowersModel': 96}    
    def __init__(self, sellStackedTowersModel: Assets.Scripts.Models.Towers.Behaviors.SellStackedTowersModel, **kwargs):
        super().__init__(self, **kwargs)
		self.sellStackedTowersModel = sellStackedTowersModel


class SetHeroLevelOnPlace:

    offsets = {'setLevelModel': 96}    
    def __init__(self, setLevelModel: Assets.Scripts.Models.Towers.Behaviors.SetHeroLevelOnPlaceModel, **kwargs):
        super().__init__(self, **kwargs)
		self.setLevelModel = setLevelModel


class SetTargetPriorityOnUpgrade:

    offsets = {'setTargetPriorityOnUpgradeModel': 96}    
    def __init__(self, setTargetPriorityOnUpgradeModel: Assets.Scripts.Models.Towers.Behaviors.SetTargetPriorityOnUpgradeModel, **kwargs):
        super().__init__(self, **kwargs)
		self.setTargetPriorityOnUpgradeModel = setTargetPriorityOnUpgradeModel


class ShowCashIconInstead:

    offsets = {'showCashIconInsteadModel': 96}    
    def __init__(self, showCashIconInsteadModel: Assets.Scripts.Models.Towers.Behaviors.ShowCashIconInsteadModel, **kwargs):
        super().__init__(self, **kwargs)
		self.showCashIconInsteadModel = showCashIconInsteadModel


class ShowDisplayForTerrain:

    offsets = {'sdModel': 96, 'terrainDisplay': 104}    
    def __init__(self, sdModel: Assets.Scripts.Models.Towers.Behaviors.ShowDisplayForTerrainModel, terrainDisplay: Assets.Scripts.Simulation.Behaviors.DisplayBehavior, **kwargs):
        super().__init__(self, **kwargs)
		self.sdModel = sdModel
		self.terrainDisplay = terrainDisplay


class SkimBloons:

    offsets = {'skimBloonsModel': 96}    
    def __init__(self, skimBloonsModel: Assets.Scripts.Models.Towers.Behaviors.SkimBloonsModel, **kwargs):
        super().__init__(self, **kwargs)
		self.skimBloonsModel = skimBloonsModel


class SlowBloonsZone:

    offsets = {'slowBloonsZoneModel': 96, 'createdBehaviors': 104}    
    def __init__(self, slowBloonsZoneModel: Assets.Scripts.Models.Towers.Behaviors.SlowBloonsZoneModel, createdBehaviors: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.RootBehavior>, **kwargs):
        super().__init__(self, **kwargs)
		self.slowBloonsZoneModel = slowBloonsZoneModel
		self.createdBehaviors = createdBehaviors


class SoulbindManager:

    offsets = {'soulbindManagerModel': 96, 'currentSoulboundTowerIds': 104}    
    def __init__(self, soulbindManagerModel: Assets.Scripts.Models.Towers.Behaviors.SoulbindManagerModel, currentSoulboundTowerIds: System.Collections.Generic.List<System.String>, **kwargs):
        super().__init__(self, **kwargs)
		self.soulbindManagerModel = soulbindManagerModel
		self.currentSoulboundTowerIds = currentSoulboundTowerIds


class SpiritOfTheForest:

    offsets = {'spiritOfTheForestModel': 96, 'currentRadius': 104, 'currentGeneratedRadius': 108, 'vineSeedOrigin': 112, 'vines': 120, 'positions': 128, 'positionsInsideDonut': 136, 'damageOverTimeZoneFar': 144, 'damageOverTimeZoneMiddle': 152, 'damageOverTimeZoneClose': 160, 'lastRoundElapsed': 168, 'donutIndex': 172, 'isGrowing': 176}    
    def __init__(self, spiritOfTheForestModel: Assets.Scripts.Models.Towers.Behaviors.SpiritOfTheForestModel, currentRadius: System.Single, currentGeneratedRadius: System.Single, vineSeedOrigin: Assets.Scripts.Simulation.SMath.Vector2, vines: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Behaviors.VineScale>, positions: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.SMath.Vector3>, positionsInsideDonut: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.SMath.Vector3>, damageOverTimeZoneFar: Assets.Scripts.Simulation.Towers.Behaviors.DamageOverTimeZone, damageOverTimeZoneMiddle: Assets.Scripts.Simulation.Towers.Behaviors.DamageOverTimeZone, damageOverTimeZoneClose: Assets.Scripts.Simulation.Towers.Behaviors.DamageOverTimeZone, lastRoundElapsed: System.Int32, donutIndex: System.Int32, isGrowing: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.spiritOfTheForestModel = spiritOfTheForestModel
		self.currentRadius = currentRadius
		self.currentGeneratedRadius = currentGeneratedRadius
		self.vineSeedOrigin = vineSeedOrigin
		self.vines = vines
		self.positions = positions
		self.positionsInsideDonut = positionsInsideDonut
		self.damageOverTimeZoneFar = damageOverTimeZoneFar
		self.damageOverTimeZoneMiddle = damageOverTimeZoneMiddle
		self.damageOverTimeZoneClose = damageOverTimeZoneClose
		self.lastRoundElapsed = lastRoundElapsed
		self.donutIndex = donutIndex
		self.isGrowing = isGrowing


class StaggeredShots:

    offsets = {'staggeredShotsModel': 96, 'targetStaggeredShotsModel': 104, 'staggeredShotsWeaponBehaviorModel': 112, 'staggeredShotsMutator': 120}    
    def __init__(self, staggeredShotsModel: Assets.Scripts.Models.Towers.Behaviors.StaggeredShotsModel, targetStaggeredShotsModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetStaggeredShotsModel, staggeredShotsWeaponBehaviorModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.StaggeredShotsWeaponBehaviorModel, staggeredShotsMutator: Assets.Scripts.Simulation.Towers.Behaviors.StaggeredShots.Mutator, **kwargs):
        super().__init__(self, **kwargs)
		self.staggeredShotsModel = staggeredShotsModel
		self.targetStaggeredShotsModel = targetStaggeredShotsModel
		self.staggeredShotsWeaponBehaviorModel = staggeredShotsWeaponBehaviorModel
		self.staggeredShotsMutator = staggeredShotsMutator


class StartOfRoundRateBuff:

    offsets = {'startOfRoundRateBuffModel': 96}    
    def __init__(self, startOfRoundRateBuffModel: Assets.Scripts.Models.Towers.Behaviors.StartOfRoundRateBuffModel, **kwargs):
        super().__init__(self, **kwargs)
		self.startOfRoundRateBuffModel = startOfRoundRateBuffModel


class SubCommanderSupport:

    offsets = {'subCommandSupportModel': 136}    
    def __init__(self, subCommandSupportModel: Assets.Scripts.Models.Towers.Behaviors.SubCommanderSupportModel, **kwargs):
        super().__init__(self, **kwargs)
		self.subCommandSupportModel = subCommandSupportModel


class Submerge:

    offsets = {'submergeModel': 96, 'isSubmerged': 104, 'elapsedLast': 108, 'abilityCooldownSupport': 112, 'abilityCooldownSupportGlobal': 120, 'heroXpScaleSupport': 128, 'currZ': 136}    
    def __init__(self, submergeModel: Assets.Scripts.Models.Towers.Behaviors.SubmergeModel, isSubmerged: System.Boolean, elapsedLast: System.Single, abilityCooldownSupport: Assets.Scripts.Simulation.Towers.Behaviors.AbilityCooldownScaleSupport, abilityCooldownSupportGlobal: Assets.Scripts.Simulation.Towers.Behaviors.AbilityCooldownScaleSupport, heroXpScaleSupport: Assets.Scripts.Simulation.Towers.Behaviors.HeroXpScaleSupport, currZ: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.submergeModel = submergeModel
		self.isSubmerged = isSubmerged
		self.elapsedLast = elapsedLast
		self.abilityCooldownSupport = abilityCooldownSupport
		self.abilityCooldownSupportGlobal = abilityCooldownSupportGlobal
		self.heroXpScaleSupport = heroXpScaleSupport
		self.currZ = currZ


class SubmergeEffect:

    offsets = {'submergeEffectModel': 96, 'effectEntity': 104, 'submerged': 112}    
    def __init__(self, submergeEffectModel: Assets.Scripts.Models.Towers.Behaviors.SubmergeEffectModel, effectEntity: Assets.Scripts.Simulation.Objects.Entity, submerged: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.submergeEffectModel = submergeEffectModel
		self.effectEntity = effectEntity
		self.submerged = submerged


class Support:

    offsets = {'mutator': 96, 'supportModel': 104, 'createdBehaviors': 112, 'zone': 120, 'rangeOverride': 128}    
    def __init__(self, mutator: Assets.Scripts.Simulation.Objects.BehaviorMutator, supportModel: Assets.Scripts.Models.Towers.Behaviors.SupportModel, createdBehaviors: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.RootBehavior>, zone: Assets.Scripts.Simulation.Behaviors.Zoned<Assets.Scripts.Simulation.Towers.Tower>, rangeOverride: Assets.Scripts.Utils.Optional<System.Single>, **kwargs):
        super().__init__(self, **kwargs)
		self.mutator = mutator
		self.supportModel = supportModel
		self.createdBehaviors = createdBehaviors
		self.zone = zone
		self.rangeOverride = rangeOverride


class SupportRemoveFilterOutTag:

    offsets = {'supportRemoveFilterOutTagModel': 136}    
    def __init__(self, supportRemoveFilterOutTagModel: Assets.Scripts.Models.Towers.Behaviors.SupportRemoveFilterOutTagModel, **kwargs):
        super().__init__(self, **kwargs)
		self.supportRemoveFilterOutTagModel = supportRemoveFilterOutTagModel


class SupportShinobiTactics:

    offsets = {'supportShinobiTacticsModel': 152}    
    def __init__(self, supportShinobiTacticsModel: Assets.Scripts.Models.Towers.Behaviors.SupportShinobiTacticsModel, **kwargs):
        super().__init__(self, **kwargs)
		self.supportShinobiTacticsModel = supportShinobiTacticsModel


class SupportTowerPlacementZone:

    offsets = {'supportTowerPlacementZoneModel': 136}    
    def __init__(self, supportTowerPlacementZoneModel: Assets.Scripts.Models.Towers.Behaviors.SupportTowerPlacementZoneModel, **kwargs):
        super().__init__(self, **kwargs)
		self.supportTowerPlacementZoneModel = supportTowerPlacementZoneModel


class SwitchTargetSupplierOnUpgrade:

    offsets = {'switchTargetSupplierOnUpgradeModel': 96}    
    def __init__(self, switchTargetSupplierOnUpgradeModel: Assets.Scripts.Models.Towers.Behaviors.SwitchTargetSupplierOnUpgradeModel, **kwargs):
        super().__init__(self, **kwargs)
		self.switchTargetSupplierOnUpgradeModel = switchTargetSupplierOnUpgradeModel


class SyncTargetPriorityWithSubTowers:

    offsets = {'syncTargetPriorityWithSubTowersModel': 96}    
    def __init__(self, syncTargetPriorityWithSubTowersModel: Assets.Scripts.Models.Towers.Behaviors.SyncTargetPriorityWithSubTowersModel, **kwargs):
        super().__init__(self, **kwargs)
		self.syncTargetPriorityWithSubTowersModel = syncTargetPriorityWithSubTowersModel


class Syphon:

    offsets = {'syphonModel': 96, 'syphonFunding': 104}    
    def __init__(self, syphonModel: Assets.Scripts.Models.Towers.Behaviors.SyphonModel, syphonFunding: Assets.Scripts.Simulation.Towers.Behaviors.Abilities.Behaviors.SyphonFunding, **kwargs):
        super().__init__(self, **kwargs)
		self.syphonModel = syphonModel
		self.syphonFunding = syphonFunding


class TakeOffPath:

    offsets = {'p2': 128, 'exponent': 136, 'length': 140}    
    def __init__(self, p2: Assets.Scripts.Simulation.SMath.Vector2, exponent: System.Single, length: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.p2 = p2
		self.exponent = exponent
		self.length = length


class TargetSupplierSupport:

    offsets = {'TargetSupplierSupportModel': 136}    
    def __init__(self, TargetSupplierSupportModel: Assets.Scripts.Models.Towers.Behaviors.TargetSupplierSupportModel, **kwargs):
        super().__init__(self, **kwargs)
		self.TargetSupplierSupportModel = TargetSupplierSupportModel


class TempleTowerMutatorGroup:

    offsets = {'templeTowerMutatorGroupModel': 128}    
    def __init__(self, templeTowerMutatorGroupModel: Assets.Scripts.Models.Towers.Behaviors.TempleTowerMutatorGroupModel, **kwargs):
        super().__init__(self, **kwargs)
		self.templeTowerMutatorGroupModel = templeTowerMutatorGroupModel


class TempleTowerMutatorGroupTierOne:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TempleTowerMutatorGroupTierTwo:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TowerBehaviorBuff:

    offsets = {'towerBehaviorBuffModel': 96}    
    def __init__(self, towerBehaviorBuffModel: Assets.Scripts.Models.Towers.Behaviors.TowerBehaviorBuffModel, **kwargs):
        super().__init__(self, **kwargs)
		self.towerBehaviorBuffModel = towerBehaviorBuffModel


class TowerCreateTower:

    offsets = {'createTowerModel': 96, 'towerAdded': 104}    
    def __init__(self, createTowerModel: Assets.Scripts.Models.Towers.Behaviors.TowerCreateTowerModel, towerAdded: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.createTowerModel = createTowerModel
		self.towerAdded = towerAdded


class TowerExpire:

    offsets = {'towerExpireModel': 96}    
    def __init__(self, towerExpireModel: Assets.Scripts.Models.Towers.Behaviors.TowerExpireModel, **kwargs):
        super().__init__(self, **kwargs)
		self.towerExpireModel = towerExpireModel


class TowerExpireOnParentDestroyed:

    offsets = {'towerExpireOnParentDestroyedModel': 96, 'parentTower': 104, 'getParentTower': 112}    
    def __init__(self, towerExpireOnParentDestroyedModel: Assets.Scripts.Models.Towers.Behaviors.TowerExpireOnParentDestroyedModel, parentTower: Assets.Scripts.Simulation.Towers.Tower, getParentTower: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.towerExpireOnParentDestroyedModel = towerExpireOnParentDestroyedModel
		self.parentTower = parentTower
		self.getParentTower = getParentTower


class TowerExpireOnParentUpgraded:

    offsets = {'towerExpireOnParentUpgradedModel': 96}    
    def __init__(self, towerExpireOnParentUpgradedModel: Assets.Scripts.Models.Towers.Behaviors.TowerExpireOnParentUpgradedModel, **kwargs):
        super().__init__(self, **kwargs)
		self.towerExpireOnParentUpgradedModel = towerExpireOnParentUpgradedModel


class TowerMutatorGroup:

    offsets = {'towerMutatorGroupModel': 96, 'mutators': 104, 'addMutators': 112, 'createdBehaviors': 120}    
    def __init__(self, towerMutatorGroupModel: Assets.Scripts.Models.Towers.Behaviors.TowerMutatorGroupModel, mutators: System.Collections.Generic.List<Assets.Scripts.Simulation.Objects.RootBehavior>, addMutators: System.Boolean, createdBehaviors: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.RootBehavior>, **kwargs):
        super().__init__(self, **kwargs)
		self.towerMutatorGroupModel = towerMutatorGroupModel
		self.mutators = mutators
		self.addMutators = addMutators
		self.createdBehaviors = createdBehaviors


class TowerRadius:

    offsets = {'towerRadiusModel': 96, 'range': 104}    
    def __init__(self, towerRadiusModel: Assets.Scripts.Models.Towers.Behaviors.TowerRadiusModel, range: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.towerRadiusModel = towerRadiusModel
		self.range = range


class TowerSell:

    offsets = {'towerSellModel': 96, 'chargesRemaining': 104}    
    def __init__(self, towerSellModel: Assets.Scripts.Models.Towers.Behaviors.TowerSellModel, chargesRemaining: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.towerSellModel = towerSellModel
		self.chargesRemaining = chargesRemaining


class TradeEmpireBuff:

    offsets = {'tradeEmpireBuffModel': 104, 'lastNumberOfTradeEmpires': 112, 'lastNumberOfMerchantShips': 116}    
    def __init__(self, tradeEmpireBuffModel: Assets.Scripts.Models.Towers.Behaviors.TradeEmpireBuffModel, lastNumberOfTradeEmpires: System.Int32, lastNumberOfMerchantShips: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.tradeEmpireBuffModel = tradeEmpireBuffModel
		self.lastNumberOfTradeEmpires = lastNumberOfTradeEmpires
		self.lastNumberOfMerchantShips = lastNumberOfMerchantShips


class TradeEmpireBuffMutator:

    offsets = {'cashBonus': 112, 'damageBuff': 116, 'stacks': 120}    
    def __init__(self, cashBonus: System.Single, damageBuff: System.Int32, stacks: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.cashBonus = cashBonus
		self.damageBuff = damageBuff
		self.stacks = stacks


class TransformTowerXp:

    offsets = {'transformTowerXpModel': 96}    
    def __init__(self, transformTowerXpModel: Assets.Scripts.Models.Towers.Behaviors.TransformTowerXpModel, **kwargs):
        super().__init__(self, **kwargs)
		self.transformTowerXpModel = transformTowerXpModel


class VineScale:

    offsets = {'vineEntity': 16, 'trans': 24, 'minScale': 32, 'maxScale': 44, 'maxT': 56, 't': 60, 'donutIndex': 64}    
    def __init__(self, vineEntity: Assets.Scripts.Simulation.Objects.Entity, trans: Assets.Scripts.Simulation.Behaviors.TransformBehavior, minScale: Assets.Scripts.Simulation.SMath.Vector3, maxScale: Assets.Scripts.Simulation.SMath.Vector3, maxT: System.Single, t: System.Single, donutIndex: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.vineEntity = vineEntity
		self.trans = trans
		self.minScale = minScale
		self.maxScale = maxScale
		self.maxT = maxT
		self.t = t
		self.donutIndex = donutIndex


class VisibilitySupport:

    offsets = {'visibilitySupportModel': 136}    
    def __init__(self, visibilitySupportModel: Assets.Scripts.Models.Towers.Behaviors.VisibilitySupportModel, **kwargs):
        super().__init__(self, **kwargs)
		self.visibilitySupportModel = visibilitySupportModel


class WeaponReloadPercentageOnTargetPrio:

    offsets = {'weaponReloadPercentageModel': 96}    
    def __init__(self, weaponReloadPercentageModel: Assets.Scripts.Models.Towers.Behaviors.WeaponReloadPercentageOnTargetPrioModel, **kwargs):
        super().__init__(self, **kwargs)
		self.weaponReloadPercentageModel = weaponReloadPercentageModel


class WizardsLibrary:

    offsets = {'wizardsLibraryModel': 96}    
    def __init__(self, wizardsLibraryModel: Assets.Scripts.Models.Towers.Behaviors.WizardsLibraryModel, **kwargs):
        super().__init__(self, **kwargs)
		self.wizardsLibraryModel = wizardsLibraryModel


class Ability:
	staticCooldowns: System.Collections.Generic.Dictionary<System.String,System.Int32>
    offsets = {'staticCooldowns': 0, 'abilityModel': 96, 'createdBehaviors': 104, 'cooldownTimeRemaining': 112, 'frameAdded': 116, 'previousTier': 120, 'animationStartedAt': 124, 'lastActivatedAt': 128, 'activationsThisRound': 132, 'disabledCount': 136, 'hideAbility': 140, 'hideAbilityInBottomRow': 141}    
    def __init__(self, staticCooldowns: System.Collections.Generic.Dictionary<System.String,System.Int32>, abilityModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.AbilityModel, createdBehaviors: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.RootBehavior>, cooldownTimeRemaining: System.Single, frameAdded: System.Int32, previousTier: System.Int32, animationStartedAt: System.Single, lastActivatedAt: System.Single, activationsThisRound: System.Int32, disabledCount: System.Int32, hideAbility: System.Boolean, hideAbilityInBottomRow: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.staticCooldowns = staticCooldowns
		self.abilityModel = abilityModel
		self.createdBehaviors = createdBehaviors
		self.cooldownTimeRemaining = cooldownTimeRemaining
		self.frameAdded = frameAdded
		self.previousTier = previousTier
		self.animationStartedAt = animationStartedAt
		self.lastActivatedAt = lastActivatedAt
		self.activationsThisRound = activationsThisRound
		self.disabledCount = disabledCount
		self.hideAbility = hideAbility
		self.hideAbilityInBottomRow = hideAbilityInBottomRow


class AbilityBehavior:

    offsets = {'ability': 88}    
    def __init__(self, ability: Assets.Scripts.Simulation.Towers.Behaviors.Abilities.Ability, **kwargs):
        super().__init__(self, **kwargs)
		self.ability = ability


class AbilityCreateTower:

    offsets = {'createTowerModel': 96}    
    def __init__(self, createTowerModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.AbilityCreateTowerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.createTowerModel = createTowerModel


class ActivateAttack:

    offsets = {'activateAttackModel': 96, 'attacks': 104, 'pausedAttacks': 112, 'lifespan': 120, 'createdAt': 124, 'checkNewAttacks': 128, 'activatedAttackProcessAdded': 129}    
    def __init__(self, activateAttackModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.ActivateAttackModel, attacks: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.RootBehavior>, pausedAttacks: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.RootBehavior>, lifespan: System.Int32, createdAt: System.Int32, checkNewAttacks: System.Boolean, activatedAttackProcessAdded: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.activateAttackModel = activateAttackModel
		self.attacks = attacks
		self.pausedAttacks = pausedAttacks
		self.lifespan = lifespan
		self.createdAt = createdAt
		self.checkNewAttacks = checkNewAttacks
		self.activatedAttackProcessAdded = activatedAttackProcessAdded


class ActivateAttackSwitch:

    offsets = {'activateAttackSwitchModel': 96, 'attacks': 104, 'firstAttack': 112, 'secondAttack': 120, 'lifespan': 128, 'nextAttackIndex': 132}    
    def __init__(self, activateAttackSwitchModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.ActivateAttackSwitchModel, attacks: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.RootBehavior>, firstAttack: Assets.Scripts.Simulation.Towers.Behaviors.Attack.Attack, secondAttack: Assets.Scripts.Simulation.Towers.Behaviors.Attack.Attack, lifespan: System.Int32, nextAttackIndex: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.activateAttackSwitchModel = activateAttackSwitchModel
		self.attacks = attacks
		self.firstAttack = firstAttack
		self.secondAttack = secondAttack
		self.lifespan = lifespan
		self.nextAttackIndex = nextAttackIndex


class ActivateMutator:

    offsets = {'activateMutatorModel': 96}    
    def __init__(self, activateMutatorModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.ActivateMutatorModel, **kwargs):
        super().__init__(self, **kwargs)
		self.activateMutatorModel = activateMutatorModel


class ActivatePierceSupportZone:

    offsets = {'activatePierceSupportZoneModel': 128, 'createdBehaviors': 136}    
    def __init__(self, activatePierceSupportZoneModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.ActivatePierceSupportZoneModel, createdBehaviors: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.RootBehavior>, **kwargs):
        super().__init__(self, **kwargs)
		self.activatePierceSupportZoneModel = activatePierceSupportZoneModel
		self.createdBehaviors = createdBehaviors


class ActivateRateSupportZone:

    offsets = {'activateRateSupportZoneModel': 128, 'createdBehaviors': 136}    
    def __init__(self, activateRateSupportZoneModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.ActivateRateSupportZoneModel, createdBehaviors: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.RootBehavior>, **kwargs):
        super().__init__(self, **kwargs)
		self.activateRateSupportZoneModel = activateRateSupportZoneModel
		self.createdBehaviors = createdBehaviors


class ActivateTowerDamageSupportZone:

    offsets = {'activateTowerSupportZoneModel': 128, 'createdBehaviors': 136}    
    def __init__(self, activateTowerSupportZoneModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.ActivateTowerDamageSupportZoneModel, createdBehaviors: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.RootBehavior>, **kwargs):
        super().__init__(self, **kwargs)
		self.activateTowerSupportZoneModel = activateTowerSupportZoneModel
		self.createdBehaviors = createdBehaviors


class ActivateTowerSupportZone:

    offsets = {'zone': 96, 'lastActive': 104, 'towersModifiedCount': 108, 'mutator': 112, 'activated': 120}    
    def __init__(self, zone: Assets.Scripts.Simulation.Behaviors.Zoned<Assets.Scripts.Simulation.Towers.Tower>, lastActive: System.Int32, towersModifiedCount: System.Int32, mutator: Assets.Scripts.Simulation.Objects.BehaviorMutator, activated: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.zone = zone
		self.lastActive = lastActive
		self.towersModifiedCount = towersModifiedCount
		self.mutator = mutator
		self.activated = activated


class ActivateVisibilitySupportZone:

    offsets = {'activateVisibilitySupportZoneModel': 128, 'createdBehaviors': 136}    
    def __init__(self, activateVisibilitySupportZoneModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.ActivateVisibilitySupportZoneModel, createdBehaviors: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.RootBehavior>, **kwargs):
        super().__init__(self, **kwargs)
		self.activateVisibilitySupportZoneModel = activateVisibilitySupportZoneModel
		self.createdBehaviors = createdBehaviors


class AmbushTech:

    offsets = {'ambushTechModel': 96, 'showActionButton': 104, 'targetZone': 112, 'display': 120, 'bloonCount': 128, 'selectedPosition2D': 132}    
    def __init__(self, ambushTechModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.AmbushTechModel, showActionButton: System.Boolean, targetZone: Assets.Scripts.Simulation.Objects.Entity, display: Assets.Scripts.Simulation.Objects.Entity, bloonCount: System.Int32, selectedPosition2D: Assets.Scripts.Simulation.SMath.Vector2, **kwargs):
        super().__init__(self, **kwargs)
		self.ambushTechModel = ambushTechModel
		self.showActionButton = showActionButton
		self.targetZone = targetZone
		self.display = display
		self.bloonCount = bloonCount
		self.selectedPosition2D = selectedPosition2D


class ArtilleryCommand:

    offsets = {'artilleryCommandModel': 96}    
    def __init__(self, artilleryCommandModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.ArtilleryCommandModel, **kwargs):
        super().__init__(self, **kwargs)
		self.artilleryCommandModel = artilleryCommandModel


class Biohack:

    offsets = {'biohackModel': 96}    
    def __init__(self, biohackModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.BiohackModel, **kwargs):
        super().__init__(self, **kwargs)
		self.biohackModel = biohackModel


class BloodSacrifice:

    offsets = {'bloodSacrificeModel': 96, 'selectedTowerId': 104}    
    def __init__(self, bloodSacrificeModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.BloodSacrificeModel, selectedTowerId: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.bloodSacrificeModel = bloodSacrificeModel
		self.selectedTowerId = selectedTowerId


class BonusLivesOnAbility:

    offsets = {'bonusLivesOnAbilityModel': 96}    
    def __init__(self, bonusLivesOnAbilityModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.BonusLivesOnAbilityModel, **kwargs):
        super().__init__(self, **kwargs)
		self.bonusLivesOnAbilityModel = bonusLivesOnAbilityModel


class CPOEPMutator:

    offsets = {'countIncrease': 112, 'targetCPOEPId': 120}    
    def __init__(self, countIncrease: System.Int32, targetCPOEPId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.countIncrease = countIncrease
		self.targetCPOEPId = targetCPOEPId


class CallToArms:

    offsets = {'callToArmsModel': 96, 'mutator': 104, 'lifespan': 112}    
    def __init__(self, callToArmsModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.CallToArmsModel, mutator: Assets.Scripts.Simulation.Objects.BehaviorMutator, lifespan: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.callToArmsModel = callToArmsModel
		self.mutator = mutator
		self.lifespan = lifespan


class CashBoost:

    offsets = {'cashBoostModel': 96, 'mutator': 104, 'zone': 112, 'timeActivated': 120}    
    def __init__(self, cashBoostModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.CashBoostModel, mutator: Assets.Scripts.Simulation.Towers.Behaviors.Abilities.Behaviors.CashBoostMutator, zone: Assets.Scripts.Simulation.Behaviors.Zoned<Assets.Scripts.Simulation.Towers.Tower>, timeActivated: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.cashBoostModel = cashBoostModel
		self.mutator = mutator
		self.zone = zone
		self.timeActivated = timeActivated


class CashBoostMutator:

    offsets = {'cashBoostModel': 112}    
    def __init__(self, cashBoostModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.CashBoostModel, **kwargs):
        super().__init__(self, **kwargs)
		self.cashBoostModel = cashBoostModel


class CashPerBananaFarmInRange:

    offsets = {'mdol': 96}    
    def __init__(self, mdol: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.CashPerBananaFarmInRangeModel, **kwargs):
        super().__init__(self, **kwargs)
		self.mdol = mdol


class ChangeDamageType:

    offsets = {'changeDamageTypeModel': 96}    
    def __init__(self, changeDamageTypeModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.ChangeDamageTypeModel, **kwargs):
        super().__init__(self, **kwargs)
		self.changeDamageTypeModel = changeDamageTypeModel


class ChangeDamageTypeMutator:

    offsets = {'changeDamageTypeModel': 112}    
    def __init__(self, changeDamageTypeModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.ChangeDamageTypeModel, **kwargs):
        super().__init__(self, **kwargs)
		self.changeDamageTypeModel = changeDamageTypeModel


class ChangeProjectileDisplay:

    offsets = {'changeProjectileDisplayModel': 96}    
    def __init__(self, changeProjectileDisplayModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.ChangeProjectileDisplayModel, **kwargs):
        super().__init__(self, **kwargs)
		self.changeProjectileDisplayModel = changeProjectileDisplayModel


class CollectFromBank:

    offsets = {'collectFromBankModel': 96}    
    def __init__(self, collectFromBankModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.CollectFromBankModel, **kwargs):
        super().__init__(self, **kwargs)
		self.collectFromBankModel = collectFromBankModel


class CreateEffectOnAbility:

    offsets = {'createEffectOnAbilityModel': 96, 'effect': 104}    
    def __init__(self, createEffectOnAbilityModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.CreateEffectOnAbilityModel, effect: Assets.Scripts.Simulation.Objects.Entity, **kwargs):
        super().__init__(self, **kwargs)
		self.createEffectOnAbilityModel = createEffectOnAbilityModel
		self.effect = effect


class CreateEffectOnAbilityEnd:

    offsets = {'createEffectOnAbilityEndModel': 96, 'startedAt': 104}    
    def __init__(self, createEffectOnAbilityEndModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.CreateEffectOnAbilityEndModel, startedAt: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.createEffectOnAbilityEndModel = createEffectOnAbilityEndModel
		self.startedAt = startedAt


class CreateSoundOnAbility:

    offsets = {'createSoundOnAbilityModel': 96}    
    def __init__(self, createSoundOnAbilityModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.CreateSoundOnAbilityModel, **kwargs):
        super().__init__(self, **kwargs)
		self.createSoundOnAbilityModel = createSoundOnAbilityModel


class DamageMutator:

    offsets = {'parent': 112, 'display': 120}    
    def __init__(self, parent: Assets.Scripts.Simulation.Towers.Behaviors.Abilities.Behaviors.ActivateTowerDamageSupportZone, display: Assets.Scripts.Models.GenericBehaviors.DisplayModel, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.display = display


class DamageUp:

    offsets = {'damageUpModel': 96}    
    def __init__(self, damageUpModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.DamageUpModel, **kwargs):
        super().__init__(self, **kwargs)
		self.damageUpModel = damageUpModel


class Darkshift:

    offsets = {'darkshiftModel': 96, 'shifting': 104, 'teleportPos': 108, 'frameToMove': 116, 'rData': 120}    
    def __init__(self, darkshiftModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.DarkshiftModel, shifting: System.Boolean, teleportPos: Assets.Scripts.Simulation.SMath.Vector2, frameToMove: System.Int32, rData: Assets.Scripts.Models.Towers.RepositionTowerCIResultData, **kwargs):
        super().__init__(self, **kwargs)
		self.darkshiftModel = darkshiftModel
		self.shifting = shifting
		self.teleportPos = teleportPos
		self.frameToMove = frameToMove
		self.rData = rData


class Deploy:

    offsets = {'deployModel': 96, 'placeholderTower': 104, 'heliMovement': 112, 'airUnit': 120, 'doorGunner': 128, 'redeploy': 136, 'isDeployingTower': 144, 'rData': 152}    
    def __init__(self, deployModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.DeployModel, placeholderTower: Assets.Scripts.Simulation.Towers.Tower, heliMovement: Assets.Scripts.Simulation.Towers.Behaviors.HeliMovement, airUnit: Assets.Scripts.Simulation.Towers.Behaviors.AirUnit, doorGunner: Assets.Scripts.Simulation.Towers.Behaviors.Abilities.Behaviors.DoorGunner, redeploy: Assets.Scripts.Simulation.Towers.Behaviors.Abilities.Behaviors.Redeploy, isDeployingTower: System.Boolean, rData: Assets.Scripts.Models.Towers.DeployCIResultData, **kwargs):
        super().__init__(self, **kwargs)
		self.deployModel = deployModel
		self.placeholderTower = placeholderTower
		self.heliMovement = heliMovement
		self.airUnit = airUnit
		self.doorGunner = doorGunner
		self.redeploy = redeploy
		self.isDeployingTower = isDeployingTower
		self.rData = rData


class DoorGunner:

    offsets = {'doorGunnerModel': 96, 'targetTower': 104, 'heliMovement': 112, 'airUnit': 120, 'isMovingToTower': 128, 'hasPickedUpTower': 129, 'pausedAbilities': 136, 'rData': 144}    
    def __init__(self, doorGunnerModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.DoorGunnerModel, targetTower: Assets.Scripts.Simulation.Towers.Tower, heliMovement: Assets.Scripts.Simulation.Towers.Behaviors.HeliMovement, airUnit: Assets.Scripts.Simulation.Towers.Behaviors.AirUnit, isMovingToTower: System.Boolean, hasPickedUpTower: System.Boolean, pausedAbilities: System.Collections.Generic.List<Assets.Scripts.Simulation.Towers.Behaviors.Abilities.Ability>, rData: Assets.Scripts.Models.Towers.DoorGunnerCIResultData, **kwargs):
        super().__init__(self, **kwargs)
		self.doorGunnerModel = doorGunnerModel
		self.targetTower = targetTower
		self.heliMovement = heliMovement
		self.airUnit = airUnit
		self.isMovingToTower = isMovingToTower
		self.hasPickedUpTower = hasPickedUpTower
		self.pausedAbilities = pausedAbilities
		self.rData = rData


class DroneSwarm:

    offsets = {'droneSwarmModel': 96, 'activatedAt': 104, 'isActive': 108, 'hasSetTargetTypes': 109, 'droneSupport': 112, 'isMovingBack': 120, 'dronesToRemove': 128}    
    def __init__(self, droneSwarmModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.DroneSwarmModel, activatedAt: System.Int32, isActive: System.Boolean, hasSetTargetTypes: System.Boolean, droneSupport: Assets.Scripts.Simulation.Towers.Behaviors.DroneSupport, isMovingBack: System.Boolean, dronesToRemove: System.Collections.Generic.List<Assets.Scripts.Simulation.Towers.Tower>, **kwargs):
        super().__init__(self, **kwargs)
		self.droneSwarmModel = droneSwarmModel
		self.activatedAt = activatedAt
		self.isActive = isActive
		self.hasSetTargetTypes = hasSetTargetTypes
		self.droneSupport = droneSupport
		self.isMovingBack = isMovingBack
		self.dronesToRemove = dronesToRemove


class EmergencyUnlock:

    offsets = {'emergencyUnlockModel': 96, 'simBehavior': 104, 'wasAvailableLastFrame': 112}    
    def __init__(self, emergencyUnlockModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.EmergencyUnlockModel, simBehavior: Assets.Scripts.Simulation.SimulationBehaviors.EmergencyUnlockSimBehavior, wasAvailableLastFrame: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.emergencyUnlockModel = emergencyUnlockModel
		self.simBehavior = simBehavior
		self.wasAvailableLastFrame = wasAvailableLastFrame


class FindDeploymentLocation:

    offsets = {'deployModel': 96}    
    def __init__(self, deployModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.FindDeploymentLocationModel, **kwargs):
        super().__init__(self, **kwargs)
		self.deployModel = deployModel


class GroundZeroBombBuff:

    offsets = {'groundZeroBombBuff': 96}    
    def __init__(self, groundZeroBombBuff: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.GroundZeroBombBuffModel, **kwargs):
        super().__init__(self, **kwargs)
		self.groundZeroBombBuff = groundZeroBombBuff


class ImfLoan:

    offsets = {'imfLoanModel': 96}    
    def __init__(self, imfLoanModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.ImfLoanModel, **kwargs):
        super().__init__(self, **kwargs)
		self.imfLoanModel = imfLoanModel


class Immunity:

    offsets = {'immunityModel': 96, 'startedAt': 104, 'effects': 112}    
    def __init__(self, immunityModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.ImmunityModel, startedAt: System.Int32, effects: System.Collections.Generic.List<Assets.Scripts.Simulation.Objects.Entity>, **kwargs):
        super().__init__(self, **kwargs)
		self.immunityModel = immunityModel
		self.startedAt = startedAt
		self.effects = effects


class IncreaseRange:

    offsets = {'increaseRangeModel': 96}    
    def __init__(self, increaseRangeModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.IncreaseRangeModel, **kwargs):
        super().__init__(self, **kwargs)
		self.increaseRangeModel = increaseRangeModel


class LeapingSword:

    offsets = {'leapingSwordModel': 96, 'landAt': 104, 'createFinishingEffectAt': 108, 'finishAt': 112, 'jumpingAtBloon': 120, 'jumpingAtPosition': 128, 'pausedAttacks': 144, 'emission': 152, 'landingEffect': 160, 'isPendingStart': 168, 'pendingPosition': 172, 'projectiles': 184}    
    def __init__(self, leapingSwordModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.LeapingSwordModel, landAt: System.Int32, createFinishingEffectAt: System.Int32, finishAt: System.Int32, jumpingAtBloon: Assets.Scripts.Simulation.Bloons.Bloon, jumpingAtPosition: Assets.Scripts.Simulation.SMath.Vector3, pausedAttacks: System.Collections.Generic.List<Assets.Scripts.Simulation.Towers.Behaviors.Attack.Attack>, emission: Assets.Scripts.Simulation.Towers.Emissions.Emission, landingEffect: Assets.Scripts.Simulation.Objects.Entity, isPendingStart: System.Boolean, pendingPosition: Assets.Scripts.Simulation.SMath.Vector3, projectiles: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Projectiles.Projectile>, **kwargs):
        super().__init__(self, **kwargs)
		self.leapingSwordModel = leapingSwordModel
		self.landAt = landAt
		self.createFinishingEffectAt = createFinishingEffectAt
		self.finishAt = finishAt
		self.jumpingAtBloon = jumpingAtBloon
		self.jumpingAtPosition = jumpingAtPosition
		self.pausedAttacks = pausedAttacks
		self.emission = emission
		self.landingEffect = landingEffect
		self.isPendingStart = isPendingStart
		self.pendingPosition = pendingPosition
		self.projectiles = projectiles


class LongArmOfLight:

    offsets = {'longArmOfLightModel': 96}    
    def __init__(self, longArmOfLightModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.LongArmOfLightModel, **kwargs):
        super().__init__(self, **kwargs)
		self.longArmOfLightModel = longArmOfLightModel


class MoabBarrage:

    offsets = {'moabBarrageModel': 96, 'display': 104}    
    def __init__(self, moabBarrageModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.MoabBarrageModel, display: Assets.Scripts.Simulation.Behaviors.DisplayBehavior, **kwargs):
        super().__init__(self, **kwargs)
		self.moabBarrageModel = moabBarrageModel
		self.display = display


class MonkeyFanClub:

    offsets = {'monkeyFanClubModel': 96, 'mutatorId': 104, 'isPlasma': 112, 'mutator': 120, 'baseMutator': 128, 'mutatorsToGet': 136}    
    def __init__(self, monkeyFanClubModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.MonkeyFanClubModel, mutatorId: System.String, isPlasma: System.Boolean, mutator: Assets.Scripts.Simulation.Objects.BehaviorMutator, baseMutator: Assets.Scripts.Simulation.Objects.BehaviorMutator, mutatorsToGet: System.Collections.Generic.List<Assets.Scripts.Simulation.Objects.TimedMutator>, **kwargs):
        super().__init__(self, **kwargs)
		self.monkeyFanClubModel = monkeyFanClubModel
		self.mutatorId = mutatorId
		self.isPlasma = isPlasma
		self.mutator = mutator
		self.baseMutator = baseMutator
		self.mutatorsToGet = mutatorsToGet


class MorphTower:

    offsets = {'morphTowerModel': 96, 'frameStartedAt': 104, 'processRunning': 108, 'morphedTowers': 112, 'airUnit': 120, 'effectPlayed': 128}    
    def __init__(self, morphTowerModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.MorphTowerModel, frameStartedAt: System.Int32, processRunning: System.Boolean, morphedTowers: System.Collections.Generic.List<Assets.Scripts.Simulation.Towers.Tower>, airUnit: Assets.Scripts.Simulation.Towers.Behaviors.AirUnit, effectPlayed: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.morphTowerModel = morphTowerModel
		self.frameStartedAt = frameStartedAt
		self.processRunning = processRunning
		self.morphedTowers = morphedTowers
		self.airUnit = airUnit
		self.effectPlayed = effectPlayed


class MutateCreateProjectileOnExhaustPierceOnAbility:

    offsets = {'modl': 96}    
    def __init__(self, modl: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.MutateCreateProjectileOnExhaustPierceOnAbilityModel, **kwargs):
        super().__init__(self, **kwargs)
		self.modl = modl


class MutateDamageOnAbility:

    offsets = {'modl': 96}    
    def __init__(self, modl: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.MutateDamageOnAbilityModel, **kwargs):
        super().__init__(self, **kwargs)
		self.modl = modl


class MutateProjectileOnAbility:

    offsets = {'mutateProjectileOnAbilityModel': 96}    
    def __init__(self, mutateProjectileOnAbilityModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.MutateProjectileOnAbilityModel, **kwargs):
        super().__init__(self, **kwargs)
		self.mutateProjectileOnAbilityModel = mutateProjectileOnAbilityModel


class MutateRemoveAllAttacksOnAbilityActivate:

    offsets = {'myModel': 96, 'activated': 104, 'endAbilityFrame': 108}    
    def __init__(self, myModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.MutateRemoveAllAttacksOnAbilityActivateModel, activated: System.Boolean, endAbilityFrame: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.myModel = myModel
		self.activated = activated
		self.endAbilityFrame = endAbilityFrame


class Overclock:

    offsets = {'overclockModel': 96, 'selectedTower': 104, 'selectedTowerId': 112}    
    def __init__(self, overclockModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.OverclockModel, selectedTower: Assets.Scripts.Simulation.Towers.Tower, selectedTowerId: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.overclockModel = overclockModel
		self.selectedTower = selectedTower
		self.selectedTowerId = selectedTowerId


class OverclockPermanent:

    offsets = {'overclockPermanentModel': 96, 'towersHaveAppliedToo': 104}    
    def __init__(self, overclockPermanentModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.OverclockPermanentModel, towersHaveAppliedToo: System.Collections.Generic.Dictionary<System.Int32,System.Int32>, **kwargs):
        super().__init__(self, **kwargs)
		self.overclockPermanentModel = overclockPermanentModel
		self.towersHaveAppliedToo = towersHaveAppliedToo


class PauseAllOtherAttacks:

    offsets = {'pauseAllOtherAttacksModel': 96, 'checkNewAttacks': 104, 'createdAt': 108, 'activatedAttackProcessAdded': 112, 'pausedAttacks': 120}    
    def __init__(self, pauseAllOtherAttacksModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.PauseAllOtherAttacksModel, checkNewAttacks: System.Boolean, createdAt: System.Int32, activatedAttackProcessAdded: System.Boolean, pausedAttacks: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.RootBehavior>, **kwargs):
        super().__init__(self, **kwargs)
		self.pauseAllOtherAttacksModel = pauseAllOtherAttacksModel
		self.checkNewAttacks = checkNewAttacks
		self.createdAt = createdAt
		self.activatedAttackProcessAdded = activatedAttackProcessAdded
		self.pausedAttacks = pausedAttacks


class PierceMutator:

    offsets = {'parent': 112, 'display': 120}    
    def __init__(self, parent: Assets.Scripts.Simulation.Towers.Behaviors.Abilities.Behaviors.ActivatePierceSupportZone, display: Assets.Scripts.Models.GenericBehaviors.DisplayModel, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.display = display


class PlaceProjectileAt:

    offsets = {'placeProjectileAtModel': 96, 'emitProjectileAt': 104, 'location': 108, 'emission': 120, 'currentRotation': 128, 'hasSelectedPosition': 132, 'rData': 136, 'projectiles': 144}    
    def __init__(self, placeProjectileAtModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.PlaceProjectileAtModel, emitProjectileAt: System.Int32, location: Assets.Scripts.Simulation.SMath.Vector3, emission: Assets.Scripts.Simulation.Towers.Emissions.Emission, currentRotation: System.Single, hasSelectedPosition: System.Boolean, rData: Assets.Scripts.Models.Towers.DeployCIResultData, projectiles: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Projectiles.Projectile>, **kwargs):
        super().__init__(self, **kwargs)
		self.placeProjectileAtModel = placeProjectileAtModel
		self.emitProjectileAt = emitProjectileAt
		self.location = location
		self.emission = emission
		self.currentRotation = currentRotation
		self.hasSelectedPosition = hasSelectedPosition
		self.rData = rData
		self.projectiles = projectiles


class RateMutator:

    offsets = {'parent': 112, 'display': 120}    
    def __init__(self, parent: Assets.Scripts.Simulation.Towers.Behaviors.Abilities.Behaviors.ActivateRateSupportZone, display: Assets.Scripts.Models.GenericBehaviors.DisplayModel, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.display = display


class Redeploy:

    offsets = {'redeployModel': 96, 'targetTower': 104, 'placeholderTower': 112, 'heliMovement': 120, 'airUnit': 128, 'doorGunner': 136, 'isMovingToTower': 144, 'isRedeployingTower': 145, 'redeployStartLoc': 148, 'pausedAbilities': 160, 'pausedAttacks': 168, 'temp': 176, 'rData': 184}    
    def __init__(self, redeployModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.RedeployModel, targetTower: Assets.Scripts.Simulation.Towers.Tower, placeholderTower: Assets.Scripts.Simulation.Towers.Tower, heliMovement: Assets.Scripts.Simulation.Towers.Behaviors.HeliMovement, airUnit: Assets.Scripts.Simulation.Towers.Behaviors.AirUnit, doorGunner: Assets.Scripts.Simulation.Towers.Behaviors.Abilities.Behaviors.DoorGunner, isMovingToTower: System.Boolean, isRedeployingTower: System.Boolean, redeployStartLoc: Assets.Scripts.Simulation.SMath.Vector2, pausedAbilities: System.Collections.Generic.List<Assets.Scripts.Simulation.Towers.Behaviors.Abilities.Ability>, pausedAttacks: System.Collections.Generic.List<Assets.Scripts.Simulation.Towers.Behaviors.Attack.Attack>, temp: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Behaviors.Attack.Attack>, rData: Assets.Scripts.Models.Towers.RedeployCIResultData, **kwargs):
        super().__init__(self, **kwargs)
		self.redeployModel = redeployModel
		self.targetTower = targetTower
		self.placeholderTower = placeholderTower
		self.heliMovement = heliMovement
		self.airUnit = airUnit
		self.doorGunner = doorGunner
		self.isMovingToTower = isMovingToTower
		self.isRedeployingTower = isRedeployingTower
		self.redeployStartLoc = redeployStartLoc
		self.pausedAbilities = pausedAbilities
		self.pausedAttacks = pausedAttacks
		self.temp = temp
		self.rData = rData


class Soulbind:

    offsets = {'soulbindModel': 96, 'selectedTower': 104, 'effects': 112, 'hideUI': 120}    
    def __init__(self, soulbindModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.SoulbindModel, selectedTower: Assets.Scripts.Simulation.Towers.Tower, effects: System.Collections.Generic.List<Assets.Scripts.Simulation.Objects.Entity>, hideUI: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.soulbindModel = soulbindModel
		self.selectedTower = selectedTower
		self.effects = effects
		self.hideUI = hideUI


class SwitchDisplay:

    offsets = {'switchDisplayModel': 96, 'framesAtCreation': 104, 'mutator': 112}    
    def __init__(self, switchDisplayModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.SwitchDisplayModel, framesAtCreation: System.Int32, mutator: Assets.Scripts.Simulation.Objects.BehaviorMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.switchDisplayModel = switchDisplayModel
		self.framesAtCreation = framesAtCreation
		self.mutator = mutator


class SwordCharge:

    offsets = {'swordChargeModel': 96, 'pausedAttacks': 104, 'emission': 112, 'projectiles': 120, 'isActive': 128, 'currentIteration': 132, 'initialDelayEndsAt': 136, 'abilityEndsAt': 140, 'isPendingStart': 144, 'effectDuringCharge': 152, 'destroyEffectDuringChargeAt': 160, 'emittedProjectiles': 168, 'pathsWithProjectiles': 176}    
    def __init__(self, swordChargeModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.SwordChargeModel, pausedAttacks: System.Collections.Generic.List<Assets.Scripts.Simulation.Towers.Behaviors.Attack.Attack>, emission: Assets.Scripts.Simulation.Towers.Emissions.Emission, projectiles: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Projectiles.Projectile>, isActive: System.Boolean, currentIteration: System.Int32, initialDelayEndsAt: System.Int32, abilityEndsAt: System.Int32, isPendingStart: System.Boolean, effectDuringCharge: Assets.Scripts.Simulation.Objects.Entity, destroyEffectDuringChargeAt: System.Single, emittedProjectiles: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Projectiles.Projectile>, pathsWithProjectiles: System.Collections.Generic.List<Assets.Scripts.Simulation.Track.Path>, **kwargs):
        super().__init__(self, **kwargs)
		self.swordChargeModel = swordChargeModel
		self.pausedAttacks = pausedAttacks
		self.emission = emission
		self.projectiles = projectiles
		self.isActive = isActive
		self.currentIteration = currentIteration
		self.initialDelayEndsAt = initialDelayEndsAt
		self.abilityEndsAt = abilityEndsAt
		self.isPendingStart = isPendingStart
		self.effectDuringCharge = effectDuringCharge
		self.destroyEffectDuringChargeAt = destroyEffectDuringChargeAt
		self.emittedProjectiles = emittedProjectiles
		self.pathsWithProjectiles = pathsWithProjectiles


class SyphonFunding:

    offsets = {'syphonFundingModel': 96, 'lastActive': 104, 'active': 108}    
    def __init__(self, syphonFundingModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.SyphonFundingModel, lastActive: System.Int32, active: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.syphonFundingModel = syphonFundingModel
		self.lastActive = lastActive
		self.active = active


class TechBotLink:

    offsets = {'techBotLinkModel': 96, 'linkedTower': 104, 'linkedAbilities': 112, 'linkedTowerDisplay': 128, 'lineDotDisplays': 136, 'drawDots': 144, 'abilityBanList': 152, 'travelDisplay': 160, 'travelDisplayPostLifetimeCurrent': 168, 'isTravelDisplayInPostLifetime': 172, 'ambushTech': 176, 'selectedTowerId': 184, 'selectedObj': 192}    
    def __init__(self, techBotLinkModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.TechBotLinkModel, linkedTower: Assets.Scripts.Simulation.Towers.Tower, linkedAbilities: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Behaviors.Abilities.Ability>, linkedTowerDisplay: Assets.Scripts.Simulation.Objects.Entity, lineDotDisplays: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.Entity>, drawDots: System.Boolean, abilityBanList: System.Collections.Generic.List<System.String>, travelDisplay: Assets.Scripts.Simulation.Objects.Entity, travelDisplayPostLifetimeCurrent: System.Single, isTravelDisplayInPostLifetime: System.Boolean, ambushTech: Assets.Scripts.Simulation.Towers.Behaviors.Abilities.Behaviors.AmbushTech, selectedTowerId: System.Int32, selectedObj: Assets.Scripts.Simulation.Objects.SelectableObject, **kwargs):
        super().__init__(self, **kwargs)
		self.techBotLinkModel = techBotLinkModel
		self.linkedTower = linkedTower
		self.linkedAbilities = linkedAbilities
		self.linkedTowerDisplay = linkedTowerDisplay
		self.lineDotDisplays = lineDotDisplays
		self.drawDots = drawDots
		self.abilityBanList = abilityBanList
		self.travelDisplay = travelDisplay
		self.travelDisplayPostLifetimeCurrent = travelDisplayPostLifetimeCurrent
		self.isTravelDisplayInPostLifetime = isTravelDisplayInPostLifetime
		self.ambushTech = ambushTech
		self.selectedTowerId = selectedTowerId
		self.selectedObj = selectedObj


class TechBotUnlink:

    offsets = {'techBotUnlinkModel': 96, 'techBotLink': 104}    
    def __init__(self, techBotUnlinkModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.TechBotUnlinkModel, techBotLink: Assets.Scripts.Simulation.Towers.Behaviors.Abilities.Behaviors.TechBotLink, **kwargs):
        super().__init__(self, **kwargs)
		self.techBotUnlinkModel = techBotUnlinkModel
		self.techBotLink = techBotLink


class Turbo:

    offsets = {'turboModel': 96, 'mutator': 104}    
    def __init__(self, turboModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.TurboModel, mutator: Assets.Scripts.Simulation.Towers.Behaviors.Abilities.Behaviors.TurboMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.turboModel = turboModel
		self.mutator = mutator


class TurboMutator:

    offsets = {'turboMultiplier': 112, 'projectileDisplay': 120, 'extraDamage': 128, 'projectileRadiusScaleBonus': 132}    
    def __init__(self, turboMultiplier: System.Single, projectileDisplay: System.String, extraDamage: System.Int32, projectileRadiusScaleBonus: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.turboMultiplier = turboMultiplier
		self.projectileDisplay = projectileDisplay
		self.extraDamage = extraDamage
		self.projectileRadiusScaleBonus = projectileRadiusScaleBonus


class UCAV:

    offsets = {'ucavModel': 96, 'activatedAt': 104, 'isActive': 108, 'ucavTower': 112}    
    def __init__(self, ucavModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.UCAVModel, activatedAt: System.Int32, isActive: System.Boolean, ucavTower: Assets.Scripts.Simulation.Towers.Tower, **kwargs):
        super().__init__(self, **kwargs)
		self.ucavModel = ucavModel
		self.activatedAt = activatedAt
		self.isActive = isActive
		self.ucavTower = ucavTower


class VineRupture:

    offsets = {'vineRuptureModel': 96, 'currentTick': 104, 'isExploding': 108, 'framesUntilNextExplosion': 112, 'spiritOfTheForest': 120, 'emission': 128}    
    def __init__(self, vineRuptureModel: Assets.Scripts.Models.Towers.Behaviors.Abilities.Behaviors.VineRuptureModel, currentTick: System.Int32, isExploding: System.Boolean, framesUntilNextExplosion: System.Int32, spiritOfTheForest: Assets.Scripts.Simulation.Towers.Behaviors.SpiritOfTheForest, emission: Assets.Scripts.Simulation.Towers.Emissions.Emission, **kwargs):
        super().__init__(self, **kwargs)
		self.vineRuptureModel = vineRuptureModel
		self.currentTick = currentTick
		self.isExploding = isExploding
		self.framesUntilNextExplosion = framesUntilNextExplosion
		self.spiritOfTheForest = spiritOfTheForest
		self.emission = emission


class VisibilityMutator:

    offsets = {'display': 112}    
    def __init__(self, display: Assets.Scripts.Models.GenericBehaviors.DisplayModel, **kwargs):
        super().__init__(self, **kwargs)
		self.display = display


class Attack:

    offsets = {'attackModel': 96, 'createdBehaviors': 104, 'attackBehaviors': 112, 'visiblePathSegmentsUnordered': 120, 'visiblePathSegments': 128, 'activeTargetSupplier': 136, 'isThrowCacheInitialised': 144, 'range': 148, 'onlyTargetsMoab': 152, 'cantTargetMoab': 153, 'cantTargetCamo': 154, 'usingSharedRange': 155, 'useOnTheMoveTargetting': 156, 'newTarget': 157, 'targetLastClearedTime': 160, 'frameTarget': 168, 'filterTarget': 232, 'segsReturn': 240, 'compareClosePosition': 248}    
    def __init__(self, attackModel: Assets.Scripts.Models.Towers.Behaviors.Attack.AttackModel, createdBehaviors: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.RootBehavior>, attackBehaviors: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Behaviors.Attack.AttackBehavior>, visiblePathSegmentsUnordered: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Behaviors.Attack.PathSegmentInRange>, visiblePathSegments: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Behaviors.Attack.PathSegmentInRange>>, activeTargetSupplier: Assets.Scripts.Simulation.Towers.Behaviors.Attack.Behaviors.TargetSupplier, isThrowCacheInitialised: System.Boolean, range: System.Single, onlyTargetsMoab: System.Boolean, cantTargetMoab: System.Boolean, cantTargetCamo: System.Boolean, usingSharedRange: System.Boolean, useOnTheMoveTargetting: System.Boolean, newTarget: System.Boolean, targetLastClearedTime: System.Int32, frameTarget: Assets.Scripts.Simulation.Towers.Target, filterTarget: Assets.Scripts.Simulation.Bloons.BloonManager.BloonFilter, segsReturn: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Behaviors.Attack.PathSegmentInRange>, compareClosePosition: Assets.Scripts.Simulation.SMath.Vector2, **kwargs):
        super().__init__(self, **kwargs)
		self.attackModel = attackModel
		self.createdBehaviors = createdBehaviors
		self.attackBehaviors = attackBehaviors
		self.visiblePathSegmentsUnordered = visiblePathSegmentsUnordered
		self.visiblePathSegments = visiblePathSegments
		self.activeTargetSupplier = activeTargetSupplier
		self.isThrowCacheInitialised = isThrowCacheInitialised
		self.range = range
		self.onlyTargetsMoab = onlyTargetsMoab
		self.cantTargetMoab = cantTargetMoab
		self.cantTargetCamo = cantTargetCamo
		self.usingSharedRange = usingSharedRange
		self.useOnTheMoveTargetting = useOnTheMoveTargetting
		self.newTarget = newTarget
		self.targetLastClearedTime = targetLastClearedTime
		self.frameTarget = frameTarget
		self.filterTarget = filterTarget
		self.segsReturn = segsReturn
		self.compareClosePosition = compareClosePosition


class AttackAirUnit:

    offsets = {'attackAirUnitModel': 256, 'airUnit': 264, 'display': 272}    
    def __init__(self, attackAirUnitModel: Assets.Scripts.Models.Towers.Behaviors.Attack.AttackAirUnitModel, airUnit: Assets.Scripts.Simulation.Towers.Behaviors.AirUnit, display: Assets.Scripts.Simulation.Behaviors.DisplayBehavior, **kwargs):
        super().__init__(self, **kwargs)
		self.attackAirUnitModel = attackAirUnitModel
		self.airUnit = airUnit
		self.display = display


class AttackBehavior:

    offsets = {'attack': 88}    
    def __init__(self, attack: Assets.Scripts.Simulation.Towers.Behaviors.Attack.Attack, **kwargs):
        super().__init__(self, **kwargs)
		self.attack = attack


class PathSegmentInRange:

    offsets = {'segment': 16, 'inRange': 24, 'canSeeCamo': 25, 'lineOfSight': 26}    
    def __init__(self, segment: Assets.Scripts.Simulation.Track.PathSegment, inRange: System.Boolean, canSeeCamo: System.Boolean, lineOfSight: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.segment = segment
		self.inRange = inRange
		self.canSeeCamo = canSeeCamo
		self.lineOfSight = lineOfSight


class AttackFilter:

    offsets = {'attackFilterModel': 96, 'filters': 104}    
    def __init__(self, attackFilterModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.AttackFilterModel, filters: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.RootBehavior>, **kwargs):
        super().__init__(self, **kwargs)
		self.attackFilterModel = attackFilterModel
		self.filters = filters


class BrewTargetting:

    offsets = {'brewTargettingModel': 96}    
    def __init__(self, brewTargettingModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.BrewTargettingModel, **kwargs):
        super().__init__(self, **kwargs)
		self.brewTargettingModel = brewTargettingModel


class CenterElipsePattern:

    offsets = {'centerElipsePatternModel': 128, 'centerElipsePatternTargetType': 136, 'dotImgs': 152, 'poss': 160, 'selectedPoint': 168, 'targetImg': 184, 'currActive': 192, 't': 196}    
    def __init__(self, centerElipsePatternModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.CenterElipsePatternModel, centerElipsePatternTargetType: Assets.Scripts.Models.Towers.TargetType, dotImgs: System.Collections.Generic.List<Assets.Scripts.Simulation.Objects.Entity>, poss: System.Collections.Generic.List<Assets.Scripts.Simulation.SMath.Vector3>, selectedPoint: Assets.Scripts.Utils.Optional<Assets.Scripts.Simulation.SMath.Vector2>, targetImg: Assets.Scripts.Simulation.Objects.Entity, currActive: System.Boolean, t: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.centerElipsePatternModel = centerElipsePatternModel
		self.centerElipsePatternTargetType = centerElipsePatternTargetType
		self.dotImgs = dotImgs
		self.poss = poss
		self.selectedPoint = selectedPoint
		self.targetImg = targetImg
		self.currActive = currActive
		self.t = t


class CheckTargetsWithoutOffsets:

    offsets = {'checkTargetsWithoutOffsetsModel': 96}    
    def __init__(self, checkTargetsWithoutOffsetsModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.CheckTargetsWithoutOffsetsModel, **kwargs):
        super().__init__(self, **kwargs)
		self.checkTargetsWithoutOffsetsModel = checkTargetsWithoutOffsetsModel


class CirclePattern:

    offsets = {'circlePatternModel': 128, 'dotImgs': 136, 'poss': 144, 'currActive': 152, 't': 156}    
    def __init__(self, circlePatternModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.CirclePatternModel, dotImgs: System.Collections.Generic.List<Assets.Scripts.Simulation.Objects.Entity>, poss: System.Collections.Generic.List<Assets.Scripts.Simulation.SMath.Vector3>, currActive: System.Boolean, t: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.circlePatternModel = circlePatternModel
		self.dotImgs = dotImgs
		self.poss = poss
		self.currActive = currActive
		self.t = t


class CirclePatternClose:

    offsets = {'circlePatternCloseModel': 160}    
    def __init__(self, circlePatternCloseModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.CirclePatternCloseModel, **kwargs):
        super().__init__(self, **kwargs)
		self.circlePatternCloseModel = circlePatternCloseModel


class CirclePatternFirst:

    offsets = {'circlePatternFirstModel': 160}    
    def __init__(self, circlePatternFirstModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.CirclePatternFirstModel, **kwargs):
        super().__init__(self, **kwargs)
		self.circlePatternFirstModel = circlePatternFirstModel


class CirclePatternLast:

    offsets = {'circlePatternLastModel': 160}    
    def __init__(self, circlePatternLastModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.CirclePatternLastModel, **kwargs):
        super().__init__(self, **kwargs)
		self.circlePatternLastModel = circlePatternLastModel


class CirclePatternStrong:

    offsets = {'circlePatternStrongModel': 160}    
    def __init__(self, circlePatternStrongModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.CirclePatternStrongModel, **kwargs):
        super().__init__(self, **kwargs)
		self.circlePatternStrongModel = circlePatternStrongModel


class CloseTargetTrack:

    offsets = {'targetTrackModel': 112, 'closestPoint': 120, 'locationFound': 132}    
    def __init__(self, targetTrackModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.CloseTargetTrackModel, closestPoint: Assets.Scripts.Simulation.SMath.Vector3, locationFound: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.targetTrackModel = targetTrackModel
		self.closestPoint = closestPoint
		self.locationFound = locationFound


class CreateEffectWhileAttacking:

    offsets = {'createEffectWhileAttackingModel': 96, 'scaleOverride': 104, 'exitScaleOverride': 108, 'activeEffect': 112, 'waitUntilFrame': 120, 'waiting': 124}    
    def __init__(self, createEffectWhileAttackingModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.CreateEffectWhileAttackingModel, scaleOverride: System.Single, exitScaleOverride: System.Single, activeEffect: Assets.Scripts.Simulation.Objects.Entity, waitUntilFrame: System.Int32, waiting: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.createEffectWhileAttackingModel = createEffectWhileAttackingModel
		self.scaleOverride = scaleOverride
		self.exitScaleOverride = exitScaleOverride
		self.activeEffect = activeEffect
		self.waitUntilFrame = waitUntilFrame
		self.waiting = waiting


class FarTargetTrack:

    offsets = {'targetTrackModel': 112, 'furthestPoint': 120, 'locationFound': 132}    
    def __init__(self, targetTrackModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.FarTargetTrackModel, furthestPoint: Assets.Scripts.Simulation.SMath.Vector3, locationFound: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.targetTrackModel = targetTrackModel
		self.furthestPoint = furthestPoint
		self.locationFound = locationFound


class FighterPilotPattern:

    offsets = {'fighterPilotPatternModel': 128, 'parentTower': 136, 'pursuitTarget': 144}    
    def __init__(self, fighterPilotPatternModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.FighterPilotPatternFirstModel, parentTower: Assets.Scripts.Simulation.Towers.Tower, pursuitTarget: Assets.Scripts.Simulation.Bloons.Bloon, **kwargs):
        super().__init__(self, **kwargs)
		self.fighterPilotPatternModel = fighterPilotPatternModel
		self.parentTower = parentTower
		self.pursuitTarget = pursuitTarget


class FighterPilotPatternClose:

    offsets = {'fighterPilotPatternFirstModel': 152}    
    def __init__(self, fighterPilotPatternFirstModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.FighterPilotPatternCloseModel, **kwargs):
        super().__init__(self, **kwargs)
		self.fighterPilotPatternFirstModel = fighterPilotPatternFirstModel


class FighterPilotPatternFirst:

    offsets = {'fighterPilotPatternFirstModel': 152}    
    def __init__(self, fighterPilotPatternFirstModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.FighterPilotPatternFirstModel, **kwargs):
        super().__init__(self, **kwargs)
		self.fighterPilotPatternFirstModel = fighterPilotPatternFirstModel


class FighterPilotPatternLast:

    offsets = {'fighterPilotPatternLastModel': 152}    
    def __init__(self, fighterPilotPatternLastModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.FighterPilotPatternLastModel, **kwargs):
        super().__init__(self, **kwargs)
		self.fighterPilotPatternLastModel = fighterPilotPatternLastModel


class FighterPilotPatternStrong:

    offsets = {'fighterPilotPatternStrongModel': 152}    
    def __init__(self, fighterPilotPatternStrongModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.FighterPilotPatternStrongModel, **kwargs):
        super().__init__(self, **kwargs)
		self.fighterPilotPatternStrongModel = fighterPilotPatternStrongModel


class FigureEightPattern:

    offsets = {'figureEightPatternModel': 128, 'dotImgs': 136, 'poss': 144, 'currActive': 152, 't': 156}    
    def __init__(self, figureEightPatternModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.FigureEightPatternModel, dotImgs: System.Collections.Generic.List<Assets.Scripts.Simulation.Objects.Entity>, poss: System.Collections.Generic.List<Assets.Scripts.Simulation.SMath.Vector3>, currActive: System.Boolean, t: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.figureEightPatternModel = figureEightPatternModel
		self.dotImgs = dotImgs
		self.poss = poss
		self.currActive = currActive
		self.t = t


class FollowTouchSetting:

    offsets = {'followTouchSettingModel': 136, 'currentPosition': 144, 'heliGroupOffset': 152}    
    def __init__(self, followTouchSettingModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.FollowTouchSettingModel, currentPosition: Assets.Scripts.Simulation.SMath.Vector2, heliGroupOffset: Assets.Scripts.Simulation.Behaviors.HeliGroupOffset, **kwargs):
        super().__init__(self, **kwargs)
		self.followTouchSettingModel = followTouchSettingModel
		self.currentPosition = currentPosition
		self.heliGroupOffset = heliGroupOffset


class LockInPlaceSetting:

    offsets = {'lockInPlaceSettingModel': 136, 'lockedPosition': 144, 'targetImg': 152, 'currActive': 160}    
    def __init__(self, lockInPlaceSettingModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.LockInPlaceSettingModel, lockedPosition: Assets.Scripts.Simulation.SMath.Vector2, targetImg: Assets.Scripts.Simulation.Objects.Entity, currActive: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.lockInPlaceSettingModel = lockInPlaceSettingModel
		self.lockedPosition = lockedPosition
		self.targetImg = targetImg
		self.currActive = currActive


class NecromancerTargetTrackWithinRange:

    offsets = {'necromancerTargetTrackWithinRangeModel': 136, 'lastPathSegments': 144, 'smartTargets': 152, 'lastPathSegmentDistanceForPaths': 160, 'currentPathIndex': 168, 'pathIndexToSet': 172, 'pathsInRange': 176}    
    def __init__(self, necromancerTargetTrackWithinRangeModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.NecromancerTargetTrackWithinRangeModel, lastPathSegments: System.Collections.Generic.IEnumerable<Assets.Scripts.Simulation.Track.PathSegment>, smartTargets: System.Collections.Generic.IEnumerable<Assets.Scripts.Simulation.Towers.Target>, lastPathSegmentDistanceForPaths: System.Collections.Generic.Dictionary<Assets.Scripts.Simulation.Track.Path,System.Single>, currentPathIndex: System.Int32, pathIndexToSet: System.Int32, pathsInRange: System.Collections.Generic.List<Assets.Scripts.Simulation.Track.Path>, **kwargs):
        super().__init__(self, **kwargs)
		self.necromancerTargetTrackWithinRangeModel = necromancerTargetTrackWithinRangeModel
		self.lastPathSegments = lastPathSegments
		self.smartTargets = smartTargets
		self.lastPathSegmentDistanceForPaths = lastPathSegmentDistanceForPaths
		self.currentPathIndex = currentPathIndex
		self.pathIndexToSet = pathIndexToSet
		self.pathsInRange = pathsInRange


class OffsetToTrackTarget:

    offsets = {'offsetToTrackTargetModel': 96}    
    def __init__(self, offsetToTrackTargetModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.OffsetToTrackTargetModel, **kwargs):
        super().__init__(self, **kwargs)
		self.offsetToTrackTargetModel = offsetToTrackTargetModel


class PathMovementFromScreenCenterPattern:

    offsets = {'pathMovementFromScreenCenterPatternModel': 128}    
    def __init__(self, pathMovementFromScreenCenterPatternModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.PathMovementFromScreenCenterPatternModel, **kwargs):
        super().__init__(self, **kwargs)
		self.pathMovementFromScreenCenterPatternModel = pathMovementFromScreenCenterPatternModel


class PathSupplier:

    offsets = {'targetType': 96, 'airUnit': 112, 'checkIfAirUnit': 120}    
    def __init__(self, targetType: Assets.Scripts.Models.Towers.TargetType, airUnit: Assets.Scripts.Simulation.Towers.Behaviors.AirUnit, checkIfAirUnit: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.targetType = targetType
		self.airUnit = airUnit
		self.checkIfAirUnit = checkIfAirUnit


class PathSupplierHeli:

    offsets = {'heliTransformBehavior': 128}    
    def __init__(self, heliTransformBehavior: Assets.Scripts.Simulation.Behaviors.TransformBehavior, **kwargs):
        super().__init__(self, **kwargs)
		self.heliTransformBehavior = heliTransformBehavior


class PatrolPointsSetting:

    offsets = {'patrolPointsSettingModel': 136, 'needsTargets': 152, 'targetImages': 160, 'dir': 168, 'sp': 176, 'dotCount': 184, 'timer': 188, 'dotImgs': 192, 'adjustedSpacing': 200, 'currActive': 204}    
    def __init__(self, patrolPointsSettingModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.PatrolPointsSettingModel, needsTargets: System.Boolean, targetImages: System.Collections.Generic.List<Assets.Scripts.Simulation.Objects.Entity>, dir: Assets.Scripts.Simulation.SMath.Vector2, sp: Assets.Scripts.Simulation.SMath.Vector2, dotCount: System.Int32, timer: System.Single, dotImgs: System.Collections.Generic.List<Assets.Scripts.Simulation.Objects.Entity>, adjustedSpacing: System.Single, currActive: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.patrolPointsSettingModel = patrolPointsSettingModel
		self.needsTargets = needsTargets
		self.targetImages = targetImages
		self.dir = dir
		self.sp = sp
		self.dotCount = dotCount
		self.timer = timer
		self.dotImgs = dotImgs
		self.adjustedSpacing = adjustedSpacing
		self.currActive = currActive


class PrioritiseRotation:

    offsets = {'prioritiseRotationModel': 96, 'lastProcessedAt': 104}    
    def __init__(self, prioritiseRotationModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.PrioritiseRotationModel, lastProcessedAt: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.prioritiseRotationModel = prioritiseRotationModel
		self.lastProcessedAt = lastProcessedAt


class PursuitSetting:
	pursuitTargetType: Assets.Scripts.Models.Towers.TargetType
    offsets = {'pursuitTargetType': 0, 'pursuitSettingModel': 136, 'lastDestination': 144, 'heliGroupOffset': 152, 'heliMovement': 160, 'northVector': 168, 'southVector': 176, 'westVector': 184, 'eastVector': 192, 'timer': 200, 'updateTime': 204, 'currentTarget': 216}    
    def __init__(self, pursuitTargetType: Assets.Scripts.Models.Towers.TargetType, pursuitSettingModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.PursuitSettingModel, lastDestination: Assets.Scripts.Simulation.SMath.Vector2, heliGroupOffset: Assets.Scripts.Simulation.Behaviors.HeliGroupOffset, heliMovement: Assets.Scripts.Simulation.Towers.Behaviors.HeliMovement, northVector: Assets.Scripts.Simulation.SMath.Vector2, southVector: Assets.Scripts.Simulation.SMath.Vector2, westVector: Assets.Scripts.Simulation.SMath.Vector2, eastVector: Assets.Scripts.Simulation.SMath.Vector2, timer: System.Single, updateTime: System.Single, currentTarget: Assets.Scripts.Simulation.Bloons.Bloon, **kwargs):
        super().__init__(self, **kwargs)
		self.pursuitTargetType = pursuitTargetType
		self.pursuitSettingModel = pursuitSettingModel
		self.lastDestination = lastDestination
		self.heliGroupOffset = heliGroupOffset
		self.heliMovement = heliMovement
		self.northVector = northVector
		self.southVector = southVector
		self.westVector = westVector
		self.eastVector = eastVector
		self.timer = timer
		self.updateTime = updateTime
		self.currentTarget = currentTarget


class PursuitSettingCustom:

    offsets = {'pursuitSettingCustomModel': 224, 'currentTargetType': 232, 'parentTower': 248, 'lastPositionInsideParent': 256}    
    def __init__(self, pursuitSettingCustomModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.PursuitSettingCustomModel, currentTargetType: Assets.Scripts.Models.Towers.TargetType, parentTower: Assets.Scripts.Simulation.Towers.Tower, lastPositionInsideParent: Assets.Scripts.Utils.Optional<Assets.Scripts.Simulation.SMath.Vector2>, **kwargs):
        super().__init__(self, **kwargs)
		self.pursuitSettingCustomModel = pursuitSettingCustomModel
		self.currentTargetType = currentTargetType
		self.parentTower = parentTower
		self.lastPositionInsideParent = lastPositionInsideParent


class RandomPosition:

    offsets = {'randomPositionModel': 96, 'possibleOffsets': 104, 'inRangeUnblocked': 112, 'inRangeBlocked': 120, 'outOfRangeUnblocked': 128, 'outOfRangeBlocked': 136, 'index': 144, 'towerModelBlocks': 152, 'towerModelDoesNotBlock': 160, 'onlyUseTowerPosition': 168, 'needsToCalcPositions': 169}    
    def __init__(self, randomPositionModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.RandomPositionModel, possibleOffsets: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.SMath.Vector3>, inRangeUnblocked: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.SMath.Vector3>, inRangeBlocked: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.SMath.Vector3>, outOfRangeUnblocked: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.SMath.Vector3>, outOfRangeBlocked: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.SMath.Vector3>, index: System.Int32, towerModelBlocks: Assets.Scripts.Models.Towers.TowerModel, towerModelDoesNotBlock: Assets.Scripts.Models.Towers.TowerModel, onlyUseTowerPosition: System.Boolean, needsToCalcPositions: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.randomPositionModel = randomPositionModel
		self.possibleOffsets = possibleOffsets
		self.inRangeUnblocked = inRangeUnblocked
		self.inRangeBlocked = inRangeBlocked
		self.outOfRangeUnblocked = outOfRangeUnblocked
		self.outOfRangeBlocked = outOfRangeBlocked
		self.index = index
		self.towerModelBlocks = towerModelBlocks
		self.towerModelDoesNotBlock = towerModelDoesNotBlock
		self.onlyUseTowerPosition = onlyUseTowerPosition
		self.needsToCalcPositions = needsToCalcPositions


class RandomPositionBasic:

    offsets = {'posModel': 96}    
    def __init__(self, posModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.RandomPositionBasicModel, **kwargs):
        super().__init__(self, **kwargs)
		self.posModel = posModel


class RandomTarget:

    offsets = {'randomTargetModel': 96}    
    def __init__(self, randomTargetModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.RandomTargetModel, **kwargs):
        super().__init__(self, **kwargs)
		self.randomTargetModel = randomTargetModel


class RandomTargetTrack:

    offsets = {'randomTargetTrackModel': 136}    
    def __init__(self, randomTargetTrackModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.RandomTargetTrackModel, **kwargs):
        super().__init__(self, **kwargs)
		self.randomTargetTrackModel = randomTargetTrackModel


class RotateSideToTarget:

    offsets = {'rotateToTargetModel': 96}    
    def __init__(self, rotateToTargetModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.RotateSideToTargetModel, **kwargs):
        super().__init__(self, **kwargs)
		self.rotateToTargetModel = rotateToTargetModel


class RotateToDefaultPosition:

    offsets = {'rotateToDefaultPositionModel': 96}    
    def __init__(self, rotateToDefaultPositionModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.RotateToDefaultPositionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.rotateToDefaultPositionModel = rotateToDefaultPositionModel


class RotateToMiddleOfTargets:

    offsets = {'rotateToMiddleOfTargetsModel': 96}    
    def __init__(self, rotateToMiddleOfTargetsModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.RotateToMiddleOfTargetsModel, **kwargs):
        super().__init__(self, **kwargs)
		self.rotateToMiddleOfTargetsModel = rotateToMiddleOfTargetsModel


class RotateToParent:

    offsets = {'rotateToParentModel': 96}    
    def __init__(self, rotateToParentModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.RotateToParentModel, **kwargs):
        super().__init__(self, **kwargs)
		self.rotateToParentModel = rotateToParentModel


class RotateToPointer:

    offsets = {'rotateToPointerModel': 96, 'lastPointerPos': 104, 'positionOverride': 112, 'dartlingMaintainLastPos': 128}    
    def __init__(self, rotateToPointerModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.RotateToPointerModel, lastPointerPos: Assets.Scripts.Simulation.SMath.Vector2, positionOverride: Assets.Scripts.Utils.Optional<Assets.Scripts.Simulation.SMath.Vector2>, dartlingMaintainLastPos: Assets.Scripts.Simulation.Towers.Behaviors.DartlingMaintainLastPos, **kwargs):
        super().__init__(self, **kwargs)
		self.rotateToPointerModel = rotateToPointerModel
		self.lastPointerPos = lastPointerPos
		self.positionOverride = positionOverride
		self.dartlingMaintainLastPos = dartlingMaintainLastPos


class RotateToTarget:

    offsets = {'rotateToTargetModel': 96, 'weapons': 104, 'updateWeapons': 112, 'mainAttack': 120}    
    def __init__(self, rotateToTargetModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.RotateToTargetModel, weapons: System.Collections.Generic.List<Assets.Scripts.Simulation.Towers.Weapons.Weapon>, updateWeapons: System.Boolean, mainAttack: Assets.Scripts.Simulation.Towers.Behaviors.Attack.Attack, **kwargs):
        super().__init__(self, **kwargs)
		self.rotateToTargetModel = rotateToTargetModel
		self.weapons = weapons
		self.updateWeapons = updateWeapons
		self.mainAttack = mainAttack


class RotateToTargetAirUnit:

    offsets = {'rotateToTargetAirUnitModel': 128, 'rotateToTargets': 136, 'appliedRotation': 144, 'priority': 148}    
    def __init__(self, rotateToTargetAirUnitModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.RotateToTargetAirUnitModel, rotateToTargets: System.Collections.Generic.List<Assets.Scripts.Simulation.Towers.Behaviors.Attack.Behaviors.RotateToTargetAirUnit>, appliedRotation: System.Boolean, priority: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.rotateToTargetAirUnitModel = rotateToTargetAirUnitModel
		self.rotateToTargets = rotateToTargets
		self.appliedRotation = appliedRotation
		self.priority = priority


class RotateToTargetAttackOffset:

    offsets = {'rotateToTargetAttackOffsetModel': 128, 'transform': 136, 'stopIgnoringRotationAt': 144}    
    def __init__(self, rotateToTargetAttackOffsetModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.RotateToTargetAttackOffsetModel, transform: Assets.Scripts.Simulation.Behaviors.TransformBehavior, stopIgnoringRotationAt: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.rotateToTargetAttackOffsetModel = rotateToTargetAttackOffsetModel
		self.transform = transform
		self.stopIgnoringRotationAt = stopIgnoringRotationAt


class SetTargetIndexFromBase:

    offsets = {'setTargetIndexFromBaseModel': 96}    
    def __init__(self, setTargetIndexFromBaseModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.SetTargetIndexFromBaseModel, **kwargs):
        super().__init__(self, **kwargs)
		self.setTargetIndexFromBaseModel = setTargetIndexFromBaseModel


class SmartTargetTrack:

    offsets = {'smartTargetTrackModel': 112, 'closestSegToExitPerPath': 120, 'pathKeys': 128, 'currentPathIndex': 136}    
    def __init__(self, smartTargetTrackModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.SmartTargetTrackModel, closestSegToExitPerPath: System.Collections.Generic.Dictionary<Assets.Scripts.Simulation.Track.Path,Assets.Scripts.Simulation.Track.PathSegment>, pathKeys: System.Collections.Generic.List<Assets.Scripts.Simulation.Track.Path>, currentPathIndex: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.smartTargetTrackModel = smartTargetTrackModel
		self.closestSegToExitPerPath = closestSegToExitPerPath
		self.pathKeys = pathKeys
		self.currentPathIndex = currentPathIndex


class SubmergedTarget:

    offsets = {'submergedTargetModel': 96}    
    def __init__(self, submergedTargetModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.SubmergedTargetModel, **kwargs):
        super().__init__(self, **kwargs)
		self.submergedTargetModel = submergedTargetModel


class TargetClose:

    offsets = {'targetCloseModel': 96}    
    def __init__(self, targetCloseModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetCloseModel, **kwargs):
        super().__init__(self, **kwargs)
		self.targetCloseModel = targetCloseModel


class TargetCloseAirUnit:

    offsets = {'targetCloseAirUnitModel': 96, 'airUnitPosition': 104}    
    def __init__(self, targetCloseAirUnitModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetCloseAirUnitModel, airUnitPosition: Assets.Scripts.Simulation.SMath.Vector3Boxed, **kwargs):
        super().__init__(self, **kwargs)
		self.targetCloseAirUnitModel = targetCloseAirUnitModel
		self.airUnitPosition = airUnitPosition


class TargetCloseSharedRange:

    offsets = {'targetCloseSharedRangeModel': 128}    
    def __init__(self, targetCloseSharedRangeModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetCloseSharedRangeModel, **kwargs):
        super().__init__(self, **kwargs)
		self.targetCloseSharedRangeModel = targetCloseSharedRangeModel


class TargetDivideAndConquer:

    offsets = {'targetDivideAndConquerModel': 96}    
    def __init__(self, targetDivideAndConquerModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetDivideAndConquerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.targetDivideAndConquerModel = targetDivideAndConquerModel


class TargetEliteTargetting:

    offsets = {'targetEliteTargettingModel': 96, 'moabTypeBuffer': 104, 'exitBuffer': 108, 'moreThanOneChildBuffer': 112}    
    def __init__(self, targetEliteTargettingModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetEliteTargettingModel, moabTypeBuffer: System.Single, exitBuffer: System.Single, moreThanOneChildBuffer: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.targetEliteTargettingModel = targetEliteTargettingModel
		self.moabTypeBuffer = moabTypeBuffer
		self.exitBuffer = exitBuffer
		self.moreThanOneChildBuffer = moreThanOneChildBuffer


class TargetExpensiveFriendly:

    offsets = {'expensiveFriendlyTargetModel': 96}    
    def __init__(self, expensiveFriendlyTargetModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetExpensiveFriendlyModel, **kwargs):
        super().__init__(self, **kwargs)
		self.expensiveFriendlyTargetModel = expensiveFriendlyTargetModel


class TargetFirst:

    offsets = {'targetFirstModel': 96}    
    def __init__(self, targetFirstModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetFirstModel, **kwargs):
        super().__init__(self, **kwargs)
		self.targetFirstModel = targetFirstModel


class TargetFirstAirUnit:

    offsets = {'targetFirstAirUnitModel': 96, 'airUnitPosition': 104}    
    def __init__(self, targetFirstAirUnitModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetFirstAirUnitModel, airUnitPosition: Assets.Scripts.Simulation.SMath.Vector3Boxed, **kwargs):
        super().__init__(self, **kwargs)
		self.targetFirstAirUnitModel = targetFirstAirUnitModel
		self.airUnitPosition = airUnitPosition


class TargetFirstSharedRange:

    offsets = {'targetFirstSharedRangeModel': 128}    
    def __init__(self, targetFirstSharedRangeModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetFirstSharedRangeModel, **kwargs):
        super().__init__(self, **kwargs)
		self.targetFirstSharedRangeModel = targetFirstSharedRangeModel


class TargetFirstWithPreference:

    offsets = {'targetFirstWithPreferenceModel': 96}    
    def __init__(self, targetFirstWithPreferenceModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetFirstWithPreferenceModel, **kwargs):
        super().__init__(self, **kwargs)
		self.targetFirstWithPreferenceModel = targetFirstWithPreferenceModel


class TargetFriendly:

    offsets = {'friendlyTargetModel': 96}    
    def __init__(self, friendlyTargetModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetFriendlyModel, **kwargs):
        super().__init__(self, **kwargs)
		self.friendlyTargetModel = friendlyTargetModel


class TargetGrapplable:

    offsets = {'targetGrapplableModel': 96, 'bloonTargets': 104}    
    def __init__(self, targetGrapplableModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetGrapplableModel, bloonTargets: System.Collections.Generic.IEnumerable<Assets.Scripts.Simulation.Bloons.Bloon>, **kwargs):
        super().__init__(self, **kwargs)
		self.targetGrapplableModel = targetGrapplableModel
		self.bloonTargets = bloonTargets


class TargetInFrontOfAirUnit:

    offsets = {'targetInFrontModel': 96}    
    def __init__(self, targetInFrontModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetInFrontOfAirUnitModel, **kwargs):
        super().__init__(self, **kwargs)
		self.targetInFrontModel = targetInFrontModel


class TargetIndependant:

    offsets = {'targetIndependantModel': 96, 'rotateToPointer': 104, 'lastTargetPos': 112}    
    def __init__(self, targetIndependantModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetIndependantModel, rotateToPointer: Assets.Scripts.Simulation.Towers.Behaviors.Attack.Behaviors.RotateToPointer, lastTargetPos: Assets.Scripts.Utils.Optional<Assets.Scripts.Simulation.SMath.Vector2>, **kwargs):
        super().__init__(self, **kwargs)
		self.targetIndependantModel = targetIndependantModel
		self.rotateToPointer = rotateToPointer
		self.lastTargetPos = lastTargetPos


class TargetLast:

    offsets = {'targetLastModel': 96}    
    def __init__(self, targetLastModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetLastModel, **kwargs):
        super().__init__(self, **kwargs)
		self.targetLastModel = targetLastModel


class TargetLastAirUnit:

    offsets = {'targetLastAirUnitModel': 96, 'airUnitPosition': 104}    
    def __init__(self, targetLastAirUnitModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetLastAirUnitModel, airUnitPosition: Assets.Scripts.Simulation.SMath.Vector3Boxed, **kwargs):
        super().__init__(self, **kwargs)
		self.targetLastAirUnitModel = targetLastAirUnitModel
		self.airUnitPosition = airUnitPosition


class TargetLastSharedRange:

    offsets = {'targetLastSharedRangeModel': 128}    
    def __init__(self, targetLastSharedRangeModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetLastSharedRangeModel, **kwargs):
        super().__init__(self, **kwargs)
		self.targetLastSharedRangeModel = targetLastSharedRangeModel


class TargetLeftHand:

    offsets = {'targetLeftHandModel': 96, 'targetType': 104, 'rightHand': 120}    
    def __init__(self, targetLeftHandModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetLeftHandModel, targetType: Assets.Scripts.Models.Towers.TargetType, rightHand: Assets.Scripts.Simulation.Towers.Behaviors.Attack.Behaviors.TargetRightHand, **kwargs):
        super().__init__(self, **kwargs)
		self.targetLeftHandModel = targetLeftHandModel
		self.targetType = targetType
		self.rightHand = rightHand


class TargetMoab:

    offsets = {'targetMoabModel': 96}    
    def __init__(self, targetMoabModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetMoabModel, **kwargs):
        super().__init__(self, **kwargs)
		self.targetMoabModel = targetMoabModel


class TargetOpposite:

    offsets = {'targetOppositeModel': 96}    
    def __init__(self, targetOppositeModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetOppositeModel, **kwargs):
        super().__init__(self, **kwargs)
		self.targetOppositeModel = targetOppositeModel


class TargetPointer:

    offsets = {'targetPointerModel': 96, 'rotateToPointer': 104}    
    def __init__(self, targetPointerModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetPointerModel, rotateToPointer: Assets.Scripts.Simulation.Towers.Behaviors.Attack.Behaviors.RotateToPointer, **kwargs):
        super().__init__(self, **kwargs)
		self.targetPointerModel = targetPointerModel
		self.rotateToPointer = rotateToPointer


class TargetRightHand:

    offsets = {'targetRightHandModel': 96, 'targetType': 104, 'leftHand': 120, 'leftHandTarget': 128}    
    def __init__(self, targetRightHandModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetRightHandModel, targetType: Assets.Scripts.Models.Towers.TargetType, leftHand: Assets.Scripts.Simulation.Towers.Behaviors.Attack.Behaviors.TargetLeftHand, leftHandTarget: Assets.Scripts.Simulation.Towers.Target, **kwargs):
        super().__init__(self, **kwargs)
		self.targetRightHandModel = targetRightHandModel
		self.targetType = targetType
		self.leftHand = leftHand
		self.leftHandTarget = leftHandTarget


class TargetSelectedPoint:

    offsets = {'targetSelectedPointModel': 96, 'targetPoint': 104, 'targetImg': 120}    
    def __init__(self, targetSelectedPointModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetSelectedPointModel, targetPoint: Assets.Scripts.Simulation.SMath.Vector3, targetImg: Assets.Scripts.Simulation.Objects.Entity, **kwargs):
        super().__init__(self, **kwargs)
		self.targetSelectedPointModel = targetSelectedPointModel
		self.targetPoint = targetPoint
		self.targetImg = targetImg


class TargetStaggeredShots:

    offsets = {'targetStaggeredShotsModel': 128, 'fireTimes': 136, 'lastEmissionBeforeOffset': 144, 'currentOffset': 148, 'thisWeaponBehavior': 152}    
    def __init__(self, targetStaggeredShotsModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetStaggeredShotsModel, fireTimes: System.Collections.Generic.List<System.Int32>, lastEmissionBeforeOffset: System.Int32, currentOffset: System.Int32, thisWeaponBehavior: Assets.Scripts.Simulation.Towers.Weapons.Weapon, **kwargs):
        super().__init__(self, **kwargs)
		self.targetStaggeredShotsModel = targetStaggeredShotsModel
		self.fireTimes = fireTimes
		self.lastEmissionBeforeOffset = lastEmissionBeforeOffset
		self.currentOffset = currentOffset
		self.thisWeaponBehavior = thisWeaponBehavior


class TargetStrong:

    offsets = {'targetStrongModel': 96}    
    def __init__(self, targetStrongModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetStrongModel, **kwargs):
        super().__init__(self, **kwargs)
		self.targetStrongModel = targetStrongModel


class TargetStrongAirUnit:

    offsets = {'targetStrongModel': 96, 'airUnitPosition': 104}    
    def __init__(self, targetStrongModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetStrongAirUnitModel, airUnitPosition: Assets.Scripts.Simulation.SMath.Vector3Boxed, **kwargs):
        super().__init__(self, **kwargs)
		self.targetStrongModel = targetStrongModel
		self.airUnitPosition = airUnitPosition


class TargetStrongSharedRange:

    offsets = {'targetStrongSharedRangeModel': 128}    
    def __init__(self, targetStrongSharedRangeModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetStrongSharedRangeModel, **kwargs):
        super().__init__(self, **kwargs)
		self.targetStrongSharedRangeModel = targetStrongSharedRangeModel


class TargetSupplier:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TargetSupplierSharedRange:

    offsets = {'sharedTowerGridChanged': 96, 'towerFullSightGridInitialized': 97, 'towerFullSightPathSegments': 104, 'sharedTargettingEnabled': 112, 'finalPressedSegments': 120}    
    def __init__(self, sharedTowerGridChanged: System.Boolean, towerFullSightGridInitialized: System.Boolean, towerFullSightPathSegments: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Behaviors.Attack.PathSegmentInRange>, sharedTargettingEnabled: System.Boolean, finalPressedSegments: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Behaviors.Attack.PathSegmentInRange>, **kwargs):
        super().__init__(self, **kwargs)
		self.sharedTowerGridChanged = sharedTowerGridChanged
		self.towerFullSightGridInitialized = towerFullSightGridInitialized
		self.towerFullSightPathSegments = towerFullSightPathSegments
		self.sharedTargettingEnabled = sharedTargettingEnabled
		self.finalPressedSegments = finalPressedSegments


class TargetTag:

    offsets = {'targetTagModel': 96}    
    def __init__(self, targetTagModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetTagModel, **kwargs):
        super().__init__(self, **kwargs)
		self.targetTagModel = targetTagModel


class TargetTrack:

    offsets = {'targetTrackModel': 112, 'currentPoint': 120, 'pathsWithBloonsThisRound': 128}    
    def __init__(self, targetTrackModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetTrackModel, currentPoint: System.Int32, pathsWithBloonsThisRound: System.Collections.Generic.List<Assets.Scripts.Simulation.Track.Path>, **kwargs):
        super().__init__(self, **kwargs)
		self.targetTrackModel = targetTrackModel
		self.currentPoint = currentPoint
		self.pathsWithBloonsThisRound = pathsWithBloonsThisRound


class TargetTrackOrDefault:

    offsets = {'targetTrackOrDefaultModel': 112, 'currentPoint': 120, 'closestPoint': 124, 'locationFound': 136}    
    def __init__(self, targetTrackOrDefaultModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetTrackOrDefaultModel, currentPoint: System.Int32, closestPoint: Assets.Scripts.Simulation.SMath.Vector3, locationFound: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.targetTrackOrDefaultModel = targetTrackOrDefaultModel
		self.currentPoint = currentPoint
		self.closestPoint = closestPoint
		self.locationFound = locationFound


class TargetTrackOrDefaultAcidPool:

    offsets = {'targetTrackOrDefaultAcidPoolModel': 112, 'currentPoint': 120}    
    def __init__(self, targetTrackOrDefaultAcidPoolModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetTrackOrDefaultAcidPoolModel, currentPoint: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.targetTrackOrDefaultAcidPoolModel = targetTrackOrDefaultAcidPoolModel
		self.currentPoint = currentPoint


class TargetZoneDefence:

    offsets = {'targetZoneDefenceModel': 96}    
    def __init__(self, targetZoneDefenceModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.TargetZoneDefenceModel, **kwargs):
        super().__init__(self, **kwargs)
		self.targetZoneDefenceModel = targetZoneDefenceModel


class TrackTargetSupplier:

    offsets = {'targetPathSegments': 96, 'generatePoints': 104}    
    def __init__(self, targetPathSegments: System.Collections.Generic.IList<Assets.Scripts.Simulation.Track.PathSegment>, generatePoints: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.targetPathSegments = targetPathSegments
		self.generatePoints = generatePoints


class UsePresetTarget:

    offsets = {'targetModel': 96, 'targets': 104}    
    def __init__(self, targetModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.UsePresetTargetModel, targets: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Target>, **kwargs):
        super().__init__(self, **kwargs)
		self.targetModel = targetModel
		self.targets = targets


class UseTowerRange:

    offsets = {'useTowerRangeModel': 96}    
    def __init__(self, useTowerRangeModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.UseTowerRangeModel, **kwargs):
        super().__init__(self, **kwargs)
		self.useTowerRangeModel = useTowerRangeModel


class WingmonkeyPattern:

    offsets = {'wingmonkeyPatternModel': 96, 'airUnit': 104, 'pathMovement': 112, 'currentBloonTarget': 120, 'flyoverEngaged': 128, 'flyoverDestination': 132, 'lastElapsed': 144, 'lastBank': 148, 'lastRandomPositionAngle': 152, 'wasTargetValidLastFrame': 156, 'lastPositionOfTarget': 160, 'canCheckForTargetsWhileInFlyover': 172, 'timeUntilNextCheckForTargets': 176, 'wingmonkeySimulation': 184, 'lastMovementDestination': 192}    
    def __init__(self, wingmonkeyPatternModel: Assets.Scripts.Models.Towers.Behaviors.Attack.Behaviors.WingmonkeyPatternModel, airUnit: Assets.Scripts.Simulation.Towers.Behaviors.AirUnit, pathMovement: Assets.Scripts.Simulation.Towers.Behaviors.PathMovement, currentBloonTarget: Assets.Scripts.Simulation.Bloons.Bloon, flyoverEngaged: System.Boolean, flyoverDestination: Assets.Scripts.Simulation.SMath.Vector3, lastElapsed: System.Int32, lastBank: System.Single, lastRandomPositionAngle: System.Single, wasTargetValidLastFrame: System.Boolean, lastPositionOfTarget: Assets.Scripts.Simulation.SMath.Vector3, canCheckForTargetsWhileInFlyover: System.Boolean, timeUntilNextCheckForTargets: System.Single, wingmonkeySimulation: Assets.Scripts.Simulation.SimulationBehaviors.WingmonkeySimulation, lastMovementDestination: Assets.Scripts.Simulation.SMath.Vector3, **kwargs):
        super().__init__(self, **kwargs)
		self.wingmonkeyPatternModel = wingmonkeyPatternModel
		self.airUnit = airUnit
		self.pathMovement = pathMovement
		self.currentBloonTarget = currentBloonTarget
		self.flyoverEngaged = flyoverEngaged
		self.flyoverDestination = flyoverDestination
		self.lastElapsed = lastElapsed
		self.lastBank = lastBank
		self.lastRandomPositionAngle = lastRandomPositionAngle
		self.wasTargetValidLastFrame = wasTargetValidLastFrame
		self.lastPositionOfTarget = lastPositionOfTarget
		self.canCheckForTargetsWhileInFlyover = canCheckForTargetsWhileInFlyover
		self.timeUntilNextCheckForTargets = timeUntilNextCheckForTargets
		self.wingmonkeySimulation = wingmonkeySimulation
		self.lastMovementDestination = lastMovementDestination


class PlacementAreaTypeHeightSetting:

    offsets = {'placementAreaTypeHeightSettingModel': 96, 'currentAreaType': 104, 'currentPosition': 108}    
    def __init__(self, placementAreaTypeHeightSettingModel: Assets.Scripts.Models.Towers.Behaviors.PlacementBehaviors.PlacementAreaTypeHeightSettingModel, currentAreaType: Assets.Scripts.Models.Map.AreaType, currentPosition: Assets.Scripts.Simulation.SMath.Vector3, **kwargs):
        super().__init__(self, **kwargs)
		self.placementAreaTypeHeightSettingModel = placementAreaTypeHeightSettingModel
		self.currentAreaType = currentAreaType
		self.currentPosition = currentPosition


class PlacementBehavior:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BuffQuery:

    offsets = {'buffIndicator': 16, 'tower': 24, 'canEventuallyBuff': 32, 'canCurrentlyBuff': 33, 'availableBuffCount': 36, 'unavailableBuffCount': 40}    
    def __init__(self, buffIndicator: Assets.Scripts.Models.GenericBehaviors.BuffIndicatorModel, tower: Assets.Scripts.Simulation.Towers.Tower, canEventuallyBuff: System.Boolean, canCurrentlyBuff: System.Boolean, availableBuffCount: System.Int32, unavailableBuffCount: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.buffIndicator = buffIndicator
		self.tower = tower
		self.canEventuallyBuff = canEventuallyBuff
		self.canCurrentlyBuff = canCurrentlyBuff
		self.availableBuffCount = availableBuffCount
		self.unavailableBuffCount = unavailableBuffCount


class AdoraEmission:

    offsets = {'adoraEmissionModel': 112, 'currentProjectileIndex': 120}    
    def __init__(self, adoraEmissionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.AdoraEmissionModel, currentProjectileIndex: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.adoraEmissionModel = adoraEmissionModel
		self.currentProjectileIndex = currentProjectileIndex


class AlternatingArcEmission:

    offsets = {'alternatingArcEmissionModel': 112, 'currentEmissionCount': 120}    
    def __init__(self, alternatingArcEmissionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.AlternatingArcEmissionModel, currentEmissionCount: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.alternatingArcEmissionModel = alternatingArcEmissionModel
		self.currentEmissionCount = currentEmissionCount


class ArcEmission:

    offsets = {'arcEmissionModel': 112, 'count': 120}    
    def __init__(self, arcEmissionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.ArcEmissionModel, count: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.arcEmissionModel = arcEmissionModel
		self.count = count


class Emission:

    offsets = {'emissionModel': 88, 'createdBehaviors': 96, 'airUnit': 104}    
    def __init__(self, emissionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel, createdBehaviors: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.RootBehavior>, airUnit: Assets.Scripts.Simulation.Towers.Behaviors.AirUnit, **kwargs):
        super().__init__(self, **kwargs)
		self.emissionModel = emissionModel
		self.createdBehaviors = createdBehaviors
		self.airUnit = airUnit


class EmissionBehavior:

    offsets = {'emission': 88}    
    def __init__(self, emission: Assets.Scripts.Simulation.Towers.Emissions.Emission, **kwargs):
        super().__init__(self, **kwargs)
		self.emission = emission


class EmissionClosestOffset:

    offsets = {'emissionClosestOffsetModel': 112}    
    def __init__(self, emissionClosestOffsetModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.EmissionClosestOffsetModel, **kwargs):
        super().__init__(self, **kwargs)
		self.emissionClosestOffsetModel = emissionClosestOffsetModel


class EmissionOverTime:

    offsets = {'emissionOverTimeModel': 112, 'currCount': 120, 'lastEmit': 124, 'timeFrames': 128, 'projectileDef': 136, 'ejectPoint': 144, 'target': 160, 'owner': 224, 'weapon': 232, 'airUnit': 240}    
    def __init__(self, emissionOverTimeModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.EmissionOverTimeModel, currCount: System.Int32, lastEmit: System.Int32, timeFrames: System.Int32, projectileDef: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, ejectPoint: Assets.Scripts.Simulation.SMath.Vector3, target: Assets.Scripts.Simulation.Towers.Target, owner: Assets.Scripts.Simulation.Towers.Tower, weapon: Assets.Scripts.Simulation.Towers.Weapons.Weapon, airUnit: Assets.Scripts.Simulation.Towers.Behaviors.AirUnit, **kwargs):
        super().__init__(self, **kwargs)
		self.emissionOverTimeModel = emissionOverTimeModel
		self.currCount = currCount
		self.lastEmit = lastEmit
		self.timeFrames = timeFrames
		self.projectileDef = projectileDef
		self.ejectPoint = ejectPoint
		self.target = target
		self.owner = owner
		self.weapon = weapon
		self.airUnit = airUnit


class EmissionWithOffsets:

    offsets = {'emissionWithOffsetsModel': 112, 'currentEjectOffset': 120, 'projectileCount': 132}    
    def __init__(self, emissionWithOffsetsModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.EmissionWithOffsetsModel, currentEjectOffset: Assets.Scripts.Simulation.SMath.Vector3, projectileCount: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.emissionWithOffsetsModel = emissionWithOffsetsModel
		self.currentEjectOffset = currentEjectOffset
		self.projectileCount = projectileCount


class GrappleEmission:

    offsets = {'grappleEmissionModel': 112, 'grappleEmissionMutator': 120}    
    def __init__(self, grappleEmissionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.GrappleEmissionModel, grappleEmissionMutator: Assets.Scripts.Simulation.Towers.Emissions.GrappleEmissionMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.grappleEmissionModel = grappleEmissionModel
		self.grappleEmissionMutator = grappleEmissionMutator


class GrappleEmissionMutator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class InstantDamageEmission:

    offsets = {'instantDamageEmissionModel': 112, 'proj': 120, 'target': 128, 'once': 192}    
    def __init__(self, instantDamageEmissionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.InstantDamageEmissionModel, proj: Assets.Scripts.Simulation.Towers.Projectiles.Projectile, target: Assets.Scripts.Simulation.Towers.Target, once: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.instantDamageEmissionModel = instantDamageEmissionModel
		self.proj = proj
		self.target = target
		self.once = once


class LerpEmission:

    offsets = {'lerpEmissionModel': 112}    
    def __init__(self, lerpEmissionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.LerpEmissionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.lerpEmissionModel = lerpEmissionModel


class LineProjectileEmission:

    offsets = {'lineProjectileEmissionModel': 112, 'effectAtEnd': 120, 'endEffectLastUpdated': 128, 'currentMagnitude': 132, 'targetMagnitude': 136, 'emissionAtEnd': 144, 'weapon': 152, 'showEndEffect': 160}    
    def __init__(self, lineProjectileEmissionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.LineProjectileEmissionModel, effectAtEnd: Assets.Scripts.Simulation.Objects.Entity, endEffectLastUpdated: System.Int32, currentMagnitude: System.Single, targetMagnitude: System.Single, emissionAtEnd: Assets.Scripts.Simulation.Towers.Emissions.Emission, weapon: Assets.Scripts.Simulation.Towers.Weapons.Weapon, showEndEffect: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.lineProjectileEmissionModel = lineProjectileEmissionModel
		self.effectAtEnd = effectAtEnd
		self.endEffectLastUpdated = endEffectLastUpdated
		self.currentMagnitude = currentMagnitude
		self.targetMagnitude = targetMagnitude
		self.emissionAtEnd = emissionAtEnd
		self.weapon = weapon
		self.showEndEffect = showEndEffect


class MultipleTrackEmission:

    offsets = {'multipleTrackEmissionModel': 112}    
    def __init__(self, multipleTrackEmissionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.MultipleTrackEmissionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.multipleTrackEmissionModel = multipleTrackEmissionModel


class NecroRateMutator:

    offsets = {'multiplier': 112}    
    def __init__(self, multiplier: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier


class NecromancerEmission:

    offsets = {'necromancerEmissionModel': 112, 'graveyardManager': 120, 'weapon': 136, 'towerId': 144, 'currentDamageBonus': 148, 'nextCheckInterval': 152, 'mutatorMultiplierAmount': 156, 'path': 160, 'pathSegment': 168, 'position': 176, 'offset': 188, 'projectile': 200, 'transform': 208}    
    def __init__(self, necromancerEmissionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.NecromancerEmissionModel, graveyardManager: Assets.Scripts.Simulation.SimulationBehaviors.SimNecromancerGraveyardManager, weapon: Assets.Scripts.Simulation.Towers.Weapons.Weapon, towerId: System.Int32, currentDamageBonus: System.Int32, nextCheckInterval: System.Int32, mutatorMultiplierAmount: System.Int32, path: Assets.Scripts.Simulation.Track.Path, pathSegment: Assets.Scripts.Simulation.Track.PathSegment, position: Assets.Scripts.Simulation.SMath.Vector3, offset: Assets.Scripts.Simulation.SMath.Vector3, projectile: Assets.Scripts.Simulation.Towers.Projectiles.Projectile, transform: Assets.Scripts.Simulation.Behaviors.TransformBehavior, **kwargs):
        super().__init__(self, **kwargs)
		self.necromancerEmissionModel = necromancerEmissionModel
		self.graveyardManager = graveyardManager
		self.weapon = weapon
		self.towerId = towerId
		self.currentDamageBonus = currentDamageBonus
		self.nextCheckInterval = nextCheckInterval
		self.mutatorMultiplierAmount = mutatorMultiplierAmount
		self.path = path
		self.pathSegment = pathSegment
		self.position = position
		self.offset = offset
		self.projectile = projectile
		self.transform = transform


class ParallelEmission:

    offsets = {'parallelEmissionModel': 112}    
    def __init__(self, parallelEmissionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.ParallelEmissionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.parallelEmissionModel = parallelEmissionModel


class PointEmission:

    offsets = {'pointEmissionModel': 112}    
    def __init__(self, pointEmissionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.PointEmissionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.pointEmissionModel = pointEmissionModel


class PrinceOfDarknessEmission:

    offsets = {'princeOfDarknessEmissionModel': 112, 'towerId': 120, 'graveyardManager': 128, 'path': 136, 'pathSegment': 144, 'position': 152, 'offset': 164, 'projectile': 176, 'transform': 184, 'necromancerEmission': 192}    
    def __init__(self, princeOfDarknessEmissionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.PrinceOfDarknessEmissionModel, towerId: System.Int32, graveyardManager: Assets.Scripts.Simulation.SimulationBehaviors.SimNecromancerGraveyardManager, path: Assets.Scripts.Simulation.Track.Path, pathSegment: Assets.Scripts.Simulation.Track.PathSegment, position: Assets.Scripts.Simulation.SMath.Vector3, offset: Assets.Scripts.Simulation.SMath.Vector3, projectile: Assets.Scripts.Simulation.Towers.Projectiles.Projectile, transform: Assets.Scripts.Simulation.Behaviors.TransformBehavior, necromancerEmission: Assets.Scripts.Simulation.Towers.Emissions.NecromancerEmission, **kwargs):
        super().__init__(self, **kwargs)
		self.princeOfDarknessEmissionModel = princeOfDarknessEmissionModel
		self.towerId = towerId
		self.graveyardManager = graveyardManager
		self.path = path
		self.pathSegment = pathSegment
		self.position = position
		self.offset = offset
		self.projectile = projectile
		self.transform = transform
		self.necromancerEmission = necromancerEmission


class RandomArcEmission:

    offsets = {'randomArcEmissionModel': 128}    
    def __init__(self, randomArcEmissionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.RandomArcEmissionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.randomArcEmissionModel = randomArcEmissionModel


class RandomEmission:

    offsets = {'randomEmissionModel': 112, 'projectile': 120, 'mainAttack': 128}    
    def __init__(self, randomEmissionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.RandomEmissionModel, projectile: Assets.Scripts.Simulation.Towers.Projectiles.Projectile, mainAttack: Assets.Scripts.Simulation.Towers.Behaviors.Attack.Attack, **kwargs):
        super().__init__(self, **kwargs)
		self.randomEmissionModel = randomEmissionModel
		self.projectile = projectile
		self.mainAttack = mainAttack


class RandomRotationEmission:

    offsets = {'randomRotationEmissionModel': 112}    
    def __init__(self, randomRotationEmissionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.RandomRotationEmissionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.randomRotationEmissionModel = randomRotationEmissionModel


class RandomTargetSpread:

    offsets = {'randomTargetSpreadModel': 112, 'currentEjectOffset': 120, 'projectileCount': 132, 'changedThisFrame': 136}    
    def __init__(self, randomTargetSpreadModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.RandomTargetSpreadModel, currentEjectOffset: Assets.Scripts.Simulation.SMath.Vector3, projectileCount: System.Int32, changedThisFrame: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.randomTargetSpreadModel = randomTargetSpreadModel
		self.currentEjectOffset = currentEjectOffset
		self.projectileCount = projectileCount
		self.changedThisFrame = changedThisFrame


class SendToBank:

    offsets = {'sendToBankModel': 112}    
    def __init__(self, sendToBankModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.SendToBankModel, **kwargs):
        super().__init__(self, **kwargs)
		self.sendToBankModel = sendToBankModel


class SingleEmission:

    offsets = {'singleEmissionModel': 112}    
    def __init__(self, singleEmissionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.SingleEmissionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.singleEmissionModel = singleEmissionModel


class SingleEmissionAtTower:

    offsets = {'singleEmissionAtTowerModel': 112}    
    def __init__(self, singleEmissionAtTowerModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.SingleEmissionAtTowerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.singleEmissionAtTowerModel = singleEmissionAtTowerModel


class SingleEmmisionTowardsTarget:

    offsets = {'singleEmmisionTowardsTargetModel': 112}    
    def __init__(self, singleEmmisionTowardsTargetModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.SingleEmmisionTowardsTargetModel, **kwargs):
        super().__init__(self, **kwargs)
		self.singleEmmisionTowardsTargetModel = singleEmmisionTowardsTargetModel


class EmissionArcRotationOffDisplayDirection:

    offsets = {'emissionArcRotationOffDisplayDirectionModel': 96}    
    def __init__(self, emissionArcRotationOffDisplayDirectionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.Behaviors.EmissionArcRotationOffDisplayDirectionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.emissionArcRotationOffDisplayDirectionModel = emissionArcRotationOffDisplayDirectionModel


class EmissionArcRotationOffTowerDirection:

    offsets = {'emissionArcRotationOffTowerDirectionModel': 96}    
    def __init__(self, emissionArcRotationOffTowerDirectionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.Behaviors.EmissionArcRotationOffTowerDirectionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.emissionArcRotationOffTowerDirectionModel = emissionArcRotationOffTowerDirectionModel


class EmissionCamoIfTargetIsCamo:

    offsets = {'modl': 96, 'premadeClone': 104}    
    def __init__(self, modl: Assets.Scripts.Models.Towers.Behaviors.Emissions.Behaviors.EmissionCamoIfTargetIsCamoModel, premadeClone: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, **kwargs):
        super().__init__(self, **kwargs)
		self.modl = modl
		self.premadeClone = premadeClone


class EmissionMaxProjectileRadius:

    offsets = {'modl': 96}    
    def __init__(self, modl: Assets.Scripts.Models.Towers.Behaviors.Emissions.Behaviors.EmissionMaxProjectileRadiusModel, **kwargs):
        super().__init__(self, **kwargs)
		self.modl = modl


class EmissionRotationOffAlternateDisplay:

    offsets = {'emissionRotationOffAlternateDisplayModel': 96}    
    def __init__(self, emissionRotationOffAlternateDisplayModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.Behaviors.EmissionRotationOffAlternateDisplayModel, **kwargs):
        super().__init__(self, **kwargs)
		self.emissionRotationOffAlternateDisplayModel = emissionRotationOffAlternateDisplayModel


class EmissionRotationOffBloonDirection:

    offsets = {'emissionRotationOffBloonDirectionModel': 96, 'airUnit': 104}    
    def __init__(self, emissionRotationOffBloonDirectionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.Behaviors.EmissionRotationOffBloonDirectionModel, airUnit: Assets.Scripts.Simulation.Towers.Behaviors.AirUnit, **kwargs):
        super().__init__(self, **kwargs)
		self.emissionRotationOffBloonDirectionModel = emissionRotationOffBloonDirectionModel
		self.airUnit = airUnit


class EmissionRotationOffDisplay:

    offsets = {'emissionRotationOffDisplayModel': 96}    
    def __init__(self, emissionRotationOffDisplayModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.Behaviors.EmissionRotationOffDisplayModel, **kwargs):
        super().__init__(self, **kwargs)
		self.emissionRotationOffDisplayModel = emissionRotationOffDisplayModel


class EmissionRotationOffDisplayOnEmit:

    offsets = {'emissionRotationOffDisplayOnEmitModel': 96}    
    def __init__(self, emissionRotationOffDisplayOnEmitModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.Behaviors.EmissionRotationOffDisplayOnEmitModel, **kwargs):
        super().__init__(self, **kwargs)
		self.emissionRotationOffDisplayOnEmitModel = emissionRotationOffDisplayOnEmitModel


class EmissionRotationOffProjectileDirection:

    offsets = {'emissionModel': 96}    
    def __init__(self, emissionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.Behaviors.EmissionRotationOffProjectileDirectionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.emissionModel = emissionModel


class EmissionRotationOffTowerDirection:

    offsets = {'emissionRotationOffTowerDirectionModel': 96}    
    def __init__(self, emissionRotationOffTowerDirectionModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.Behaviors.EmissionRotationOffTowerDirectionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.emissionRotationOffTowerDirectionModel = emissionRotationOffTowerDirectionModel


class EmissionRotationOffset:

    offsets = {'emissionRotationOffsetModel': 96}    
    def __init__(self, emissionRotationOffsetModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.Behaviors.EmissionRotationOffsetModel, **kwargs):
        super().__init__(self, **kwargs)
		self.emissionRotationOffsetModel = emissionRotationOffsetModel


class EmissionRotationZero:

    offsets = {'emissionRotationZeroModel': 96}    
    def __init__(self, emissionRotationZeroModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.Behaviors.EmissionRotationZeroModel, **kwargs):
        super().__init__(self, **kwargs)
		self.emissionRotationZeroModel = emissionRotationZeroModel


class SingleEmissionDisplayOffset:

    offsets = {'singleEmissionDisplayOffsetModel': 112, 'displayBehavior': 120, 'node': 128, 'offsetRotation': 136}    
    def __init__(self, singleEmissionDisplayOffsetModel: Assets.Scripts.Models.Towers.Behaviors.Emissions.SingleEmissionDisplayOffsetModel, displayBehavior: Assets.Scripts.Simulation.Behaviors.DisplayBehavior, node: Assets.Scripts.Simulation.Display.DisplayNode, offsetRotation: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.singleEmissionDisplayOffsetModel = singleEmissionDisplayOffsetModel
		self.displayBehavior = displayBehavior
		self.node = node
		self.offsetRotation = offsetRotation


class Filter:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class FilterAll:

    offsets = {'filterAllModel': 88}    
    def __init__(self, filterAllModel: Assets.Scripts.Models.Towers.Filters.FilterAllModel, **kwargs):
        super().__init__(self, **kwargs)
		self.filterAllModel = filterAllModel


class FilterAllExceptTarget:

    offsets = {'filterAllExceptTargetModel': 88}    
    def __init__(self, filterAllExceptTargetModel: Assets.Scripts.Models.Towers.Filters.FilterAllExceptTargetModel, **kwargs):
        super().__init__(self, **kwargs)
		self.filterAllExceptTargetModel = filterAllExceptTargetModel


class FilterAlternateWeaponTargetAngle:

    offsets = {'filterAlternateWeaponTargetAngle': 88, 'node': 96}    
    def __init__(self, filterAlternateWeaponTargetAngle: Assets.Scripts.Models.Towers.Filters.FilterAlternateWeaponTargetAngleModel, node: Assets.Scripts.Simulation.Display.DisplayNode, **kwargs):
        super().__init__(self, **kwargs)
		self.filterAlternateWeaponTargetAngle = filterAlternateWeaponTargetAngle
		self.node = node


class FilterBloonIfDamageType:

    offsets = {'filterBloonIfDamageTypeModel': 88}    
    def __init__(self, filterBloonIfDamageTypeModel: Assets.Scripts.Models.Towers.Filters.FilterBloonIfDamageTypeModel, **kwargs):
        super().__init__(self, **kwargs)
		self.filterBloonIfDamageTypeModel = filterBloonIfDamageTypeModel


class FilterCollisionWhileMoving:

    offsets = {'filterWithTagModel': 88, 'followPath': 96}    
    def __init__(self, filterWithTagModel: Assets.Scripts.Simulation.Towers.Filters.FilterCollisionWhileMoving, followPath: Assets.Scripts.Simulation.Towers.Projectiles.Behaviors.FollowPath, **kwargs):
        super().__init__(self, **kwargs)
		self.filterWithTagModel = filterWithTagModel
		self.followPath = followPath


class FilterFrozenBloons:

    offsets = {'filterMutatedTargetIfDamageIsTypeModel': 88}    
    def __init__(self, filterMutatedTargetIfDamageIsTypeModel: Assets.Scripts.Models.Towers.Filters.FilterFrozenBloonsModel, **kwargs):
        super().__init__(self, **kwargs)
		self.filterMutatedTargetIfDamageIsTypeModel = filterMutatedTargetIfDamageIsTypeModel


class FilterGlueLevel:

    offsets = {'glueModel': 88}    
    def __init__(self, glueModel: Assets.Scripts.Models.Towers.Filters.FilterGlueLevelModel, **kwargs):
        super().__init__(self, **kwargs)
		self.glueModel = glueModel


class FilterInvisible:

    offsets = {'filterInvisibleModel': 88}    
    def __init__(self, filterInvisibleModel: Assets.Scripts.Models.Towers.Filters.FilterInvisibleModel, **kwargs):
        super().__init__(self, **kwargs)
		self.filterInvisibleModel = filterInvisibleModel


class FilterInvisibleSubIntel:

    offsets = {'modl': 96}    
    def __init__(self, modl: Assets.Scripts.Models.Towers.Filters.FilterInvisibleSubIntelModel, **kwargs):
        super().__init__(self, **kwargs)
		self.modl = modl


class FilterMoab:

    offsets = {'filterModel': 88}    
    def __init__(self, filterModel: Assets.Scripts.Models.Towers.Filters.FilterMoabModel, **kwargs):
        super().__init__(self, **kwargs)
		self.filterModel = filterModel


class FilterMutatedTarget:

    offsets = {'filterMutatedTargetModel': 88}    
    def __init__(self, filterMutatedTargetModel: Assets.Scripts.Models.Towers.Filters.FilterMutatedTargetModel, **kwargs):
        super().__init__(self, **kwargs)
		self.filterMutatedTargetModel = filterMutatedTargetModel


class FilterOfftrack:

    offsets = {'filterOfftrackModel': 88}    
    def __init__(self, filterOfftrackModel: Assets.Scripts.Models.Towers.Filters.FilterOfftrackModel, **kwargs):
        super().__init__(self, **kwargs)
		self.filterOfftrackModel = filterOfftrackModel


class FilterOnlyCamoIn:

    offsets = {'filterCamoModel': 88}    
    def __init__(self, filterCamoModel: Assets.Scripts.Models.Towers.Filters.FilterOnlyCamoInModel, **kwargs):
        super().__init__(self, **kwargs)
		self.filterCamoModel = filterCamoModel


class FilterOutBloon:

    offsets = {'filterOutBloonModel': 88}    
    def __init__(self, filterOutBloonModel: Assets.Scripts.Models.Towers.Filters.FilterOutBloonModel, **kwargs):
        super().__init__(self, **kwargs)
		self.filterOutBloonModel = filterOutBloonModel


class FilterOutOffscreen:

    offsets = {'filterOutOffscreenModel': 88}    
    def __init__(self, filterOutOffscreenModel: Assets.Scripts.Models.Towers.Filters.FilterOutOffscreenModel, **kwargs):
        super().__init__(self, **kwargs)
		self.filterOutOffscreenModel = filterOutOffscreenModel


class FilterOutTag:

    offsets = {'filterOutTagModel': 88}    
    def __init__(self, filterOutTagModel: Assets.Scripts.Models.Towers.Filters.FilterOutTagModel, **kwargs):
        super().__init__(self, **kwargs)
		self.filterOutTagModel = filterOutTagModel


class FilterOveridingMutatedTarget:

    offsets = {'filterOveridingMutatedTargetModel': 88}    
    def __init__(self, filterOveridingMutatedTargetModel: Assets.Scripts.Models.Towers.Filters.FilterOveridingMutatedTargetModel, **kwargs):
        super().__init__(self, **kwargs)
		self.filterOveridingMutatedTargetModel = filterOveridingMutatedTargetModel


class FilterParentTowerRange:

    offsets = {'filterParentTowerRangeModel': 88, 'parentTower': 96, 'parentTowerAttack': 104, 'targets': 112}    
    def __init__(self, filterParentTowerRangeModel: Assets.Scripts.Models.Towers.Filters.FilterParentTowerRangeModel, parentTower: Assets.Scripts.Simulation.Towers.Tower, parentTowerAttack: Assets.Scripts.Simulation.Towers.Behaviors.Attack.Attack, targets: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Bloons.Bloon>, **kwargs):
        super().__init__(self, **kwargs)
		self.filterParentTowerRangeModel = filterParentTowerRangeModel
		self.parentTower = parentTower
		self.parentTowerAttack = parentTowerAttack
		self.targets = targets


class FilterTargetAngle:

    offsets = {'filterTargetAngleModel': 88, 'display': 96, 'tower': 104, 'airUnit': 112}    
    def __init__(self, filterTargetAngleModel: Assets.Scripts.Models.Towers.Filters.FilterTargetAngleModel, display: Assets.Scripts.Simulation.Behaviors.DisplayBehavior, tower: Assets.Scripts.Simulation.Towers.Tower, airUnit: Assets.Scripts.Simulation.Towers.Behaviors.AirUnit, **kwargs):
        super().__init__(self, **kwargs)
		self.filterTargetAngleModel = filterTargetAngleModel
		self.display = display
		self.tower = tower
		self.airUnit = airUnit


class FilterWithChance:

    offsets = {'filterWithChanceModel': 88}    
    def __init__(self, filterWithChanceModel: Assets.Scripts.Models.Towers.Filters.FilterWithChanceModel, **kwargs):
        super().__init__(self, **kwargs)
		self.filterWithChanceModel = filterWithChanceModel


class FilterWithTag:

    offsets = {'filterWithTagModel': 88}    
    def __init__(self, filterWithTagModel: Assets.Scripts.Models.Towers.Filters.FilterWithTagModel, **kwargs):
        super().__init__(self, **kwargs)
		self.filterWithTagModel = filterWithTagModel


class FilterWithTags:

    offsets = {'filterWithTagsModel': 88}    
    def __init__(self, filterWithTagsModel: Assets.Scripts.Models.Towers.Filters.FilterWithTagsModel, **kwargs):
        super().__init__(self, **kwargs)
		self.filterWithTagsModel = filterWithTagsModel


class AddAttackTowerMutator:

    offsets = {'addAttackTowerMutatorModel': 104}    
    def __init__(self, addAttackTowerMutatorModel: Assets.Scripts.Models.Towers.Mutators.AddAttackTowerMutatorModel, **kwargs):
        super().__init__(self, **kwargs)
		self.addAttackTowerMutatorModel = addAttackTowerMutatorModel


class AddBehaviorToTowerMutator:

    offsets = {'addBehaviorToTowerModel': 104}    
    def __init__(self, addBehaviorToTowerModel: Assets.Scripts.Models.Towers.Mutators.AddBehaviorToTowerMutatorModel, **kwargs):
        super().__init__(self, **kwargs)
		self.addBehaviorToTowerModel = addBehaviorToTowerModel


class AddTowerToTowerMutator:

    offsets = {'addTowerToTowerMutatorModel': 104}    
    def __init__(self, addTowerToTowerMutatorModel: Assets.Scripts.Models.Towers.Mutators.AddTowerToTowerMutatorModel, **kwargs):
        super().__init__(self, **kwargs)
		self.addTowerToTowerMutatorModel = addTowerToTowerMutatorModel


class BaseMutator:

    offsets = {'mutationId': 112}    
    def __init__(self, mutationId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.mutationId = mutationId


class DamageTowerMutator:

    offsets = {'damageTowerMutatorModel': 104}    
    def __init__(self, damageTowerMutatorModel: Assets.Scripts.Models.Towers.Mutators.DamageTowerMutatorModel, **kwargs):
        super().__init__(self, **kwargs)
		self.damageTowerMutatorModel = damageTowerMutatorModel


class PierceTowerMutator:

    offsets = {'pierceTowerMutatorModel': 104}    
    def __init__(self, pierceTowerMutatorModel: Assets.Scripts.Models.Towers.Mutators.PierceTowerMutatorModel, **kwargs):
        super().__init__(self, **kwargs)
		self.pierceTowerMutatorModel = pierceTowerMutatorModel


class ProjectileSizeTowerMutator:

    offsets = {'projectileSizeModel': 104}    
    def __init__(self, projectileSizeModel: Assets.Scripts.Models.Towers.Mutators.ProjectileSizeTowerMutatorModel, **kwargs):
        super().__init__(self, **kwargs)
		self.projectileSizeModel = projectileSizeModel


class ProjectileSpeedTowerMutator:

    offsets = {'projectileSpeedModel': 104}    
    def __init__(self, projectileSpeedModel: Assets.Scripts.Models.Towers.Mutators.ProjectileSpeedTowerMutatorModel, **kwargs):
        super().__init__(self, **kwargs)
		self.projectileSpeedModel = projectileSpeedModel


class RangeTowerMutator:

    offsets = {'rangeTowerMutatorModel': 104}    
    def __init__(self, rangeTowerMutatorModel: Assets.Scripts.Models.Towers.Mutators.RangeTowerMutatorModel, **kwargs):
        super().__init__(self, **kwargs)
		self.rangeTowerMutatorModel = rangeTowerMutatorModel


class ReloadTimeTowerMutator:

    offsets = {'reloadTimeTowerMutatorModel': 104}    
    def __init__(self, reloadTimeTowerMutatorModel: Assets.Scripts.Models.Towers.Mutators.ReloadTimeTowerMutatorModel, **kwargs):
        super().__init__(self, **kwargs)
		self.reloadTimeTowerMutatorModel = reloadTimeTowerMutatorModel


class TowerMutator:

    offsets = {'mutator': 88, 'conditional': 96}    
    def __init__(self, mutator: Assets.Scripts.Simulation.Objects.BehaviorMutator, conditional: Assets.Scripts.Simulation.Towers.Mutators.Conditions.Conditional, **kwargs):
        super().__init__(self, **kwargs)
		self.mutator = mutator
		self.conditional = conditional


class WindChanceTowerMutator:

    offsets = {'windChanceTowerMutatorModel': 104}    
    def __init__(self, windChanceTowerMutatorModel: Assets.Scripts.Models.Towers.Mutators.WindChanceTowerMutatorModel, **kwargs):
        super().__init__(self, **kwargs)
		self.windChanceTowerMutatorModel = windChanceTowerMutatorModel


class Conditional:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CheckAcademyUnderLevel:

    offsets = {'checkAcademyUnderLevelModel': 88}    
    def __init__(self, checkAcademyUnderLevelModel: Assets.Scripts.Models.Towers.Mutators.Conditions.Behaviors.CheckAcademyUnderLevelModel, **kwargs):
        super().__init__(self, **kwargs)
		self.checkAcademyUnderLevelModel = checkAcademyUnderLevelModel


class CheckTempleUnderLevel:

    offsets = {'checkTempleModel': 88}    
    def __init__(self, checkTempleModel: Assets.Scripts.Models.Towers.Mutators.Conditions.Behaviors.CheckTempleUnderLevelModel, **kwargs):
        super().__init__(self, **kwargs)
		self.checkTempleModel = checkTempleModel


class Pet:

    offsets = {'petModel': 96, 'display': 104, 'transform': 112, 'modelBehaviors': 120}    
    def __init__(self, petModel: Assets.Scripts.Models.Towers.Pets.PetModel, display: Assets.Scripts.Simulation.Behaviors.DisplayBehavior, transform: Assets.Scripts.Simulation.Behaviors.TransformBehavior, modelBehaviors: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.RootBehavior>, **kwargs):
        super().__init__(self, **kwargs)
		self.petModel = petModel
		self.display = display
		self.transform = transform
		self.modelBehaviors = modelBehaviors


class PetBehavior:

    offsets = {'pet': 88}    
    def __init__(self, pet: Assets.Scripts.Simulation.Towers.Pets.Pet, **kwargs):
        super().__init__(self, **kwargs)
		self.pet = pet


class PetCreateEffectOnPlace:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PetCreateEffectOnSell:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PetCreateSoundOnIdle:

    offsets = {'petIdleModel': 96, 'delay': 104, 'currentFrame': 108}    
    def __init__(self, petIdleModel: Assets.Scripts.Models.Towers.Pets.PetCreateSoundOnIdleModel, delay: System.Int32, currentFrame: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.petIdleModel = petIdleModel
		self.delay = delay
		self.currentFrame = currentFrame


class PetCreateSoundOnPlace:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PetTerrainHandler:

    offsets = {'petTerrainHandlerModel': 96, 'currZ': 104}    
    def __init__(self, petTerrainHandlerModel: Assets.Scripts.Models.Towers.Pets.PetTerrainHandlerModel, currZ: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.petTerrainHandlerModel = petTerrainHandlerModel
		self.currZ = currZ


class Wander:

    offsets = {'wanderModel': 96, 'state': 104, 'elapsedMovementTime': 108, 'totalMovementTime': 112, 'totalRotationTime': 116, 'startPosition': 120, 'targetPosition': 128, 'startRotation': 136, 'targetRotation': 140, 'leaveIdleIn': 144}    
    def __init__(self, wanderModel: Assets.Scripts.Models.Towers.Pets.WanderModel, state: Assets.Scripts.Simulation.Towers.Pets.Wander.WanderState, elapsedMovementTime: System.Int32, totalMovementTime: System.Int32, totalRotationTime: System.Int32, startPosition: Assets.Scripts.Simulation.SMath.Vector2, targetPosition: Assets.Scripts.Simulation.SMath.Vector2, startRotation: System.Single, targetRotation: System.Single, leaveIdleIn: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.wanderModel = wanderModel
		self.state = state
		self.elapsedMovementTime = elapsedMovementTime
		self.totalMovementTime = totalMovementTime
		self.totalRotationTime = totalRotationTime
		self.startPosition = startPosition
		self.targetPosition = targetPosition
		self.startRotation = startRotation
		self.targetRotation = targetRotation
		self.leaveIdleIn = leaveIdleIn


class Projectile:

    offsets = {'projectileModel': 176, 'collidedWith': 184, 'baseCollidedWith': 192, 'projectileBehaviorsOrderedByPass': 200, 'createdBehaviors': 208, 'projectileBehaviors': 216, 'direction': 224, 'ageBehavior': 232, 'emittedFrom': 240, 'pierce': 252, 'createdAt': 256, 'lifespan': 260, 'timeSinceLastCollisionCheck': 264, 'dynamicCollision': 268, 'onlyHitMoab': 269, 'cantHitMoab': 270, 'cantHitCamo': 271, 'canCollideWithBloons': 272, 'owner': 276, 'emittedBy': 280, '<Weapon>k__BackingField': 288, '_target': 296, '<EjectRotation>k__BackingField': 360}    
    def __init__(self, projectileModel: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, collidedWith: Assets.Scripts.Utils.SizedList<System.Int32>, baseCollidedWith: Assets.Scripts.Utils.SizedList<System.Int32>, projectileBehaviorsOrderedByPass: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Projectiles.ProjectileBehavior>, createdBehaviors: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.RootBehavior>, projectileBehaviors: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Projectiles.ProjectileBehavior>, direction: Assets.Scripts.Simulation.SMath.Vector3Boxed, ageBehavior: Assets.Scripts.Simulation.Towers.Projectiles.Behaviors.Age, emittedFrom: Assets.Scripts.Simulation.SMath.Vector3, pierce: System.Single, createdAt: System.Int32, lifespan: System.Int32, timeSinceLastCollisionCheck: System.Int32, dynamicCollision: System.Boolean, onlyHitMoab: System.Boolean, cantHitMoab: System.Boolean, cantHitCamo: System.Boolean, canCollideWithBloons: System.Boolean, owner: System.Int32, emittedBy: Assets.Scripts.Simulation.Towers.Tower, <Weapon>k__BackingField: Assets.Scripts.Simulation.Towers.Weapons.Weapon, _target: Assets.Scripts.Simulation.Towers.Target, <EjectRotation>k__BackingField: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.projectileModel = projectileModel
		self.collidedWith = collidedWith
		self.baseCollidedWith = baseCollidedWith
		self.projectileBehaviorsOrderedByPass = projectileBehaviorsOrderedByPass
		self.createdBehaviors = createdBehaviors
		self.projectileBehaviors = projectileBehaviors
		self.direction = direction
		self.ageBehavior = ageBehavior
		self.emittedFrom = emittedFrom
		self.pierce = pierce
		self.createdAt = createdAt
		self.lifespan = lifespan
		self.timeSinceLastCollisionCheck = timeSinceLastCollisionCheck
		self.dynamicCollision = dynamicCollision
		self.onlyHitMoab = onlyHitMoab
		self.cantHitMoab = cantHitMoab
		self.cantHitCamo = cantHitCamo
		self.canCollideWithBloons = canCollideWithBloons
		self.owner = owner
		self.emittedBy = emittedBy
		self.<Weapon>k__BackingField = <Weapon>k__BackingField
		self._target = _target
		self.<EjectRotation>k__BackingField = <EjectRotation>k__BackingField


class ProjectileBehavior:

    offsets = {'projectile': 88}    
    def __init__(self, projectile: Assets.Scripts.Simulation.Towers.Projectiles.Projectile, **kwargs):
        super().__init__(self, **kwargs)
		self.projectile = projectile


class ProjectileBehaviorOnEmit:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Accelerate:

    offsets = {'accModel': 96, 'travel': 104, 'track': 112}    
    def __init__(self, accModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.AccelerateModel, travel: Assets.Scripts.Simulation.Towers.Projectiles.Behaviors.TravelStrait, track: Assets.Scripts.Simulation.Towers.Projectiles.Behaviors.TrackTarget, **kwargs):
        super().__init__(self, **kwargs)
		self.accModel = accModel
		self.travel = travel
		self.track = track


class AcidPool:

    offsets = {'acidModel': 96, 'lifespanFrames': 104, 'createdAcidPool': 108}    
    def __init__(self, acidModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.AcidPoolModel, lifespanFrames: System.Int32, createdAcidPool: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.acidModel = acidModel
		self.lifespanFrames = lifespanFrames
		self.createdAcidPool = createdAcidPool


class AddAcidicMixtureToProjectile:

    offsets = {'addAcidicMixtureToProjectileModel': 96}    
    def __init__(self, addAcidicMixtureToProjectileModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.AddAcidicMixtureToProjectileModel, **kwargs):
        super().__init__(self, **kwargs)
		self.addAcidicMixtureToProjectileModel = addAcidicMixtureToProjectileModel


class AddBehaviorToBloon:

    offsets = {'addBehaviorToBloonModel': 96, 'bloonFilter': 104, 'bloonFilters': 112, 'damageBehavior': 120}    
    def __init__(self, addBehaviorToBloonModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.AddBehaviorToBloonModel, bloonFilter: Assets.Scripts.Simulation.Towers.Filters.Filter, bloonFilters: System.Collections.Generic.List<Assets.Scripts.Simulation.Towers.Filters.Filter>, damageBehavior: Assets.Scripts.Simulation.Towers.Projectiles.Behaviors.Damage, **kwargs):
        super().__init__(self, **kwargs)
		self.addBehaviorToBloonModel = addBehaviorToBloonModel
		self.bloonFilter = bloonFilter
		self.bloonFilters = bloonFilters
		self.damageBehavior = damageBehavior


class AddBehaviorToWeaponMutator:

    offsets = {'addBehaviorToWeaponModel': 112}    
    def __init__(self, addBehaviorToWeaponModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.AddbehaviorToWeaponModel, **kwargs):
        super().__init__(self, **kwargs)
		self.addBehaviorToWeaponModel = addBehaviorToWeaponModel


class AddBerserkerBrewToProjectile:

    offsets = {'addBerserkerBrewToProjectileModel': 96}    
    def __init__(self, addBerserkerBrewToProjectileModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.AddBerserkerBrewToProjectileModel, **kwargs):
        super().__init__(self, **kwargs)
		self.addBerserkerBrewToProjectileModel = addBerserkerBrewToProjectileModel


class AddBonusDamagePerHitToBloon:

    offsets = {'def': 96}    
    def __init__(self, def: Assets.Scripts.Models.Towers.Projectiles.Behaviors.AddBonusDamagePerHitToBloonModel, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def


class AddTagToBloon:

    offsets = {'addTagToBloonModel': 96}    
    def __init__(self, addTagToBloonModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.AddTagToBloonModel, **kwargs):
        super().__init__(self, **kwargs)
		self.addTagToBloonModel = addTagToBloonModel


class AddbehaviorToWeapon:

    offsets = {'addBehaviorToWeaponModel': 96}    
    def __init__(self, addBehaviorToWeaponModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.AddbehaviorToWeaponModel, **kwargs):
        super().__init__(self, **kwargs)
		self.addBehaviorToWeaponModel = addBehaviorToWeaponModel


class AdoraTrackTarget:

    offsets = {'adoraTrackTargetModel': 96, 'currentVelocity': 104, 'currentDistance': 108, 'accelerating': 112, 'movementDirection': 116, 'lastTargetSearchElapsed': 128}    
    def __init__(self, adoraTrackTargetModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.AdoraTrackTargetModel, currentVelocity: System.Single, currentDistance: System.Single, accelerating: System.Boolean, movementDirection: Assets.Scripts.Simulation.SMath.Vector3, lastTargetSearchElapsed: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.adoraTrackTargetModel = adoraTrackTargetModel
		self.currentVelocity = currentVelocity
		self.currentDistance = currentDistance
		self.accelerating = accelerating
		self.movementDirection = movementDirection
		self.lastTargetSearchElapsed = lastTargetSearchElapsed


class Age:

    offsets = {'ageModel': 96, 'roundsLeft': 104, 'createdAt': 108, 'lifespanFrames': 112}    
    def __init__(self, ageModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.AgeModel, roundsLeft: System.Int32, createdAt: System.Int32, lifespanFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.ageModel = ageModel
		self.roundsLeft = roundsLeft
		self.createdAt = createdAt
		self.lifespanFrames = lifespanFrames


class AgeRandom:

    offsets = {'randomAgeModel': 120}    
    def __init__(self, randomAgeModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.AgeRandomModel, **kwargs):
        super().__init__(self, **kwargs)
		self.randomAgeModel = randomAgeModel


class AnimateOnCollide:

    offsets = {'animateOnCollideModel': 96}    
    def __init__(self, animateOnCollideModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.AnimateOnCollideModel, **kwargs):
        super().__init__(self, **kwargs)
		self.animateOnCollideModel = animateOnCollideModel


class ArriveAtTarget:

    offsets = {'arriveModel': 96, 'origPos': 104, 'targetPos': 116, 'startFrame': 128, 'perc': 132, 'timeToTake': 136, 'arrivedAtTarget': 140, 'startPos': 144}    
    def __init__(self, arriveModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.ArriveAtTargetModel, origPos: Assets.Scripts.Simulation.SMath.Vector3, targetPos: Assets.Scripts.Simulation.SMath.Vector3, startFrame: System.Int32, perc: System.Single, timeToTake: System.Single, arrivedAtTarget: System.Boolean, startPos: Assets.Scripts.Simulation.SMath.Vector3, **kwargs):
        super().__init__(self, **kwargs)
		self.arriveModel = arriveModel
		self.origPos = origPos
		self.targetPos = targetPos
		self.startFrame = startFrame
		self.perc = perc
		self.timeToTake = timeToTake
		self.arrivedAtTarget = arrivedAtTarget
		self.startPos = startPos


class BigSqueezeFortifiedEffect:

    offsets = {'bigSqueezeFortifiedEffectModel': 96, 'isDone': 104}    
    def __init__(self, bigSqueezeFortifiedEffectModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.BigSqueezeFortifiedEffectModel, isDone: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.bigSqueezeFortifiedEffectModel = bigSqueezeFortifiedEffectModel
		self.isDone = isDone


class BloonSlap:

    offsets = {'bloonSlapModel': 96, 'maxPiercedAmount': 104, 'piercedAmount': 108}    
    def __init__(self, bloonSlapModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.BloonSlapModel, maxPiercedAmount: System.Int32, piercedAmount: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonSlapModel = bloonSlapModel
		self.maxPiercedAmount = maxPiercedAmount
		self.piercedAmount = piercedAmount


class BrickellFreezeOtherMines:

    offsets = {'brickellFreezeOtherMinesModel': 96, 'startCollidingAtFrame': 104, 'initialised': 108}    
    def __init__(self, brickellFreezeOtherMinesModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.BrickellFreezeOtherMinesModel, startCollidingAtFrame: System.Int32, initialised: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.brickellFreezeOtherMinesModel = brickellFreezeOtherMinesModel
		self.startCollidingAtFrame = startCollidingAtFrame
		self.initialised = initialised


class Cash:

    offsets = {'cashModel': 96, 'cashedIn': 104}    
    def __init__(self, cashModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.CashModel, cashedIn: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.cashModel = cashModel
		self.cashedIn = cashedIn


class ChipMapBasedObject:

    offsets = {'chipMapBasedObjectModel': 96}    
    def __init__(self, chipMapBasedObjectModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.ChipMapBasedObjectModel, **kwargs):
        super().__init__(self, **kwargs)
		self.chipMapBasedObjectModel = chipMapBasedObjectModel


class ClearHitBloons:

    offsets = {'clearHitBloonsModel': 96, 'lastClear': 104}    
    def __init__(self, clearHitBloonsModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.ClearHitBloonsModel, lastClear: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.clearHitBloonsModel = clearHitBloonsModel
		self.lastClear = lastClear


class ClearHitBloonsWhenNoLongerColliding:

    offsets = {'clearHitBloonsWhenNoLongerCollidingModel': 96, 'lastClear': 104, 'collidedWithLayerIds': 112, 'currentCollisionList': 120, 'stillCollidingWith': 128}    
    def __init__(self, clearHitBloonsWhenNoLongerCollidingModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.ClearHitBloonsWhenNoLongerCollidingModel, lastClear: System.Single, collidedWithLayerIds: Assets.Scripts.Utils.SizedList<System.Int32>, currentCollisionList: System.Collections.Generic.List<Assets.Scripts.Simulation.Bloons.Bloon>, stillCollidingWith: System.Collections.Generic.List<System.Int32>, **kwargs):
        super().__init__(self, **kwargs)
		self.clearHitBloonsWhenNoLongerCollidingModel = clearHitBloonsWhenNoLongerCollidingModel
		self.lastClear = lastClear
		self.collidedWithLayerIds = collidedWithLayerIds
		self.currentCollisionList = currentCollisionList
		self.stillCollidingWith = stillCollidingWith


class Collect:

    offsets = {'collectModel': 96, 'collecting': 104, 'startPos': 108, 'anchorPos': 120, 'destPos': 132, 'startFrame': 144, 'endFrame': 148, 'ReachedDestination': 152}    
    def __init__(self, collectModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.CollectModel, collecting: System.Boolean, startPos: Assets.Scripts.Simulation.SMath.Vector3, anchorPos: Assets.Scripts.Simulation.SMath.Vector3, destPos: Assets.Scripts.Simulation.SMath.Vector3, startFrame: System.Int32, endFrame: System.Int32, ReachedDestination: Assets.Scripts.Simulation.Towers.Projectiles.Behaviors.Collect.ThatEventHandler, **kwargs):
        super().__init__(self, **kwargs)
		self.collectModel = collectModel
		self.collecting = collecting
		self.startPos = startPos
		self.anchorPos = anchorPos
		self.destPos = destPos
		self.startFrame = startFrame
		self.endFrame = endFrame
		self.ReachedDestination = ReachedDestination


class CollideExtraPierceReduction:

    offsets = {'collideExtraPierceReductionModel': 96}    
    def __init__(self, collideExtraPierceReductionModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.CollideExtraPierceReductionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.collideExtraPierceReductionModel = collideExtraPierceReductionModel


class CollideOnlyWithTarget:

    offsets = {'collideOnlyWithTargetModel': 96}    
    def __init__(self, collideOnlyWithTargetModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.CollideOnlyWithTargetModel, **kwargs):
        super().__init__(self, **kwargs)
		self.collideOnlyWithTargetModel = collideOnlyWithTargetModel


class CreateEffectFollowProjectile:

    offsets = {'createEffectFollowProjectileModel': 96}    
    def __init__(self, createEffectFollowProjectileModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.CreateEffectFollowProjectileModel, **kwargs):
        super().__init__(self, **kwargs)
		self.createEffectFollowProjectileModel = createEffectFollowProjectileModel


class CreateEffectFromCollisionToCollision:

    offsets = {'createEffectModel': 96, 'startPosition': 104}    
    def __init__(self, createEffectModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.CreateEffectFromCollisionToCollisionModel, startPosition: Assets.Scripts.Simulation.SMath.Vector3, **kwargs):
        super().__init__(self, **kwargs)
		self.createEffectModel = createEffectModel
		self.startPosition = startPosition


class CreateEffectOnContact:

    offsets = {'createEffectOnContactModel': 96, 'pauseEffectThisFrame': 104, 'spawnPosition': 108}    
    def __init__(self, createEffectOnContactModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.CreateEffectOnContactModel, pauseEffectThisFrame: System.Boolean, spawnPosition: Assets.Scripts.Simulation.SMath.Vector3, **kwargs):
        super().__init__(self, **kwargs)
		self.createEffectOnContactModel = createEffectOnContactModel
		self.pauseEffectThisFrame = pauseEffectThisFrame
		self.spawnPosition = spawnPosition


class CreateEffectOnExhaustFraction:

    offsets = {'createEffectOnExhaustFractionModel': 96, 'isDone': 104}    
    def __init__(self, createEffectOnExhaustFractionModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.CreateEffectOnExhaustFractionModel, isDone: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.createEffectOnExhaustFractionModel = createEffectOnExhaustFractionModel
		self.isDone = isDone


class CreateEffectOnExhausted:

    offsets = {'createEffectOnExhaustedModel': 96, 'isDone': 104}    
    def __init__(self, createEffectOnExhaustedModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.CreateEffectOnExhaustedModel, isDone: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.createEffectOnExhaustedModel = createEffectOnExhaustedModel
		self.isDone = isDone


class CreateEffectOnExpire:

    offsets = {'createEffectOnExpireModel': 96, 'isDone': 104}    
    def __init__(self, createEffectOnExpireModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.CreateEffectOnExpireModel, isDone: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.createEffectOnExpireModel = createEffectOnExpireModel
		self.isDone = isDone


class CreateEffectProjectileAfterTime:

    offsets = {'createEffectProjectileAfterTimeModel': 96, 'timeFrames': 104, 'lastRoundTimeElapsed': 108}    
    def __init__(self, createEffectProjectileAfterTimeModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.CreateEffectProjectileAfterTimeModel, timeFrames: System.Int32, lastRoundTimeElapsed: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.createEffectProjectileAfterTimeModel = createEffectProjectileAfterTimeModel
		self.timeFrames = timeFrames
		self.lastRoundTimeElapsed = lastRoundTimeElapsed


class CreateLightningEffect:

    offsets = {'createLightModel': 96, 'smallLength': 104, 'mediumLength': 108}    
    def __init__(self, createLightModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.CreateLightningEffectModel, smallLength: System.Single, mediumLength: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.createLightModel = createLightModel
		self.smallLength = smallLength
		self.mediumLength = mediumLength


class CreateProjectileOnBlockerCollide:

    offsets = {'createProjectileOnBlockerCollideModel': 96, 'emission': 104}    
    def __init__(self, createProjectileOnBlockerCollideModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.CreateProjectileOnBlockerCollideModel, emission: Assets.Scripts.Simulation.Towers.Emissions.Emission, **kwargs):
        super().__init__(self, **kwargs)
		self.createProjectileOnBlockerCollideModel = createProjectileOnBlockerCollideModel
		self.emission = emission


class CreateProjectileOnContact:

    offsets = {'createProjectileOnContactModel': 96, 'emission': 104, 'spawnPosition': 112}    
    def __init__(self, createProjectileOnContactModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.CreateProjectileOnContactModel, emission: Assets.Scripts.Simulation.Towers.Emissions.Emission, spawnPosition: Assets.Scripts.Simulation.SMath.Vector3, **kwargs):
        super().__init__(self, **kwargs)
		self.createProjectileOnContactModel = createProjectileOnContactModel
		self.emission = emission
		self.spawnPosition = spawnPosition


class CreateProjectileOnExhaustFraction:

    offsets = {'cpModel': 96, 'emission': 104, 'isDone': 112}    
    def __init__(self, cpModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.CreateProjectileOnExhaustFractionModel, emission: Assets.Scripts.Simulation.Towers.Emissions.Emission, isDone: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.cpModel = cpModel
		self.emission = emission
		self.isDone = isDone


class CreateProjectileOnExhaustPierce:

    offsets = {'modl': 96, 'emission': 104, 'timeOfLastCreation': 112, 'creationCount': 116}    
    def __init__(self, modl: Assets.Scripts.Models.Towers.Projectiles.Behaviors.CreateProjectileOnExhaustPierceModel, emission: Assets.Scripts.Simulation.Towers.Emissions.Emission, timeOfLastCreation: System.Single, creationCount: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.modl = modl
		self.emission = emission
		self.timeOfLastCreation = timeOfLastCreation
		self.creationCount = creationCount


class CreateProjectileOnExpire:

    offsets = {'createProjectileOnExpireModel': 96, 'emission': 104}    
    def __init__(self, createProjectileOnExpireModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.CreateProjectileOnExpireModel, emission: Assets.Scripts.Simulation.Towers.Emissions.Emission, **kwargs):
        super().__init__(self, **kwargs)
		self.createProjectileOnExpireModel = createProjectileOnExpireModel
		self.emission = emission


class CreateProjectileOnInterval:

    offsets = {'createProjectileOnIntervalModel': 96, 'emission': 104, 'createNextProjAt': 112}    
    def __init__(self, createProjectileOnIntervalModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.CreateProjectileOnIntervalModel, emission: Assets.Scripts.Simulation.Towers.Emissions.Emission, createNextProjAt: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.createProjectileOnIntervalModel = createProjectileOnIntervalModel
		self.emission = emission
		self.createNextProjAt = createNextProjAt


class CreateRopeEffect:

    offsets = {'createRopeEffectModel': 96, 'scale': 104, 'rotation': 112, 'direction': 120, 'ropeEffect': 128, 'location': 136, 'ropeEnd': 144}    
    def __init__(self, createRopeEffectModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.CreateRopeEffectModel, scale: Assets.Scripts.Simulation.SMath.Vector3Boxed, rotation: Assets.Scripts.Simulation.SMath.FloatBoxed, direction: Assets.Scripts.Simulation.SMath.Vector2, ropeEffect: Assets.Scripts.Simulation.Objects.Entity, location: Assets.Scripts.Simulation.SMath.Vector2, ropeEnd: Assets.Scripts.Simulation.Objects.Entity, **kwargs):
        super().__init__(self, **kwargs)
		self.createRopeEffectModel = createRopeEffectModel
		self.scale = scale
		self.rotation = rotation
		self.direction = direction
		self.ropeEffect = ropeEffect
		self.location = location
		self.ropeEnd = ropeEnd


class CreateSoundOnDelayedCollision:

    offsets = {'createSoundOnDelayedCollisionModel': 96}    
    def __init__(self, createSoundOnDelayedCollisionModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.CreateSoundOnDelayedCollisionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.createSoundOnDelayedCollisionModel = createSoundOnDelayedCollisionModel


class CreateSoundOnPickup:

    offsets = {'createSoundOnPickupModel': 96}    
    def __init__(self, createSoundOnPickupModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.CreateSoundOnPickupModel, **kwargs):
        super().__init__(self, **kwargs)
		self.createSoundOnPickupModel = createSoundOnPickupModel


class CreateSoundOnProjectileCollision:

    offsets = {'createSoundOnProjectileCollisionModel': 96}    
    def __init__(self, createSoundOnProjectileCollisionModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.CreateSoundOnProjectileCollisionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.createSoundOnProjectileCollisionModel = createSoundOnProjectileCollisionModel


class CreateSoundOnProjectileExhaust:

    offsets = {'createSoundOnProjectileExhaustModel': 96}    
    def __init__(self, createSoundOnProjectileExhaustModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.CreateSoundOnProjectileExhaustModel, **kwargs):
        super().__init__(self, **kwargs)
		self.createSoundOnProjectileExhaustModel = createSoundOnProjectileExhaustModel


class CreateSoundOnProjectileExpire:

    offsets = {'createSoundOnProjectileExpireModel': 96, 'sounds': 104}    
    def __init__(self, createSoundOnProjectileExpireModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.CreateSoundOnProjectileExpireModel, sounds: System.Collections.Generic.List<System.String>, **kwargs):
        super().__init__(self, **kwargs)
		self.createSoundOnProjectileExpireModel = createSoundOnProjectileExpireModel
		self.sounds = sounds


class CreateTextEffect:

    offsets = {'createTextEffectModel': 96}    
    def __init__(self, createTextEffectModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.CreateTextEffectModel, **kwargs):
        super().__init__(self, **kwargs)
		self.createTextEffectModel = createTextEffectModel


class CreateTower:

    offsets = {'createTowerModel': 96}    
    def __init__(self, createTowerModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.CreateTowerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.createTowerModel = createTowerModel


class CreateTypedTower:

    offsets = {'createTypedTowerModel': 96, 'possibleTowers': 104, 'towerModelToMake': 144}    
    def __init__(self, createTypedTowerModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.CreateTypedTowerModel, possibleTowers: Assets.Scripts.Utils.SizedList<Assets.Scripts.Models.Towers.TowerModel>, towerModelToMake: Assets.Scripts.Models.Towers.TowerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.createTypedTowerModel = createTypedTowerModel
		self.possibleTowers = possibleTowers
		self.towerModelToMake = towerModelToMake


class Curve:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Damage:

    offsets = {'damageModel': 96}    
    def __init__(self, damageModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.DamageModel, **kwargs):
        super().__init__(self, **kwargs)
		self.damageModel = damageModel


class DamageInRingRadius:

    offsets = {'damageInRingRadiusModel': 104}    
    def __init__(self, damageInRingRadiusModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.DamageInRingRadiusModel, **kwargs):
        super().__init__(self, **kwargs)
		self.damageInRingRadiusModel = damageInRingRadiusModel


class DamageModifier:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DamageModifierForBloonState:

    offsets = {'damageModifierForBloonStateModel': 96}    
    def __init__(self, damageModifierForBloonStateModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.DamageModifierForBloonStateModel, **kwargs):
        super().__init__(self, **kwargs)
		self.damageModifierForBloonStateModel = damageModifierForBloonStateModel


class DamageModifierForBloonType:

    offsets = {'damageModifierForBloonTypeModel': 96}    
    def __init__(self, damageModifierForBloonTypeModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.DamageModifierForBloonTypeModel, **kwargs):
        super().__init__(self, **kwargs)
		self.damageModifierForBloonTypeModel = damageModifierForBloonTypeModel


class DamageModifierForModifiers:

    offsets = {'damageModifierForModifiersModel': 96}    
    def __init__(self, damageModifierForModifiersModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.DamageModifierForModifiersModel, **kwargs):
        super().__init__(self, **kwargs)
		self.damageModifierForModifiersModel = damageModifierForModifiersModel


class DamageModifierForTag:

    offsets = {'damageModifierForTagModel': 96}    
    def __init__(self, damageModifierForTagModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.DamageModifierForTagModel, **kwargs):
        super().__init__(self, **kwargs)
		self.damageModifierForTagModel = damageModifierForTagModel


class DamageModifierUnstableConcoction:

    offsets = {'damageModifierUnstableConcoctionModel': 96, 'bloonDamage': 104, 'moabDamage': 108}    
    def __init__(self, damageModifierUnstableConcoctionModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.DamageModifierUnstableConcoctionModel, bloonDamage: System.Single, moabDamage: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.damageModifierUnstableConcoctionModel = damageModifierUnstableConcoctionModel
		self.bloonDamage = bloonDamage
		self.moabDamage = moabDamage


class DamageModifierWrath:

    offsets = {'damageModifierWrathModel': 96}    
    def __init__(self, damageModifierWrathModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.DamageModifierWrathModel, **kwargs):
        super().__init__(self, **kwargs)
		self.damageModifierWrathModel = damageModifierWrathModel


class DamagePercentOfMax:

    offsets = {'damagePercentOfMaxModel': 96, 'offscreenDamageOverride': 104}    
    def __init__(self, damagePercentOfMaxModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.DamagePercentOfMaxModel, offscreenDamageOverride: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.damagePercentOfMaxModel = damagePercentOfMaxModel
		self.offscreenDamageOverride = offscreenDamageOverride


class DamageUpTagTowers:

    offsets = {'damageUpTagTowersModel': 96}    
    def __init__(self, damageUpTagTowersModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.DamageUpTagTowersModel, **kwargs):
        super().__init__(self, **kwargs)
		self.damageUpTagTowersModel = damageUpTagTowersModel


class DamageUpTowers:

    offsets = {'damageUpTowersModel': 96}    
    def __init__(self, damageUpTowersModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.DamageUpTowersModel, **kwargs):
        super().__init__(self, **kwargs)
		self.damageUpTowersModel = damageUpTowersModel


class DelayBloonChildrenSpawning:

    offsets = {'behaviorModel': 96}    
    def __init__(self, behaviorModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.DelayBloonChildrenSpawningModel, **kwargs):
        super().__init__(self, **kwargs)
		self.behaviorModel = behaviorModel


class DepletionToCash:

    offsets = {'depletionToCashModel': 96, 'cashedIn': 104}    
    def __init__(self, depletionToCashModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.DepletionToCashModel, cashedIn: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.depletionToCashModel = depletionToCashModel
		self.cashedIn = cashedIn


class DestroyIfTargetLost:

    offsets = {'destroyIfTargetLostModel': 96}    
    def __init__(self, destroyIfTargetLostModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.DestroyIfTargetLostModel, **kwargs):
        super().__init__(self, **kwargs)
		self.destroyIfTargetLostModel = destroyIfTargetLostModel


class DestroyProjectileIfTowerDestroyed:

    offsets = {'destroyProjectileIfTowerDestroyedModel': 96}    
    def __init__(self, destroyProjectileIfTowerDestroyedModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.DestroyProjectileIfTowerDestroyedModel, **kwargs):
        super().__init__(self, **kwargs)
		self.destroyProjectileIfTowerDestroyedModel = destroyProjectileIfTowerDestroyedModel


class DestroyWhenHitImmune:

    offsets = {'destroyWhenHitImmuneModel': 96}    
    def __init__(self, destroyWhenHitImmuneModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.DestroyWhenHitImmuneModel, **kwargs):
        super().__init__(self, **kwargs)
		self.destroyWhenHitImmuneModel = destroyWhenHitImmuneModel


class DistributeToChildrenBloonModifier:

    offsets = {'distributeToChildrenBloonModifierModel': 96}    
    def __init__(self, distributeToChildrenBloonModifierModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.DistributeToChildrenBloonModifierModel, **kwargs):
        super().__init__(self, **kwargs)
		self.distributeToChildrenBloonModifierModel = distributeToChildrenBloonModifierModel


class DistributeToChildrenSet:

    offsets = {'distributeToChildrenSetModel': 96, 'lifespan': 104}    
    def __init__(self, distributeToChildrenSetModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.DistributeToChildrenSetModel, lifespan: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.distributeToChildrenSetModel = distributeToChildrenSetModel
		self.lifespan = lifespan


class DontDestroyOnContinue:

    offsets = {'dontDestroyOnContinueModel': 96}    
    def __init__(self, dontDestroyOnContinueModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.DontDestroyOnContinueModel, **kwargs):
        super().__init__(self, **kwargs)
		self.dontDestroyOnContinueModel = dontDestroyOnContinueModel


class EatBloon:

    offsets = {'eatBloonModel': 96, 'emission': 104, 'rbeCollected': 112, 'cashCollected': 116, 'baseCashCollected': 120, 'timeOfLastEat': 124, 'eatBloonEffect': 128, 'currentAnimationState': 136, 'trapShut': 140}    
    def __init__(self, eatBloonModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.EatBloonModel, emission: Assets.Scripts.Simulation.Towers.Emissions.Emission, rbeCollected: System.Single, cashCollected: System.Single, baseCashCollected: System.Single, timeOfLastEat: System.Single, eatBloonEffect: Assets.Scripts.Simulation.Objects.Entity, currentAnimationState: System.Int32, trapShut: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.eatBloonModel = eatBloonModel
		self.emission = emission
		self.rbeCollected = rbeCollected
		self.cashCollected = cashCollected
		self.baseCashCollected = baseCashCollected
		self.timeOfLastEat = timeOfLastEat
		self.eatBloonEffect = eatBloonEffect
		self.currentAnimationState = currentAnimationState
		self.trapShut = trapShut


class EmitOnDamage:

    offsets = {'emitOnPopImprovedModel': 96, 'emission': 104}    
    def __init__(self, emitOnPopImprovedModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.EmitOnDamageModel, emission: Assets.Scripts.Simulation.Towers.Emissions.Emission, **kwargs):
        super().__init__(self, **kwargs)
		self.emitOnPopImprovedModel = emitOnPopImprovedModel
		self.emission = emission


class EndOfRoundClearBypass:

    offsets = {'endOfRoundClearBypassModel': 96}    
    def __init__(self, endOfRoundClearBypassModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.EndOfRoundClearBypassModel, **kwargs):
        super().__init__(self, **kwargs)
		self.endOfRoundClearBypassModel = endOfRoundClearBypassModel


class ExperiencePoints:

    offsets = {'xpModel': 96}    
    def __init__(self, xpModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.ExperiencePointsModel, **kwargs):
        super().__init__(self, **kwargs)
		self.xpModel = xpModel


class ExpireProjectileAtScreenEdge:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class FadeProjectile:

    offsets = {'fadeProjectileModel': 96}    
    def __init__(self, fadeProjectileModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.FadeProjectileModel, **kwargs):
        super().__init__(self, **kwargs)
		self.fadeProjectileModel = fadeProjectileModel


class FallToGround:

    offsets = {'fallModel': 96, 'speed': 104, 'groundHeight': 108}    
    def __init__(self, fallModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.FallToGroundModel, speed: System.Single, groundHeight: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.fallModel = fallModel
		self.speed = speed
		self.groundHeight = groundHeight


class FilterFractionOfBloonType:

    offsets = {'projectileFilterModel': 96, 'collidedBloonsOfTypeCount': 104, 'affectedBloonCount': 108}    
    def __init__(self, projectileFilterModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.FilterFractionOfBloonTypeModel, collidedBloonsOfTypeCount: System.Int32, affectedBloonCount: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.projectileFilterModel = projectileFilterModel
		self.collidedBloonsOfTypeCount = collidedBloonsOfTypeCount
		self.affectedBloonCount = affectedBloonCount


class FollowPath:

    offsets = {'followPathModel': 96, 'easePath': 104, '<path>k__BackingField': 112, '<pathFlipped>k__BackingField': 120, '<DistanceTravelled>k__BackingField': 128, 'points': 136, 'useFlippedPath': 144}    
    def __init__(self, followPathModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.FollowPathModel, easePath: Assets.Scripts.Simulation.Track.IPath, <path>k__BackingField: Assets.Scripts.Simulation.Track.IPath, <pathFlipped>k__BackingField: Assets.Scripts.Simulation.Track.IPath, <DistanceTravelled>k__BackingField: System.Single, points: System.Collections.Generic.List<Assets.Scripts.Simulation.SMath.Vector3>, useFlippedPath: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.followPathModel = followPathModel
		self.easePath = easePath
		self.<path>k__BackingField = <path>k__BackingField
		self.<pathFlipped>k__BackingField = <pathFlipped>k__BackingField
		self.<DistanceTravelled>k__BackingField = <DistanceTravelled>k__BackingField
		self.points = points
		self.useFlippedPath = useFlippedPath


class Freeze:

    offsets = {'freezeModel': 96, 'lifespan': 104, 'freezeModifierForTagsModels': 112}    
    def __init__(self, freezeModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.FreezeModel, lifespan: System.Int32, freezeModifierForTagsModels: Assets.Scripts.Models.Model.ChildSearchEnumerable<Assets.Scripts.Models.Towers.Projectiles.Behaviors.FreezeModifierForTagsModel>, **kwargs):
        super().__init__(self, **kwargs)
		self.freezeModel = freezeModel
		self.lifespan = lifespan
		self.freezeModifierForTagsModels = freezeModifierForTagsModels


class FreezeModifierForTags:

    offsets = {'freezeModifierForTagsModel': 96}    
    def __init__(self, freezeModifierForTagsModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.FreezeModifierForTagsModel, **kwargs):
        super().__init__(self, **kwargs)
		self.freezeModifierForTagsModel = freezeModifierForTagsModel


class GrabBloon:

    offsets = {'grabBloonModel': 96}    
    def __init__(self, grabBloonModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.GrabBloonModel, **kwargs):
        super().__init__(self, **kwargs)
		self.grabBloonModel = grabBloonModel


class HeatItUpDamageBuff:

    offsets = {'heatItUpDamageBuffModel': 96}    
    def __init__(self, heatItUpDamageBuffModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.HeatItUpDamageBuffModel, **kwargs):
        super().__init__(self, **kwargs)
		self.heatItUpDamageBuffModel = heatItUpDamageBuffModel


class HeightOffsetProjectile:

    offsets = {'hModel': 96, 'init': 104, 'arriveAtTarget': 112, 'arrived': 120}    
    def __init__(self, hModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.HeightOffsetProjectileModel, init: System.Boolean, arriveAtTarget: Assets.Scripts.Simulation.Towers.Projectiles.Behaviors.ArriveAtTarget, arrived: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.hModel = hModel
		self.init = init
		self.arriveAtTarget = arriveAtTarget
		self.arrived = arrived


class IgnoreInsufficientPierce:

    offsets = {'ignoreInsufficientPierceModel': 96}    
    def __init__(self, ignoreInsufficientPierceModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.IgnoreInsufficientPierceModel, **kwargs):
        super().__init__(self, **kwargs)
		self.ignoreInsufficientPierceModel = ignoreInsufficientPierceModel


class IncreaseBloonWorth:

    offsets = {'increaseBloonWorthModel': 96, 'bloonFilter': 104}    
    def __init__(self, increaseBloonWorthModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.IncreaseBloonWorthModel, bloonFilter: Assets.Scripts.Simulation.Towers.Filters.Filter, **kwargs):
        super().__init__(self, **kwargs)
		self.increaseBloonWorthModel = increaseBloonWorthModel
		self.bloonFilter = bloonFilter


class IncreaseBloonWorthWithTier:

    offsets = {'increaseBloonWorthWithTierModel': 96}    
    def __init__(self, increaseBloonWorthWithTierModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.IncreaseBloonWorthWithTierModel, **kwargs):
        super().__init__(self, **kwargs)
		self.increaseBloonWorthWithTierModel = increaseBloonWorthWithTierModel


class Instant:

    offsets = {'instantModel': 96}    
    def __init__(self, instantModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.InstantModel, **kwargs):
        super().__init__(self, **kwargs)
		self.instantModel = instantModel


class JungleVineEffect:

    offsets = {'jungleVineEffectModel': 96, 'effect': 104, 'backEffectDisplayBehavior': 112, 'bloonEffectDisplayBehavior': 120, 'frontEffectDisplayBehavior': 128, 'currentDisplayIndex': 136, 'degradeStep': 140, 'stepCount': 144, 'isCamo': 148, 'regrow': 149, 'duration': 152, 'effectFrames': 156}    
    def __init__(self, jungleVineEffectModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.JungleVineEffectModel, effect: Assets.Scripts.Simulation.Objects.Entity, backEffectDisplayBehavior: Assets.Scripts.Simulation.Behaviors.DisplayBehavior, bloonEffectDisplayBehavior: Assets.Scripts.Simulation.Behaviors.DisplayBehavior, frontEffectDisplayBehavior: Assets.Scripts.Simulation.Behaviors.DisplayBehavior, currentDisplayIndex: System.Int32, degradeStep: System.Int32, stepCount: System.Int32, isCamo: System.Boolean, regrow: System.Boolean, duration: System.Single, effectFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.jungleVineEffectModel = jungleVineEffectModel
		self.effect = effect
		self.backEffectDisplayBehavior = backEffectDisplayBehavior
		self.bloonEffectDisplayBehavior = bloonEffectDisplayBehavior
		self.frontEffectDisplayBehavior = frontEffectDisplayBehavior
		self.currentDisplayIndex = currentDisplayIndex
		self.degradeStep = degradeStep
		self.stepCount = stepCount
		self.isCamo = isCamo
		self.regrow = regrow
		self.duration = duration
		self.effectFrames = effectFrames


class KeepInBounds:

    offsets = {'keepInBoundsModel': 96}    
    def __init__(self, keepInBoundsModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.KeepInBoundsModel, **kwargs):
        super().__init__(self, **kwargs)
		self.keepInBoundsModel = keepInBoundsModel


class Knockback:

    offsets = {'knockbackModel': 96}    
    def __init__(self, knockbackModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.KnockbackModel, **kwargs):
        super().__init__(self, **kwargs)
		self.knockbackModel = knockbackModel


class Lightning:

    offsets = {'lightningModel': 96, 'emission': 104, 'currentDelayFrames': 112, 'effectMaker': 120, 'hitTarget': 128, 'sharedCollidedWith': 136}    
    def __init__(self, lightningModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.LightningModel, emission: Assets.Scripts.Simulation.Towers.Emissions.Emission, currentDelayFrames: System.Int32, effectMaker: Assets.Scripts.Simulation.Towers.Projectiles.Behaviors.CreateLightningEffect, hitTarget: System.Boolean, sharedCollidedWith: Assets.Scripts.Utils.SizedList<System.Int32>, **kwargs):
        super().__init__(self, **kwargs)
		self.lightningModel = lightningModel
		self.emission = emission
		self.currentDelayFrames = currentDelayFrames
		self.effectMaker = effectMaker
		self.hitTarget = hitTarget
		self.sharedCollidedWith = sharedCollidedWith


class LightningSplitOnContact:

    offsets = {'lightningSplitOnContactModel': 96, 'emission': 104, 'collidedPosition': 112, 'isInDelay': 124, 'currentDelayFrames': 128}    
    def __init__(self, lightningSplitOnContactModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.LightningSplitOnContactModel, emission: Assets.Scripts.Simulation.Towers.Emissions.Emission, collidedPosition: Assets.Scripts.Simulation.SMath.Vector3, isInDelay: System.Boolean, currentDelayFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.lightningSplitOnContactModel = lightningSplitOnContactModel
		self.emission = emission
		self.collidedPosition = collidedPosition
		self.isInDelay = isInDelay
		self.currentDelayFrames = currentDelayFrames


class Lives:

    offsets = {'livesModel': 96, 'cashedIn': 104}    
    def __init__(self, livesModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.LivesModel, cashedIn: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.livesModel = livesModel
		self.cashedIn = cashedIn


class MoabTakedown:

    offsets = {'moabTakedownModel': 96, 'bloonPosition': 104, 'bloonEffect': 112, 'startPullingBloonTowardsTower': 120, 'start': 124, 'distance': 132, 'offset1': 136, 'offset2': 144, 'isZomg': 152, 'rope1': 160, 'rope2': 168, 'effectOffset': 176, 'blockedSpawnRound': 188, 'lifeTimer': 192}    
    def __init__(self, moabTakedownModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.MoabTakedownModel, bloonPosition: Assets.Scripts.Simulation.Behaviors.TransformBehavior, bloonEffect: Assets.Scripts.Simulation.Objects.Entity, startPullingBloonTowardsTower: System.Boolean, start: Assets.Scripts.Simulation.SMath.Vector2, distance: System.Single, offset1: Assets.Scripts.Simulation.SMath.Vector2, offset2: Assets.Scripts.Simulation.SMath.Vector2, isZomg: System.Boolean, rope1: Assets.Scripts.Simulation.Towers.Projectiles.Behaviors.CreateRopeEffect, rope2: Assets.Scripts.Simulation.Towers.Projectiles.Behaviors.CreateRopeEffect, effectOffset: Assets.Scripts.Simulation.SMath.Vector3, blockedSpawnRound: System.Int32, lifeTimer: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.moabTakedownModel = moabTakedownModel
		self.bloonPosition = bloonPosition
		self.bloonEffect = bloonEffect
		self.startPullingBloonTowardsTower = startPullingBloonTowardsTower
		self.start = start
		self.distance = distance
		self.offset1 = offset1
		self.offset2 = offset2
		self.isZomg = isZomg
		self.rope1 = rope1
		self.rope2 = rope2
		self.effectOffset = effectOffset
		self.blockedSpawnRound = blockedSpawnRound
		self.lifeTimer = lifeTimer


class MorphBloon:

    offsets = {'morphBloonModel': 96}    
    def __init__(self, morphBloonModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.MorphBloonModel, **kwargs):
        super().__init__(self, **kwargs)
		self.morphBloonModel = morphBloonModel


class MoveBack:

    offsets = {'moveBackModel': 96}    
    def __init__(self, moveBackModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.MoveBackModel, **kwargs):
        super().__init__(self, **kwargs)
		self.moveBackModel = moveBackModel


class Pickup:

    offsets = {'pickupModel': 96, 'collectPoint': 104, 'foundPoint': 112, 'farmerPickup': 113, 'currentCollectFrames': 116, 'innerCollectRadius': 120, 'maxCollectFrames': 124}    
    def __init__(self, pickupModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.PickupModel, collectPoint: Assets.Scripts.Simulation.SMath.Vector3Boxed, foundPoint: System.Boolean, farmerPickup: System.Boolean, currentCollectFrames: System.Int32, innerCollectRadius: System.Single, maxCollectFrames: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.pickupModel = pickupModel
		self.collectPoint = collectPoint
		self.foundPoint = foundPoint
		self.farmerPickup = farmerPickup
		self.currentCollectFrames = currentCollectFrames
		self.innerCollectRadius = innerCollectRadius
		self.maxCollectFrames = maxCollectFrames


class PierceUpTowers:

    offsets = {'pierceUpTowersModel': 96}    
    def __init__(self, pierceUpTowersModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.PierceUpTowersModel, **kwargs):
        super().__init__(self, **kwargs)
		self.pierceUpTowersModel = pierceUpTowersModel


class PowerProjectile:

    offsets = {'powerProjectileModel': 96}    
    def __init__(self, powerProjectileModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.PowerProjectileModel, **kwargs):
        super().__init__(self, **kwargs)
		self.powerProjectileModel = powerProjectileModel


class ProjectileBlockerCollisionRebound:

    offsets = {'projectileBlockerCollisionReboundModel': 96, 'blockers': 104, 'lastPosition': 112}    
    def __init__(self, projectileBlockerCollisionReboundModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.ProjectileBlockerCollisionReboundModel, blockers: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Track.Area>, lastPosition: Assets.Scripts.Simulation.SMath.Vector3, **kwargs):
        super().__init__(self, **kwargs)
		self.projectileBlockerCollisionReboundModel = projectileBlockerCollisionReboundModel
		self.blockers = blockers
		self.lastPosition = lastPosition


class ProjectileFilter:

    offsets = {'projectileFilterModel': 96, 'filters': 104}    
    def __init__(self, projectileFilterModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.ProjectileFilterModel, filters: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Filters.Filter>, **kwargs):
        super().__init__(self, **kwargs)
		self.projectileFilterModel = projectileFilterModel
		self.filters = filters


class ProjectileHeight:

    offsets = {'projectileHeight': 96, 'heightEase': 104, 'towerPosition': 112}    
    def __init__(self, projectileHeight: Assets.Scripts.Models.Towers.Projectiles.Behaviors.ProjectileHeightModel, heightEase: Assets.Scripts.Simulation.Track.IPath, towerPosition: Assets.Scripts.Simulation.SMath.Vector3, **kwargs):
        super().__init__(self, **kwargs)
		self.projectileHeight = projectileHeight
		self.heightEase = heightEase
		self.towerPosition = towerPosition


class ProjectileSetAnimationOnContact:

    offsets = {'modelBehavior': 96, 'pauseEffectThisFrame': 104}    
    def __init__(self, modelBehavior: Assets.Scripts.Models.Towers.Projectiles.Behaviors.ProjectileSetAnimationOnContactModel, pauseEffectThisFrame: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.modelBehavior = modelBehavior
		self.pauseEffectThisFrame = pauseEffectThisFrame


class ProjectileZeroRotation:

    offsets = {'projectileZeroRotation': 96}    
    def __init__(self, projectileZeroRotation: Assets.Scripts.Models.Towers.Projectiles.Behaviors.ProjectileZeroRotationModel, **kwargs):
        super().__init__(self, **kwargs)
		self.projectileZeroRotation = projectileZeroRotation


class PsiEffect:

    offsets = {'psiEffectModel': 96, 'limitProjectile': 104}    
    def __init__(self, psiEffectModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.PsiEffectModel, limitProjectile: Assets.Scripts.Simulation.Towers.Weapons.Behaviors.PsiLimitProjectile, **kwargs):
        super().__init__(self, **kwargs)
		self.psiEffectModel = psiEffectModel
		self.limitProjectile = limitProjectile


class PsiPsionicScream:

    offsets = {'psiPsionicScreamModel': 96}    
    def __init__(self, psiPsionicScreamModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.PsiPsionicScreamModel, **kwargs):
        super().__init__(self, **kwargs)
		self.psiPsionicScreamModel = psiPsionicScreamModel


class PushBack:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RandomDisplay:

    offsets = {'rdModel': 96}    
    def __init__(self, rdModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.RandomDisplayModel, **kwargs):
        super().__init__(self, **kwargs)
		self.rdModel = rdModel


class RandomRangeTravelStraight:

    offsets = {'randomRangeTravelStraightModel': 96, 'lifespanFrames': 104, 'startSpeed': 108}    
    def __init__(self, randomRangeTravelStraightModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.RandomRangeTravelStraightModel, lifespanFrames: System.Int32, startSpeed: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.randomRangeTravelStraightModel = randomRangeTravelStraightModel
		self.lifespanFrames = lifespanFrames
		self.startSpeed = startSpeed


class RangeUpTowers:

    offsets = {'rangeUpTowersModel': 96}    
    def __init__(self, rangeUpTowersModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.RangeUpTowersModel, **kwargs):
        super().__init__(self, **kwargs)
		self.rangeUpTowersModel = rangeUpTowersModel


class RefreshMutatorsOnBloon:

    offsets = {'refreshMutatorsOnBloonModel': 96, 'mutators': 104}    
    def __init__(self, refreshMutatorsOnBloonModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.RefreshMutatorsOnBloonModel, mutators: System.Collections.Generic.List<Assets.Scripts.Simulation.Objects.TimedMutator>, **kwargs):
        super().__init__(self, **kwargs)
		self.refreshMutatorsOnBloonModel = refreshMutatorsOnBloonModel
		self.mutators = mutators


class RefreshPierce:

    offsets = {'rpModel': 96, 'lastRefresh': 104}    
    def __init__(self, rpModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.RefreshPierceModel, lastRefresh: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.rpModel = rpModel
		self.lastRefresh = lastRefresh


class RemoveBloonModifiers:

    offsets = {'removeBloonModifiersModel': 96, 'damageBehavior': 104}    
    def __init__(self, removeBloonModifiersModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.RemoveBloonModifiersModel, damageBehavior: Assets.Scripts.Simulation.Towers.Projectiles.Behaviors.Damage, **kwargs):
        super().__init__(self, **kwargs)
		self.removeBloonModifiersModel = removeBloonModifiersModel
		self.damageBehavior = damageBehavior


class RemoveDamageTypeModifier:

    offsets = {'removeDamageTypeModifierModel': 96}    
    def __init__(self, removeDamageTypeModifierModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.RemoveDamageTypeModifierModel, **kwargs):
        super().__init__(self, **kwargs)
		self.removeDamageTypeModifierModel = removeDamageTypeModifierModel


class RemoveMutatorsFromBloon:

    offsets = {'removeMutatorsFromBloonModel': 96, 'mutators': 104}    
    def __init__(self, removeMutatorsFromBloonModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.RemoveMutatorsFromBloonModel, mutators: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.BehaviorMutator>, **kwargs):
        super().__init__(self, **kwargs)
		self.removeMutatorsFromBloonModel = removeMutatorsFromBloonModel
		self.mutators = mutators


class ResetAgeOnContact:

    offsets = {'resetAgeOnContactModel': 96}    
    def __init__(self, resetAgeOnContactModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.ResetAgeOnContactModel, **kwargs):
        super().__init__(self, **kwargs)
		self.resetAgeOnContactModel = resetAgeOnContactModel


class RetargetOnContact:

    offsets = {'retargetOnContactModel': 96, 'currentBounceCount': 104, 'startFrame': 108, 'needToDisabledfilters': 112, 'useDelay': 113, 'disableFilterForTargetAquire': 120, 'processing': 128}    
    def __init__(self, retargetOnContactModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.RetargetOnContactModel, currentBounceCount: System.Int32, startFrame: System.Int32, needToDisabledfilters: System.Boolean, useDelay: System.Boolean, disableFilterForTargetAquire: Assets.Scripts.Simulation.Towers.Filters.Filter, processing: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.retargetOnContactModel = retargetOnContactModel
		self.currentBounceCount = currentBounceCount
		self.startFrame = startFrame
		self.needToDisabledfilters = needToDisabledfilters
		self.useDelay = useDelay
		self.disableFilterForTargetAquire = disableFilterForTargetAquire
		self.processing = processing


class RetargetOnContactDelay:

    offsets = {'retargetOnContactModel': 96, 'currentBounceCount': 104, 'delayStartedAt': 108, 'isInDelay': 112, 'travelStraight': 120, 'followPath': 128, 'instant': 136, 'filterList': 144}    
    def __init__(self, retargetOnContactModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.RetargetOnContactDelayModel, currentBounceCount: System.Int32, delayStartedAt: System.Int32, isInDelay: System.Boolean, travelStraight: Assets.Scripts.Simulation.Towers.Projectiles.Behaviors.TravelStrait, followPath: Assets.Scripts.Simulation.Towers.Projectiles.Behaviors.FollowPath, instant: Assets.Scripts.Simulation.Towers.Projectiles.Behaviors.Instant, filterList: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Filters.Filter>, **kwargs):
        super().__init__(self, **kwargs)
		self.retargetOnContactModel = retargetOnContactModel
		self.currentBounceCount = currentBounceCount
		self.delayStartedAt = delayStartedAt
		self.isInDelay = isInDelay
		self.travelStraight = travelStraight
		self.followPath = followPath
		self.instant = instant
		self.filterList = filterList


class Rotate:

    offsets = {'rotateModel': 96}    
    def __init__(self, rotateModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.RotateModel, **kwargs):
        super().__init__(self, **kwargs)
		self.rotateModel = rotateModel


class SaudaAfflictionDamageModifier:

    offsets = {'saudaAfflictionDamageModifierModel': 96}    
    def __init__(self, saudaAfflictionDamageModifierModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.SaudaAfflictionDamageModifierModel, **kwargs):
        super().__init__(self, **kwargs)
		self.saudaAfflictionDamageModifierModel = saudaAfflictionDamageModifierModel


class ScaleProjectile:

    offsets = {'scaleModel': 96, 'init': 104, 'followPath': 112, 'arriveAtTarget': 120, 'arrived': 128}    
    def __init__(self, scaleModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.ScaleProjectileModel, init: System.Boolean, followPath: Assets.Scripts.Simulation.Towers.Projectiles.Behaviors.FollowPath, arriveAtTarget: Assets.Scripts.Simulation.Towers.Projectiles.Behaviors.ArriveAtTarget, arrived: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.scaleModel = scaleModel
		self.init = init
		self.followPath = followPath
		self.arriveAtTarget = arriveAtTarget
		self.arrived = arrived


class SetSpriteFromPierce:

    offsets = {'setSpriteFromPierceModel': 96, 'firstUpdate': 104}    
    def __init__(self, setSpriteFromPierceModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.SetSpriteFromPierceModel, firstUpdate: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.setSpriteFromPierceModel = setSpriteFromPierceModel
		self.firstUpdate = firstUpdate


class ShowTextOnHit:

    offsets = {'showTextOnHitModel': 96}    
    def __init__(self, showTextOnHitModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.ShowTextOnHitModel, **kwargs):
        super().__init__(self, **kwargs)
		self.showTextOnHitModel = showTextOnHitModel


class Slow:

    offsets = {'slowModel': 96, 'lifespan': 104}    
    def __init__(self, slowModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.SlowModel, lifespan: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.slowModel = slowModel
		self.lifespan = lifespan


class SlowForBloon:

    offsets = {'slowForBloonModel': 112}    
    def __init__(self, slowForBloonModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.SlowForBloonModel, **kwargs):
        super().__init__(self, **kwargs)
		self.slowForBloonModel = slowForBloonModel


class SlowMaimMoab:

    offsets = {'slowMaimMoabModel': 96, 'lifespan': 104}    
    def __init__(self, slowMaimMoabModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.SlowMaimMoabModel, lifespan: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.slowMaimMoabModel = slowMaimMoabModel
		self.lifespan = lifespan


class SlowMinusAbilityDuration:

    offsets = {'slowMinusAbilityDurationModel': 112, 'ability': 120}    
    def __init__(self, slowMinusAbilityDurationModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.SlowMinusAbilityDurationModel, ability: Assets.Scripts.Simulation.Towers.Behaviors.Abilities.Ability, **kwargs):
        super().__init__(self, **kwargs)
		self.slowMinusAbilityDurationModel = slowMinusAbilityDurationModel
		self.ability = ability


class SlowModifierForTag:

    offsets = {'slowModifierForTagModel': 96}    
    def __init__(self, slowModifierForTagModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.SlowModifierForTagModel, **kwargs):
        super().__init__(self, **kwargs)
		self.slowModifierForTagModel = slowModifierForTagModel


class SlowOnPop:

    offsets = {'slowOnPopModel': 112}    
    def __init__(self, slowOnPopModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.SlowOnPopModel, **kwargs):
        super().__init__(self, **kwargs)
		self.slowOnPopModel = slowOnPopModel


class SpeedUpTowers:

    offsets = {'speedUpTowersModel': 96}    
    def __init__(self, speedUpTowersModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.SpeedUpTowersModel, **kwargs):
        super().__init__(self, **kwargs)
		self.speedUpTowersModel = speedUpTowersModel


class StripChildren:

    offsets = {'stripChildrenModel': 96}    
    def __init__(self, stripChildrenModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.StripChildrenModel, **kwargs):
        super().__init__(self, **kwargs)
		self.stripChildrenModel = stripChildrenModel


class TrackTarget:

    offsets = {'trackTargetModel': 96, 'lastElapsed': 104, 'lastTargetSearchElapsed': 108, 'turnRatePerFrame': 112, 'disableFilterForTargetAquire': 120, 'travelStraight': 128, 'bloonFilter': 136}    
    def __init__(self, trackTargetModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.TrackTargetModel, lastElapsed: System.Int32, lastTargetSearchElapsed: System.Int32, turnRatePerFrame: System.Single, disableFilterForTargetAquire: Assets.Scripts.Simulation.Towers.Filters.Filter, travelStraight: Assets.Scripts.Simulation.Towers.Projectiles.Behaviors.TravelStrait, bloonFilter: Assets.Scripts.Simulation.Bloons.BloonManager.BloonFilter, **kwargs):
        super().__init__(self, **kwargs)
		self.trackTargetModel = trackTargetModel
		self.lastElapsed = lastElapsed
		self.lastTargetSearchElapsed = lastTargetSearchElapsed
		self.turnRatePerFrame = turnRatePerFrame
		self.disableFilterForTargetAquire = disableFilterForTargetAquire
		self.travelStraight = travelStraight
		self.bloonFilter = bloonFilter


class TrackTargetSharedRange:

    offsets = {'trackTargetSharedRangeModel': 96, 'turnRatePerFrame': 104, 'lastUpdateTimeStamp': 108, 'camoFilter': 112}    
    def __init__(self, trackTargetSharedRangeModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.TrackTargetSharedRangeModel, turnRatePerFrame: System.Single, lastUpdateTimeStamp: System.Int32, camoFilter: Assets.Scripts.Simulation.Towers.Filters.FilterInvisible, **kwargs):
        super().__init__(self, **kwargs)
		self.trackTargetSharedRangeModel = trackTargetSharedRangeModel
		self.turnRatePerFrame = turnRatePerFrame
		self.lastUpdateTimeStamp = lastUpdateTimeStamp
		self.camoFilter = camoFilter


class TrackTargetWithinTime:

    offsets = {'trackTargetWithinTimeModel': 144}    
    def __init__(self, trackTargetWithinTimeModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.TrackTargetWithinTimeModel, **kwargs):
        super().__init__(self, **kwargs)
		self.trackTargetWithinTimeModel = trackTargetWithinTimeModel


class TravelAlongPath:

    offsets = {'travelAlongPathModel': 96, 'redBloonEquivelent': 104, 'distanceTraveled': 108, 'offsetPosition': 112, 'hasOffsetPosition': 124, 'age': 128, 'path': 136, 'OnPathChangedCallback': 144, 'prevRot': 152}    
    def __init__(self, travelAlongPathModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.TravelAlongPathModel, redBloonEquivelent: System.Single, distanceTraveled: System.Single, offsetPosition: Assets.Scripts.Simulation.SMath.Vector3, hasOffsetPosition: System.Boolean, age: System.Single, path: Assets.Scripts.Simulation.Track.Path, OnPathChangedCallback: Assets.Scripts.Simulation.Towers.Projectiles.Behaviors.TravelAlongPath.OnPathChanged, prevRot: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.travelAlongPathModel = travelAlongPathModel
		self.redBloonEquivelent = redBloonEquivelent
		self.distanceTraveled = distanceTraveled
		self.offsetPosition = offsetPosition
		self.hasOffsetPosition = hasOffsetPosition
		self.age = age
		self.path = path
		self.OnPathChangedCallback = OnPathChangedCallback
		self.prevRot = prevRot


class TravelCurvy:

    offsets = {'travelCurvyModel': 112, 'incrementing': 120, 'initialAngle': 124, 'angleMin': 132, 'angleMax': 136}    
    def __init__(self, travelCurvyModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.TravelCurvyModel, incrementing: System.Boolean, initialAngle: Assets.Scripts.Utils.Optional<System.Single>, angleMin: System.Single, angleMax: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.travelCurvyModel = travelCurvyModel
		self.incrementing = incrementing
		self.initialAngle = initialAngle
		self.angleMin = angleMin
		self.angleMax = angleMax


class TravelStraightSlowdown:

    offsets = {'travelStraightSlowdownModel': 112, 'distanceTraveled': 120, 'startingSpeedFrames': 124, 'minimumSpeedFrames': 128, 'currentPierceReduction': 132}    
    def __init__(self, travelStraightSlowdownModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.TravelStraightSlowdownModel, distanceTraveled: System.Single, startingSpeedFrames: System.Single, minimumSpeedFrames: System.Single, currentPierceReduction: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.travelStraightSlowdownModel = travelStraightSlowdownModel
		self.distanceTraveled = distanceTraveled
		self.startingSpeedFrames = startingSpeedFrames
		self.minimumSpeedFrames = minimumSpeedFrames
		self.currentPierceReduction = currentPierceReduction


class TravelStrait:

    offsets = {'travelStraitModel': 96, 'speedFrames': 104}    
    def __init__(self, travelStraitModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.TravelStraitModel, speedFrames: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.travelStraitModel = travelStraitModel
		self.speedFrames = speedFrames


class TravelTowardsEmitTower:

    offsets = {'travelTowardsEmitTowerModel': 96, 'targetDirection': 104, 'isProcessing': 116}    
    def __init__(self, travelTowardsEmitTowerModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.TravelTowardsEmitTowerModel, targetDirection: Assets.Scripts.Simulation.SMath.Vector3, isProcessing: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.travelTowardsEmitTowerModel = travelTowardsEmitTowerModel
		self.targetDirection = targetDirection
		self.isProcessing = isProcessing


class WallOfTrees:

    offsets = {'wallOfTreesModel': 96, 'emission': 104, 'collected': 112, 'cashCollected': 116, 'baseCashCollected': 120}    
    def __init__(self, wallOfTreesModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.WallOfTreesModel, emission: Assets.Scripts.Simulation.Towers.Emissions.Emission, collected: System.Single, cashCollected: System.Single, baseCashCollected: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.wallOfTreesModel = wallOfTreesModel
		self.emission = emission
		self.collected = collected
		self.cashCollected = cashCollected
		self.baseCashCollected = baseCashCollected


class Wind:

    offsets = {'windModel': 96}    
    def __init__(self, windModel: Assets.Scripts.Models.Towers.Projectiles.Behaviors.WindModel, **kwargs):
        super().__init__(self, **kwargs)
		self.windModel = windModel


class Prop:

    offsets = {'modelBehaviors': 96}    
    def __init__(self, modelBehaviors: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.RootBehavior>, **kwargs):
        super().__init__(self, **kwargs)
		self.modelBehaviors = modelBehaviors


class PropBehavior:

    offsets = {'prop': 88}    
    def __init__(self, prop: Assets.Scripts.Simulation.Towers.Props.Prop, **kwargs):
        super().__init__(self, **kwargs)
		self.prop = prop


class FilterInBaseTowerId:

    offsets = {'filterInBaseTowerIdModel': 88}    
    def __init__(self, filterInBaseTowerIdModel: Assets.Scripts.Models.Towers.TowerFilters.FilterInBaseTowerIdModel, **kwargs):
        super().__init__(self, **kwargs)
		self.filterInBaseTowerIdModel = filterInBaseTowerIdModel


class FilterSet:

    offsets = {'filterInSetModel': 88}    
    def __init__(self, filterInSetModel: Assets.Scripts.Models.Towers.TowerFilters.FilterInSetModel, **kwargs):
        super().__init__(self, **kwargs)
		self.filterInSetModel = filterInSetModel


class FilterTowerByPlaceableArea:

    offsets = {'filterTowerByPlaceableAreaModel': 88}    
    def __init__(self, filterTowerByPlaceableAreaModel: Assets.Scripts.Models.Towers.TowerFilters.FilterTowerByPlaceableAreaModel, **kwargs):
        super().__init__(self, **kwargs)
		self.filterTowerByPlaceableAreaModel = filterTowerByPlaceableAreaModel


class TowerFilter:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Weapon:

    offsets = {'animationStartedAt': 96, 'lastEmission': 100, 'weaponModel': 104, 'emmision': 112, 'fractionalPierce': 120, 'createdBehaviors': 128, 'hasFiredThisFrame': 136, 'animationStateOverrides': 144, 'rateFrames': 152, 'missedRate': 156, 'weaponBehaviors': 160, 'weaponRateMin': 168, 'bonusDamageCarryover': 176, 'animationOffsetFrames': 180, 'mainAttack': 184, 'newProjectiles2': 192, 'newProjectiles': 200}    
    def __init__(self, animationStartedAt: System.Int32, lastEmission: System.Int32, weaponModel: Assets.Scripts.Models.Towers.Weapons.WeaponModel, emmision: Assets.Scripts.Simulation.Towers.Emissions.Emission, fractionalPierce: System.Single, createdBehaviors: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.RootBehavior>, hasFiredThisFrame: System.Boolean, animationStateOverrides: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Weapons.Behaviors.AnimationStateOverride>, rateFrames: System.Int32, missedRate: System.Single, weaponBehaviors: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Weapons.WeaponBehavior>, weaponRateMin: Assets.Scripts.Simulation.Towers.Weapons.Behaviors.WeaponRateMin, bonusDamageCarryover: System.Single, animationOffsetFrames: System.Int32, mainAttack: Assets.Scripts.Simulation.Towers.Behaviors.Attack.Attack, newProjectiles2: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Projectiles.Projectile>, newProjectiles: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Projectiles.Projectile>, **kwargs):
        super().__init__(self, **kwargs)
		self.animationStartedAt = animationStartedAt
		self.lastEmission = lastEmission
		self.weaponModel = weaponModel
		self.emmision = emmision
		self.fractionalPierce = fractionalPierce
		self.createdBehaviors = createdBehaviors
		self.hasFiredThisFrame = hasFiredThisFrame
		self.animationStateOverrides = animationStateOverrides
		self.rateFrames = rateFrames
		self.missedRate = missedRate
		self.weaponBehaviors = weaponBehaviors
		self.weaponRateMin = weaponRateMin
		self.bonusDamageCarryover = bonusDamageCarryover
		self.animationOffsetFrames = animationOffsetFrames
		self.mainAttack = mainAttack
		self.newProjectiles2 = newProjectiles2
		self.newProjectiles = newProjectiles


class WeaponBehavior:

    offsets = {'weapon': 88}    
    def __init__(self, weapon: Assets.Scripts.Simulation.Towers.Weapons.Weapon, **kwargs):
        super().__init__(self, **kwargs)
		self.weapon = weapon


class AcidicMixture:

    offsets = {'acidicMixtureModel': 96}    
    def __init__(self, acidicMixtureModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.AcidicMixtureModel, **kwargs):
        super().__init__(self, **kwargs)
		self.acidicMixtureModel = acidicMixtureModel


class AlternateAnimation:

    offsets = {'alternateAnimationModel': 96, 'emissionCount': 104}    
    def __init__(self, alternateAnimationModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.AlternateAnimationModel, emissionCount: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.alternateAnimationModel = alternateAnimationModel
		self.emissionCount = emissionCount


class AlternateProjectile:

    offsets = {'alternateProjectileModel': 96, 'count': 104, 'useAltEmission': 108, 'emission': 112}    
    def __init__(self, alternateProjectileModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.AlternateProjectileModel, count: System.Int32, useAltEmission: System.Boolean, emission: Assets.Scripts.Simulation.Towers.Emissions.Emission, **kwargs):
        super().__init__(self, **kwargs)
		self.alternateProjectileModel = alternateProjectileModel
		self.count = count
		self.useAltEmission = useAltEmission
		self.emission = emission


class AlternatingEjectEffect:

    offsets = {'alternatingEjectEffectModel': 120, 'index': 128}    
    def __init__(self, alternatingEjectEffectModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.AlternatingEjectEffectModel, index: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.alternatingEjectEffectModel = alternatingEjectEffectModel
		self.index = index


class AngleToMapCenter:

    offsets = {'angleToMapCenterModel': 96}    
    def __init__(self, angleToMapCenterModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.AngleToMapCenterModel, **kwargs):
        super().__init__(self, **kwargs)
		self.angleToMapCenterModel = angleToMapCenterModel


class AnimateAirUnitOnFire:

    offsets = {'animateAirUnitOnFireModel': 96, 'airUnit': 104}    
    def __init__(self, animateAirUnitOnFireModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.AnimateAirUnitOnFireModel, airUnit: Assets.Scripts.Simulation.Towers.Behaviors.AirUnit, **kwargs):
        super().__init__(self, **kwargs)
		self.animateAirUnitOnFireModel = animateAirUnitOnFireModel
		self.airUnit = airUnit


class AnimationStateOverride:

    offsets = {'animationStateOverrideModel': 96}    
    def __init__(self, animationStateOverrideModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.AnimationStateOverrideModel, **kwargs):
        super().__init__(self, **kwargs)
		self.animationStateOverrideModel = animationStateOverrideModel


class BerserkerBrew:

    offsets = {'berserkerBrewModel': 96}    
    def __init__(self, berserkerBrewModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.BerserkerBrewModel, **kwargs):
        super().__init__(self, **kwargs)
		self.berserkerBrewModel = berserkerBrewModel


class BonusProjectileAfterInterval:

    offsets = {'bonusProjectileAfterIntervalModel': 96, 'emission': 104, 'count': 112, 'timeOfLastBonus': 116}    
    def __init__(self, bonusProjectileAfterIntervalModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.BonusProjectileAfterIntervalModel, emission: Assets.Scripts.Simulation.Towers.Emissions.Emission, count: System.Int32, timeOfLastBonus: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.bonusProjectileAfterIntervalModel = bonusProjectileAfterIntervalModel
		self.emission = emission
		self.count = count
		self.timeOfLastBonus = timeOfLastBonus


class CheckAdoraCanFire:

    offsets = {'checkAdoraCanFireModel': 96}    
    def __init__(self, checkAdoraCanFireModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.CheckAdoraCanFireModel, **kwargs):
        super().__init__(self, **kwargs)
		self.checkAdoraCanFireModel = checkAdoraCanFireModel


class CheckAirUnitOverTrack:

    offsets = {'airUnitOverTrackModel': 96, 'airUnit': 104}    
    def __init__(self, airUnitOverTrackModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.CheckAirUnitOverTrackModel, airUnit: Assets.Scripts.Simulation.Towers.Behaviors.AirUnit, **kwargs):
        super().__init__(self, **kwargs)
		self.airUnitOverTrackModel = airUnitOverTrackModel
		self.airUnit = airUnit


class CheckAmmoBelt:

    offsets = {'ammoBeltModel': 96, 'lastFire': 104}    
    def __init__(self, ammoBeltModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.CheckAmmoBeltModel, lastFire: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.ammoBeltModel = ammoBeltModel
		self.lastFire = lastFire


class CheckTempleCanFire:

    offsets = {'checkTempleCanFireModel': 96}    
    def __init__(self, checkTempleCanFireModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.CheckTempleCanFireModel, **kwargs):
        super().__init__(self, **kwargs)
		self.checkTempleCanFireModel = checkTempleCanFireModel


class ClearProjectileHitList:

    offsets = {'clearProjectileHitListModel': 96, 'collisionList': 104, 'projectileList': 112, 'lastClear': 120}    
    def __init__(self, clearProjectileHitListModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.ClearProjectileHitListModel, collisionList: Assets.Scripts.Utils.SizedList<System.Int32>, projectileList: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.Projectiles.Projectile>, lastClear: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.clearProjectileHitListModel = clearProjectileHitListModel
		self.collisionList = collisionList
		self.projectileList = projectileList
		self.lastClear = lastClear


class CreateSoundOnProjectileCreated:

    offsets = {'createSoundOnProjectileCreatedModel': 96}    
    def __init__(self, createSoundOnProjectileCreatedModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.CreateSoundOnProjectileCreatedModel, **kwargs):
        super().__init__(self, **kwargs)
		self.createSoundOnProjectileCreatedModel = createSoundOnProjectileCreatedModel


class CreateTypedTowerCurrentIndex:

    offsets = {'createTypedTowerCurrentIndexModel': 96, 'currentIndex': 104}    
    def __init__(self, createTypedTowerCurrentIndexModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.CreateTypedTowerCurrentIndexModel, currentIndex: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.createTypedTowerCurrentIndexModel = createTypedTowerCurrentIndexModel
		self.currentIndex = currentIndex


class CritMultiplier:

    offsets = {'nextCritAt': 96, 'current': 100, 'critMultiplierModel': 104}    
    def __init__(self, nextCritAt: System.Int32, current: System.Int32, critMultiplierModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.CritMultiplierModel, **kwargs):
        super().__init__(self, **kwargs)
		self.nextCritAt = nextCritAt
		self.current = current
		self.critMultiplierModel = critMultiplierModel


class CycleAnimation:

    offsets = {'cycleAnimationModel': 96, 'current': 104}    
    def __init__(self, cycleAnimationModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.CycleAnimationModel, current: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.cycleAnimationModel = cycleAnimationModel
		self.current = current


class EjectAnimation:

    offsets = {'ejectAnimationModel': 96, 'scaleOverride': 104}    
    def __init__(self, ejectAnimationModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.EjectAnimationModel, scaleOverride: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.ejectAnimationModel = ejectAnimationModel
		self.scaleOverride = scaleOverride


class EjectEffect:

    offsets = {'ejectEffectModel': 96, 'scaleOverride': 104, 'mainAttack': 112}    
    def __init__(self, ejectEffectModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.EjectEffectModel, scaleOverride: System.Single, mainAttack: Assets.Scripts.Simulation.Towers.Behaviors.Attack.Attack, **kwargs):
        super().__init__(self, **kwargs)
		self.ejectEffectModel = ejectEffectModel
		self.scaleOverride = scaleOverride
		self.mainAttack = mainAttack


class EjectEffectWithOffsets:

    offsets = {'ejectEffectWithOffsetsModel': 96}    
    def __init__(self, ejectEffectWithOffsetsModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.EjectEffectWithOffsetsModel, **kwargs):
        super().__init__(self, **kwargs)
		self.ejectEffectWithOffsetsModel = ejectEffectWithOffsetsModel


class EjectMultipleTestEffect:

    offsets = {'ejectMultipleTestEffectModel': 96}    
    def __init__(self, ejectMultipleTestEffectModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.EjectMultipleTestEffectModel, **kwargs):
        super().__init__(self, **kwargs)
		self.ejectMultipleTestEffectModel = ejectMultipleTestEffectModel


class EmissionsPerRoundFilter:

    offsets = {'emissionsPerRoundFilterModel': 96, 'roundBananas': 104, 'bananasToSpawn': 112, 'removeRounds': 120, 'blockNextEmission': 128}    
    def __init__(self, emissionsPerRoundFilterModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.EmissionsPerRoundFilterModel, roundBananas: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Simulation.Towers.Weapons.Behaviors.RoundBananas>, bananasToSpawn: System.Int32, removeRounds: System.Collections.Generic.List<System.Int32>, blockNextEmission: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.emissionsPerRoundFilterModel = emissionsPerRoundFilterModel
		self.roundBananas = roundBananas
		self.bananasToSpawn = bananasToSpawn
		self.removeRounds = removeRounds
		self.blockNextEmission = blockNextEmission


class FilterTargetAngleFilter:

    offsets = {'filterTargetAngleFilterModel': 96, 'display': 104, 'attemptDisplayBehaviorSearch': 112, 'filterTargetAngleFilterBehaviors': 120, 'timeOfLastTargetUpdate': 128, 'lastFireResult': 132}    
    def __init__(self, filterTargetAngleFilterModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.FilterTargetAngleFilterModel, display: Assets.Scripts.Simulation.Behaviors.DisplayBehavior, attemptDisplayBehaviorSearch: System.Boolean, filterTargetAngleFilterBehaviors: System.Collections.Generic.List<Assets.Scripts.Simulation.Towers.Weapons.Behaviors.FilterTargetAngleFilter>, timeOfLastTargetUpdate: System.Int32, lastFireResult: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.filterTargetAngleFilterModel = filterTargetAngleFilterModel
		self.display = display
		self.attemptDisplayBehaviorSearch = attemptDisplayBehaviorSearch
		self.filterTargetAngleFilterBehaviors = filterTargetAngleFilterBehaviors
		self.timeOfLastTargetUpdate = timeOfLastTargetUpdate
		self.lastFireResult = lastFireResult


class FireAlternateWeapon:

    offsets = {'fireAlternateWeaponModel': 96, 'behavior': 104}    
    def __init__(self, fireAlternateWeaponModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.FireAlternateWeaponModel, behavior: Assets.Scripts.Simulation.Towers.Weapons.Behaviors.FireWhenAlternateWeaponIsReady, **kwargs):
        super().__init__(self, **kwargs)
		self.fireAlternateWeaponModel = fireAlternateWeaponModel
		self.behavior = behavior


class FireFromAirUnit:

    offsets = {'emissionsPerRoundFilterModel': 96, 'airUnit': 104}    
    def __init__(self, emissionsPerRoundFilterModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.FireFromAirUnitModel, airUnit: Assets.Scripts.Simulation.Towers.Behaviors.AirUnit, **kwargs):
        super().__init__(self, **kwargs)
		self.emissionsPerRoundFilterModel = emissionsPerRoundFilterModel
		self.airUnit = airUnit


class FireWhenAlternateWeaponIsReady:

    offsets = {'fireWhenAlternateWeaponIsReadyModel': 96, 'frameOfValidFire': 104, 'fireWeapon': 108}    
    def __init__(self, fireWhenAlternateWeaponIsReadyModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.FireWhenAlternateWeaponIsReadyModel, frameOfValidFire: System.Int32, fireWeapon: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.fireWhenAlternateWeaponIsReadyModel = fireWhenAlternateWeaponIsReadyModel
		self.frameOfValidFire = frameOfValidFire
		self.fireWeapon = fireWeapon


class FlagshipAttackSpeedIncrease:

    offsets = {'flagshipAttackSpeedIncreaseModel': 104, 'zone': 112, 'towerAttackSpeedMutator': 120}    
    def __init__(self, flagshipAttackSpeedIncreaseModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.FlagshipAttackSpeedIncreaseModel, zone: Assets.Scripts.Simulation.Behaviors.Zoned<Assets.Scripts.Simulation.Towers.Tower>, towerAttackSpeedMutator: Assets.Scripts.Simulation.Towers.Weapons.Behaviors.FlagshipAttackSpeedIncrease.Mutator, **kwargs):
        super().__init__(self, **kwargs)
		self.flagshipAttackSpeedIncreaseModel = flagshipAttackSpeedIncreaseModel
		self.zone = zone
		self.towerAttackSpeedMutator = towerAttackSpeedMutator


class FlipFollowPath:

    offsets = {'flipFollowPathModel': 96, 'isFlipped': 104, 'newInfo': 112}    
    def __init__(self, flipFollowPathModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.FlipFollowPathModel, isFlipped: System.Boolean, newInfo: Assets.Scripts.Models.TowerSelectionMenuTheme.TSMInfoModel, **kwargs):
        super().__init__(self, **kwargs)
		self.flipFollowPathModel = flipFollowPathModel
		self.isFlipped = isFlipped
		self.newInfo = newInfo


class IgnoreThrowMarker:

    offsets = {'ignoreThrowMarkerModel': 96}    
    def __init__(self, ignoreThrowMarkerModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.IgnoreThrowMarkerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.ignoreThrowMarkerModel = ignoreThrowMarkerModel


class JungleVineLimitProjectile:

    offsets = {'jungleVineLimitProjectileModel': 96, 'vineEffect': 104, 'limitEmissionUntillTime': 112, 'projectilesToClear': 116}    
    def __init__(self, jungleVineLimitProjectileModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.JungleVineLimitProjectileModel, vineEffect: Assets.Scripts.Simulation.Towers.Projectiles.Behaviors.JungleVineEffect, limitEmissionUntillTime: System.Int32, projectilesToClear: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.jungleVineLimitProjectileModel = jungleVineLimitProjectileModel
		self.vineEffect = vineEffect
		self.limitEmissionUntillTime = limitEmissionUntillTime
		self.projectilesToClear = projectilesToClear


class LeakDangerAttackSpeed:

    offsets = {'leakDangerAttackSpeedModel': 96, 'calculateFrom': 104}    
    def __init__(self, leakDangerAttackSpeedModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.LeakDangerAttackSpeedModel, calculateFrom: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.leakDangerAttackSpeedModel = leakDangerAttackSpeedModel
		self.calculateFrom = calculateFrom


class LifeBasedAttackSpeed:

    offsets = {'lifeBasedAttackSpeedModel': 96, 'calculateFrom': 104}    
    def __init__(self, lifeBasedAttackSpeedModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.LifeBasedAttackSpeedModel, calculateFrom: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.lifeBasedAttackSpeedModel = lifeBasedAttackSpeedModel
		self.calculateFrom = calculateFrom


class LimitProjectile:

    offsets = {'limitEffectModel': 96, 'limitEmissionUntillTime': 104}    
    def __init__(self, limitEffectModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.LimitProjectileModel, limitEmissionUntillTime: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.limitEffectModel = limitEffectModel
		self.limitEmissionUntillTime = limitEmissionUntillTime


class LineEffect:

    offsets = {'lineEffectModel': 96, 'currentMagnitude': 104, 'targetMagnitude': 108, 'lineEffect': 112, 'effectAtEnd': 120, 'effectAtStart': 128, 'rotateToPointer': 136, 'lastValidTarget': 144, 'lineProjectileEmission': 160}    
    def __init__(self, lineEffectModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.LineEffectModel, currentMagnitude: System.Single, targetMagnitude: System.Single, lineEffect: Assets.Scripts.Simulation.Objects.Entity, effectAtEnd: Assets.Scripts.Simulation.Objects.Entity, effectAtStart: Assets.Scripts.Simulation.Objects.Entity, rotateToPointer: Assets.Scripts.Simulation.Towers.Behaviors.Attack.Behaviors.RotateToPointer, lastValidTarget: Assets.Scripts.Utils.Optional<Assets.Scripts.Simulation.SMath.Vector2>, lineProjectileEmission: Assets.Scripts.Simulation.Towers.Emissions.LineProjectileEmission, **kwargs):
        super().__init__(self, **kwargs)
		self.lineEffectModel = lineEffectModel
		self.currentMagnitude = currentMagnitude
		self.targetMagnitude = targetMagnitude
		self.lineEffect = lineEffect
		self.effectAtEnd = effectAtEnd
		self.effectAtStart = effectAtStart
		self.rotateToPointer = rotateToPointer
		self.lastValidTarget = lastValidTarget
		self.lineProjectileEmission = lineProjectileEmission


class NecroEmissionFilter:

    offsets = {'necroEmissionFilterModel': 96, 'graveyardManager': 104, 'minRbeNeeded': 112}    
    def __init__(self, necroEmissionFilterModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.NecroEmissionFilterModel, graveyardManager: Assets.Scripts.Simulation.SimulationBehaviors.SimNecromancerGraveyardManager, minRbeNeeded: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.necroEmissionFilterModel = necroEmissionFilterModel
		self.graveyardManager = graveyardManager
		self.minRbeNeeded = minRbeNeeded


class Offset:

    offsets = {'offsetModel': 96}    
    def __init__(self, offsetModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.OffsetModel, **kwargs):
        super().__init__(self, **kwargs)
		self.offsetModel = offsetModel


class PsiLimitProjectile:

    offsets = {'psiLimitProjectileModel': 96, 'canFireAt': 104}    
    def __init__(self, psiLimitProjectileModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.PsiLimitProjectileModel, canFireAt: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.psiLimitProjectileModel = psiLimitProjectileModel
		self.canFireAt = canFireAt


class RandomAngleOffset:

    offsets = {'randomAngleOffsetModel': 96}    
    def __init__(self, randomAngleOffsetModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.RandomAngleOffsetModel, **kwargs):
        super().__init__(self, **kwargs)
		self.randomAngleOffsetModel = randomAngleOffsetModel


class RandomRate:

    offsets = {'randomRateModel': 96}    
    def __init__(self, randomRateModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.RandomRateModel, **kwargs):
        super().__init__(self, **kwargs)
		self.randomRateModel = randomRateModel


class RandomRotationWeaponBehavior:

    offsets = {'randomRotationWeaponBehavior': 96}    
    def __init__(self, randomRotationWeaponBehavior: Assets.Scripts.Models.Towers.Weapons.Behaviors.RandomRotationWeaponBehaviorModel, **kwargs):
        super().__init__(self, **kwargs)
		self.randomRotationWeaponBehavior = randomRotationWeaponBehavior


class RandomSpeedOffset:

    offsets = {'randomSpeedOffsetModel': 96}    
    def __init__(self, randomSpeedOffsetModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.RandomSpeedOffsetModel, **kwargs):
        super().__init__(self, **kwargs)
		self.randomSpeedOffsetModel = randomSpeedOffsetModel


class RateBasedAnimationOffset:

    offsets = {'rateBasedAnimationOffsetModel': 96}    
    def __init__(self, rateBasedAnimationOffsetModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.RateBasedAnimationOffsetModel, **kwargs):
        super().__init__(self, **kwargs)
		self.rateBasedAnimationOffsetModel = rateBasedAnimationOffsetModel


class ResetRateOnInitialise:

    offsets = {'resetRateOnInitialiseModel': 96}    
    def __init__(self, resetRateOnInitialiseModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.ResetRateOnInitialiseModel, **kwargs):
        super().__init__(self, **kwargs)
		self.resetRateOnInitialiseModel = resetRateOnInitialiseModel


class RoundBananas:

    offsets = {'startTime': 16, 'duration': 20}    
    def __init__(self, startTime: System.Int32, duration: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.startTime = startTime
		self.duration = duration


class SetTriggerOnAirUnitFire:

    offsets = {'animateAirUnitOnFireModel': 96, 'airUnit': 104}    
    def __init__(self, animateAirUnitOnFireModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.SetTriggerOnAirUnitFireModel, airUnit: Assets.Scripts.Simulation.Towers.Behaviors.AirUnit, **kwargs):
        super().__init__(self, **kwargs)
		self.animateAirUnitOnFireModel = animateAirUnitOnFireModel
		self.airUnit = airUnit


class Spin:

    offsets = {'spinModel': 96, 'angle': 104}    
    def __init__(self, spinModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.SpinModel, angle: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.spinModel = spinModel
		self.angle = angle


class StaggeredShotsWeaponBehavior:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SubTowerFilter:

    offsets = {'subTowerFilterModel': 96, 'createdSubTowers': 104}    
    def __init__(self, subTowerFilterModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.SubTowerFilterModel, createdSubTowers: System.Collections.Generic.List<Assets.Scripts.Simulation.Towers.Tower>, **kwargs):
        super().__init__(self, **kwargs)
		self.subTowerFilterModel = subTowerFilterModel
		self.createdSubTowers = createdSubTowers


class SwitchAnimStateForBloonType:

    offsets = {'switchAnimStateForBloonTypeModel': 96}    
    def __init__(self, switchAnimStateForBloonTypeModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.SwitchAnimStateForBloonTypeModel, **kwargs):
        super().__init__(self, **kwargs)
		self.switchAnimStateForBloonTypeModel = switchAnimStateForBloonTypeModel


class SwitchProjectileDisplay:

    offsets = {'switchProjectileDisplayModel': 96, 'effectIndex': 104}    
    def __init__(self, switchProjectileDisplayModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.SwitchProjectileDisplayModel, effectIndex: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.switchProjectileDisplayModel = switchProjectileDisplayModel
		self.effectIndex = effectIndex


class ThrowMarkerOffset:

    offsets = {'offsetOffsetModel': 96}    
    def __init__(self, offsetOffsetModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.ThrowMarkerOffsetModel, **kwargs):
        super().__init__(self, **kwargs)
		self.offsetOffsetModel = offsetOffsetModel


class UseAttackRotation:

    offsets = {'useAttackRotationModel': 96}    
    def __init__(self, useAttackRotationModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.UseAttackRotationModel, **kwargs):
        super().__init__(self, **kwargs)
		self.useAttackRotationModel = useAttackRotationModel


class UseParentEject:

    offsets = {'useParentEjectModel': 96}    
    def __init__(self, useParentEjectModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.UseParentEjectModel, **kwargs):
        super().__init__(self, **kwargs)
		self.useParentEjectModel = useParentEjectModel


class WeaponRateMin:

    offsets = {'weaponRateMinModel': 96}    
    def __init__(self, weaponRateMinModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.WeaponRateMinModel, **kwargs):
        super().__init__(self, **kwargs)
		self.weaponRateMinModel = weaponRateMinModel


class WobbleMeshDisplay:

    offsets = {'wobbleMeshDisplayModel': 96}    
    def __init__(self, wobbleMeshDisplayModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.WobbleMeshDisplayModel, **kwargs):
        super().__init__(self, **kwargs)
		self.wobbleMeshDisplayModel = wobbleMeshDisplayModel


class ZeroRotation:

    offsets = {'zeroRotationModel': 96}    
    def __init__(self, zeroRotationModel: Assets.Scripts.Models.Towers.Weapons.Behaviors.ZeroRotationModel, **kwargs):
        super().__init__(self, **kwargs)
		self.zeroRotationModel = zeroRotationModel


class Area:

    offsets = {'areaModel': 144, 'name': 152, 'oo': 160}    
    def __init__(self, areaModel: Assets.Scripts.Models.Map.AreaModel, name: System.String, oo: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.areaModel = areaModel
		self.name = name
		self.oo = oo


class BossBloonManager:

    offsets = {'sim': 32, 'currentBoss': 40, 'currentBossTier': 48, 'checkForVictory': 64, 'BossSpawnedEvent': 72, 'BossDefeatedEvent': 80}    
    def __init__(self, sim: Assets.Scripts.Simulation.Simulation, currentBoss: Assets.Scripts.Simulation.Bloons.Bloon, currentBossTier: System.Int32, checkForVictory: System.Boolean, BossSpawnedEvent: System.Action, BossDefeatedEvent: System.Action<System.Int32>, **kwargs):
        super().__init__(self, **kwargs)
		self.sim = sim
		self.currentBoss = currentBoss
		self.currentBossTier = currentBossTier
		self.checkForVictory = checkForVictory
		self.BossSpawnedEvent = BossSpawnedEvent
		self.BossDefeatedEvent = BossDefeatedEvent


class CanPlaceReturnData:

    offsets = {'areaPlacedOn': 16}    
    def __init__(self, areaPlacedOn: Assets.Scripts.Simulation.Track.Area, **kwargs):
        super().__init__(self, **kwargs)
		self.areaPlacedOn = areaPlacedOn


class DistanceBracket:

    offsets = {'max': 16, 'min': 20, 'path': 24}    
    def __init__(self, max: System.Single, min: System.Single, path: Assets.Scripts.Simulation.Track.Path, **kwargs):
        super().__init__(self, **kwargs)
		self.max = max
		self.min = min
		self.path = path


class GoldenBloonManager:

    offsets = {'spawnOnRounds': 16, 'victoryRound': 24, 'goldenBloonsPopped': 28, 'GoldenBloonSpawnedEvent': 32, 'GoldenBloonLeakedEvent': 40, 'GoldenBloonDegradeEvent': 48, 'sim': 64}    
    def __init__(self, spawnOnRounds: System.Collections.Generic.List<System.Int32>, victoryRound: System.Int32, goldenBloonsPopped: System.Int32, GoldenBloonSpawnedEvent: System.Action<Assets.Scripts.Simulation.Bloons.Bloon>, GoldenBloonLeakedEvent: System.Action<Assets.Scripts.Simulation.Bloons.Bloon>, GoldenBloonDegradeEvent: System.Action<Assets.Scripts.Simulation.Bloons.Bloon,System.Int32>, sim: Assets.Scripts.Simulation.Simulation, **kwargs):
        super().__init__(self, **kwargs)
		self.spawnOnRounds = spawnOnRounds
		self.victoryRound = victoryRound
		self.goldenBloonsPopped = goldenBloonsPopped
		self.GoldenBloonSpawnedEvent = GoldenBloonSpawnedEvent
		self.GoldenBloonLeakedEvent = GoldenBloonLeakedEvent
		self.GoldenBloonDegradeEvent = GoldenBloonDegradeEvent
		self.sim = sim


class IPath:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Map:

    offsets = {'mapModel': 88, 'intersects': 96, '<blockers>k__BackingField': 104, 'areas': 112, 'blockerZones': 120, 'gizmos': 128, 'mapEvents': 136, 'pathManager': 144, 'spawner': 152, 'nextFreeAreaID': 160, 'areaTowers': 168, 'mapWideBloonSpeed': 176, 'OnBlockersChanged': 184, 'OnRemoveableSold': 192, 'OnInteractableClicked': 200, 'coopLayoutModelToUse': 208, 'usedARemoveable': 216, 'mapAreas': 224, 'hiddenPathMadeActive': 232}    
    def __init__(self, mapModel: Assets.Scripts.Models.Map.MapModel, intersects: System.Collections.Generic.List<Assets.Scripts.Simulation.SMath.Vector2>, <blockers>k__BackingField: System.Collections.Generic.List<Assets.Scripts.Simulation.Track.MapBlocker>, areas: System.Collections.Generic.List<Assets.Scripts.Simulation.Track.Area>, blockerZones: System.Collections.Generic.List<BlockerZone>, gizmos: System.Collections.Generic.List<Assets.Scripts.Simulation.Map.Gizmos.MapGizmo>, mapEvents: System.Collections.Generic.List<Assets.Scripts.Simulation.Map.Triggers.MapEvent>, pathManager: Assets.Scripts.Simulation.Track.PathManager, spawner: Assets.Scripts.Simulation.Track.Spawner, nextFreeAreaID: System.Int32, areaTowers: System.Collections.Generic.Dictionary<System.Int32,System.Collections.Generic.List<Assets.Scripts.Simulation.Towers.Tower>>, mapWideBloonSpeed: System.Single, OnBlockersChanged: System.Action, OnRemoveableSold: System.Action<Assets.Scripts.Simulation.Track.Removeable>, OnInteractableClicked: System.Action<System.String>, coopLayoutModelToUse: Assets.Scripts.Models.Map.CoopAreaLayoutModel, usedARemoveable: System.Boolean, mapAreas: Assets.Scripts.Utils.LockList<Assets.Scripts.Simulation.Track.Area>, hiddenPathMadeActive: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.mapModel = mapModel
		self.intersects = intersects
		self.<blockers>k__BackingField = <blockers>k__BackingField
		self.areas = areas
		self.blockerZones = blockerZones
		self.gizmos = gizmos
		self.mapEvents = mapEvents
		self.pathManager = pathManager
		self.spawner = spawner
		self.nextFreeAreaID = nextFreeAreaID
		self.areaTowers = areaTowers
		self.mapWideBloonSpeed = mapWideBloonSpeed
		self.OnBlockersChanged = OnBlockersChanged
		self.OnRemoveableSold = OnRemoveableSold
		self.OnInteractableClicked = OnInteractableClicked
		self.coopLayoutModelToUse = coopLayoutModelToUse
		self.usedARemoveable = usedARemoveable
		self.mapAreas = mapAreas
		self.hiddenPathMadeActive = hiddenPathMadeActive


class MapBlocker:

    offsets = {'height': 176, 'parentId': 180, 'direction': 184}    
    def __init__(self, height: System.Single, parentId: System.Int32, direction: Assets.Scripts.Simulation.SMath.Vector3, **kwargs):
        super().__init__(self, **kwargs)
		self.height = height
		self.parentId = parentId
		self.direction = direction


class Path:
	CacheDistance: System.Single
    offsets = {'CacheDistance': 0, 'SegmentSize': 4, 'def': 24, 'isActive': 32, 'isHidden': 33, 'spawnDist': 36, 'leakDist': 40, 'entryRouter': 48, 'exitRouter': 56, 'bloonsList': 64, 'hasBloons': 72, 'hasOfftrackBloons': 73, 'hasMoabs': 74, 'onlyHasMoabs': 75, 'onlyHasCamo': 76, 'targets': 80, 'targetCompare': 88, 'maximumDistanceUntilLeak': 96, 'maximumDistanceUntilSpawn': 100, 'bestFirstAll': 104, 'bestLastAll': 120, 'bestStrongAll': 136, 'bestFirstNonMoab': 152, 'bestLastNonMoab': 168, 'bestStrongNonMoab': 184, 'bestFirstNonCamo': 200, 'bestLastNonCamo': 216, 'bestStrongNonCamo': 232, 'bestFirstNonMoabNonCamo': 248, 'bestLastNonMoabNonCamo': 264, 'bestStrongNonMoabNonCamo': 280, 'totalPathLength': 304}    
    def __init__(self, CacheDistance: System.Single, SegmentSize: System.Single, def: Assets.Scripts.Models.Map.PathModel, isActive: System.Boolean, isHidden: System.Boolean, spawnDist: System.Single, leakDist: System.Single, entryRouter: Assets.Scripts.Simulation.Track.Splitter, exitRouter: Assets.Scripts.Simulation.Track.Splitter, bloonsList: Assets.Scripts.Utils.LockList<Assets.Scripts.Simulation.Bloons.Bloon>, hasBloons: System.Boolean, hasOfftrackBloons: System.Boolean, hasMoabs: System.Boolean, onlyHasMoabs: System.Boolean, onlyHasCamo: System.Boolean, targets: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Simulation.Towers.BloonTargetProxy>, targetCompare: System.Collections.Generic.Dictionary<System.Int32,System.Comparison<Assets.Scripts.Simulation.Towers.BloonTargetProxy>>, maximumDistanceUntilLeak: System.Single, maximumDistanceUntilSpawn: System.Single, bestFirstAll: Assets.Scripts.Simulation.Towers.BloonTargetProxy, bestLastAll: Assets.Scripts.Simulation.Towers.BloonTargetProxy, bestStrongAll: Assets.Scripts.Simulation.Towers.BloonTargetProxy, bestFirstNonMoab: Assets.Scripts.Simulation.Towers.BloonTargetProxy, bestLastNonMoab: Assets.Scripts.Simulation.Towers.BloonTargetProxy, bestStrongNonMoab: Assets.Scripts.Simulation.Towers.BloonTargetProxy, bestFirstNonCamo: Assets.Scripts.Simulation.Towers.BloonTargetProxy, bestLastNonCamo: Assets.Scripts.Simulation.Towers.BloonTargetProxy, bestStrongNonCamo: Assets.Scripts.Simulation.Towers.BloonTargetProxy, bestFirstNonMoabNonCamo: Assets.Scripts.Simulation.Towers.BloonTargetProxy, bestLastNonMoabNonCamo: Assets.Scripts.Simulation.Towers.BloonTargetProxy, bestStrongNonMoabNonCamo: Assets.Scripts.Simulation.Towers.BloonTargetProxy, totalPathLength: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.CacheDistance = CacheDistance
		self.SegmentSize = SegmentSize
		self.def = def
		self.isActive = isActive
		self.isHidden = isHidden
		self.spawnDist = spawnDist
		self.leakDist = leakDist
		self.entryRouter = entryRouter
		self.exitRouter = exitRouter
		self.bloonsList = bloonsList
		self.hasBloons = hasBloons
		self.hasOfftrackBloons = hasOfftrackBloons
		self.hasMoabs = hasMoabs
		self.onlyHasMoabs = onlyHasMoabs
		self.onlyHasCamo = onlyHasCamo
		self.targets = targets
		self.targetCompare = targetCompare
		self.maximumDistanceUntilLeak = maximumDistanceUntilLeak
		self.maximumDistanceUntilSpawn = maximumDistanceUntilSpawn
		self.bestFirstAll = bestFirstAll
		self.bestLastAll = bestLastAll
		self.bestStrongAll = bestStrongAll
		self.bestFirstNonMoab = bestFirstNonMoab
		self.bestLastNonMoab = bestLastNonMoab
		self.bestStrongNonMoab = bestStrongNonMoab
		self.bestFirstNonCamo = bestFirstNonCamo
		self.bestLastNonCamo = bestLastNonCamo
		self.bestStrongNonCamo = bestStrongNonCamo
		self.bestFirstNonMoabNonCamo = bestFirstNonMoabNonCamo
		self.bestLastNonMoabNonCamo = bestLastNonMoabNonCamo
		self.bestStrongNonMoabNonCamo = bestStrongNonMoabNonCamo
		self.totalPathLength = totalPathLength


class PathImpl:

    offsets = {'pathImplPoints': 16, 'points': 24, 'lastIndex': 32, 'lastDistance': 36}    
    def __init__(self, pathImplPoints: System.Collections.Generic.List<Assets.Scripts.Simulation.SMath.Vector2>, points: System.Collections.Generic.List<Assets.Scripts.Simulation.Track.PathImpl.PointAndDistance>, lastIndex: System.Int32, lastDistance: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.pathImplPoints = pathImplPoints
		self.points = points
		self.lastIndex = lastIndex
		self.lastDistance = lastDistance


class PathManager:
	NonMoabKey: System.Int32
    offsets = {'NonMoabKey': 0, 'NonCamoKey': 4, 'paths': 88, 'targets': 96, 'hasBloons': 104, 'hasOfftrackBloons': 105, 'hasMoabs': 106, 'onlyHasMoabs': 107, 'onlyHasCamo': 108}    
    def __init__(self, NonMoabKey: System.Int32, NonCamoKey: System.Int32, paths: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Track.Path>, targets: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Simulation.Towers.BloonTargetProxy>, hasBloons: System.Boolean, hasOfftrackBloons: System.Boolean, hasMoabs: System.Boolean, onlyHasMoabs: System.Boolean, onlyHasCamo: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.NonMoabKey = NonMoabKey
		self.NonCamoKey = NonCamoKey
		self.paths = paths
		self.targets = targets
		self.hasBloons = hasBloons
		self.hasOfftrackBloons = hasOfftrackBloons
		self.hasMoabs = hasMoabs
		self.onlyHasMoabs = onlyHasMoabs
		self.onlyHasCamo = onlyHasCamo


class PathSegment:

    offsets = {'bloons': 16, 'path': 24, 'min': 32, 'max': 36, 'centre': 40, 'point': 44, 'pointHeight': 52, 'distanceUntilLeak': 56, 'bloonsInvulnerable': 60, 'moabsInvulnerable': 61}    
    def __init__(self, bloons: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Towers.BloonTargetProxy>, path: Assets.Scripts.Simulation.Track.Path, min: System.Single, max: System.Single, centre: System.Single, point: Assets.Scripts.Simulation.SMath.Vector2, pointHeight: System.Single, distanceUntilLeak: System.Single, bloonsInvulnerable: System.Boolean, moabsInvulnerable: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.bloons = bloons
		self.path = path
		self.min = min
		self.max = max
		self.centre = centre
		self.point = point
		self.pointHeight = pointHeight
		self.distanceUntilLeak = distanceUntilLeak
		self.bloonsInvulnerable = bloonsInvulnerable
		self.moabsInvulnerable = moabsInvulnerable


class Removeable:

    offsets = {'removeableModel': 160, 'isActive': 168}    
    def __init__(self, removeableModel: Assets.Scripts.Models.Map.RemoveableModel, isActive: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.removeableModel = removeableModel
		self.isActive = isActive


class RoundData:

    offsets = {'emissions': 16, 'roundStartTime': 24, 'roundDuration': 28}    
    def __init__(self, emissions: Assets.Scripts.Utils.SizedList<Assets.Scripts.Models.Rounds.BloonEmissionModel>, roundStartTime: System.Int32, roundDuration: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.emissions = emissions
		self.roundStartTime = roundStartTime
		self.roundDuration = roundDuration


class Spawner:

    offsets = {'spawnedRound': 88, 'startRound': 92, 'endRound': 96, 'isSandbox': 100, 'spawnJunction': 104, 'roundData': 112, 'emissionsRemoveList': 120, 'OnRoundSet': 128, 'OnPreBloonSpawn': 136, 'baseRoundManager': 144, 'freeplayRoundManager': 152, 'roundManager': 160, 'goldenBloonManager': 168, 'bossBloonManager': 176, 'bloonsOutsideOfTrack': 184, 'bloonsOutsideOfTrackRemoveList': 192, 'roundsCreated': 200, 'b4FirstWave': 208, 'roundsActive': 209, 'roundDataInstancePool': 216, 'currentRound': 224, 'roundEmissionsFinished': 232, 'blockRoundEnding': 240, 'returnValue': 248}    
    def __init__(self, spawnedRound: System.Int32, startRound: System.Int32, endRound: System.Int32, isSandbox: System.Boolean, spawnJunction: Assets.Scripts.Simulation.Track.Splitter, roundData: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Simulation.Track.RoundData>, emissionsRemoveList: Assets.Scripts.Utils.SizedList<Assets.Scripts.Models.Rounds.BloonEmissionModel>, OnRoundSet: System.Action<System.Boolean>, OnPreBloonSpawn: System.Action<Assets.Scripts.Models.Bloons.BloonModel>, baseRoundManager: Assets.Scripts.Simulation.Track.RoundManagers.RoundManager, freeplayRoundManager: Assets.Scripts.Simulation.Track.RoundManagers.FreeplayRoundManager, roundManager: Assets.Scripts.Simulation.Track.RoundManagers.RoundManager, goldenBloonManager: Assets.Scripts.Simulation.Track.GoldenBloonManager, bossBloonManager: Assets.Scripts.Simulation.Track.BossBloonManager, bloonsOutsideOfTrack: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Bloons.Bloon>, bloonsOutsideOfTrackRemoveList: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Bloons.Bloon>, roundsCreated: Assets.Scripts.Utils.SizedList<System.Int32>, b4FirstWave: System.Boolean, roundsActive: System.Boolean, roundDataInstancePool: System.Collections.Generic.List<Assets.Scripts.Simulation.Track.Spawner.RoundDataInstance>, currentRound: Assets.Scripts.Utils.KonFuze_NoShuffle, roundEmissionsFinished: Assets.Scripts.Utils.SizedList<System.Int32>, blockRoundEnding: System.Collections.Generic.Dictionary<System.Int32,System.Int32>, returnValue: Assets.Scripts.Utils.SizedList<System.String>, **kwargs):
        super().__init__(self, **kwargs)
		self.spawnedRound = spawnedRound
		self.startRound = startRound
		self.endRound = endRound
		self.isSandbox = isSandbox
		self.spawnJunction = spawnJunction
		self.roundData = roundData
		self.emissionsRemoveList = emissionsRemoveList
		self.OnRoundSet = OnRoundSet
		self.OnPreBloonSpawn = OnPreBloonSpawn
		self.baseRoundManager = baseRoundManager
		self.freeplayRoundManager = freeplayRoundManager
		self.roundManager = roundManager
		self.goldenBloonManager = goldenBloonManager
		self.bossBloonManager = bossBloonManager
		self.bloonsOutsideOfTrack = bloonsOutsideOfTrack
		self.bloonsOutsideOfTrackRemoveList = bloonsOutsideOfTrackRemoveList
		self.roundsCreated = roundsCreated
		self.b4FirstWave = b4FirstWave
		self.roundsActive = roundsActive
		self.roundDataInstancePool = roundDataInstancePool
		self.currentRound = currentRound
		self.roundEmissionsFinished = roundEmissionsFinished
		self.blockRoundEnding = blockRoundEnding
		self.returnValue = returnValue


class Splitter:

    offsets = {'def': 16, 'nextPathIndex': 40}    
    def __init__(self, def: Assets.Scripts.Models.Map.SplitterModel, nextPathIndex: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def
		self.nextPathIndex = nextPathIndex


class TrackArrow:

    offsets = {'trackArrowModel': 160, 'path': 168, 'exitPath': 176, 'distTravelledFromStart': 184, 'distToEnd': 188, 'distAlongPath': 192, 'displayBehavior': 200, 'modelBehaviors': 208, 'endArrow': 216, 'freeToUse': 217}    
    def __init__(self, trackArrowModel: Assets.Scripts.Models.Map.TrackArrowModel, path: Assets.Scripts.Simulation.Track.Path, exitPath: Assets.Scripts.Simulation.Track.Path, distTravelledFromStart: System.Single, distToEnd: System.Single, distAlongPath: System.Single, displayBehavior: Assets.Scripts.Simulation.Behaviors.DisplayBehavior, modelBehaviors: Assets.Scripts.Utils.SizedList<Assets.Scripts.Simulation.Objects.RootBehavior>, endArrow: System.Boolean, freeToUse: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.trackArrowModel = trackArrowModel
		self.path = path
		self.exitPath = exitPath
		self.distTravelledFromStart = distTravelledFromStart
		self.distToEnd = distToEnd
		self.distAlongPath = distAlongPath
		self.displayBehavior = displayBehavior
		self.modelBehaviors = modelBehaviors
		self.endArrow = endArrow
		self.freeToUse = freeToUse


class DefaultRoundManager:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class FreeplayRoundManager:

    offsets = {'freeplayGroups': 24, 'seededRandom': 32, 'budgetMultiplierThisRound': 40, 'initialSeed': 44, 'bloonGroups': 48}    
    def __init__(self, freeplayGroups: System.Collections.Generic.IList<Assets.Scripts.Models.Rounds.FreeplayBloonGroupModel>, seededRandom: Assets.Scripts.Utils.SeededRandom, budgetMultiplierThisRound: System.Single, initialSeed: System.Int32, bloonGroups: Assets.Scripts.Utils.SizedList<Assets.Scripts.Models.Rounds.BloonEmissionModel>, **kwargs):
        super().__init__(self, **kwargs)
		self.freeplayGroups = freeplayGroups
		self.seededRandom = seededRandom
		self.budgetMultiplierThisRound = budgetMultiplierThisRound
		self.initialSeed = initialSeed
		self.bloonGroups = bloonGroups


class RoundManager:

    offsets = {'sim': 16}    
    def __init__(self, sim: Assets.Scripts.Simulation.Simulation, **kwargs):
        super().__init__(self, **kwargs)
		self.sim = sim


class AlternateBloonsSplitter:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AlternateRoundMultiPathSplitter:

    offsets = {'model': 48, 'roundPaths': 56, 'activeRoundPaths': 64}    
    def __init__(self, model: Assets.Scripts.Models.Map.Spawners.AlternateRoundMultiPathSplitterModel, roundPaths: System.Collections.Generic.List<System.Collections.Generic.List<Assets.Scripts.Simulation.Track.Path>>, activeRoundPaths: System.Collections.Generic.List<System.Collections.Generic.List<Assets.Scripts.Simulation.Track.Path>>, **kwargs):
        super().__init__(self, **kwargs)
		self.model = model
		self.roundPaths = roundPaths
		self.activeRoundPaths = activeRoundPaths


class AlternateRoundSplitter:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MoabOnlySplitter:

    offsets = {'moModel': 48, 'nextBloonPathIndex': 72, 'nextMoabPathIndex': 76}    
    def __init__(self, moModel: Assets.Scripts.Models.Map.Spawners.MoabOnlySplitterModel, nextBloonPathIndex: System.Int32, nextMoabPathIndex: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.moModel = moModel
		self.nextBloonPathIndex = nextBloonPathIndex
		self.nextMoabPathIndex = nextMoabPathIndex


class RuleSplitter:

    offsets = {'modl': 48}    
    def __init__(self, modl: Assets.Scripts.Models.Map.Spawners.RuleSplitterModel, **kwargs):
        super().__init__(self, **kwargs)
		self.modl = modl


class AnalyticsEventReporterSim:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AnalyticsTrackerSim:

    offsets = {'playerId': 88, 'sessionInfo': 96, 'lastSessionInfo': 104, 'change': 112}    
    def __init__(self, playerId: System.Int32, sessionInfo: Assets.Scripts.Unity.Bridge.AnalyticsGameSessionInfo, lastSessionInfo: Assets.Scripts.Unity.Bridge.AnalyticsGameSessionInfo, change: Assets.Scripts.Models.Profile.AnalyticsKonFuze, **kwargs):
        super().__init__(self, **kwargs)
		self.playerId = playerId
		self.sessionInfo = sessionInfo
		self.lastSessionInfo = lastSessionInfo
		self.change = change


class AnalyticsTrackerSimManager:

    offsets = {'analyticsSimTrackers': 88}    
    def __init__(self, analyticsSimTrackers: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Simulation.Tracking.AnalyticsTrackerSim>, **kwargs):
        super().__init__(self, **kwargs)
		self.analyticsSimTrackers = analyticsSimTrackers


class MapSaveLoader:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ClipboardProvider:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DeepLinkManager:
	<Instance>k__BackingField: Assets.Scripts.SocialSharing.DeepLinkManager
    offsets = {'<Instance>k__BackingField': 0, '<LinkType>k__BackingField': 24, '<LinkCode>k__BackingField': 32}    
    def __init__(self, <Instance>k__BackingField: Assets.Scripts.SocialSharing.DeepLinkManager, <LinkType>k__BackingField: System.Nullable<Assets.Scripts.SocialSharing.DeepLinkType>, <LinkCode>k__BackingField: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.<Instance>k__BackingField = <Instance>k__BackingField
		self.<LinkType>k__BackingField = <LinkType>k__BackingField
		self.<LinkCode>k__BackingField = <LinkCode>k__BackingField


class DeepLinkType:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class ISocialProvider:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SocialManager:
	_socialProvider: Assets.Scripts.SocialSharing.ISocialProvider
    offsets = {'_socialProvider': 0}    
    def __init__(self, _socialProvider: Assets.Scripts.SocialSharing.ISocialProvider, **kwargs):
        super().__init__(self, **kwargs)
		self._socialProvider = _socialProvider


class Behavior<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Benchmark:

    offsets = {'Simulation': 32, 'GameModel': 40, 'guiEnabled': 48, 'isRunning': 49, 'fastForward': 50, 'sellTest': 51, 'createTowerCoroutine': 56, 'currentFrame': 64, 'jumpToFrame': 68, 'currentRound': 72, 'roundsSimulated': 76, 'numberOfRounds': 80, 'jumpToEnd': 84, 'timeTaken': 88, 'peakFrameTime': 92, 'gcAllocated': 96, 'isGcDisabled': 104, 'loadedingScenario': 105, 'scrollPosition': 108, 'gameModelOrig': 120, 'playerService': 128}    
    def __init__(self, Simulation: Assets.Scripts.Unity.Bridge.UnityToSimulation, GameModel: Assets.Scripts.Models.GameModel, guiEnabled: System.Boolean, isRunning: System.Boolean, fastForward: System.Boolean, sellTest: System.Boolean, createTowerCoroutine: UnityEngine.Coroutine, currentFrame: System.Int32, jumpToFrame: System.Int32, currentRound: System.Int32, roundsSimulated: System.Int32, numberOfRounds: System.Int32, jumpToEnd: System.Boolean, timeTaken: System.Single, peakFrameTime: System.Single, gcAllocated: System.Int64, isGcDisabled: System.Boolean, loadedingScenario: System.Boolean, scrollPosition: UnityEngine.Vector2, gameModelOrig: Assets.Scripts.Models.GameModel, playerService: Assets.Scripts.Unity.Player.PlayerService, **kwargs):
        super().__init__(self, **kwargs)
		self.Simulation = Simulation
		self.GameModel = GameModel
		self.guiEnabled = guiEnabled
		self.isRunning = isRunning
		self.fastForward = fastForward
		self.sellTest = sellTest
		self.createTowerCoroutine = createTowerCoroutine
		self.currentFrame = currentFrame
		self.jumpToFrame = jumpToFrame
		self.currentRound = currentRound
		self.roundsSimulated = roundsSimulated
		self.numberOfRounds = numberOfRounds
		self.jumpToEnd = jumpToEnd
		self.timeTaken = timeTaken
		self.peakFrameTime = peakFrameTime
		self.gcAllocated = gcAllocated
		self.isGcDisabled = isGcDisabled
		self.loadedingScenario = loadedingScenario
		self.scrollPosition = scrollPosition
		self.gameModelOrig = gameModelOrig
		self.playerService = playerService


class BenchmarkScenario:

    offsets = {'map': 24, 'difficulty': 32, 'isImmune': 40, 'startingCash': 48, 'startingRound': 56}    
    def __init__(self, map: System.String, difficulty: System.String, isImmune: System.Boolean, startingCash: System.Double, startingRound: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.map = map
		self.difficulty = difficulty
		self.isImmune = isImmune
		self.startingCash = startingCash
		self.startingRound = startingRound


class BenchmarkUtilities:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DebugTowerGroupPlacer:

    offsets = {'currentTick': 16, 'isInCirclePlacement': 20, 'isInCrosspathPlacement': 21, 'currentPosInCircle': 24, 'currentCircleDepth': 28, 'timeOfLastCrosspathPlace': 32, 'timeOfLastCirclePlace': 36, 'currentTowerTiersIndex': 40, 'lineXSpacing': 44, 'lineYSpacing': 48, 'lineXOrigin': 52, 'lineYOrigin': 56, 'lineXEnd': 60, 'lineYEnd': 64, 'currentXPos': 68, 'currentYPos': 72, 'towerSelectionMenu': 88, 'sim': 96, 'circleOrigin': 104, 'circleTowerModel': 120, 'crosspathTowerModel': 128}    
    def __init__(self, currentTick: System.Int32, isInCirclePlacement: System.Boolean, isInCrosspathPlacement: System.Boolean, currentPosInCircle: System.Int32, currentCircleDepth: System.Int32, timeOfLastCrosspathPlace: System.Int32, timeOfLastCirclePlace: System.Int32, currentTowerTiersIndex: System.Int32, lineXSpacing: System.Single, lineYSpacing: System.Single, lineXOrigin: System.Single, lineYOrigin: System.Single, lineXEnd: System.Single, lineYEnd: System.Single, currentXPos: System.Single, currentYPos: System.Single, towerSelectionMenu: Assets.Scripts.Unity.UI_New.InGame.TowerSelectionMenu.TowerSelectionMenu, sim: Assets.Scripts.Unity.Bridge.UnityToSimulation, circleOrigin: UnityEngine.Vector3, circleTowerModel: Assets.Scripts.Models.Towers.TowerModel, crosspathTowerModel: Assets.Scripts.Models.Towers.TowerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.currentTick = currentTick
		self.isInCirclePlacement = isInCirclePlacement
		self.isInCrosspathPlacement = isInCrosspathPlacement
		self.currentPosInCircle = currentPosInCircle
		self.currentCircleDepth = currentCircleDepth
		self.timeOfLastCrosspathPlace = timeOfLastCrosspathPlace
		self.timeOfLastCirclePlace = timeOfLastCirclePlace
		self.currentTowerTiersIndex = currentTowerTiersIndex
		self.lineXSpacing = lineXSpacing
		self.lineYSpacing = lineYSpacing
		self.lineXOrigin = lineXOrigin
		self.lineYOrigin = lineYOrigin
		self.lineXEnd = lineXEnd
		self.lineYEnd = lineYEnd
		self.currentXPos = currentXPos
		self.currentYPos = currentYPos
		self.towerSelectionMenu = towerSelectionMenu
		self.sim = sim
		self.circleOrigin = circleOrigin
		self.circleTowerModel = circleTowerModel
		self.crosspathTowerModel = crosspathTowerModel


class Disabler:

    offsets = {'parent': 128, 'component': 136, 'expComponent': 144, 'isDisabled': 152, 'expIsDisabled': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Disabler, component: UnityEngine.MonoBehaviour, expComponent: UnityEngine.MonoBehaviour, isDisabled: System.Boolean, expIsDisabled: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.component = component
		self.expComponent = expComponent
		self.isDisabled = isDisabled
		self.expIsDisabled = expIsDisabled


class DisablerInterface:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class EditorBox:

    offsets = {'marginX': 24, 'marginY': 28}    
    def __init__(self, marginX: System.Single, marginY: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.marginX = marginX
		self.marginY = marginY


class Game:
	instance: Assets.Scripts.Unity.Game
    offsets = {'instance': 0, 'isModdedClient': 8, 'model': 24, 'audioSource': 32, 'prototypeObjects': 40, 'displayObjects': 48, 'audioFactory': 56, 'cameraLookup': 64, 'coopLayouts': 72, 'playerService': 80, 'modelStore': 88, 'achievementManager': 96, 'pipEventManager': 104, 'scene': 112, 'gifting': 120, 'version': 128, 'towerGiftUnlockGoals': 136, 'sceneOrientatedRotation': 144, 'isHashReported': 148}    
    def __init__(self, instance: Assets.Scripts.Unity.Game, isModdedClient: System.Nullable<System.Boolean>, model: Assets.Scripts.Models.GameModel, audioSource: UnityEngine.AudioSource, prototypeObjects: UnityEngine.GameObject, displayObjects: UnityEngine.GameObject, audioFactory: Assets.Scripts.Unity.Audio.AudioFactory, cameraLookup: Assets.Scripts.Unity.UI_New.CameraLookup, coopLayouts: UnityEngine.GameObject, playerService: Assets.Scripts.Unity.Player.PlayerService, modelStore: Assets.Scripts.Unity.ModelStore, achievementManager: Assets.Scripts.Unity.Achievements.AchievementManager, pipEventManager: Assets.Scripts.Unity.UI_New.Main.Home.PipEventManager, scene: Assets.Scripts.Unity.Display.Scene, gifting: Assets.Scripts.Unity.Gift.Gifting, version: System.Version, towerGiftUnlockGoals: Assets.Scripts.Unity.TowerGiftUnlockGoals, sceneOrientatedRotation: System.Single, isHashReported: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.isModdedClient = isModdedClient
		self.model = model
		self.audioSource = audioSource
		self.prototypeObjects = prototypeObjects
		self.displayObjects = displayObjects
		self.audioFactory = audioFactory
		self.cameraLookup = cameraLookup
		self.coopLayouts = coopLayouts
		self.playerService = playerService
		self.modelStore = modelStore
		self.achievementManager = achievementManager
		self.pipEventManager = pipEventManager
		self.scene = scene
		self.gifting = gifting
		self.version = version
		self.towerGiftUnlockGoals = towerGiftUnlockGoals
		self.sceneOrientatedRotation = sceneOrientatedRotation
		self.isHashReported = isHashReported


class IBehavior:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class LinkDataFolders:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ModelStore:

    offsets = {'towers': 16, 'upgrades': 24}    
    def __init__(self, towers: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Towers.TowerModel>, upgrades: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Towers.Upgrades.UpgradeModel>, **kwargs):
        super().__init__(self, **kwargs)
		self.towers = towers
		self.upgrades = upgrades


class ObjectHasher:

    offsets = {'obj': 16}    
    def __init__(self, obj: System.Object, **kwargs):
        super().__init__(self, **kwargs)
		self.obj = obj


class SceneOrientation:

    offsets = {'rotationDegrees': 24}    
    def __init__(self, rotationDegrees: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.rotationDegrees = rotationDegrees


class ServerEventExtensions:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SkuSettings:
	<instance>k__BackingField: Assets.Scripts.Models.Sku
    offsets = {'<instance>k__BackingField': 0, 'isFirstLoad': 8, 'lastRefresh': 16}    
    def __init__(self, <instance>k__BackingField: Assets.Scripts.Models.Sku, isFirstLoad: System.Boolean, lastRefresh: System.DateTime, **kwargs):
        super().__init__(self, **kwargs)
		self.<instance>k__BackingField = <instance>k__BackingField
		self.isFirstLoad = isFirstLoad
		self.lastRefresh = lastRefresh


class TowerGiftUnlockGoals:

    offsets = {'goalSeed': 16, 'goals': 24}    
    def __init__(self, goalSeed: Assets.Scripts.Utils.KonFuze, goals: System.Collections.Generic.List<Assets.Scripts.Unity.TowerGiftUnlockGoals.UnlockGoalDef>, **kwargs):
        super().__init__(self, **kwargs)
		self.goalSeed = goalSeed
		self.goals = goals


class TowerTiers:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementManager:

    offsets = {'activeAchievements': 24}    
    def __init__(self, activeAchievements: System.Collections.Generic.List<Assets.Scripts.Unity.Achievements.ActiveAchievement>, **kwargs):
        super().__init__(self, **kwargs)
		self.activeAchievements = activeAchievements


class ActiveAchievement:

    offsets = {'achievementModel': 16, 'currentProgress': 24, 'claimed': 28}    
    def __init__(self, achievementModel: Assets.Scripts.Data.Achievements.Achievement, currentProgress: System.Single, claimed: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.achievementModel = achievementModel
		self.currentProgress = currentProgress
		self.claimed = claimed


class Achievement12TasksOfMonkules:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Achievement2MegaPops:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Achievement2TC:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementACrateTime:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementALaCode:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementAYearInTheMaking:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementAbracadabmonkey:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementAchievementOfAchievements:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementAcolyte:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementAdvancedPlayer:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementAdventurer:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementAllAboutThatBling:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementAllForOne:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementApotheosis:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementAxisOfHavoc:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementBfbBrawler:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementBigBloons:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementBigMonkey:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementBiggerBadder:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementBillGreates:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementBloonMasterPopulous:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementBloontona500:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementBloonzilla:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementChallengeApprentice:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementChallengeMaster:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementChallenger:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementChunkyMonkeys:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementClicker:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementCollaborate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementCoopPopper:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementCooperation:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementCouponCrazy:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementCrashOfTheTitans:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementDecoratedHero:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementDrMonkey:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementEmpowered:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementEpicHero:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementExtremePlayer:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementFirstMonkeysFirst:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementFirstWin:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementFourTimesTheFun:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementFreakyFriday:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementFullSpeedAhead:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementGenerousBenefactor:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementGlitteringGold:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementGloriousGold:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementGrasshopper:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementHeroPowersActivate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementHeroTime:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementHookLineAndSinker:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementISeeYou:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementImTheBoss:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementImpoppable:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementIndie:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementInflated:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementInfrared:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementInstaCentury:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementInstaDefence:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementInstantGratification:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementJoshsConstant:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementKaliMaa:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementKindBenefactor:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementKnowledgablePrimate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementLikeABoss:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementLimitedRun:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementLivingOnTheEdge:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementLookingFab:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementMagicalGold:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementMasterOfLife:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementMeDidAJobOnDdt:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementMedalWinner:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementMegaMonkey:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementMoHeroesMoProblems:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementMoabAssasin:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementModysseusForever:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementModysseusRises:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementMonkeyAvengerLeague:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementMonkeyContributor:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementMonkeyFanClub:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementMonkeyPhilanthropist:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementMovingHouse:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementNextLevel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementNoStoneLeftUnturned:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementOathbreakers:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementOurPowersCombined:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementPerfectWeek:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementPoppable:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementPowerOverwhelming:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementPowerUser:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementPowershare:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementRainbowIsMagic:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementReadyPlayerOne:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementRedAndBlueMakes:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementRegifted:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementRisingStar:

    offsets = {'fiveMinutes': 32}    
    def __init__(self, fiveMinutes: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.fiveMinutes = fiveMinutes


class AchievementRoleReverser:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementRookieOfTheYear:

    offsets = {'tenMinutes': 32}    
    def __init__(self, tenMinutes: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.tenMinutes = tenMinutes


class AchievementSapper:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementScholar:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementSeasonedAdventurer:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementSmallBloons:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementSmallTowers:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementSnapOfYourFingers:

    offsets = {'halfStartingCash': 32, 'halfStartingLives': 36, 'beforeEndOfRoundCash': 40, 'beforeEndOfRoundLives': 48}    
    def __init__(self, halfStartingCash: System.Int32, halfStartingLives: System.Int32, beforeEndOfRoundCash: System.Double, beforeEndOfRoundLives: System.Double, **kwargs):
        super().__init__(self, **kwargs)
		self.halfStartingCash = halfStartingCash
		self.halfStartingLives = halfStartingLives
		self.beforeEndOfRoundCash = beforeEndOfRoundCash
		self.beforeEndOfRoundLives = beforeEndOfRoundLives


class AchievementSoShiny:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementSocialButterfly:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementStrangelyAdorable:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementStubbornStrategy:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementStudent:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementSuperBad:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementSuperiorClicker:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementSurvivor:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementTeamCaptain:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementTeamPlayer:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementTetrimino:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementTheGreatestChallenge:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementTherpopylae:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementThrifty:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementToolsToDarwin:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementTopOfYourGame:

    offsets = {'threeMinutes': 32}    
    def __init__(self, threeMinutes: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.threeMinutes = threeMinutes


class AchievementTowerKeeper:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementTripleThreat:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementUltimateClicker:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementUltimateTeamUp:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementUnsungMonkeys:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementWarMonkeys:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementWhatDidItCost:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementWhatIsThisNewBloonery:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementWhenTheGoingGetsTough:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementWhosTheBoss:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementYouveGotThePower:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AchievementZomginator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AnalyticsManager:
	<Instance>k__BackingField: Assets.Scripts.Unity.Analytics.AnalyticsManager
    offsets = {'<Instance>k__BackingField': 0, 'ContentBrowser': 16, 'AssetBundles': 24, 'TwitchAnalytics': 32, 'isReportedHacker': 40}    
    def __init__(self, <Instance>k__BackingField: Assets.Scripts.Unity.Analytics.AnalyticsManager, ContentBrowser: Assets.Scripts.Unity.Analytics.ContentBrowserAnalytics, AssetBundles: Assets.Scripts.Unity.Analytics.AssetBundleAnalytics, TwitchAnalytics: Assets.Scripts.Unity.Analytics.TwitchAnalytics, isReportedHacker: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.<Instance>k__BackingField = <Instance>k__BackingField
		self.ContentBrowser = ContentBrowser
		self.AssetBundles = AssetBundles
		self.TwitchAnalytics = TwitchAnalytics
		self.isReportedHacker = isReportedHacker


class AssetBundleAnalytics:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ContentBrowserAnalytics:

    offsets = {'analyticsManager': 16}    
    def __init__(self, analyticsManager: Assets.Scripts.Unity.Analytics.AnalyticsManager, **kwargs):
        super().__init__(self, **kwargs)
		self.analyticsManager = analyticsManager


class DcmAnalyticExtensions:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class EndMapState:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class TwitchAnalytics:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AudioFactory:

    offsets = {'audioClips': 24, 'audioSources': 32, 'audioSourcesByUniqueId': 40, 'audioSourcesByGroupId': 48, 'fadingAudios': 56, 'fadingAudiosToRemove': 64, 'delayedAudioTasks': 72, 'delayedAudioTasksToExecute': 80, 'musicMixer': 88, 'fxMixer': 96, 'musicFactory': 104, 'currentTrackIndex': 112, 'timeLast': 116, 'executionIndex': 120, 'currentAudioClipAssetId': 128, 'toRemoveList': 136}    
    def __init__(self, audioClips: System.Collections.Generic.Dictionary<System.String,UnityEngine.AudioClip>, audioSources: Assets.Scripts.Utils.SizedList<UnityEngine.AudioSource>, audioSourcesByUniqueId: System.Collections.Generic.Dictionary<System.String,UnityEngine.AudioSource>, audioSourcesByGroupId: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Utils.SizedList<UnityEngine.AudioSource>>, fadingAudios: Assets.Scripts.Utils.SizedList<Assets.Scripts.Unity.Audio.AudioFactory.FadingAudio>, fadingAudiosToRemove: Assets.Scripts.Utils.SizedList<Assets.Scripts.Unity.Audio.AudioFactory.FadingAudio>, delayedAudioTasks: Assets.Scripts.Utils.SizedList<Assets.Scripts.Unity.Bridge.AudioTask>, delayedAudioTasksToExecute: Assets.Scripts.Utils.SizedList<Assets.Scripts.Unity.Bridge.AudioTask>, musicMixer: UnityEngine.Audio.AudioMixerGroup, fxMixer: UnityEngine.Audio.AudioMixerGroup, musicFactory: InGameMusicFactory, currentTrackIndex: System.Int32, timeLast: System.Single, executionIndex: System.Int32, currentAudioClipAssetId: System.String, toRemoveList: Assets.Scripts.Utils.SizedList<UnityEngine.AudioSource>, **kwargs):
        super().__init__(self, **kwargs)
		self.audioClips = audioClips
		self.audioSources = audioSources
		self.audioSourcesByUniqueId = audioSourcesByUniqueId
		self.audioSourcesByGroupId = audioSourcesByGroupId
		self.fadingAudios = fadingAudios
		self.fadingAudiosToRemove = fadingAudiosToRemove
		self.delayedAudioTasks = delayedAudioTasks
		self.delayedAudioTasksToExecute = delayedAudioTasksToExecute
		self.musicMixer = musicMixer
		self.fxMixer = fxMixer
		self.musicFactory = musicFactory
		self.currentTrackIndex = currentTrackIndex
		self.timeLast = timeLast
		self.executionIndex = executionIndex
		self.currentAudioClipAssetId = currentAudioClipAssetId
		self.toRemoveList = toRemoveList


class JukeBoxScreen:

    offsets = {'headingTxt': 56, 'availableTracksTxt': 64, 'playListTxt': 72, 'currentTrackTxt': 80, 'addAllTxt': 88, 'removeAllTxt': 96, 'trackItemPrefab': 104, 'trackLength': 112, 'pauseImg': 120, 'playImg': 128, 'moveTrackUpObj': 136, 'moveTrackDownObj': 144, 'trackContent': 152, 'playlistContent': 160, 'previewBtn': 168, 'addAllBtn': 176, 'removeAllBtn': 184, 'prevTrackBtn': 192, 'nextTrackBtn': 200, 'moveTrackUpBtn': 208, 'moveTrackDownBtn': 216, 'equalizerAnimator': 224, 'SelectTrackEvent': 232, 'AddToPlaylistEvent': 240, 'RemoveFromPlaylistEvent': 248, 'musicLocManager': 256, 'trackItemsList': 264, 'playListItemsList': 272, 'playListDataList': 280, 'currentTrackId': 288, 'previewTrackId': 296, 'previewTrackClip': 304, 'theLastTrackAssetId': 312, 'previewPaused': 320, 'locTrackNames': 328, 'pauseTrackPositionFill': 336, 'titleMusic': 344}    
    def __init__(self, headingTxt: NK_TextMeshProUGUI, availableTracksTxt: NK_TextMeshProUGUI, playListTxt: NK_TextMeshProUGUI, currentTrackTxt: NK_TextMeshProUGUI, addAllTxt: NK_TextMeshProUGUI, removeAllTxt: NK_TextMeshProUGUI, trackItemPrefab: TrackItem, trackLength: UnityEngine.UI.Image, pauseImg: UnityEngine.UI.Image, playImg: UnityEngine.UI.Image, moveTrackUpObj: UnityEngine.GameObject, moveTrackDownObj: UnityEngine.GameObject, trackContent: UnityEngine.GameObject, playlistContent: UnityEngine.GameObject, previewBtn: UnityEngine.UI.Button, addAllBtn: UnityEngine.UI.Button, removeAllBtn: UnityEngine.UI.Button, prevTrackBtn: UnityEngine.UI.Button, nextTrackBtn: UnityEngine.UI.Button, moveTrackUpBtn: UnityEngine.UI.Button, moveTrackDownBtn: UnityEngine.UI.Button, equalizerAnimator: UnityEngine.Animator, SelectTrackEvent: System.Action<System.String>, AddToPlaylistEvent: System.Action<System.String,System.Int32>, RemoveFromPlaylistEvent: System.Action<System.Int32>, musicLocManager: MusicLocalizationManager, trackItemsList: System.Collections.Generic.List<TrackItem>, playListItemsList: System.Collections.Generic.List<TrackItem>, playListDataList: System.Collections.Generic.List<TrackItemData>, currentTrackId: System.String, previewTrackId: System.String, previewTrackClip: UnityEngine.AudioClip, theLastTrackAssetId: System.String, previewPaused: System.Boolean, locTrackNames: System.Collections.Generic.Dictionary<System.String,System.String>, pauseTrackPositionFill: System.Boolean, titleMusic: UnityEngine.AudioClip, **kwargs):
        super().__init__(self, **kwargs)
		self.headingTxt = headingTxt
		self.availableTracksTxt = availableTracksTxt
		self.playListTxt = playListTxt
		self.currentTrackTxt = currentTrackTxt
		self.addAllTxt = addAllTxt
		self.removeAllTxt = removeAllTxt
		self.trackItemPrefab = trackItemPrefab
		self.trackLength = trackLength
		self.pauseImg = pauseImg
		self.playImg = playImg
		self.moveTrackUpObj = moveTrackUpObj
		self.moveTrackDownObj = moveTrackDownObj
		self.trackContent = trackContent
		self.playlistContent = playlistContent
		self.previewBtn = previewBtn
		self.addAllBtn = addAllBtn
		self.removeAllBtn = removeAllBtn
		self.prevTrackBtn = prevTrackBtn
		self.nextTrackBtn = nextTrackBtn
		self.moveTrackUpBtn = moveTrackUpBtn
		self.moveTrackDownBtn = moveTrackDownBtn
		self.equalizerAnimator = equalizerAnimator
		self.SelectTrackEvent = SelectTrackEvent
		self.AddToPlaylistEvent = AddToPlaylistEvent
		self.RemoveFromPlaylistEvent = RemoveFromPlaylistEvent
		self.musicLocManager = musicLocManager
		self.trackItemsList = trackItemsList
		self.playListItemsList = playListItemsList
		self.playListDataList = playListDataList
		self.currentTrackId = currentTrackId
		self.previewTrackId = previewTrackId
		self.previewTrackClip = previewTrackClip
		self.theLastTrackAssetId = theLastTrackAssetId
		self.previewPaused = previewPaused
		self.locTrackNames = locTrackNames
		self.pauseTrackPositionFill = pauseTrackPositionFill
		self.titleMusic = titleMusic


class MiniJukeBoxPlayer:

    offsets = {'currentTrackTxt': 24, 'equalizerAnimator': 32, 'trackLength': 40, 'controls': 48, 'prevTrackBtn': 56, 'nextTrackBtn': 64, 'loopTrackBtn': 72, 'musicLocManager': 80, 'trackDataList': 88, 'usePlayList': 96, 'trackData': 104, 'currentAudioSource': 112}    
    def __init__(self, currentTrackTxt: NK_TextMeshProUGUI, equalizerAnimator: UnityEngine.Animator, trackLength: UnityEngine.UI.Image, controls: UnityEngine.GameObject, prevTrackBtn: UnityEngine.UI.Button, nextTrackBtn: UnityEngine.UI.Button, loopTrackBtn: UnityEngine.UI.Toggle, musicLocManager: MusicLocalizationManager, trackDataList: System.Collections.Generic.List<TrackItemData>, usePlayList: System.Boolean, trackData: TrackItemData, currentAudioSource: UnityEngine.AudioSource, **kwargs):
        super().__init__(self, **kwargs)
		self.currentTrackTxt = currentTrackTxt
		self.equalizerAnimator = equalizerAnimator
		self.trackLength = trackLength
		self.controls = controls
		self.prevTrackBtn = prevTrackBtn
		self.nextTrackBtn = nextTrackBtn
		self.loopTrackBtn = loopTrackBtn
		self.musicLocManager = musicLocManager
		self.trackDataList = trackDataList
		self.usePlayList = usePlayList
		self.trackData = trackData
		self.currentAudioSource = currentAudioSource


class Behavior:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Bloon:

    offsets = {'parent': 120, 'radius': 128, 'expRadius': 136, 'speed': 144, 'expSpeed': 152, 'tags': 160, 'expTags': 168, 'baseId': 176, 'expBaseId': 184, 'overlayClass': 192, 'expOverlayClass': 200, 'bloonProperties': 208, 'expBloonProperties': 216, 'dangerAmount': 224, 'expDangerAmount': 232, 'isFake': 240, 'expIsFake': 248, 'layerNumber': 256, 'expLayerNumber': 264, 'rotateToFollowPath': 272, 'expRotateToFollowPath': 280, 'collisionGroup': 288, 'expCollisionGroup': 296, 'iconObject': 304, 'expIconObject': 312, 'baseDisplay': 320, 'camoDisplay': 328, 'regrowDisplay': 336, 'regrowCamoDisplay': 344, 'fortifiedDisplay': 352, 'fortifiedCamoDisplay': 360, 'fortifiedRegrowDisplay': 368, 'fortifiedRegrowCamoDisplay': 376, 'def': 384}    
    def __init__(self, parent: Assets.Scripts.Unity.Bloons.Bloon, radius: System.Single, expRadius: System.String, speed: System.Single, expSpeed: System.String, tags: System.String, expTags: System.String, baseId: System.String, expBaseId: System.String, overlayClass: System.String, expOverlayClass: System.String, bloonProperties: System.String, expBloonProperties: System.String, dangerAmount: System.Single, expDangerAmount: System.String, isFake: System.Boolean, expIsFake: System.String, layerNumber: System.Int32, expLayerNumber: System.String, rotateToFollowPath: System.Boolean, expRotateToFollowPath: System.String, collisionGroup: Assets.Scripts.Unity.Bloons.CollisionGroup, expCollisionGroup: Assets.Scripts.Unity.Bloons.CollisionGroup, iconObject: UnityEngine.GameObject, expIconObject: UnityEngine.GameObject, baseDisplay: UnityEngine.GameObject, camoDisplay: UnityEngine.GameObject, regrowDisplay: UnityEngine.GameObject, regrowCamoDisplay: UnityEngine.GameObject, fortifiedDisplay: UnityEngine.GameObject, fortifiedCamoDisplay: UnityEngine.GameObject, fortifiedRegrowDisplay: UnityEngine.GameObject, fortifiedRegrowCamoDisplay: UnityEngine.GameObject, def: Assets.Scripts.Models.Bloons.BloonModel, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.radius = radius
		self.expRadius = expRadius
		self.speed = speed
		self.expSpeed = expSpeed
		self.tags = tags
		self.expTags = expTags
		self.baseId = baseId
		self.expBaseId = expBaseId
		self.overlayClass = overlayClass
		self.expOverlayClass = expOverlayClass
		self.bloonProperties = bloonProperties
		self.expBloonProperties = expBloonProperties
		self.dangerAmount = dangerAmount
		self.expDangerAmount = expDangerAmount
		self.isFake = isFake
		self.expIsFake = expIsFake
		self.layerNumber = layerNumber
		self.expLayerNumber = expLayerNumber
		self.rotateToFollowPath = rotateToFollowPath
		self.expRotateToFollowPath = expRotateToFollowPath
		self.collisionGroup = collisionGroup
		self.expCollisionGroup = expCollisionGroup
		self.iconObject = iconObject
		self.expIconObject = expIconObject
		self.baseDisplay = baseDisplay
		self.camoDisplay = camoDisplay
		self.regrowDisplay = regrowDisplay
		self.regrowCamoDisplay = regrowCamoDisplay
		self.fortifiedDisplay = fortifiedDisplay
		self.fortifiedCamoDisplay = fortifiedCamoDisplay
		self.fortifiedRegrowDisplay = fortifiedRegrowDisplay
		self.fortifiedRegrowCamoDisplay = fortifiedRegrowCamoDisplay
		self.def = def


class BloonOld:

    offsets = {'parent': 120}    
    def __init__(self, parent: Assets.Scripts.Unity.Bloons.BloonOld, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class BloonProxy:

    offsets = {'rbe': 24}    
    def __init__(self, rbe: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.rbe = rbe


class CollisionGroup:

    offsets = {'collisionObjects': 24}    
    def __init__(self, collisionObjects: System.Collections.Generic.List<UnityEngine.Transform>, **kwargs):
        super().__init__(self, **kwargs)
		self.collisionObjects = collisionObjects


class IOverlayGroup:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class IsBoss:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class OverlayGroup:

    offsets = {'red': 24, 'redRegrow': 32, 'blue': 40, 'blueRegrow': 48, 'green': 56, 'greenRegrow': 64, 'yellow': 72, 'yellowRegrow': 80, 'pink': 88, 'pinkRegrow': 96, 'white': 104, 'whiteRegrow': 112, 'moab': 120, 'bfb': 128, 'zomg': 136, 'ddt': 144, 'bad': 152, 'bloonarius': 160, 'layer': 168}    
    def __init__(self, red: UnityEngine.GameObject, redRegrow: UnityEngine.GameObject, blue: UnityEngine.GameObject, blueRegrow: UnityEngine.GameObject, green: UnityEngine.GameObject, greenRegrow: UnityEngine.GameObject, yellow: UnityEngine.GameObject, yellowRegrow: UnityEngine.GameObject, pink: UnityEngine.GameObject, pinkRegrow: UnityEngine.GameObject, white: UnityEngine.GameObject, whiteRegrow: UnityEngine.GameObject, moab: UnityEngine.GameObject, bfb: UnityEngine.GameObject, zomg: UnityEngine.GameObject, ddt: UnityEngine.GameObject, bad: UnityEngine.GameObject, bloonarius: UnityEngine.GameObject, layer: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.red = red
		self.redRegrow = redRegrow
		self.blue = blue
		self.blueRegrow = blueRegrow
		self.green = green
		self.greenRegrow = greenRegrow
		self.yellow = yellow
		self.yellowRegrow = yellowRegrow
		self.pink = pink
		self.pinkRegrow = pinkRegrow
		self.white = white
		self.whiteRegrow = whiteRegrow
		self.moab = moab
		self.bfb = bfb
		self.zomg = zomg
		self.ddt = ddt
		self.bad = bad
		self.bloonarius = bloonarius
		self.layer = layer


class OverlayGroupRuntime:

    offsets = {'red': 24, 'redRegrow': 32, 'blue': 40, 'blueRegrow': 48, 'green': 56, 'greenRegrow': 64, 'yellow': 72, 'yellowRegrow': 80, 'pink': 88, 'pinkRegrow': 96, 'white': 104, 'whiteRegrow': 112, 'moab': 120, 'bfb': 128, 'zomg': 136, 'ddt': 144, 'bad': 152, 'layer': 160}    
    def __init__(self, red: Assets.Scripts.Utils.PrefabReference, redRegrow: Assets.Scripts.Utils.PrefabReference, blue: Assets.Scripts.Utils.PrefabReference, blueRegrow: Assets.Scripts.Utils.PrefabReference, green: Assets.Scripts.Utils.PrefabReference, greenRegrow: Assets.Scripts.Utils.PrefabReference, yellow: Assets.Scripts.Utils.PrefabReference, yellowRegrow: Assets.Scripts.Utils.PrefabReference, pink: Assets.Scripts.Utils.PrefabReference, pinkRegrow: Assets.Scripts.Utils.PrefabReference, white: Assets.Scripts.Utils.PrefabReference, whiteRegrow: Assets.Scripts.Utils.PrefabReference, moab: Assets.Scripts.Utils.PrefabReference, bfb: Assets.Scripts.Utils.PrefabReference, zomg: Assets.Scripts.Utils.PrefabReference, ddt: Assets.Scripts.Utils.PrefabReference, bad: Assets.Scripts.Utils.PrefabReference, layer: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.red = red
		self.redRegrow = redRegrow
		self.blue = blue
		self.blueRegrow = blueRegrow
		self.green = green
		self.greenRegrow = greenRegrow
		self.yellow = yellow
		self.yellowRegrow = yellowRegrow
		self.pink = pink
		self.pinkRegrow = pinkRegrow
		self.white = white
		self.whiteRegrow = whiteRegrow
		self.moab = moab
		self.bfb = bfb
		self.zomg = zomg
		self.ddt = ddt
		self.bad = bad
		self.layer = layer


class AnimDamageState:

    offsets = {'parent': 128, 'numOfAnimStates': 136, 'expNumOfAnimStates': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Bloons.Behaviors.AnimDamageState, numOfAnimStates: System.Int32, expNumOfAnimStates: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.numOfAnimStates = numOfAnimStates
		self.expNumOfAnimStates = expNumOfAnimStates


class BadImmunity:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Bloons.Behaviors.BadImmunity, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class BloonBehaviorAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Camo:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CarryProjectile:

    offsets = {'projectile': 128, 'expProjectile': 136, 'emission': 144, 'expEmission': 152}    
    def __init__(self, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, expProjectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, emission: Assets.Scripts.Unity.Towers.Emissions.Emission, expEmission: Assets.Scripts.Unity.Towers.Emissions.Emission, **kwargs):
        super().__init__(self, **kwargs)
		self.projectile = projectile
		self.expProjectile = expProjectile
		self.emission = emission
		self.expEmission = expEmission


class ChangeGrowType:

    offsets = {'bloon': 128, 'newRegenTo': 136}    
    def __init__(self, bloon: Assets.Scripts.Unity.Bloons.Bloon, newRegenTo: Assets.Scripts.Unity.Bloons.Bloon, **kwargs):
        super().__init__(self, **kwargs)
		self.bloon = bloon
		self.newRegenTo = newRegenTo


class Color:

    offsets = {'parent': 128, 'red': 136, 'expRed': 144, 'green': 152, 'expGreen': 160, 'blue': 168, 'expBlue': 176, 'alpha': 184, 'expAlpha': 192}    
    def __init__(self, parent: Assets.Scripts.Unity.Bloons.Behaviors.Color, red: System.Single, expRed: System.String, green: System.Single, expGreen: System.String, blue: System.Single, expBlue: System.String, alpha: System.Single, expAlpha: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.red = red
		self.expRed = expRed
		self.green = green
		self.expGreen = expGreen
		self.blue = blue
		self.expBlue = expBlue
		self.alpha = alpha
		self.expAlpha = expAlpha


class CreateEffectOnBloonOverTime:

    offsets = {'interval': 128, 'expInterval': 136, 'display': 144, 'expDisplay': 152, 'displayLifespan': 160, 'expDisplayLifespan': 168, 'triggerImmediate': 176, 'expTriggerImmediate': 184, 'rotateEffectWithBloon': 192, 'expRotateEffectWithBloon': 200, 'initialDelay': 208, 'expInitialDelay': 216, 'sound1': 224, 'expSound1': 232, 'sound2': 240, 'expSound2': 248, 'sound3': 256, 'expSound3': 264, 'sound4': 272, 'expSound4': 280, 'sound5': 288, 'expSound5': 296}    
    def __init__(self, interval: System.Single, expInterval: System.String, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, displayLifespan: System.Single, expDisplayLifespan: System.String, triggerImmediate: System.Boolean, expTriggerImmediate: System.String, rotateEffectWithBloon: System.Boolean, expRotateEffectWithBloon: System.String, initialDelay: System.Single, expInitialDelay: System.String, sound1: UnityEngine.AudioSource, expSound1: UnityEngine.AudioSource, sound2: UnityEngine.AudioSource, expSound2: UnityEngine.AudioSource, sound3: UnityEngine.AudioSource, expSound3: UnityEngine.AudioSource, sound4: UnityEngine.AudioSource, expSound4: UnityEngine.AudioSource, sound5: UnityEngine.AudioSource, expSound5: UnityEngine.AudioSource, **kwargs):
        super().__init__(self, **kwargs)
		self.interval = interval
		self.expInterval = expInterval
		self.display = display
		self.expDisplay = expDisplay
		self.displayLifespan = displayLifespan
		self.expDisplayLifespan = expDisplayLifespan
		self.triggerImmediate = triggerImmediate
		self.expTriggerImmediate = expTriggerImmediate
		self.rotateEffectWithBloon = rotateEffectWithBloon
		self.expRotateEffectWithBloon = expRotateEffectWithBloon
		self.initialDelay = initialDelay
		self.expInitialDelay = expInitialDelay
		self.sound1 = sound1
		self.expSound1 = expSound1
		self.sound2 = sound2
		self.expSound2 = expSound2
		self.sound3 = sound3
		self.expSound3 = expSound3
		self.sound4 = sound4
		self.expSound4 = expSound4
		self.sound5 = sound5
		self.expSound5 = expSound5


class CreateEffectOnDepleteProjectile:

    offsets = {'parent': 128, 'effect': 136, 'expEffect': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Bloons.Behaviors.CreateEffectOnDepleteProjectile, effect: Assets.Scripts.Unity.Effects.Effect, expEffect: Assets.Scripts.Unity.Effects.Effect, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.effect = effect
		self.expEffect = expEffect


class CreateSoundOnBloonDegrade:

    offsets = {'parent': 128, 'sound1': 136, 'expSound1': 144, 'sound2': 152, 'expSound2': 160, 'bloonTag': 168, 'expBloonTag': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Bloons.Behaviors.CreateSoundOnBloonDegrade, sound1: UnityEngine.AudioSource, expSound1: UnityEngine.AudioSource, sound2: UnityEngine.AudioSource, expSound2: UnityEngine.AudioSource, bloonTag: System.String, expBloonTag: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.sound1 = sound1
		self.expSound1 = expSound1
		self.sound2 = sound2
		self.expSound2 = expSound2
		self.bloonTag = bloonTag
		self.expBloonTag = expBloonTag


class CreateSoundOnDamageBloon:

    offsets = {'parent': 128, 'sound1': 136, 'expSound1': 144, 'sound2': 152, 'expSound2': 160, 'sound3': 168, 'expSound3': 176, 'sound4': 184, 'expSound4': 192, 'sound5': 200, 'expSound5': 208, 'sound6': 216, 'expSound6': 224, 'sound7': 232, 'expSound7': 240, 'sound8': 248, 'expSound8': 256, 'damageTypes': 264, 'expDamageTypes': 272, 'altDamageTypes': 280, 'expAltDamageTypes': 288}    
    def __init__(self, parent: Assets.Scripts.Unity.Bloons.Behaviors.CreateSoundOnDamageBloon, sound1: UnityEngine.AudioSource, expSound1: UnityEngine.AudioSource, sound2: UnityEngine.AudioSource, expSound2: UnityEngine.AudioSource, sound3: UnityEngine.AudioSource, expSound3: UnityEngine.AudioSource, sound4: UnityEngine.AudioSource, expSound4: UnityEngine.AudioSource, sound5: UnityEngine.AudioSource, expSound5: UnityEngine.AudioSource, sound6: UnityEngine.AudioSource, expSound6: UnityEngine.AudioSource, sound7: UnityEngine.AudioSource, expSound7: UnityEngine.AudioSource, sound8: UnityEngine.AudioSource, expSound8: UnityEngine.AudioSource, damageTypes: System.String, expDamageTypes: System.String, altDamageTypes: System.String, expAltDamageTypes: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.sound1 = sound1
		self.expSound1 = expSound1
		self.sound2 = sound2
		self.expSound2 = expSound2
		self.sound3 = sound3
		self.expSound3 = expSound3
		self.sound4 = sound4
		self.expSound4 = expSound4
		self.sound5 = sound5
		self.expSound5 = expSound5
		self.sound6 = sound6
		self.expSound6 = expSound6
		self.sound7 = sound7
		self.expSound7 = expSound7
		self.sound8 = sound8
		self.expSound8 = expSound8
		self.damageTypes = damageTypes
		self.expDamageTypes = expDamageTypes
		self.altDamageTypes = altDamageTypes
		self.expAltDamageTypes = expAltDamageTypes


class CreateSoundOnSpawnBloon:

    offsets = {'parent': 128, 'sound': 136, 'expSound': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Bloons.Behaviors.CreateSoundOnSpawnBloon, sound: UnityEngine.AudioSource, expSound: UnityEngine.AudioSource, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.sound = sound
		self.expSound = expSound


class DamageOverTime:

    offsets = {'damage': 128, 'expDamage': 136, 'interval': 144, 'expInterval': 152, 'damageType': 160, 'expDamageType': 168, 'ignoreImmunityForBloonTypes': 176, 'expIgnoreImmunityForBloonTypes': 184, 'display': 192, 'expDisplay': 200, 'displayLifespan': 208, 'expDisplayLifespan': 216, 'triggerImmediate': 224, 'expTriggerImmediate': 232, 'rotateEffectWithBloon': 240, 'expRotateEffectWithBloon': 248, 'initialDelay': 256, 'expInitialDelay': 264, 'damageOnDestroy': 272, 'expDamageOnDestroy': 280}    
    def __init__(self, damage: System.Int32, expDamage: System.String, interval: System.Single, expInterval: System.String, damageType: System.String, expDamageType: System.String, ignoreImmunityForBloonTypes: System.String, expIgnoreImmunityForBloonTypes: System.String, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, displayLifespan: System.Single, expDisplayLifespan: System.String, triggerImmediate: System.Boolean, expTriggerImmediate: System.String, rotateEffectWithBloon: System.Boolean, expRotateEffectWithBloon: System.String, initialDelay: System.Single, expInitialDelay: System.String, damageOnDestroy: System.Boolean, expDamageOnDestroy: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.damage = damage
		self.expDamage = expDamage
		self.interval = interval
		self.expInterval = expInterval
		self.damageType = damageType
		self.expDamageType = expDamageType
		self.ignoreImmunityForBloonTypes = ignoreImmunityForBloonTypes
		self.expIgnoreImmunityForBloonTypes = expIgnoreImmunityForBloonTypes
		self.display = display
		self.expDisplay = expDisplay
		self.displayLifespan = displayLifespan
		self.expDisplayLifespan = expDisplayLifespan
		self.triggerImmediate = triggerImmediate
		self.expTriggerImmediate = expTriggerImmediate
		self.rotateEffectWithBloon = rotateEffectWithBloon
		self.expRotateEffectWithBloon = expRotateEffectWithBloon
		self.initialDelay = initialDelay
		self.expInitialDelay = expInitialDelay
		self.damageOnDestroy = damageOnDestroy
		self.expDamageOnDestroy = expDamageOnDestroy


class DamageOverTimeCustom:

    offsets = {'bloonTags': 288, 'expBloonTags': 296, 'multiplier': 304, 'expMultiplier': 312, 'additive': 320, 'expAdditive': 328}    
    def __init__(self, bloonTags: System.String, expBloonTags: System.String, multiplier: System.Single, expMultiplier: System.String, additive: System.Int32, expAdditive: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonTags = bloonTags
		self.expBloonTags = expBloonTags
		self.multiplier = multiplier
		self.expMultiplier = expMultiplier
		self.additive = additive
		self.expAdditive = expAdditive


class DamageOverTimeForTag:

    offsets = {'damage': 128, 'expDamage': 136, 'interval': 144, 'expInterval': 152, 'damageType': 160, 'expDamageType': 168, 'bloonTag': 176, 'expBloonTag': 184}    
    def __init__(self, damage: System.Int32, expDamage: System.String, interval: System.Single, expInterval: System.String, damageType: System.String, expDamageType: System.String, bloonTag: System.String, expBloonTag: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.damage = damage
		self.expDamage = expDamage
		self.interval = interval
		self.expInterval = expInterval
		self.damageType = damageType
		self.expDamageType = expDamageType
		self.bloonTag = bloonTag
		self.expBloonTag = expBloonTag


class DamageState:

    offsets = {'parent': 128, 'display': 136, 'expDisplay': 144, 'healthPercent': 152, 'expHealthPercent': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Bloons.Behaviors.DamageState, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, healthPercent: System.Single, expHealthPercent: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.display = display
		self.expDisplay = expDisplay
		self.healthPercent = healthPercent
		self.expHealthPercent = expHealthPercent


class DamageStateSet:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Bloons.Behaviors.DamageStateSet, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class DestroyOnDegrade:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Bloons.Behaviors.DestroyOnDegrade, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class DistributeCash:

    offsets = {'parent': 128, 'cash': 136, 'expCash': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Bloons.Behaviors.DistributeCash, cash: System.Single, expCash: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.cash = cash
		self.expCash = expCash


class EffectOnPop:

    offsets = {'effect': 128, 'expEffect': 136, 'ignoreSameFrameDegrade': 144, 'expIgnoreSameFrameDegrade': 152}    
    def __init__(self, effect: Assets.Scripts.Unity.Effects.Effect, expEffect: Assets.Scripts.Unity.Effects.Effect, ignoreSameFrameDegrade: System.Boolean, expIgnoreSameFrameDegrade: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.effect = effect
		self.expEffect = expEffect
		self.ignoreSameFrameDegrade = ignoreSameFrameDegrade
		self.expIgnoreSameFrameDegrade = expIgnoreSameFrameDegrade


class EmitOnDestroy:

    offsets = {'projectile': 128, 'expProjectile': 136, 'emission': 144, 'expEmission': 152}    
    def __init__(self, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, expProjectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, emission: Assets.Scripts.Unity.Towers.Emissions.Emission, expEmission: Assets.Scripts.Unity.Towers.Emissions.Emission, **kwargs):
        super().__init__(self, **kwargs)
		self.projectile = projectile
		self.expProjectile = expProjectile
		self.emission = emission
		self.expEmission = expEmission


class EmitOnPop:

    offsets = {'projectile': 128, 'expProjectile': 136, 'emission': 144, 'expEmission': 152, 'ignoreSameFrameDegrade': 160, 'expIgnoreSameFrameDegrade': 168}    
    def __init__(self, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, expProjectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, emission: Assets.Scripts.Unity.Towers.Emissions.Emission, expEmission: Assets.Scripts.Unity.Towers.Emissions.Emission, ignoreSameFrameDegrade: System.Boolean, expIgnoreSameFrameDegrade: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.projectile = projectile
		self.expProjectile = expProjectile
		self.emission = emission
		self.expEmission = expEmission
		self.ignoreSameFrameDegrade = ignoreSameFrameDegrade
		self.expIgnoreSameFrameDegrade = expIgnoreSameFrameDegrade


class Fortified:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class GiveLife:

    offsets = {'parent': 128, 'lifeToGive': 136, 'expLifeToGive': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Bloons.Behaviors.GiveLife, lifeToGive: System.Single, expLifeToGive: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifeToGive = lifeToGive
		self.expLifeToGive = expLifeToGive


class GoldenBloon:

    offsets = {'rewardTextLifeTime': 128, 'expRewardTextLifeTime': 136, 'invulnerableTime': 144, 'expInvulnerableTime': 152, 'cantJumpTime': 160, 'expCantJumpTime': 168, 'speedIncreaseWhenDamaged': 176, 'expSpeedIncreaseWhenDamaged': 184, 'speedIncreaseTime': 192, 'expSpeedIncreaseTime': 200, 'jumpChanceTotal': 208, 'expJumpChanceTotal': 216, 'jumpChanceForward': 224, 'expJumpChanceForward': 232, 'jumpChanceBackward': 240, 'expJumpChanceBackward': 248, 'minJumpDist': 256, 'expMinJumpDist': 264, 'maxJumpDistPercOfTrack': 272, 'expMaxJumpDistPercOfTrack': 280, 'jumpSpeedMultiplier': 288, 'expJumpSpeedMultiplier': 296, 'rewardTextDisplay': 304, 'expRewardTextDisplay': 312, 'damageFX': 320, 'expDamageFX': 328}    
    def __init__(self, rewardTextLifeTime: System.Single, expRewardTextLifeTime: System.String, invulnerableTime: System.Single, expInvulnerableTime: System.String, cantJumpTime: System.Single, expCantJumpTime: System.String, speedIncreaseWhenDamaged: System.Single, expSpeedIncreaseWhenDamaged: System.String, speedIncreaseTime: System.Single, expSpeedIncreaseTime: System.String, jumpChanceTotal: System.Int32, expJumpChanceTotal: System.String, jumpChanceForward: System.Int32, expJumpChanceForward: System.String, jumpChanceBackward: System.Int32, expJumpChanceBackward: System.String, minJumpDist: System.Single, expMinJumpDist: System.String, maxJumpDistPercOfTrack: System.Single, expMaxJumpDistPercOfTrack: System.String, jumpSpeedMultiplier: System.Single, expJumpSpeedMultiplier: System.String, rewardTextDisplay: UnityEngine.GameObject, expRewardTextDisplay: UnityEngine.GameObject, damageFX: Assets.Scripts.Unity.Effects.Effect, expDamageFX: Assets.Scripts.Unity.Effects.Effect, **kwargs):
        super().__init__(self, **kwargs)
		self.rewardTextLifeTime = rewardTextLifeTime
		self.expRewardTextLifeTime = expRewardTextLifeTime
		self.invulnerableTime = invulnerableTime
		self.expInvulnerableTime = expInvulnerableTime
		self.cantJumpTime = cantJumpTime
		self.expCantJumpTime = expCantJumpTime
		self.speedIncreaseWhenDamaged = speedIncreaseWhenDamaged
		self.expSpeedIncreaseWhenDamaged = expSpeedIncreaseWhenDamaged
		self.speedIncreaseTime = speedIncreaseTime
		self.expSpeedIncreaseTime = expSpeedIncreaseTime
		self.jumpChanceTotal = jumpChanceTotal
		self.expJumpChanceTotal = expJumpChanceTotal
		self.jumpChanceForward = jumpChanceForward
		self.expJumpChanceForward = expJumpChanceForward
		self.jumpChanceBackward = jumpChanceBackward
		self.expJumpChanceBackward = expJumpChanceBackward
		self.minJumpDist = minJumpDist
		self.expMinJumpDist = expMinJumpDist
		self.maxJumpDistPercOfTrack = maxJumpDistPercOfTrack
		self.expMaxJumpDistPercOfTrack = expMaxJumpDistPercOfTrack
		self.jumpSpeedMultiplier = jumpSpeedMultiplier
		self.expJumpSpeedMultiplier = expJumpSpeedMultiplier
		self.rewardTextDisplay = rewardTextDisplay
		self.expRewardTextDisplay = expRewardTextDisplay
		self.damageFX = damageFX
		self.expDamageFX = expDamageFX


class Grow:

    offsets = {'parent': 128, 'rate': 136, 'expRate': 144, 'growTo': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Bloons.Behaviors.Grow, rate: System.Single, expRate: System.String, growTo: Assets.Scripts.Unity.Bloons.Bloon, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.rate = rate
		self.expRate = expRate
		self.growTo = growTo


class GrowBlock:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Bloons.Behaviors.GrowBlock, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class HealthPercentTrigger:

    offsets = {'parent': 128, 'repeatFirst': 136, 'expRepeatFirst': 144, 'healthPercent1': 152, 'expHealthPercent1': 160, 'healthPercent2': 168, 'expHealthPercent2': 176, 'healthPercent3': 184, 'expHealthPercent3': 192, 'healthPercent4': 200, 'expHealthPercent4': 208, 'healthPercent5': 216, 'expHealthPercent5': 224, 'healthPercent6': 232, 'expHealthPercent6': 240, 'healthPercent7': 248, 'expHealthPercent7': 256, 'action1': 264, 'expAction1': 272, 'action2': 280, 'expAction2': 288, 'action3': 296, 'expAction3': 304, 'action4': 312, 'expAction4': 320}    
    def __init__(self, parent: Assets.Scripts.Unity.Bloons.Behaviors.HealthPercentTrigger, repeatFirst: System.Boolean, expRepeatFirst: System.String, healthPercent1: System.Single, expHealthPercent1: System.String, healthPercent2: System.Single, expHealthPercent2: System.String, healthPercent3: System.Single, expHealthPercent3: System.String, healthPercent4: System.Single, expHealthPercent4: System.String, healthPercent5: System.Single, expHealthPercent5: System.String, healthPercent6: System.Single, expHealthPercent6: System.String, healthPercent7: System.Single, expHealthPercent7: System.String, action1: Assets.Scripts.Unity.Bloons.Behaviors.BloonBehaviorAction, expAction1: Assets.Scripts.Unity.Bloons.Behaviors.BloonBehaviorAction, action2: Assets.Scripts.Unity.Bloons.Behaviors.BloonBehaviorAction, expAction2: Assets.Scripts.Unity.Bloons.Behaviors.BloonBehaviorAction, action3: Assets.Scripts.Unity.Bloons.Behaviors.BloonBehaviorAction, expAction3: Assets.Scripts.Unity.Bloons.Behaviors.BloonBehaviorAction, action4: Assets.Scripts.Unity.Bloons.Behaviors.BloonBehaviorAction, expAction4: Assets.Scripts.Unity.Bloons.Behaviors.BloonBehaviorAction, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.repeatFirst = repeatFirst
		self.expRepeatFirst = expRepeatFirst
		self.healthPercent1 = healthPercent1
		self.expHealthPercent1 = expHealthPercent1
		self.healthPercent2 = healthPercent2
		self.expHealthPercent2 = expHealthPercent2
		self.healthPercent3 = healthPercent3
		self.expHealthPercent3 = expHealthPercent3
		self.healthPercent4 = healthPercent4
		self.expHealthPercent4 = expHealthPercent4
		self.healthPercent5 = healthPercent5
		self.expHealthPercent5 = expHealthPercent5
		self.healthPercent6 = healthPercent6
		self.expHealthPercent6 = expHealthPercent6
		self.healthPercent7 = healthPercent7
		self.expHealthPercent7 = expHealthPercent7
		self.action1 = action1
		self.expAction1 = expAction1
		self.action2 = action2
		self.expAction2 = expAction2
		self.action3 = action3
		self.expAction3 = expAction3
		self.action4 = action4
		self.expAction4 = expAction4


class Hex:

    offsets = {'damagePercentOfMax': 128, 'expDamagePercentOfMax': 136, 'interval': 144, 'expInterval': 152, 'totalDuration': 160, 'expTotalDuration': 168}    
    def __init__(self, damagePercentOfMax: System.Single, expDamagePercentOfMax: System.String, interval: System.Single, expInterval: System.String, totalDuration: System.Single, expTotalDuration: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.damagePercentOfMax = damagePercentOfMax
		self.expDamagePercentOfMax = expDamagePercentOfMax
		self.interval = interval
		self.expInterval = expInterval
		self.totalDuration = totalDuration
		self.expTotalDuration = expTotalDuration


class IgnoreDmgImmunity:

    offsets = {'parent': 128, 'damageType': 136, 'expDamageType': 144, 'chance': 152, 'expChance': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Bloons.Behaviors.IgnoreDmgImmunity, damageType: System.String, expDamageType: System.String, chance: System.Single, expChance: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.damageType = damageType
		self.expDamageType = expDamageType
		self.chance = chance
		self.expChance = expChance


class IncreaseWorthTextEffect:

    offsets = {'parent': 128, 'lifespan': 136, 'expLifespan': 144, 'displayFullPayout': 152, 'expDisplayFullPayout': 160, 'display': 168, 'expDisplay': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Bloons.Behaviors.IncreaseWorthTextEffect, lifespan: System.Single, expLifespan: System.String, displayFullPayout: System.Boolean, expDisplayFullPayout: System.String, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.displayFullPayout = displayFullPayout
		self.expDisplayFullPayout = expDisplayFullPayout
		self.display = display
		self.expDisplay = expDisplay


class Leak:

    offsets = {'parent': 128, 'damage': 136, 'expDamage': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Bloons.Behaviors.Leak, damage: System.Single, expDamage: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.damage = damage
		self.expDamage = expDamage


class MoabBarrageBloonBehavior:

    offsets = {'damage': 128, 'expDamage': 136, 'initialDelay': 144, 'expInitialDelay': 152, 'interval': 160, 'expInterval': 168, 'damageType': 176, 'expDamageType': 184, 'ignoreImmunityForBloonTypes': 192, 'expIgnoreImmunityForBloonTypes': 200, 'missileDisplay': 208, 'expMissileDisplay': 216, 'splosionDisplay': 224, 'expSplosionDisplay': 232, 'missileDisplayLifespan': 240, 'expMissileDisplayLifespan': 248, 'splosionDisplayLifespan': 256, 'expSplosionDisplayLifespan': 264, 'rotateEffectWithBloon': 272, 'expRotateEffectWithBloon': 280, 'randomDelayMax': 288, 'expRandomDelayMax': 296, 'numOfMissiles': 304, 'expNumOfMissiles': 312, 'sound1': 320, 'expSound1': 328, 'sound2': 336, 'expSound2': 344, 'sound3': 352, 'expSound3': 360, 'sound4': 368, 'expSound4': 376, 'sound5': 384, 'expSound5': 392}    
    def __init__(self, damage: System.Int32, expDamage: System.String, initialDelay: System.Single, expInitialDelay: System.String, interval: System.Single, expInterval: System.String, damageType: System.String, expDamageType: System.String, ignoreImmunityForBloonTypes: System.String, expIgnoreImmunityForBloonTypes: System.String, missileDisplay: UnityEngine.GameObject, expMissileDisplay: UnityEngine.GameObject, splosionDisplay: UnityEngine.GameObject, expSplosionDisplay: UnityEngine.GameObject, missileDisplayLifespan: System.Single, expMissileDisplayLifespan: System.String, splosionDisplayLifespan: System.Single, expSplosionDisplayLifespan: System.String, rotateEffectWithBloon: System.Boolean, expRotateEffectWithBloon: System.String, randomDelayMax: System.Single, expRandomDelayMax: System.String, numOfMissiles: System.Int32, expNumOfMissiles: System.String, sound1: UnityEngine.AudioSource, expSound1: UnityEngine.AudioSource, sound2: UnityEngine.AudioSource, expSound2: UnityEngine.AudioSource, sound3: UnityEngine.AudioSource, expSound3: UnityEngine.AudioSource, sound4: UnityEngine.AudioSource, expSound4: UnityEngine.AudioSource, sound5: UnityEngine.AudioSource, expSound5: UnityEngine.AudioSource, **kwargs):
        super().__init__(self, **kwargs)
		self.damage = damage
		self.expDamage = expDamage
		self.initialDelay = initialDelay
		self.expInitialDelay = expInitialDelay
		self.interval = interval
		self.expInterval = expInterval
		self.damageType = damageType
		self.expDamageType = expDamageType
		self.ignoreImmunityForBloonTypes = ignoreImmunityForBloonTypes
		self.expIgnoreImmunityForBloonTypes = expIgnoreImmunityForBloonTypes
		self.missileDisplay = missileDisplay
		self.expMissileDisplay = expMissileDisplay
		self.splosionDisplay = splosionDisplay
		self.expSplosionDisplay = expSplosionDisplay
		self.missileDisplayLifespan = missileDisplayLifespan
		self.expMissileDisplayLifespan = expMissileDisplayLifespan
		self.splosionDisplayLifespan = splosionDisplayLifespan
		self.expSplosionDisplayLifespan = expSplosionDisplayLifespan
		self.rotateEffectWithBloon = rotateEffectWithBloon
		self.expRotateEffectWithBloon = expRotateEffectWithBloon
		self.randomDelayMax = randomDelayMax
		self.expRandomDelayMax = expRandomDelayMax
		self.numOfMissiles = numOfMissiles
		self.expNumOfMissiles = expNumOfMissiles
		self.sound1 = sound1
		self.expSound1 = expSound1
		self.sound2 = sound2
		self.expSound2 = expSound2
		self.sound3 = sound3
		self.expSound3 = expSound3
		self.sound4 = sound4
		self.expSound4 = expSound4
		self.sound5 = sound5
		self.expSound5 = expSound5


class MoveWithWind:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Bloons.Behaviors.MoveWithWind, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class MutationImunity:

    offsets = {'parent': 128, 'mutationId': 136, 'expMutationId': 144, 'effectScale': 152, 'expEffectScale': 160, 'modifyEffectScale': 168, 'expModifyEffectScale': 176, 'durationScale': 184, 'expDurationScale': 192, 'modifyDurationScale': 200, 'expModifyDurationScale': 208, 'preventMutation': 216, 'expPreventMutation': 224}    
    def __init__(self, parent: Assets.Scripts.Unity.Bloons.Behaviors.MutationImunity, mutationId: System.String, expMutationId: System.String, effectScale: System.Single, expEffectScale: System.String, modifyEffectScale: System.Boolean, expModifyEffectScale: System.String, durationScale: System.Single, expDurationScale: System.String, modifyDurationScale: System.Boolean, expModifyDurationScale: System.String, preventMutation: System.Boolean, expPreventMutation: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.mutationId = mutationId
		self.expMutationId = expMutationId
		self.effectScale = effectScale
		self.expEffectScale = expEffectScale
		self.modifyEffectScale = modifyEffectScale
		self.expModifyEffectScale = expModifyEffectScale
		self.durationScale = durationScale
		self.expDurationScale = expDurationScale
		self.modifyDurationScale = modifyDurationScale
		self.expModifyDurationScale = expModifyDurationScale
		self.preventMutation = preventMutation
		self.expPreventMutation = expPreventMutation


class PlayAnimTriggerAction:

    offsets = {'parent': 128, 'triggerName': 136, 'expTriggerName': 144, 'pauseMovementDuration': 152, 'expPauseMovementDuration': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Bloons.Behaviors.PlayAnimTriggerAction, triggerName: System.String, expTriggerName: System.String, pauseMovementDuration: System.Single, expPauseMovementDuration: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.triggerName = triggerName
		self.expTriggerName = expTriggerName
		self.pauseMovementDuration = pauseMovementDuration
		self.expPauseMovementDuration = expPauseMovementDuration


class PopEffect:

    offsets = {'parent': 128, 'display': 136, 'expDisplay': 144, 'soundEffect1': 152, 'expSoundEffect1': 160, 'soundEffect2': 168, 'expSoundEffect2': 176, 'soundEffect3': 184, 'expSoundEffect3': 192, 'soundEffect4': 200, 'expSoundEffect4': 208, 'soundEffectGroupID': 216, 'expSoundEffectGroupID': 224, 'soundEffectGroupLimit': 232, 'expSoundEffectGroupLimit': 240, 'soundEffectTimeDelay': 248, 'expSoundEffectTimeDelay': 256, 'soundEffectTimeDelayFF': 264, 'expSoundEffectTimeDelayFF': 272}    
    def __init__(self, parent: Assets.Scripts.Unity.Bloons.Behaviors.PopEffect, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, soundEffect1: UnityEngine.GameObject, expSoundEffect1: UnityEngine.GameObject, soundEffect2: UnityEngine.GameObject, expSoundEffect2: UnityEngine.GameObject, soundEffect3: UnityEngine.GameObject, expSoundEffect3: UnityEngine.GameObject, soundEffect4: UnityEngine.GameObject, expSoundEffect4: UnityEngine.GameObject, soundEffectGroupID: System.String, expSoundEffectGroupID: System.String, soundEffectGroupLimit: System.Int32, expSoundEffectGroupLimit: System.String, soundEffectTimeDelay: System.Int32, expSoundEffectTimeDelay: System.String, soundEffectTimeDelayFF: System.Int32, expSoundEffectTimeDelayFF: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.display = display
		self.expDisplay = expDisplay
		self.soundEffect1 = soundEffect1
		self.expSoundEffect1 = expSoundEffect1
		self.soundEffect2 = soundEffect2
		self.expSoundEffect2 = expSoundEffect2
		self.soundEffect3 = soundEffect3
		self.expSoundEffect3 = expSoundEffect3
		self.soundEffect4 = soundEffect4
		self.expSoundEffect4 = expSoundEffect4
		self.soundEffectGroupID = soundEffectGroupID
		self.expSoundEffectGroupID = expSoundEffectGroupID
		self.soundEffectGroupLimit = soundEffectGroupLimit
		self.expSoundEffectGroupLimit = expSoundEffectGroupLimit
		self.soundEffectTimeDelay = soundEffectTimeDelay
		self.expSoundEffectTimeDelay = expSoundEffectTimeDelay
		self.soundEffectTimeDelayFF = soundEffectTimeDelayFF
		self.expSoundEffectTimeDelayFF = expSoundEffectTimeDelayFF


class ProjectileOverTime:

    offsets = {'projectile': 128, 'emission': 136, 'interval': 144, 'expInterval': 152, 'display': 160, 'expDisplay': 168, 'displayLifespan': 176, 'expDisplayLifespan': 184, 'triggerImmediate': 192, 'expTriggerImmediate': 200, 'rotateEffectWithBloon': 208, 'expRotateEffectWithBloon': 216, 'initialDelay': 224, 'expInitialDelay': 232, 'emitOnDestroy': 240, 'expEmitOnDestroy': 248, 'collideWithSelf': 256, 'expCollideWithSelf': 264}    
    def __init__(self, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, emission: Assets.Scripts.Unity.Towers.Emissions.Emission, interval: System.Single, expInterval: System.String, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, displayLifespan: System.Single, expDisplayLifespan: System.String, triggerImmediate: System.Boolean, expTriggerImmediate: System.String, rotateEffectWithBloon: System.Boolean, expRotateEffectWithBloon: System.String, initialDelay: System.Single, expInitialDelay: System.String, emitOnDestroy: System.Boolean, expEmitOnDestroy: System.String, collideWithSelf: System.Boolean, expCollideWithSelf: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.projectile = projectile
		self.emission = emission
		self.interval = interval
		self.expInterval = expInterval
		self.display = display
		self.expDisplay = expDisplay
		self.displayLifespan = displayLifespan
		self.expDisplayLifespan = expDisplayLifespan
		self.triggerImmediate = triggerImmediate
		self.expTriggerImmediate = expTriggerImmediate
		self.rotateEffectWithBloon = rotateEffectWithBloon
		self.expRotateEffectWithBloon = expRotateEffectWithBloon
		self.initialDelay = initialDelay
		self.expInitialDelay = expInitialDelay
		self.emitOnDestroy = emitOnDestroy
		self.expEmitOnDestroy = expEmitOnDestroy
		self.collideWithSelf = collideWithSelf
		self.expCollideWithSelf = expCollideWithSelf


class RecieveDamage:

    offsets = {'parent': 128, 'health': 136, 'expHealth': 144, 'distributeToChildren': 152, 'expDistributeToChildren': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Bloons.Behaviors.RecieveDamage, health: System.Single, expHealth: System.String, distributeToChildren: System.Boolean, expDistributeToChildren: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.health = health
		self.expHealth = expHealth
		self.distributeToChildren = distributeToChildren
		self.expDistributeToChildren = expDistributeToChildren


class SetGrowToOnChildren:

    offsets = {'parent': 128, 'bloonBaseId': 136, 'expBloonBaseId': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Bloons.Behaviors.SetGrowToOnChildren, bloonBaseId: System.String, expBloonBaseId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.bloonBaseId = bloonBaseId
		self.expBloonBaseId = expBloonBaseId


class ShowDamageText:

    offsets = {'parent': 128, 'lifespan': 136, 'expLifespan': 144, 'display': 152, 'expDisplay': 160, 'showText': 168, 'expShowText': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Bloons.Behaviors.ShowDamageText, lifespan: System.Single, expLifespan: System.String, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, showText: System.Boolean, expShowText: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.display = display
		self.expDisplay = expDisplay
		self.showText = showText
		self.expShowText = expShowText


class SpawnBloonsAction:

    offsets = {'parent': 128, 'bloonType': 136, 'expBloonType': 144, 'spawnCount': 152, 'expSpawnCount': 160, 'spawnOverTime': 168, 'expSpawnOverTime': 176, 'spawnDistAhead': 184, 'expSpawnDistAhead': 192, 'spawnTrackMin': 200, 'expSpawnTrackMin': 208, 'spawnTrackMax': 216, 'expSpawnTrackMax': 224, 'animCurveId': 232, 'expAnimCurveId': 240, 'moabAnimCurveId': 248, 'expMoabAnimCurveId': 256, 'animationLength': 264, 'expAnimationLength': 272, 'invulnerableWhileAnimating': 280, 'expInvulnerableWhileAnimating': 288}    
    def __init__(self, parent: Assets.Scripts.Unity.Bloons.Behaviors.SpawnBloonsAction, bloonType: System.String, expBloonType: System.String, spawnCount: System.Int32, expSpawnCount: System.String, spawnOverTime: System.Single, expSpawnOverTime: System.String, spawnDistAhead: System.Single, expSpawnDistAhead: System.String, spawnTrackMin: System.Single, expSpawnTrackMin: System.String, spawnTrackMax: System.Single, expSpawnTrackMax: System.String, animCurveId: System.String, expAnimCurveId: System.String, moabAnimCurveId: System.String, expMoabAnimCurveId: System.String, animationLength: System.Single, expAnimationLength: System.String, invulnerableWhileAnimating: System.Boolean, expInvulnerableWhileAnimating: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.bloonType = bloonType
		self.expBloonType = expBloonType
		self.spawnCount = spawnCount
		self.expSpawnCount = expSpawnCount
		self.spawnOverTime = spawnOverTime
		self.expSpawnOverTime = expSpawnOverTime
		self.spawnDistAhead = spawnDistAhead
		self.expSpawnDistAhead = expSpawnDistAhead
		self.spawnTrackMin = spawnTrackMin
		self.expSpawnTrackMin = expSpawnTrackMin
		self.spawnTrackMax = spawnTrackMax
		self.expSpawnTrackMax = expSpawnTrackMax
		self.animCurveId = animCurveId
		self.expAnimCurveId = expAnimCurveId
		self.moabAnimCurveId = moabAnimCurveId
		self.expMoabAnimCurveId = expMoabAnimCurveId
		self.animationLength = animationLength
		self.expAnimationLength = expAnimationLength
		self.invulnerableWhileAnimating = invulnerableWhileAnimating
		self.expInvulnerableWhileAnimating = expInvulnerableWhileAnimating


class SpawnChildren:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SpawnDeathAnim:

    offsets = {'parent': 128, 'spawnAnimTrigLabel': 136, 'expSpawnAnimTrigLabel': 144, 'spawnAnimLength': 152, 'expSpawnAnimLength': 160, 'deathAnimTrigLabel': 168, 'expDeathAnimTrigLabel': 176, 'deathAnimLength': 184, 'expDeathAnimLength': 192}    
    def __init__(self, parent: Assets.Scripts.Unity.Bloons.Behaviors.SpawnDeathAnim, spawnAnimTrigLabel: System.String, expSpawnAnimTrigLabel: System.String, spawnAnimLength: System.Single, expSpawnAnimLength: System.String, deathAnimTrigLabel: System.String, expDeathAnimTrigLabel: System.String, deathAnimLength: System.Single, expDeathAnimLength: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.spawnAnimTrigLabel = spawnAnimTrigLabel
		self.expSpawnAnimTrigLabel = expSpawnAnimTrigLabel
		self.spawnAnimLength = spawnAnimLength
		self.expSpawnAnimLength = expSpawnAnimLength
		self.deathAnimTrigLabel = deathAnimTrigLabel
		self.expDeathAnimTrigLabel = expDeathAnimTrigLabel
		self.deathAnimLength = deathAnimLength
		self.expDeathAnimLength = expDeathAnimLength


class UnstableConconctionSplash:

    offsets = {'parent': 176, 'moabBloonDmg': 184, 'expMoabBloonDmg': 192, 'bfbBloonDmg': 200, 'expBfbBloonDmg': 208, 'zomgBloonDmg': 216, 'expZomgBloonDmg': 224, 'otherMoabBloonDmg': 232, 'expOtherMoabBloonDmg': 240, 'moabMoabDmg': 248, 'expMoabMoabDmg': 256, 'bfbMoabDmg': 264, 'expBfbMoabDmg': 272, 'zomgMoabDmg': 280, 'expZomgMoabDmg': 288, 'ddtMoabDmg': 296, 'expDdtMoabDmg': 304, 'badMoabDmg': 312, 'expBadMoabDmg': 320, 'bossMoabDmg': 328, 'expBossMoabDmg': 336, 'otherMoabMoabDmg': 344, 'expOtherMoabMoabDmg': 352}    
    def __init__(self, parent: Assets.Scripts.Unity.Bloons.Behaviors.UnstableConconctionSplash, moabBloonDmg: System.Single, expMoabBloonDmg: System.String, bfbBloonDmg: System.Single, expBfbBloonDmg: System.String, zomgBloonDmg: System.Single, expZomgBloonDmg: System.String, otherMoabBloonDmg: System.Single, expOtherMoabBloonDmg: System.String, moabMoabDmg: System.Single, expMoabMoabDmg: System.String, bfbMoabDmg: System.Single, expBfbMoabDmg: System.String, zomgMoabDmg: System.Single, expZomgMoabDmg: System.String, ddtMoabDmg: System.Single, expDdtMoabDmg: System.String, badMoabDmg: System.Single, expBadMoabDmg: System.String, bossMoabDmg: System.Single, expBossMoabDmg: System.String, otherMoabMoabDmg: System.Single, expOtherMoabMoabDmg: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.moabBloonDmg = moabBloonDmg
		self.expMoabBloonDmg = expMoabBloonDmg
		self.bfbBloonDmg = bfbBloonDmg
		self.expBfbBloonDmg = expBfbBloonDmg
		self.zomgBloonDmg = zomgBloonDmg
		self.expZomgBloonDmg = expZomgBloonDmg
		self.otherMoabBloonDmg = otherMoabBloonDmg
		self.expOtherMoabBloonDmg = expOtherMoabBloonDmg
		self.moabMoabDmg = moabMoabDmg
		self.expMoabMoabDmg = expMoabMoabDmg
		self.bfbMoabDmg = bfbMoabDmg
		self.expBfbMoabDmg = expBfbMoabDmg
		self.zomgMoabDmg = zomgMoabDmg
		self.expZomgMoabDmg = expZomgMoabDmg
		self.ddtMoabDmg = ddtMoabDmg
		self.expDdtMoabDmg = expDdtMoabDmg
		self.badMoabDmg = badMoabDmg
		self.expBadMoabDmg = expBadMoabDmg
		self.bossMoabDmg = bossMoabDmg
		self.expBossMoabDmg = expBossMoabDmg
		self.otherMoabMoabDmg = otherMoabMoabDmg
		self.expOtherMoabMoabDmg = expOtherMoabMoabDmg


class AbilityToSimulation:

    offsets = {'model': 16, 'ability': 24, 'tower': 32, 'sim': 40}    
    def __init__(self, model: Assets.Scripts.Models.Towers.Behaviors.Abilities.AbilityModel, ability: Assets.Scripts.Simulation.Towers.Behaviors.Abilities.Ability, tower: System.Int32, sim: Assets.Scripts.Unity.Bridge.UnityToSimulation, **kwargs):
        super().__init__(self, **kwargs)
		self.model = model
		self.ability = ability
		self.tower = tower
		self.sim = sim


class AchievementTask:

    offsets = {'achievementId': 16, 'addProgress': 20, 'setProgress': 24, 'claimed': 28}    
    def __init__(self, achievementId: System.Int32, addProgress: System.Single, setProgress: System.Single, claimed: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.achievementId = achievementId
		self.addProgress = addProgress
		self.setProgress = setProgress
		self.claimed = claimed


class AnalyticsGameSessionInfo:

    offsets = {'playerId': 16, 'towersPlacedByBaseName': 24, 'towersPlacedByName': 32, 'towersPlacedByTowerSet': 40, 'upgradesPurchasedByTier': 48, 'heroUpgradesPurchasedByTier': 56, 'abilitiesActivatedByName': 64, 'namedMonkeyStats': 72, 'paragonsPurchasedByName': 80, 'processedTowerIndex': 88, 'processedTowerSoldIndex': 92, 'processedPowerActivateIndex': 96, 'processedLivesLeakedIndex': 100, 'processedTowerUpgradeIndex': 104, 'processedActivatedAbilities': 108, 'startTime': 112, 'upgradesPurchased': 120, 'towersPlaced': 128, 'towersPopInfo': 136, 'towersSold': 144, 'powersActivated': 152, 'abilitiesActivated': 160, 'livesLeaked': 168, 'totalCashGained': 176, 'totalCashSpent': 180, 'cashEarned': 184, 'ecoEarned': 192, 'instaMonkeysUsed': 200, 'heroesOnScreen': 204, 'nameOfHeroUsed': 208, 'heroExpGained': 216, 'heroLevel': 220, 'timesHeroPlaced': 224, 'timesHeroSold': 228, 'bloonsPopped': 232, 'moabsPopped': 236, 'bfbsPopped': 240, 'zomgsPopped': 244, 'ddtsPopped': 248, 'badsPopped': 252, 'fortifiedPopped': 256, 'purplesPopped': 260, 'camosPopped': 264, 'ceramicsPopped': 268, 'regrowPopped': 272, 'leadPopped': 276, 'bossesPopped': 280, 'thirdLevelHeroAbilityUsed': 284, 'tenthLevelHeroAbilityUsed': 285, 'coopCashSent': 288, 'coopCashRecieved': 296, 'livesLost': 304, 'shieldLost': 308, 'freeplay': 312, 'wonGameRoundTrigger': 313, 'bloonsLeaked': 316, 'monkeyTypeWin': 320, 'gameMode': 328, 'gameType': 336, 'raceId': 344, 'bloonPopsOnPeninsula': 352, 'bloonPopsMasterAlchemist': 356, 'bloonsRevealedByShimmer': 360, 'masterOfLife': 364, 'rainbowBloonsPoppedWithMagic': 368, 'whatDidItCostTowers': 376, 'adoraDarkTempleTransformed': 384, 'axisOfHavok': 385, 'kaliMaa': 386, 'necroBloonsReanimated': 388, 'tier5InstasUsed': 392, 'dartingGunnerPops': 396, 'ddtFortifiedRemoved': 400, 'damageDone': 408, 'towersPlacedCount': 416, 'powersActivatedCount': 420, 'abilitiesActivatedCount': 424, 'mostTowersAtOnce': 428, 'moabTakedownsCount': 432, 'redeployChinookCount': 436, 'roundInstaRewardAwarded': 440}    
    def __init__(self, playerId: System.Int32, towersPlacedByBaseName: System.Collections.Generic.Dictionary<System.String,System.Int32>, towersPlacedByName: System.Collections.Generic.Dictionary<System.String,System.Int32>, towersPlacedByTowerSet: System.Collections.Generic.Dictionary<System.String,System.Int32>, upgradesPurchasedByTier: System.Collections.Generic.Dictionary<System.Int32,System.Int32>, heroUpgradesPurchasedByTier: System.Collections.Generic.Dictionary<System.Int32,System.Int32>, abilitiesActivatedByName: System.Collections.Generic.Dictionary<System.String,System.Int32>, namedMonkeyStats: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Profile.NamedMonkeyStats>, paragonsPurchasedByName: System.Collections.Generic.Dictionary<System.String,System.Int32>, processedTowerIndex: System.Int32, processedTowerSoldIndex: System.Int32, processedPowerActivateIndex: System.Int32, processedLivesLeakedIndex: System.Int32, processedTowerUpgradeIndex: System.Int32, processedActivatedAbilities: System.Int32, startTime: System.Single, upgradesPurchased: Assets.Scripts.Utils.SizedList<Assets.Scripts.Unity.Bridge.AnalyticsGameSessionInfo.TowerUpgradeInfo>, towersPlaced: Assets.Scripts.Utils.SizedList<Assets.Scripts.Unity.Bridge.AnalyticsGameSessionInfo.TowerPlaceInfo>, towersPopInfo: Assets.Scripts.Utils.SizedList<Assets.Scripts.Unity.Bridge.AnalyticsGameSessionInfo.TowerPopInfo>, towersSold: Assets.Scripts.Utils.SizedList<Assets.Scripts.Unity.Bridge.AnalyticsGameSessionInfo.TowerSellInfo>, powersActivated: Assets.Scripts.Utils.SizedList<Assets.Scripts.Unity.Bridge.AnalyticsGameSessionInfo.PowerActivateInfo>, abilitiesActivated: Assets.Scripts.Utils.SizedList<Assets.Scripts.Unity.Bridge.AnalyticsGameSessionInfo.AbilityActivateInfo>, livesLeaked: Assets.Scripts.Utils.SizedList<Assets.Scripts.Unity.Bridge.AnalyticsGameSessionInfo.LifeLeakInfo>, totalCashGained: System.Single, totalCashSpent: System.Single, cashEarned: System.Double, ecoEarned: System.Double, instaMonkeysUsed: System.Int32, heroesOnScreen: System.Int32, nameOfHeroUsed: System.String, heroExpGained: System.Single, heroLevel: System.Int32, timesHeroPlaced: System.Int32, timesHeroSold: System.Int32, bloonsPopped: System.Int32, moabsPopped: System.Int32, bfbsPopped: System.Int32, zomgsPopped: System.Int32, ddtsPopped: System.Int32, badsPopped: System.Int32, fortifiedPopped: System.Int32, purplesPopped: System.Int32, camosPopped: System.Int32, ceramicsPopped: System.Int32, regrowPopped: System.Int32, leadPopped: System.Int32, bossesPopped: System.Int32, thirdLevelHeroAbilityUsed: System.Boolean, tenthLevelHeroAbilityUsed: System.Boolean, coopCashSent: System.Double, coopCashRecieved: System.Double, livesLost: System.Single, shieldLost: System.Single, freeplay: System.Boolean, wonGameRoundTrigger: System.Boolean, bloonsLeaked: System.Int32, monkeyTypeWin: System.String, gameMode: System.String, gameType: System.Int32, raceId: System.String, bloonPopsOnPeninsula: System.Int32, bloonPopsMasterAlchemist: System.Int32, bloonsRevealedByShimmer: System.Int32, masterOfLife: System.Boolean, rainbowBloonsPoppedWithMagic: System.Int32, whatDidItCostTowers: System.Collections.Generic.List<System.String>, adoraDarkTempleTransformed: System.Boolean, axisOfHavok: System.Boolean, kaliMaa: System.Boolean, necroBloonsReanimated: System.Single, tier5InstasUsed: System.Int32, dartingGunnerPops: System.Int32, ddtFortifiedRemoved: System.Int32, damageDone: System.Int64, towersPlacedCount: System.Int32, powersActivatedCount: System.Int32, abilitiesActivatedCount: System.Int32, mostTowersAtOnce: System.Int32, moabTakedownsCount: System.Int32, redeployChinookCount: System.Int32, roundInstaRewardAwarded: System.Collections.Generic.Dictionary<System.Int32,System.Boolean>, **kwargs):
        super().__init__(self, **kwargs)
		self.playerId = playerId
		self.towersPlacedByBaseName = towersPlacedByBaseName
		self.towersPlacedByName = towersPlacedByName
		self.towersPlacedByTowerSet = towersPlacedByTowerSet
		self.upgradesPurchasedByTier = upgradesPurchasedByTier
		self.heroUpgradesPurchasedByTier = heroUpgradesPurchasedByTier
		self.abilitiesActivatedByName = abilitiesActivatedByName
		self.namedMonkeyStats = namedMonkeyStats
		self.paragonsPurchasedByName = paragonsPurchasedByName
		self.processedTowerIndex = processedTowerIndex
		self.processedTowerSoldIndex = processedTowerSoldIndex
		self.processedPowerActivateIndex = processedPowerActivateIndex
		self.processedLivesLeakedIndex = processedLivesLeakedIndex
		self.processedTowerUpgradeIndex = processedTowerUpgradeIndex
		self.processedActivatedAbilities = processedActivatedAbilities
		self.startTime = startTime
		self.upgradesPurchased = upgradesPurchased
		self.towersPlaced = towersPlaced
		self.towersPopInfo = towersPopInfo
		self.towersSold = towersSold
		self.powersActivated = powersActivated
		self.abilitiesActivated = abilitiesActivated
		self.livesLeaked = livesLeaked
		self.totalCashGained = totalCashGained
		self.totalCashSpent = totalCashSpent
		self.cashEarned = cashEarned
		self.ecoEarned = ecoEarned
		self.instaMonkeysUsed = instaMonkeysUsed
		self.heroesOnScreen = heroesOnScreen
		self.nameOfHeroUsed = nameOfHeroUsed
		self.heroExpGained = heroExpGained
		self.heroLevel = heroLevel
		self.timesHeroPlaced = timesHeroPlaced
		self.timesHeroSold = timesHeroSold
		self.bloonsPopped = bloonsPopped
		self.moabsPopped = moabsPopped
		self.bfbsPopped = bfbsPopped
		self.zomgsPopped = zomgsPopped
		self.ddtsPopped = ddtsPopped
		self.badsPopped = badsPopped
		self.fortifiedPopped = fortifiedPopped
		self.purplesPopped = purplesPopped
		self.camosPopped = camosPopped
		self.ceramicsPopped = ceramicsPopped
		self.regrowPopped = regrowPopped
		self.leadPopped = leadPopped
		self.bossesPopped = bossesPopped
		self.thirdLevelHeroAbilityUsed = thirdLevelHeroAbilityUsed
		self.tenthLevelHeroAbilityUsed = tenthLevelHeroAbilityUsed
		self.coopCashSent = coopCashSent
		self.coopCashRecieved = coopCashRecieved
		self.livesLost = livesLost
		self.shieldLost = shieldLost
		self.freeplay = freeplay
		self.wonGameRoundTrigger = wonGameRoundTrigger
		self.bloonsLeaked = bloonsLeaked
		self.monkeyTypeWin = monkeyTypeWin
		self.gameMode = gameMode
		self.gameType = gameType
		self.raceId = raceId
		self.bloonPopsOnPeninsula = bloonPopsOnPeninsula
		self.bloonPopsMasterAlchemist = bloonPopsMasterAlchemist
		self.bloonsRevealedByShimmer = bloonsRevealedByShimmer
		self.masterOfLife = masterOfLife
		self.rainbowBloonsPoppedWithMagic = rainbowBloonsPoppedWithMagic
		self.whatDidItCostTowers = whatDidItCostTowers
		self.adoraDarkTempleTransformed = adoraDarkTempleTransformed
		self.axisOfHavok = axisOfHavok
		self.kaliMaa = kaliMaa
		self.necroBloonsReanimated = necroBloonsReanimated
		self.tier5InstasUsed = tier5InstasUsed
		self.dartingGunnerPops = dartingGunnerPops
		self.ddtFortifiedRemoved = ddtFortifiedRemoved
		self.damageDone = damageDone
		self.towersPlacedCount = towersPlacedCount
		self.powersActivatedCount = powersActivatedCount
		self.abilitiesActivatedCount = abilitiesActivatedCount
		self.mostTowersAtOnce = mostTowersAtOnce
		self.moabTakedownsCount = moabTakedownsCount
		self.redeployChinookCount = redeployChinookCount
		self.roundInstaRewardAwarded = roundInstaRewardAwarded


class AudioTask:

    offsets = {'assetId': 16, 'play': 24, 'unique': 25, 'stop': 26, 'loop': 27, 'pause': 28, 'uniqueId': 32, 'volume': 40, 'pitch': 44, 'fadeTime': 48, 'delay': 52, 'groupId': 56, 'groupLimit': 64, 'audioType': 68, 'isFree': 72, 'pauseState': 73}    
    def __init__(self, assetId: System.String, play: System.Boolean, unique: System.Boolean, stop: System.Boolean, loop: System.Boolean, pause: System.Boolean, uniqueId: System.String, volume: System.Single, pitch: System.Single, fadeTime: System.Single, delay: System.Single, groupId: System.String, groupLimit: System.Int32, audioType: Assets.Scripts.Unity.Bridge.AudioType, isFree: System.Boolean, pauseState: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.assetId = assetId
		self.play = play
		self.unique = unique
		self.stop = stop
		self.loop = loop
		self.pause = pause
		self.uniqueId = uniqueId
		self.volume = volume
		self.pitch = pitch
		self.fadeTime = fadeTime
		self.delay = delay
		self.groupId = groupId
		self.groupLimit = groupLimit
		self.audioType = audioType
		self.isFree = isFree
		self.pauseState = pauseState


class AudioType:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class BloonToSimulation:

    offsets = {'id': 16, 'position': 20, 'sim': 32, '<Def>k__BackingField': 40}    
    def __init__(self, id: System.Int32, position: UnityEngine.Vector3, sim: Assets.Scripts.Unity.Bridge.UnityToSimulation, <Def>k__BackingField: Assets.Scripts.Models.Bloons.BloonModel, **kwargs):
        super().__init__(self, **kwargs)
		self.id = id
		self.position = position
		self.sim = sim
		self.<Def>k__BackingField = <Def>k__BackingField


class BuffQuery:

    offsets = {'buffIndicator': 16, 'tower': 24, 'canEventuallyBuff': 32, 'canCurrentlyBuff': 33, 'availableBuffCount': 36, 'unavailableBuffCount': 40}    
    def __init__(self, buffIndicator: Assets.Scripts.Models.GenericBehaviors.BuffIndicatorModel, tower: Assets.Scripts.Simulation.Towers.Tower, canEventuallyBuff: System.Boolean, canCurrentlyBuff: System.Boolean, availableBuffCount: System.Int32, unavailableBuffCount: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.buffIndicator = buffIndicator
		self.tower = tower
		self.canEventuallyBuff = canEventuallyBuff
		self.canCurrentlyBuff = canCurrentlyBuff
		self.availableBuffCount = availableBuffCount
		self.unavailableBuffCount = unavailableBuffCount


class GameType:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class HeroToSimulation:

    offsets = {'sim': 16, 'tower': 24, 'hero': 32}    
    def __init__(self, sim: Assets.Scripts.Unity.Bridge.UnityToSimulation, tower: Assets.Scripts.Simulation.Towers.Tower, hero: Assets.Scripts.Simulation.Towers.Behaviors.Hero, **kwargs):
        super().__init__(self, **kwargs)
		self.sim = sim
		self.tower = tower
		self.hero = hero


class MapGizmoToSimulation:

    offsets = {'sim': 16, 'gizmo': 24}    
    def __init__(self, sim: Assets.Scripts.Unity.Bridge.UnityToSimulation, gizmo: Assets.Scripts.Simulation.Map.Gizmos.MapGizmo, **kwargs):
        super().__init__(self, **kwargs)
		self.sim = sim
		self.gizmo = gizmo


class MapInteractable:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class NetworkedUnityToSimulation:
	bluePopupTimeAtLoad: System.TimeSpan
    offsets = {'bluePopupTimeAtLoad': 0, 'bluePopupTimeInGame': 8, 'timeScaleMin': 264, 'timeScaleMax': 268, 'timeScaleThresholdToStart': 272, 'timeScaleThresholdToStopAsMultiplierOfStart': 276, 'timeScaleTargetRatio': 280, 'timeScaleChangePerSecond': 284, 'cursorUpdateInterval': 288, 'syncCheckInterval': 292, 'allowResync': 296, 'allowPreStateLoadDesyncRecovery': 297, 'timeScaleDeclareSampleRange': 300, 'timeScaleDeclareThresholdRatio': 304, 'timeScaleDeclareReductionMultiplier': 308, 'timeScaleDeclareRecoveryThresholdRatio': 312, 'timeScaleDeclareRecoveryMultiplier': 316, 'self': 320, 'removedPeers': 328, 'connection': 336, 'inGameData': 344, 'Peers': 488, 'timeToDropBluePopupTime': 496, 'desyncChecks': 504, 'nextActionId': 512, 'actions': 520, 'timeSinceLastSignoff': 528, 'isBooted': 532, 'lastCursorTime': 536, 'lastCursorActive': 540, 'lastIgnoreCursor': 541, 'isOutOfSync': 542, 'saveSnapshotState': 544, 'isTimeScaleActive': 552, 'actualTimeScale': 556, 'declaredNetworkScale': 560, 'allowContinueOrRestart': 564, 'allowFreeplay': 565, 'InputDelay': 568, 'allowTimeScaleAndActions': 572, 'replay': 576, 'autoStartBlockedThisRound': 584, 'sumOfCashSent': 588, 'totalTimesCashSent': 592, 'totalTimesCashReceived': 596, 'sumOfCashReceieved': 600, 'simSpeedInfoMessage': 608, 'simuationSamples': 616, 'simuationSamplesForDeclaredTiming': 624, 'startedSimulationSamplingAt': 632, 'declaredTimeScaleSetAt': 636, 'lastCursor': 640, 'nextCallbackID': 648, 'callbacks': 656}    
    def __init__(self, bluePopupTimeAtLoad: System.TimeSpan, bluePopupTimeInGame: System.TimeSpan, timeScaleMin: System.Single, timeScaleMax: System.Single, timeScaleThresholdToStart: System.Single, timeScaleThresholdToStopAsMultiplierOfStart: System.Single, timeScaleTargetRatio: System.Single, timeScaleChangePerSecond: System.Single, cursorUpdateInterval: System.Single, syncCheckInterval: System.Single, allowResync: System.Boolean, allowPreStateLoadDesyncRecovery: System.Boolean, timeScaleDeclareSampleRange: System.Single, timeScaleDeclareThresholdRatio: System.Single, timeScaleDeclareReductionMultiplier: System.Single, timeScaleDeclareRecoveryThresholdRatio: System.Single, timeScaleDeclareRecoveryMultiplier: System.Single, self: Assets.Scripts.Unity.Bridge.NetworkedUnityToSimulation.Peer, removedPeers: System.Collections.Generic.List<Assets.Scripts.Unity.Bridge.NetworkedUnityToSimulation.Peer>, connection: Assets.Scripts.Unity.Network.Btd6CoopGame, inGameData: Assets.Scripts.Utils.Helpers.InGameData, Peers: System.Collections.Generic.Dictionary<System.Byte,Assets.Scripts.Unity.Bridge.NetworkedUnityToSimulation.Peer>, timeToDropBluePopupTime: System.DateTime, desyncChecks: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Unity.Bridge.NetworkedUnityToSimulation.DesyncCheck>, nextActionId: System.Int32, actions: System.Collections.Generic.List<Assets.Scripts.Unity.Bridge.NetworkedUnityToSimulation.Action>, timeSinceLastSignoff: System.Single, isBooted: System.Boolean, lastCursorTime: System.Single, lastCursorActive: System.Boolean, lastIgnoreCursor: System.Boolean, isOutOfSync: System.Boolean, saveSnapshotState: Assets.Scripts.Unity.Bridge.NetworkedUnityToSimulation.TakeSaveSnapshotState, isTimeScaleActive: System.Boolean, actualTimeScale: System.Single, declaredNetworkScale: System.Single, allowContinueOrRestart: System.Boolean, allowFreeplay: System.Boolean, InputDelay: System.Single, allowTimeScaleAndActions: System.Boolean, replay: Assets.Scripts.Unity.Network.Replay, autoStartBlockedThisRound: System.Boolean, sumOfCashSent: System.Single, totalTimesCashSent: System.Int32, totalTimesCashReceived: System.Int32, sumOfCashReceieved: System.Single, simSpeedInfoMessage: System.String, simuationSamples: System.Collections.Generic.List<System.Single>, simuationSamplesForDeclaredTiming: System.Collections.Generic.List<System.Single>, startedSimulationSamplingAt: System.Single, declaredTimeScaleSetAt: System.Single, lastCursor: UnityEngine.Vector2, nextCallbackID: System.Int32, callbacks: System.Collections.Generic.Dictionary<System.Int32,System.Action<System.Boolean>>, **kwargs):
        super().__init__(self, **kwargs)
		self.bluePopupTimeAtLoad = bluePopupTimeAtLoad
		self.bluePopupTimeInGame = bluePopupTimeInGame
		self.timeScaleMin = timeScaleMin
		self.timeScaleMax = timeScaleMax
		self.timeScaleThresholdToStart = timeScaleThresholdToStart
		self.timeScaleThresholdToStopAsMultiplierOfStart = timeScaleThresholdToStopAsMultiplierOfStart
		self.timeScaleTargetRatio = timeScaleTargetRatio
		self.timeScaleChangePerSecond = timeScaleChangePerSecond
		self.cursorUpdateInterval = cursorUpdateInterval
		self.syncCheckInterval = syncCheckInterval
		self.allowResync = allowResync
		self.allowPreStateLoadDesyncRecovery = allowPreStateLoadDesyncRecovery
		self.timeScaleDeclareSampleRange = timeScaleDeclareSampleRange
		self.timeScaleDeclareThresholdRatio = timeScaleDeclareThresholdRatio
		self.timeScaleDeclareReductionMultiplier = timeScaleDeclareReductionMultiplier
		self.timeScaleDeclareRecoveryThresholdRatio = timeScaleDeclareRecoveryThresholdRatio
		self.timeScaleDeclareRecoveryMultiplier = timeScaleDeclareRecoveryMultiplier
		self.self = self
		self.removedPeers = removedPeers
		self.connection = connection
		self.inGameData = inGameData
		self.Peers = Peers
		self.timeToDropBluePopupTime = timeToDropBluePopupTime
		self.desyncChecks = desyncChecks
		self.nextActionId = nextActionId
		self.actions = actions
		self.timeSinceLastSignoff = timeSinceLastSignoff
		self.isBooted = isBooted
		self.lastCursorTime = lastCursorTime
		self.lastCursorActive = lastCursorActive
		self.lastIgnoreCursor = lastIgnoreCursor
		self.isOutOfSync = isOutOfSync
		self.saveSnapshotState = saveSnapshotState
		self.isTimeScaleActive = isTimeScaleActive
		self.actualTimeScale = actualTimeScale
		self.declaredNetworkScale = declaredNetworkScale
		self.allowContinueOrRestart = allowContinueOrRestart
		self.allowFreeplay = allowFreeplay
		self.InputDelay = InputDelay
		self.allowTimeScaleAndActions = allowTimeScaleAndActions
		self.replay = replay
		self.autoStartBlockedThisRound = autoStartBlockedThisRound
		self.sumOfCashSent = sumOfCashSent
		self.totalTimesCashSent = totalTimesCashSent
		self.totalTimesCashReceived = totalTimesCashReceived
		self.sumOfCashReceieved = sumOfCashReceieved
		self.simSpeedInfoMessage = simSpeedInfoMessage
		self.simuationSamples = simuationSamples
		self.simuationSamplesForDeclaredTiming = simuationSamplesForDeclaredTiming
		self.startedSimulationSamplingAt = startedSimulationSamplingAt
		self.declaredTimeScaleSetAt = declaredTimeScaleSetAt
		self.lastCursor = lastCursor
		self.nextCallbackID = nextCallbackID
		self.callbacks = callbacks


class PlacementQuery:

    offsets = {'position': 16, 'rotation': 28, 'meshes': 32, 'positionValid': 40, 'coopZonePlaceValid': 41, 'supportBuffs': 48}    
    def __init__(self, position: Assets.Scripts.Simulation.SMath.Vector3, rotation: System.Single, meshes: System.Collections.Generic.List<Assets.Scripts.Simulation.Display.Mesh>, positionValid: System.Boolean, coopZonePlaceValid: System.Boolean, supportBuffs: System.Collections.Generic.List<Assets.Scripts.Unity.Bridge.BuffQuery>, **kwargs):
        super().__init__(self, **kwargs)
		self.position = position
		self.rotation = rotation
		self.meshes = meshes
		self.positionValid = positionValid
		self.coopZonePlaceValid = coopZonePlaceValid
		self.supportBuffs = supportBuffs


class RemovableToSimulation:

    offsets = {'model': 16, 'removable': 24, 'sim': 32, 'preFormatedCostTxt': 40}    
    def __init__(self, model: Assets.Scripts.Models.Map.RemoveableModel, removable: Assets.Scripts.Simulation.Track.Removeable, sim: Assets.Scripts.Unity.Bridge.UnityToSimulation, preFormatedCostTxt: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.model = model
		self.removable = removable
		self.sim = sim
		self.preFormatedCostTxt = preFormatedCostTxt


class Selectable:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TowerToSimulation:

    offsets = {'sim': 16, 'tower': 24, 'Id': 32, 'hero': 40, 'destroyed': 48, 'OnDestroyed': 56, 'OnSelectionDisabled': 64, 'result': 72, 'subTowerModels': 80}    
    def __init__(self, sim: Assets.Scripts.Unity.Bridge.UnityToSimulation, tower: Assets.Scripts.Simulation.Towers.Tower, Id: System.Int32, hero: Assets.Scripts.Unity.Bridge.HeroToSimulation, destroyed: System.Boolean, OnDestroyed: System.Action, OnSelectionDisabled: System.Action, result: System.Collections.Generic.List<Assets.Scripts.Unity.Bridge.AbilityToSimulation>, subTowerModels: System.Collections.Generic.List<Assets.Scripts.Models.Towers.TowerModel>, **kwargs):
        super().__init__(self, **kwargs)
		self.sim = sim
		self.tower = tower
		self.Id = Id
		self.hero = hero
		self.destroyed = destroyed
		self.OnDestroyed = OnDestroyed
		self.OnSelectionDisabled = OnSelectionDisabled
		self.result = result
		self.subTowerModels = subTowerModels


class UnityToSimulation:

    offsets = {'simulation': 16, 'OnVictory': 24, 'OnEarlyRoundEnd': 32, 'OnRoundEnd': 40, 'OnLateRoundEnd': 48, 'OnRoundStart': 56, 'OnTowerCreated': 64, 'OnTowerSold': 72, 'OnTowerDestroyed': 80, 'OnPostTowerDestroyed': 88, 'OnTowerUpgraded': 96, 'OnTargetTypeChanged': 104, 'OnTowerXpUpdated': 112, 'OnCashChanged': 120, 'OnAbilitiesChanged': 128, 'OnCustomUIChanged': 136, 'OnTowerTransformed': 144, 'OnTowerRangeTransformed': 152, 'OnStartRaceRound': 160, 'OnTowerInventoryChanged': 168, 'OnUpgradePricesChanged': 176, 'OnPrimeCustomAbilityInput': 184, 'OnReleaseTower': 192, 'OnThriveStatusChanged': 200, 'stepTime': 208, 'ttss': 216, 'debugPerformance': 224, 'simCount': 228, 'bloonColours': 232, 'player': 240, 'BossSpawnedEvent': 248, 'BossDefeatedEvent': 256}    
    def __init__(self, simulation: Assets.Scripts.Simulation.Simulation, OnVictory: System.Action, OnEarlyRoundEnd: System.Action, OnRoundEnd: System.Action, OnLateRoundEnd: System.Action<System.Int32,System.Int32>, OnRoundStart: System.Action<System.Int32>, OnTowerCreated: System.Action<Assets.Scripts.Unity.Bridge.TowerToSimulation>, OnTowerSold: System.Action<Assets.Scripts.Unity.Bridge.TowerToSimulation>, OnTowerDestroyed: System.Action<Assets.Scripts.Unity.Bridge.TowerToSimulation>, OnPostTowerDestroyed: System.Action, OnTowerUpgraded: System.Action<Assets.Scripts.Unity.Bridge.TowerToSimulation>, OnTargetTypeChanged: System.Action<Assets.Scripts.Unity.Bridge.TowerToSimulation,Assets.Scripts.Models.Towers.TargetType>, OnTowerXpUpdated: System.Action<Assets.Scripts.Unity.Bridge.TowerToSimulation>, OnCashChanged: System.Action, OnAbilitiesChanged: System.Action, OnCustomUIChanged: System.Action<Assets.Scripts.Unity.Bridge.TowerToSimulation>, OnTowerTransformed: System.Action, OnTowerRangeTransformed: System.Action, OnStartRaceRound: System.Action, OnTowerInventoryChanged: System.Action, OnUpgradePricesChanged: System.Action<Assets.Scripts.Unity.Bridge.TowerToSimulation>, OnPrimeCustomAbilityInput: System.Action<Assets.Scripts.Unity.Bridge.AbilityToSimulation,System.String>, OnReleaseTower: System.Action<System.String>, OnThriveStatusChanged: System.Action<System.Boolean>, stepTime: Assets.Scripts.Utils.AverageTime, ttss: System.Collections.Generic.List<Assets.Scripts.Unity.Bridge.TowerToSimulation>, debugPerformance: System.Boolean, simCount: System.Int32, bloonColours: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Simulation.SMath.Color>, player: Assets.Scripts.Models.PlayerInfo, BossSpawnedEvent: System.Action, BossDefeatedEvent: System.Action<System.Int32>, **kwargs):
        super().__init__(self, **kwargs)
		self.simulation = simulation
		self.OnVictory = OnVictory
		self.OnEarlyRoundEnd = OnEarlyRoundEnd
		self.OnRoundEnd = OnRoundEnd
		self.OnLateRoundEnd = OnLateRoundEnd
		self.OnRoundStart = OnRoundStart
		self.OnTowerCreated = OnTowerCreated
		self.OnTowerSold = OnTowerSold
		self.OnTowerDestroyed = OnTowerDestroyed
		self.OnPostTowerDestroyed = OnPostTowerDestroyed
		self.OnTowerUpgraded = OnTowerUpgraded
		self.OnTargetTypeChanged = OnTargetTypeChanged
		self.OnTowerXpUpdated = OnTowerXpUpdated
		self.OnCashChanged = OnCashChanged
		self.OnAbilitiesChanged = OnAbilitiesChanged
		self.OnCustomUIChanged = OnCustomUIChanged
		self.OnTowerTransformed = OnTowerTransformed
		self.OnTowerRangeTransformed = OnTowerRangeTransformed
		self.OnStartRaceRound = OnStartRaceRound
		self.OnTowerInventoryChanged = OnTowerInventoryChanged
		self.OnUpgradePricesChanged = OnUpgradePricesChanged
		self.OnPrimeCustomAbilityInput = OnPrimeCustomAbilityInput
		self.OnReleaseTower = OnReleaseTower
		self.OnThriveStatusChanged = OnThriveStatusChanged
		self.stepTime = stepTime
		self.ttss = ttss
		self.debugPerformance = debugPerformance
		self.simCount = simCount
		self.bloonColours = bloonColours
		self.player = player
		self.BossSpawnedEvent = BossSpawnedEvent
		self.BossDefeatedEvent = BossDefeatedEvent


class Xp:

    offsets = {'account': 16, 'towers': 24}    
    def __init__(self, account: System.Single, towers: System.Collections.Generic.Dictionary<System.String,System.Single>, **kwargs):
        super().__init__(self, **kwargs)
		self.account = account
		self.towers = towers


class CascadeProxyAnchor:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CascadingBool:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CascadingExpression<T>:

    offsets = {'expression': 0, 'sourceVariables': 0, 'expansions': 0, 'isValid': 0, 'val': 0, 'substitutedExpression': 0, 'onChanged': 0}    
    def __init__(self, expression: System.String, sourceVariables: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Utils.Cache<Assets.Scripts.Unity.Cascade.GenericCascadingExpression>>, expansions: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Utils.Cache<Assets.Scripts.Unity.Cascade.GenericCascadingExpression>>, isValid: System.Boolean, val: Assets.Scripts.Utils.Optional<T>, substitutedExpression: System.String, onChanged: System.Action, **kwargs):
        super().__init__(self, **kwargs)
		self.expression = expression
		self.sourceVariables = sourceVariables
		self.expansions = expansions
		self.isValid = isValid
		self.val = val
		self.substitutedExpression = substitutedExpression
		self.onChanged = onChanged


class CascadingFloat:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CascadingInt:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CascadingItem:
	legacyExpressionPrefix: System.String
    offsets = {'legacyExpressionPrefix': 0, 'parentFieldName': 8, 'id': 24, 'heirarchyParent': 32, 'tmpExpressions': 40, 'tmpObjects': 48, 'children': 56, 'expressionsInitialised': 64, 'readyingEditView': 65, 'parent': 72, '_base': 80, 'serielizedFields': 88, 'expressionlessFields': 96, 'expressions': 104, 'objects': 112}    
    def __init__(self, legacyExpressionPrefix: System.String, parentFieldName: System.String, id: System.String, heirarchyParent: UnityEngine.GameObject, tmpExpressions: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Unity.Cascade.CascadingItem.ExpressionInfo>, tmpObjects: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Unity.Cascade.CascadingItem.ObjectReferenceInfo>, children: Assets.Scripts.Utils.LockList<Assets.Scripts.Unity.Cascade.CascadingItem>, expressionsInitialised: System.Boolean, readyingEditView: System.Boolean, parent: Assets.Scripts.Utils.Cache<Assets.Scripts.Unity.Cascade.CascadingItem>, _base: Assets.Scripts.Utils.Cache<Assets.Scripts.Unity.Cascade.CascadingItem>, serielizedFields: Assets.Scripts.Utils.Cache<System.Collections.Generic.IEnumerable<System.Reflection.FieldInfo>>, expressionlessFields: Assets.Scripts.Utils.Cache<System.Collections.Generic.IEnumerable<System.Reflection.FieldInfo>>, expressions: Assets.Scripts.Utils.Cache<System.Collections.Generic.IEnumerable<Assets.Scripts.Unity.Cascade.CascadingItem.ExpressionInfo>>, objects: Assets.Scripts.Utils.Cache<System.Collections.Generic.IEnumerable<Assets.Scripts.Unity.Cascade.CascadingItem.ObjectReferenceInfo>>, **kwargs):
        super().__init__(self, **kwargs)
		self.legacyExpressionPrefix = legacyExpressionPrefix
		self.parentFieldName = parentFieldName
		self.id = id
		self.heirarchyParent = heirarchyParent
		self.tmpExpressions = tmpExpressions
		self.tmpObjects = tmpObjects
		self.children = children
		self.expressionsInitialised = expressionsInitialised
		self.readyingEditView = readyingEditView
		self.parent = parent
		self._base = _base
		self.serielizedFields = serielizedFields
		self.expressionlessFields = expressionlessFields
		self.expressions = expressions
		self.objects = objects


class CascadingItemProxy:

    offsets = {'proxy': 120}    
    def __init__(self, proxy: Assets.Scripts.Utils.Cache<Assets.Scripts.Unity.Cascade.CascadingItemProxy.ProxyPath>, **kwargs):
        super().__init__(self, **kwargs)
		self.proxy = proxy


class CascadingString:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class GenericCascadingExpression:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class GenericObjectReference:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ObjectReference<T>:

    offsets = {'parent': 0, 'val': 0, 'OnSet': 0}    
    def __init__(self, parent: Assets.Scripts.Unity.Cascade.ObjectReference<T>, val: T, OnSet: System.Action<UnityEngine.Object>, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.val = val
		self.OnSet = OnSet


class FloatVariable:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class FloatVariableBloon:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class FloatVariableRank:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class GenericVariable:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ModVariables:

    offsets = {'lastFrom': 24, 'from': 32}    
    def __init__(self, lastFrom: UnityEngine.GameObject, from: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.lastFrom = lastFrom
		self.from = from


class StringVariable:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class StringVariableBloon:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Variable<T>:

    offsets = {'attatchedTo': 0, 'expValue': 0, 'value': 0}    
    def __init__(self, attatchedTo: System.Collections.Generic.List<Assets.Scripts.Unity.Cascade.CascadingItem>, expValue: System.String, value: T, **kwargs):
        super().__init__(self, **kwargs)
		self.attatchedTo = attatchedTo
		self.expValue = expValue
		self.value = value


class CollectionEventCardItem:

    offsets = {'button': 24, 'image': 32, 'towerText': 40, 'tierText': 48}    
    def __init__(self, button: UnityEngine.UI.Button, image: UnityEngine.UI.Image, towerText: TMPro.TMP_Text, tierText: TMPro.TMP_Text, **kwargs):
        super().__init__(self, **kwargs)
		self.button = button
		self.image = image
		self.towerText = towerText
		self.tierText = tierText


class CollectionEventDataHelper:
	_instance: Assets.Scripts.Unity.CollectionEvent.CollectionEventDataHelper
    offsets = {'_instance': 0, 'from': 8, 'activeEvent': 32, 'previousEvent': 40, 'collection': 48, 'collectionEventProfileData': 56, 'seededRandom': 72, 'preferredInstaType': 80, 'preferredInstaIndex': 88, 'theme': 92, 'lootSets': 96}    
    def __init__(self, _instance: Assets.Scripts.Unity.CollectionEvent.CollectionEventDataHelper, from: System.String, activeEvent: Assets.Scripts.Models.ServerEvents.CollectablesEvent, previousEvent: Assets.Scripts.Models.ServerEvents.CollectablesEvent, collection: Assets.Scripts.Models.ServerEvents.Collection, collectionEventProfileData: Assets.Scripts.Models.Profile.CollectionEventDataModel, seededRandom: Assets.Scripts.Utils.SeededRandom, preferredInstaType: System.String, preferredInstaIndex: System.Int32, theme: Assets.Scripts.Unity.CollectionEvent.CollectionEventDataHelper.ThemeType, lootSets: System.Collections.Generic.List<Assets.Scripts.Models.Store.LootSet>, **kwargs):
        super().__init__(self, **kwargs)
		self._instance = _instance
		self.from = from
		self.activeEvent = activeEvent
		self.previousEvent = previousEvent
		self.collection = collection
		self.collectionEventProfileData = collectionEventProfileData
		self.seededRandom = seededRandom
		self.preferredInstaType = preferredInstaType
		self.preferredInstaIndex = preferredInstaIndex
		self.theme = theme
		self.lootSets = lootSets


class CollectionEventFeaturedInstaIcon:

    offsets = {'iconImage': 24, 'iconTextField': 32, 'selected': 40, 'towerImageLoader': 48, 'towerId': 56, 'index': 64, 'featuredInstas': 72}    
    def __init__(self, iconImage: UnityEngine.UI.Image, iconTextField: TMPro.TMP_Text, selected: UnityEngine.GameObject, towerImageLoader: TowerImageLoader, towerId: System.String, index: System.Int32, featuredInstas: Assets.Scripts.Unity.CollectionEvent.CollectionEventFeaturedInstas, **kwargs):
        super().__init__(self, **kwargs)
		self.iconImage = iconImage
		self.iconTextField = iconTextField
		self.selected = selected
		self.towerImageLoader = towerImageLoader
		self.towerId = towerId
		self.index = index
		self.featuredInstas = featuredInstas


class CollectionEventFeaturedInstas:

    offsets = {'helper': 24, 'active': 32, 'inactive': 40, 'changesInTimeActive': 48, 'changesInTimeInactive': 56, 'currentSelection': 80, 'collectionEventUi': 88}    
    def __init__(self, helper: Assets.Scripts.Unity.CollectionEvent.CollectionEventFeaturedInstasHelper, active: UnityEngine.GameObject, inactive: UnityEngine.GameObject, changesInTimeActive: TMPro.TMP_Text, changesInTimeInactive: TMPro.TMP_Text, currentSelection: Assets.Scripts.Unity.CollectionEvent.CollectionEventFeaturedInstaIcon, collectionEventUi: Assets.Scripts.Unity.CollectionEvent.CollectionEventUI, **kwargs):
        super().__init__(self, **kwargs)
		self.helper = helper
		self.active = active
		self.inactive = inactive
		self.changesInTimeActive = changesInTimeActive
		self.changesInTimeInactive = changesInTimeInactive
		self.currentSelection = currentSelection
		self.collectionEventUi = collectionEventUi


class CollectionEventFeaturedInstasHelper:

    offsets = {'timeBetweenPagesInSeconds': 16, 'instaMonkeysTypeList': 24, 'doesPageChangeThisFrame': 32}    
    def __init__(self, timeBetweenPagesInSeconds: System.Int32, instaMonkeysTypeList: System.Collections.Generic.List<System.String>, doesPageChangeThisFrame: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.timeBetweenPagesInSeconds = timeBetweenPagesInSeconds
		self.instaMonkeysTypeList = instaMonkeysTypeList
		self.doesPageChangeThisFrame = doesPageChangeThisFrame


class CollectionEventMapBonusHelper:
	<instance>k__BackingField: Assets.Scripts.Unity.CollectionEvent.CollectionEventMapBonusHelper
    offsets = {'<instance>k__BackingField': 0, 'hoursUntilReroll': 16, 'isMapBonusActive': 20}    
    def __init__(self, <instance>k__BackingField: Assets.Scripts.Unity.CollectionEvent.CollectionEventMapBonusHelper, hoursUntilReroll: System.Int32, isMapBonusActive: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.<instance>k__BackingField = <instance>k__BackingField
		self.hoursUntilReroll = hoursUntilReroll
		self.isMapBonusActive = isMapBonusActive


class CollectionEventMapBonusSaveData:

    offsets = {'bonusesByDifficulty': 16}    
    def __init__(self, bonusesByDifficulty: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Unity.CollectionEvent.CollectionEventMapBonusSaveData.BonusInfo>, **kwargs):
        super().__init__(self, **kwargs)
		self.bonusesByDifficulty = bonusesByDifficulty


class CollectionEventMilestoneItem:

    offsets = {'progressText': 32}    
    def __init__(self, progressText: TMPro.TMP_Text, **kwargs):
        super().__init__(self, **kwargs)
		self.progressText = progressText


class CollectionEventMysteryBox:

    offsets = {'selected': 24}    
    def __init__(self, selected: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.selected = selected


class CollectionEventRewardsContainer:

    offsets = {'items': 24}    
    def __init__(self, items: System.Collections.Generic.List<Assets.Scripts.Unity.CollectionEvent.CollectionEventCardItem>, **kwargs):
        super().__init__(self, **kwargs)
		self.items = items


class CollectionEventRewardsUI:

    offsets = {'eventRewards2': 64, 'eventRewards3': 72, 'clickArea': 80, 'continueButton': 88, 'finishedSeeingRewards': 104, 'helper': 112, 'lootSets': 120, 'activeEventRewards': 128}    
    def __init__(self, eventRewards2: Assets.Scripts.Unity.CollectionEvent.CollectionEventRewardsContainer, eventRewards3: Assets.Scripts.Unity.CollectionEvent.CollectionEventRewardsContainer, clickArea: UnityEngine.GameObject, continueButton: UnityEngine.UI.Button, finishedSeeingRewards: System.Boolean, helper: Assets.Scripts.Unity.CollectionEvent.CollectionEventDataHelper, lootSets: System.Collections.Generic.List<Assets.Scripts.Models.Store.LootSet>, activeEventRewards: Assets.Scripts.Unity.CollectionEvent.CollectionEventRewardsContainer, **kwargs):
        super().__init__(self, **kwargs)
		self.eventRewards2 = eventRewards2
		self.eventRewards3 = eventRewards3
		self.clickArea = clickArea
		self.continueButton = continueButton
		self.finishedSeeingRewards = finishedSeeingRewards
		self.helper = helper
		self.lootSets = lootSets
		self.activeEventRewards = activeEventRewards


class CollectionEventUI:
	from: System.String
    offsets = {'from': 0, 'countdownText': 56, 'eventEndsInText': 64, 'eventEndedText': 72, 'eventEndsInGameObject': 80, 'max': 136, 'collectProgressInnerBarImage': 144, 'collectProgressText': 152, 'collectGoalText': 160, 'lastSeenInnerBarImage': 168, 'currentInnerBarImage': 176, 'completedInnerBarImage': 184, 'playButton': 192, 'speedBubbleText': 200, 'collectButton': 208, 'barFillDelay': 216, 'barFillLerpSpeed': 220, 'featuredInstas': 224, 'debug': 232, 'helper': 240, 'timeOpened': 248, 'isShowing': 252}    
    def __init__(self, from: System.String, countdownText: TMPro.TMP_Text, eventEndsInText: TMPro.TMP_Text, eventEndedText: TMPro.TMP_Text, eventEndsInGameObject: UnityEngine.GameObject, max: UnityEngine.GameObject, collectProgressInnerBarImage: UnityEngine.UI.Image, collectProgressText: TMPro.TMP_Text, collectGoalText: TMPro.TMP_Text, lastSeenInnerBarImage: UnityEngine.UI.Image, currentInnerBarImage: UnityEngine.UI.Image, completedInnerBarImage: UnityEngine.UI.Image, playButton: UnityEngine.UI.Button, speedBubbleText: TMPro.TMP_Text, collectButton: UnityEngine.UI.Button, barFillDelay: System.Single, barFillLerpSpeed: System.Single, featuredInstas: Assets.Scripts.Unity.CollectionEvent.CollectionEventFeaturedInstas, debug: UnityEngine.GameObject, helper: Assets.Scripts.Unity.CollectionEvent.CollectionEventDataHelper, timeOpened: System.Single, isShowing: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.from = from
		self.countdownText = countdownText
		self.eventEndsInText = eventEndsInText
		self.eventEndedText = eventEndedText
		self.eventEndsInGameObject = eventEndsInGameObject
		self.max = max
		self.collectProgressInnerBarImage = collectProgressInnerBarImage
		self.collectProgressText = collectProgressText
		self.collectGoalText = collectGoalText
		self.lastSeenInnerBarImage = lastSeenInnerBarImage
		self.currentInnerBarImage = currentInnerBarImage
		self.completedInnerBarImage = completedInnerBarImage
		self.playButton = playButton
		self.speedBubbleText = speedBubbleText
		self.collectButton = collectButton
		self.barFillDelay = barFillDelay
		self.barFillLerpSpeed = barFillLerpSpeed
		self.featuredInstas = featuredInstas
		self.debug = debug
		self.helper = helper
		self.timeOpened = timeOpened
		self.isShowing = isShowing


class Difficulty:

    offsets = {'parent': 120, 'startRound': 128, 'endRound': 132, 'monkeyMoney': 136, 'intermediateMMScale': 140, 'advancedMMScale': 144, 'xpertMMScale': 148, 'def': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Difficulty.Difficulty, startRound: System.Int32, endRound: System.Int32, monkeyMoney: System.Single, intermediateMMScale: System.Single, advancedMMScale: System.Single, xpertMMScale: System.Single, def: Assets.Scripts.Models.Difficulty.DifficultyModel, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.startRound = startRound
		self.endRound = endRound
		self.monkeyMoney = monkeyMoney
		self.intermediateMMScale = intermediateMMScale
		self.advancedMMScale = advancedMMScale
		self.xpertMMScale = xpertMMScale
		self.def = def


class Apopalypse:

    offsets = {'def': 128}    
    def __init__(self, def: Assets.Scripts.Models.TowerSets.Mods.ApopalypseModel, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def


class BloonHealth:

    offsets = {'healthMod': 128, 'expHealthMod': 136, 'bloonTag': 144, 'def': 152}    
    def __init__(self, healthMod: System.Single, expHealthMod: System.String, bloonTag: System.String, def: Assets.Scripts.Models.TowerSets.Mods.BloonHealthModel, **kwargs):
        super().__init__(self, **kwargs)
		self.healthMod = healthMod
		self.expHealthMod = expHealthMod
		self.bloonTag = bloonTag
		self.def = def


class Deflation:

    offsets = {'def': 128}    
    def __init__(self, def: Assets.Scripts.Models.TowerSets.Mods.DeflationModel, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def


class Impoppable:

    offsets = {'def': 128}    
    def __init__(self, def: Assets.Scripts.Unity.Towers.Mods.ImpoppableModel, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def


class Reverse:

    offsets = {'def': 128}    
    def __init__(self, def: Assets.Scripts.Models.TowerSets.Mods.ReverseModel, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def


class AssetScale:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class Batch:

    offsets = {'mesh': 48, 'at': 56, 'trianglesAt': 60, 'lastClear': 64, 'overFlow': 72}    
    def __init__(self, mesh: UnityEngine.Mesh, at: System.Int32, trianglesAt: System.Int32, lastClear: System.Int32, overFlow: Assets.Scripts.Unity.Display.Batch, **kwargs):
        super().__init__(self, **kwargs)
		self.mesh = mesh
		self.at = at
		self.trianglesAt = trianglesAt
		self.lastClear = lastClear
		self.overFlow = overFlow


class CameraManager:

    offsets = {'renderTimeTrackers': 24}    
    def __init__(self, renderTimeTrackers: System.Collections.Generic.List<Assets.Scripts.Unity.Display.RenderTimeTracker>, **kwargs):
        super().__init__(self, **kwargs)
		self.renderTimeTrackers = renderTimeTrackers


class CommonLayerNames:
	kDefault: System.Int32
    offsets = {'kDefault': 0, 'kShadow': 4, 'kTowers': 8, 'kTowersNoBlobOutline': 12, 'kOutlineOverlay': 16, 'kOutlineOverlayNoBlob': 20, 'kUIEffect': 24, 'kPlatform': 28, 'kProps': 32}    
    def __init__(self, kDefault: System.Int32, kShadow: System.Int32, kTowers: System.Int32, kTowersNoBlobOutline: System.Int32, kOutlineOverlay: System.Int32, kOutlineOverlayNoBlob: System.Int32, kUIEffect: System.Int32, kPlatform: System.Int32, kProps: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.kDefault = kDefault
		self.kShadow = kShadow
		self.kTowers = kTowers
		self.kTowersNoBlobOutline = kTowersNoBlobOutline
		self.kOutlineOverlay = kOutlineOverlay
		self.kOutlineOverlayNoBlob = kOutlineOverlayNoBlob
		self.kUIEffect = kUIEffect
		self.kPlatform = kPlatform
		self.kProps = kProps


class DebugRenderer:
	m_Instance: Assets.Scripts.Unity.Display.DebugRenderer
    offsets = {'m_Instance': 0, 'm_Meshes': 24, 'm_Lines': 32, 'm_Circles': 40, 'm_Reserved': 48, 'm_DebugMaterial': 56}    
    def __init__(self, m_Instance: Assets.Scripts.Unity.Display.DebugRenderer, m_Meshes: System.Collections.Generic.List<Assets.Scripts.Unity.Display.DebugRenderer.ColouredMesh>, m_Lines: System.Collections.Generic.List<Assets.Scripts.Unity.Display.DebugRenderer.DebugLine>, m_Circles: System.Collections.Generic.List<Assets.Scripts.Unity.Display.DebugRenderer.DebugCircle>, m_Reserved: System.Int32, m_DebugMaterial: UnityEngine.Material, **kwargs):
        super().__init__(self, **kwargs)
		self.m_Instance = m_Instance
		self.m_Meshes = m_Meshes
		self.m_Lines = m_Lines
		self.m_Circles = m_Circles
		self.m_Reserved = m_Reserved
		self.m_DebugMaterial = m_DebugMaterial


class DeviceCapabilities:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DeviceQualityCheck:
	deviceQuality: System.Nullable<Assets.Scripts.Unity.Display.RenderQuality>
    offsets = {'deviceQuality': 0}    
    def __init__(self, deviceQuality: System.Nullable<Assets.Scripts.Unity.Display.RenderQuality>, **kwargs):
        super().__init__(self, **kwargs)
		self.deviceQuality = deviceQuality


class DeviceScaleCheck:
	deviceScale: System.Nullable<Assets.Scripts.Unity.Display.AssetScale>
    offsets = {'deviceScale': 0}    
    def __init__(self, deviceScale: System.Nullable<Assets.Scripts.Unity.Display.AssetScale>, **kwargs):
        super().__init__(self, **kwargs)
		self.deviceScale = deviceScale


class EffectAreaLimiter:
	bucketsW: System.Int32
    offsets = {'bucketsW': 0, 'grid': 16}    
    def __init__(self, bucketsW: System.Int32, grid: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Unity.Display.EffectAreaLimiter.EffectCounter>>, **kwargs):
        super().__init__(self, **kwargs)
		self.bucketsW = bucketsW
		self.grid = grid


class Factory:
	kOffscreenPosition: UnityEngine.Vector3
    offsets = {'kOffscreenPosition': 0, 'asyncLoadIdGen': 12, 'active': 16, 'pool': 24, 'limits': 32, 'counts': 40, 'prototypeHandles': 48, 'timeAtLastDecay': 56}    
    def __init__(self, kOffscreenPosition: UnityEngine.Vector3, asyncLoadIdGen: System.Int32, active: System.Collections.Generic.List<Assets.Scripts.Unity.Display.UnityDisplayNode>, pool: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.List<Assets.Scripts.Unity.Display.Factory.PooledNode>>, limits: System.Collections.Generic.Dictionary<System.String,System.Int32>, counts: System.Collections.Generic.Dictionary<System.String,System.Int32>, prototypeHandles: System.Collections.Generic.Dictionary<System.String,UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle<UnityEngine.GameObject>>, timeAtLastDecay: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.kOffscreenPosition = kOffscreenPosition
		self.asyncLoadIdGen = asyncLoadIdGen
		self.active = active
		self.pool = pool
		self.limits = limits
		self.counts = counts
		self.prototypeHandles = prototypeHandles
		self.timeAtLastDecay = timeAtLastDecay


class LodGroup:

    offsets = {'dontAddSortingGroup': 24, 'orderInLayer': 28}    
    def __init__(self, dontAddSortingGroup: System.Boolean, orderInLayer: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.dontAddSortingGroup = dontAddSortingGroup
		self.orderInLayer = orderInLayer


class NodeLifespan:

    offsets = {'lifespan': 24, 'startLifespan': 28, 'valid': 32, 'node': 40}    
    def __init__(self, lifespan: System.Single, startLifespan: System.Single, valid: System.Boolean, node: Assets.Scripts.Unity.Display.UnityDisplayNode, **kwargs):
        super().__init__(self, **kwargs)
		self.lifespan = lifespan
		self.startLifespan = startLifespan
		self.valid = valid
		self.node = node


class OffsetTowardsCamera:
	cameraFace: UnityEngine.Quaternion
    offsets = {'cameraFace': 0, 'offset': 24, 'offsetRotation': 28}    
    def __init__(self, cameraFace: UnityEngine.Quaternion, offset: System.Single, offsetRotation: UnityEngine.Vector3, **kwargs):
        super().__init__(self, **kwargs)
		self.cameraFace = cameraFace
		self.offset = offset
		self.offsetRotation = offsetRotation


class OnScreenSizeChange:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ProjectileTrailEffect:

    offsets = {'trailRenderer': 24, 'hasDoneLateUpdate': 32}    
    def __init__(self, trailRenderer: UnityEngine.TrailRenderer, hasDoneLateUpdate: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.trailRenderer = trailRenderer
		self.hasDoneLateUpdate = hasDoneLateUpdate


class PurgeType:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class QualityPurge:

    offsets = {'behavior': 24, 'purgeType': 32, 'quality': 36}    
    def __init__(self, behavior: UnityEngine.Component, purgeType: Assets.Scripts.Unity.Display.PurgeType, quality: Assets.Scripts.Unity.Display.RenderQuality, **kwargs):
        super().__init__(self, **kwargs)
		self.behavior = behavior
		self.purgeType = purgeType
		self.quality = quality


class QualityPurgeDegradeToPlainMeshRenderer:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class QualityPurgeStopAtTime:

    offsets = {'animator': 40, 'stateName': 48, 'stopAtTime': 56, 'hasBeenDisabled': 60}    
    def __init__(self, animator: UnityEngine.Animator, stateName: System.String, stopAtTime: System.Single, hasBeenDisabled: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.animator = animator
		self.stateName = stateName
		self.stopAtTime = stopAtTime
		self.hasBeenDisabled = hasBeenDisabled


class RenderQuality:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class RenderTimeTracker:

    offsets = {'renderTime': 24, 'cameraManager': 32}    
    def __init__(self, renderTime: Assets.Scripts.Utils.AverageTime, cameraManager: Assets.Scripts.Unity.Display.CameraManager, **kwargs):
        super().__init__(self, **kwargs)
		self.renderTime = renderTime
		self.cameraManager = cameraManager


class RotationCache:
	rotationMax: System.Single
    offsets = {'rotationMax': 0, 'rotationCacheInitialised': 4, 'RotationCacheCount': 8}    
    def __init__(self, rotationMax: System.Single, rotationCacheInitialised: System.Boolean, RotationCacheCount: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.rotationMax = rotationMax
		self.rotationCacheInitialised = rotationCacheInitialised
		self.RotationCacheCount = RotationCacheCount


class Scene:

    offsets = {'factory': 16, 'limiter': 24, 'projectors': 32, 'rangeMesh': 48, 'coopAreaRangeMesh': 56, 'coopAreaRangeMeshYours': 64, 'rangeMeshVerts': 72, 'rangeMeshIndices': 88, 'uiMeshes': 104, 'coopVerticies': 112, 'coopIndices': 128, 'coopUiMeshes': 144, 'coopYourVerticies': 152, 'coopYourIndices': 168, 'coopUiMeshesYours': 184}    
    def __init__(self, factory: Assets.Scripts.Unity.Display.Factory, limiter: Assets.Scripts.Unity.Display.EffectAreaLimiter, projectors: UnityEngine.GameObject, rangeMesh: UnityEngine.Mesh, coopAreaRangeMesh: UnityEngine.Mesh, coopAreaRangeMeshYours: UnityEngine.Mesh, rangeMeshVerts: Unity.Collections.NativeArray<Assets.Scripts.Unity.Display.Scene.Vertex>, rangeMeshIndices: Unity.Collections.NativeArray<System.UInt16>, uiMeshes: System.Collections.Generic.List<Assets.Scripts.Simulation.Display.Mesh>, coopVerticies: Unity.Collections.NativeArray<Assets.Scripts.Unity.Display.Scene.Vertex>, coopIndices: Unity.Collections.NativeArray<System.UInt16>, coopUiMeshes: System.Collections.Generic.List<Assets.Scripts.Simulation.Display.Mesh>, coopYourVerticies: Unity.Collections.NativeArray<Assets.Scripts.Unity.Display.Scene.Vertex>, coopYourIndices: Unity.Collections.NativeArray<System.UInt16>, coopUiMeshesYours: System.Collections.Generic.List<Assets.Scripts.Simulation.Display.Mesh>, **kwargs):
        super().__init__(self, **kwargs)
		self.factory = factory
		self.limiter = limiter
		self.projectors = projectors
		self.rangeMesh = rangeMesh
		self.coopAreaRangeMesh = coopAreaRangeMesh
		self.coopAreaRangeMeshYours = coopAreaRangeMeshYours
		self.rangeMeshVerts = rangeMeshVerts
		self.rangeMeshIndices = rangeMeshIndices
		self.uiMeshes = uiMeshes
		self.coopVerticies = coopVerticies
		self.coopIndices = coopIndices
		self.coopUiMeshes = coopUiMeshes
		self.coopYourVerticies = coopYourVerticies
		self.coopYourIndices = coopYourIndices
		self.coopUiMeshesYours = coopUiMeshesYours


class ScreenResizeDetector:

    offsets = {'onScreenSizeChanged': 24, 'currentWidth': 32, 'currentHeight': 36}    
    def __init__(self, onScreenSizeChanged: Assets.Scripts.Unity.Display.OnScreenSizeChange, currentWidth: System.Int32, currentHeight: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.onScreenSizeChanged = onScreenSizeChanged
		self.currentWidth = currentWidth
		self.currentHeight = currentHeight


class SetInfoBuffer:

    offsets = {'samplerId': 24, 'texture': 32}    
    def __init__(self, samplerId: System.String, texture: UnityEngine.RenderTexture, **kwargs):
        super().__init__(self, **kwargs)
		self.samplerId = samplerId
		self.texture = texture


class SetShader:

    offsets = {'shader': 24, 'replacementTag': 32}    
    def __init__(self, shader: UnityEngine.Shader, replacementTag: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.shader = shader
		self.replacementTag = replacementTag


class ShaderReplace:

    offsets = {'shader': 24}    
    def __init__(self, shader: UnityEngine.Shader, **kwargs):
        super().__init__(self, **kwargs)
		self.shader = shader


class UnityDisplayNode:

    offsets = {'cloneOf': 24, 'isDestroyed': 32, 'swappingAnimations': 33, 'initialised': 34, 'animationComponent': 40, 'monkeyAnimationController': 48, 'meshComponent': 56, 'particles': 64, 'sprite': 88, 'spriteInChildren': 96, 'playOnMove': 104, 'animationToSet': 108, 'prototypeScale': 112, 'towerPlacementPreCalcOffset': 124, 'rotation': 136, 'rotationQuat': 140, 'isSprite': 156, 'position': 160, 'animationState': 172, 'sortingOrder': 176, 'mesh': 184, 'isFullscreen': 192, 'hilight': 193}    
    def __init__(self, cloneOf: System.String, isDestroyed: System.Boolean, swappingAnimations: System.Boolean, initialised: System.Boolean, animationComponent: UnityEngine.Animator, monkeyAnimationController: Assets.Scripts.Unity.Display.Animation.MonkeyAnimationController, meshComponent: UnityEngine.MeshFilter, particles: UnityEngine.ParticleSystem, sprite: UnityEngine.SpriteRenderer, spriteInChildren: UnityEngine.SpriteRenderer, playOnMove: System.Boolean, animationToSet: System.Int32, prototypeScale: UnityEngine.Vector3, towerPlacementPreCalcOffset: UnityEngine.Vector3, rotation: System.Single, rotationQuat: UnityEngine.Quaternion, isSprite: System.Boolean, position: UnityEngine.Vector3, animationState: System.Int32, sortingOrder: System.Int32, mesh: Assets.Scripts.Simulation.Display.Mesh, isFullscreen: System.Boolean, hilight: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.cloneOf = cloneOf
		self.isDestroyed = isDestroyed
		self.swappingAnimations = swappingAnimations
		self.initialised = initialised
		self.animationComponent = animationComponent
		self.monkeyAnimationController = monkeyAnimationController
		self.meshComponent = meshComponent
		self.particles = particles
		self.sprite = sprite
		self.spriteInChildren = spriteInChildren
		self.playOnMove = playOnMove
		self.animationToSet = animationToSet
		self.prototypeScale = prototypeScale
		self.towerPlacementPreCalcOffset = towerPlacementPreCalcOffset
		self.rotation = rotation
		self.rotationQuat = rotationQuat
		self.isSprite = isSprite
		self.position = position
		self.animationState = animationState
		self.sortingOrder = sortingOrder
		self.mesh = mesh
		self.isFullscreen = isFullscreen
		self.hilight = hilight


class AnimatedPropertyData:

    offsets = {'curve': 16, 'path': 24, 'propertyName': 32}    
    def __init__(self, curve: UnityEngine.AnimationCurve, path: System.String, propertyName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.curve = curve
		self.path = path
		self.propertyName = propertyName


class AnimationBakerStateConfig:

    offsets = {'priority': 16, 'interruptibleBehaviour': 20, 'forceSingleFrameAdvance': 24, 'isUpgradeAnimation': 25, 'animationClip': 32, 'eventTrigger': 40, 'looping': 48, 'importantFrames': 56, 'firstFrameReturns': 64, 'lastFrameReturns': 72, 'animationIndex': 80}    
    def __init__(self, priority: System.Int32, interruptibleBehaviour: Assets.Scripts.Unity.Display.Animation.InterruptBehaviour, forceSingleFrameAdvance: System.Boolean, isUpgradeAnimation: System.Boolean, animationClip: UnityEngine.AnimationClip, eventTrigger: UnityEngine.Events.UnityEvent, looping: System.Boolean, importantFrames: System.Collections.Generic.List<System.Single>, firstFrameReturns: System.Collections.Generic.List<System.Single>, lastFrameReturns: System.Collections.Generic.List<System.Single>, animationIndex: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.priority = priority
		self.interruptibleBehaviour = interruptibleBehaviour
		self.forceSingleFrameAdvance = forceSingleFrameAdvance
		self.isUpgradeAnimation = isUpgradeAnimation
		self.animationClip = animationClip
		self.eventTrigger = eventTrigger
		self.looping = looping
		self.importantFrames = importantFrames
		self.firstFrameReturns = firstFrameReturns
		self.lastFrameReturns = lastFrameReturns
		self.animationIndex = animationIndex


class AnimationBakerVariantStateConfig:

    offsets = {'variantWeight': 88}    
    def __init__(self, variantWeight: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.variantWeight = variantWeight


class AnimationClipData:

    offsets = {'name': 16}    
    def __init__(self, name: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.name = name


class AnimationEventData:

    offsets = {'time': 16, 'functionName': 24}    
    def __init__(self, time: System.Single, functionName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.time = time
		self.functionName = functionName


class AnimationEventHandler:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AnimationProperties:

    offsets = {'enabledOnLowQuality': 24}    
    def __init__(self, enabledOnLowQuality: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.enabledOnLowQuality = enabledOnLowQuality


class BlendInfo:

    offsets = {'from': 16, 'to': 20, 'time': 24}    
    def __init__(self, from: System.Int32, to: System.Int32, time: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.from = from
		self.to = to
		self.time = time


class BlendTransition:

    offsets = {'duration': 16, 'elapsed': 20, 'from': 24, 'to': 28, '<DestinationState>k__BackingField': 32, '<Active>k__BackingField': 36, '<JustCompleted>k__BackingField': 37}    
    def __init__(self, duration: System.Single, elapsed: System.Single, from: System.Int32, to: System.Int32, <DestinationState>k__BackingField: System.Int32, <Active>k__BackingField: System.Boolean, <JustCompleted>k__BackingField: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.duration = duration
		self.elapsed = elapsed
		self.from = from
		self.to = to
		self.<DestinationState>k__BackingField = <DestinationState>k__BackingField
		self.<Active>k__BackingField = <Active>k__BackingField
		self.<JustCompleted>k__BackingField = <JustCompleted>k__BackingField


class CustomAnimationClipConfig:

    offsets = {'animationClip': 16, 'priority': 24, 'looping': 28, 'interruptibleBehaviour': 32}    
    def __init__(self, animationClip: UnityEngine.AnimationClip, priority: System.Int32, looping: System.Boolean, interruptibleBehaviour: Assets.Scripts.Unity.Display.Animation.InterruptBehaviour, **kwargs):
        super().__init__(self, **kwargs)
		self.animationClip = animationClip
		self.priority = priority
		self.looping = looping
		self.interruptibleBehaviour = interruptibleBehaviour


class CustomMeshFrameAnimator:

    offsets = {'fps': 24, 'frames': 32, 'currentFrame': 40, 'elapsed': 44, 'frameDuration': 48, 'meshFilter': 56, 'isPlaying': 64, 'loop': 65, 'randomizeFrames': 66, 'randomStartFrame': 67, 'resetOnEnable': 68, 'endLoopBehaviour': 72}    
    def __init__(self, fps: System.Single, frames: System.Collections.Generic.List<UnityEngine.Mesh>, currentFrame: System.Int32, elapsed: System.Single, frameDuration: System.Single, meshFilter: UnityEngine.MeshFilter, isPlaying: System.Boolean, loop: System.Boolean, randomizeFrames: System.Boolean, randomStartFrame: System.Boolean, resetOnEnable: System.Boolean, endLoopBehaviour: Assets.Scripts.Unity.Display.Animation.EndAnimBehaviour, **kwargs):
        super().__init__(self, **kwargs)
		self.fps = fps
		self.frames = frames
		self.currentFrame = currentFrame
		self.elapsed = elapsed
		self.frameDuration = frameDuration
		self.meshFilter = meshFilter
		self.isPlaying = isPlaying
		self.loop = loop
		self.randomizeFrames = randomizeFrames
		self.randomStartFrame = randomStartFrame
		self.resetOnEnable = resetOnEnable
		self.endLoopBehaviour = endLoopBehaviour


class CustomPlayableAnimationClip:

    offsets = {'duration': 16, 'priority': 20, 'looping': 24, 'interruptibleBehaviour': 28, 'animationClip': 32, 'playableClip': 40, 'blendMixerPort': 56, 'blends': 64, 'isUpgradeAnimation': 72}    
    def __init__(self, duration: System.Single, priority: System.Int32, looping: System.Boolean, interruptibleBehaviour: Assets.Scripts.Unity.Display.Animation.InterruptBehaviour, animationClip: UnityEngine.AnimationClip, playableClip: UnityEngine.Animations.AnimationClipPlayable, blendMixerPort: System.Int32, blends: System.Collections.Generic.Dictionary<System.Int32,System.Single>, isUpgradeAnimation: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.duration = duration
		self.priority = priority
		self.looping = looping
		self.interruptibleBehaviour = interruptibleBehaviour
		self.animationClip = animationClip
		self.playableClip = playableClip
		self.blendMixerPort = blendMixerPort
		self.blends = blends
		self.isUpgradeAnimation = isUpgradeAnimation


class CustomSpriteFrameAnimator:

    offsets = {'fps': 24, 'frames': 32, 'frameOverrides': 40, 'currentFrame': 48, 'elapsed': 52, 'fullFrameOverride': 56, 'frameDuration': 64, 'spriteRenderer': 72, 'isPlaying': 80, 'loop': 81, 'randomizeFrames': 82, 'randomStartFrame': 83, 'resetOnEnable': 84, 'endLoopBehaviour': 88}    
    def __init__(self, fps: System.Single, frames: System.Collections.Generic.List<UnityEngine.Sprite>, frameOverrides: System.Collections.Generic.List<Assets.Scripts.Unity.Display.Animation.FrameOverrideData>, currentFrame: System.Int32, elapsed: System.Single, fullFrameOverride: System.Collections.Generic.List<Assets.Scripts.Unity.Display.Animation.FrameOverrideData>, frameDuration: System.Single, spriteRenderer: UnityEngine.SpriteRenderer, isPlaying: System.Boolean, loop: System.Boolean, randomizeFrames: System.Boolean, randomStartFrame: System.Boolean, resetOnEnable: System.Boolean, endLoopBehaviour: Assets.Scripts.Unity.Display.Animation.EndLoopBehaviour, **kwargs):
        super().__init__(self, **kwargs)
		self.fps = fps
		self.frames = frames
		self.frameOverrides = frameOverrides
		self.currentFrame = currentFrame
		self.elapsed = elapsed
		self.fullFrameOverride = fullFrameOverride
		self.frameDuration = frameDuration
		self.spriteRenderer = spriteRenderer
		self.isPlaying = isPlaying
		self.loop = loop
		self.randomizeFrames = randomizeFrames
		self.randomStartFrame = randomStartFrame
		self.resetOnEnable = resetOnEnable
		self.endLoopBehaviour = endLoopBehaviour


class EndAnimBehaviour:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class EndLoopBehaviour:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class EyesBlink:

    offsets = {'eyeMeshRenderer': 24, 'framesPassed': 32, 'nextBlinkFrame': 36}    
    def __init__(self, eyeMeshRenderer: UnityEngine.MeshRenderer, framesPassed: System.Int32, nextBlinkFrame: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.eyeMeshRenderer = eyeMeshRenderer
		self.framesPassed = framesPassed
		self.nextBlinkFrame = nextBlinkFrame


class FlatteningBlacklist:
	towerBlacklist: System.Collections.Generic.List<System.String>
    offsets = {'towerBlacklist': 0}    
    def __init__(self, towerBlacklist: System.Collections.Generic.List<System.String>, **kwargs):
        super().__init__(self, **kwargs)
		self.towerBlacklist = towerBlacklist


class FlatteningUtils:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class FrameOverrideData:

    offsets = {'frame': 16, 'frameDuration': 20}    
    def __init__(self, frame: System.Int32, frameDuration: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.frame = frame
		self.frameDuration = frameDuration


class InterruptBehaviour:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class MaterialInfo:

    offsets = {'id': 16}    
    def __init__(self, id: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.id = id


class MaterialInfoSave:

    offsets = {'rectangles': 24, 'id': 32}    
    def __init__(self, rectangles: Assets.Scripts.Unity.Display.Animation.RectanglesSave, id: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.rectangles = rectangles
		self.id = id


class MonkeyAnimationController:
	NoFlattenTag: System.String
    offsets = {'NoFlattenTag': 0, 'DeleteFromMeshFramesTag': 8, 'UnmodifiedInFlattenTag': 16, 'allStatesReusableTemp': 24, 'allBlendsReusableTemp': 32, 'allIdleIndicesReusableTemp': 40, 'mode': 24, 'animator': 32, 'playableAnimator': 40, 'animationStates': 48, 'animationStatesByIndex': 56, 'placementConfigs': 64, 'attackIdleConfigs': 72, 'IdleVariants': 80, 'currentAnimationState': 88, 'idleSelector': 96, 'attackReady': 104, 'currentIdleAnimationIndex': 108, 'timeOfLastAttack': 112, 'attackReadyIdleSustain': 116, 'placementAnimationIndex': 120, 'attackIdleIndexValue': 124, 'hasAttackReadyParam': 128}    
    def __init__(self, NoFlattenTag: System.String, DeleteFromMeshFramesTag: System.String, UnmodifiedInFlattenTag: System.String, allStatesReusableTemp: System.Collections.Generic.List<Assets.Scripts.Unity.Display.Animation.AnimationBakerStateConfig>, allBlendsReusableTemp: System.Collections.Generic.List<Assets.Scripts.Unity.Display.Animation.BlendInfo>, allIdleIndicesReusableTemp: System.Collections.Generic.List<System.Int32>, mode: Assets.Scripts.Unity.Display.Animation.MonkeyAnimationController.Mode, animator: UnityEngine.Animator, playableAnimator: Assets.Scripts.Unity.Display.Animation.PlayableAnimator, animationStates: System.Collections.Generic.List<Assets.Scripts.Unity.Display.Animation.AnimationBakerStateConfig>, animationStatesByIndex: System.Collections.Generic.List<Assets.Scripts.Unity.Display.Animation.AnimationBakerStateConfig>, placementConfigs: System.Collections.Generic.List<Assets.Scripts.Unity.Display.Animation.AnimationBakerStateConfig>, attackIdleConfigs: System.Collections.Generic.List<Assets.Scripts.Unity.Display.Animation.AnimationBakerStateConfig>, IdleVariants: System.Collections.Generic.List<Assets.Scripts.Unity.Display.Animation.AnimationBakerVariantStateConfig>, currentAnimationState: System.Int32, idleSelector: Assets.Scripts.Unity.Utils.WeightedGroup<System.Int32>, attackReady: System.Boolean, currentIdleAnimationIndex: System.Int32, timeOfLastAttack: System.Single, attackReadyIdleSustain: System.Single, placementAnimationIndex: System.Int32, attackIdleIndexValue: System.Int32, hasAttackReadyParam: Assets.Scripts.Unity.Display.Animation.MonkeyAnimationController.InitialisableBoolean, **kwargs):
        super().__init__(self, **kwargs)
		self.NoFlattenTag = NoFlattenTag
		self.DeleteFromMeshFramesTag = DeleteFromMeshFramesTag
		self.UnmodifiedInFlattenTag = UnmodifiedInFlattenTag
		self.allStatesReusableTemp = allStatesReusableTemp
		self.allBlendsReusableTemp = allBlendsReusableTemp
		self.allIdleIndicesReusableTemp = allIdleIndicesReusableTemp
		self.mode = mode
		self.animator = animator
		self.playableAnimator = playableAnimator
		self.animationStates = animationStates
		self.animationStatesByIndex = animationStatesByIndex
		self.placementConfigs = placementConfigs
		self.attackIdleConfigs = attackIdleConfigs
		self.IdleVariants = IdleVariants
		self.currentAnimationState = currentAnimationState
		self.idleSelector = idleSelector
		self.attackReady = attackReady
		self.currentIdleAnimationIndex = currentIdleAnimationIndex
		self.timeOfLastAttack = timeOfLastAttack
		self.attackReadyIdleSustain = attackReadyIdleSustain
		self.placementAnimationIndex = placementAnimationIndex
		self.attackIdleIndexValue = attackIdleIndexValue
		self.hasAttackReadyParam = hasAttackReadyParam


class MonkeyMaterialLookupEntry:

    offsets = {'monkeyId': 16, 'textureId': 24}    
    def __init__(self, monkeyId: System.String, textureId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.monkeyId = monkeyId
		self.textureId = textureId


class PlayableAnimator:

    offsets = {'<currentAnimationState>k__BackingField': 24, 'playableAnimationClips': 32, 'currentAnimation': 40, 'queuedReturnState': 48, 'animator': 56, 'playableGraph': 64, 'playableOutput': 80, 'mixerPlayable': 96, 'blendCount': 112, 'blendTransition': 120, 'OnLoopEvent': 128, 'playbackSpeed': 136, 'currentAnimationName': 144, 'allowOverwriteQueuedReturnState': 152, 'swapRecords': 160}    
    def __init__(self, <currentAnimationState>k__BackingField: System.Int32, playableAnimationClips: System.Collections.Generic.List<Assets.Scripts.Unity.Display.Animation.CustomPlayableAnimationClip>, currentAnimation: Assets.Scripts.Unity.Display.Animation.CustomPlayableAnimationClip, queuedReturnState: System.Int32, animator: UnityEngine.Animator, playableGraph: UnityEngine.Playables.PlayableGraph, playableOutput: UnityEngine.Animations.AnimationPlayableOutput, mixerPlayable: UnityEngine.Animations.AnimationMixerPlayable, blendCount: System.Int32, blendTransition: Assets.Scripts.Unity.Display.Animation.BlendTransition, OnLoopEvent: System.Action<System.Int32>, playbackSpeed: System.Single, currentAnimationName: System.String, allowOverwriteQueuedReturnState: System.Boolean, swapRecords: System.Collections.Generic.List<Assets.Scripts.Unity.Display.Animation.PlayableAnimator.AnimationSwapRecord>, **kwargs):
        super().__init__(self, **kwargs)
		self.<currentAnimationState>k__BackingField = <currentAnimationState>k__BackingField
		self.playableAnimationClips = playableAnimationClips
		self.currentAnimation = currentAnimation
		self.queuedReturnState = queuedReturnState
		self.animator = animator
		self.playableGraph = playableGraph
		self.playableOutput = playableOutput
		self.mixerPlayable = mixerPlayable
		self.blendCount = blendCount
		self.blendTransition = blendTransition
		self.OnLoopEvent = OnLoopEvent
		self.playbackSpeed = playbackSpeed
		self.currentAnimationName = currentAnimationName
		self.allowOverwriteQueuedReturnState = allowOverwriteQueuedReturnState
		self.swapRecords = swapRecords


class PlayableAnimatorSimple:

    offsets = {'animationClip': 24, 'animator': 32, 'playableGraph': 40, 'playableOutput': 56, 'playableClip': 72, 'randomizeSpeed': 88, 'randomSpeedRange': 96, 'playbackSpeed': 104, 'randomStartTime': 108, 'isInitialized': 109, 'resetOnEnable': 110, 'dontPlayOnInit': 111, 'played': 112}    
    def __init__(self, animationClip: UnityEngine.AnimationClip, animator: UnityEngine.Animator, playableGraph: UnityEngine.Playables.PlayableGraph, playableOutput: UnityEngine.Animations.AnimationPlayableOutput, playableClip: UnityEngine.Animations.AnimationClipPlayable, randomizeSpeed: System.Boolean, randomSpeedRange: RangeValue, playbackSpeed: System.Single, randomStartTime: System.Boolean, isInitialized: System.Boolean, resetOnEnable: System.Boolean, dontPlayOnInit: System.Boolean, played: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.animationClip = animationClip
		self.animator = animator
		self.playableGraph = playableGraph
		self.playableOutput = playableOutput
		self.playableClip = playableClip
		self.randomizeSpeed = randomizeSpeed
		self.randomSpeedRange = randomSpeedRange
		self.playbackSpeed = playbackSpeed
		self.randomStartTime = randomStartTime
		self.isInitialized = isInitialized
		self.resetOnEnable = resetOnEnable
		self.dontPlayOnInit = dontPlayOnInit
		self.played = played


class PlayableFrameBakerAnimator:

    offsets = {'animator': 24, 'playableGraph': 32, 'playableOutput': 48, 'playableClip': 64, 'playableAnimationClips': 80, 'currentAnimationState': 88, 'currentAnimation': 96, 'currentAnimationName': 104}    
    def __init__(self, animator: UnityEngine.Animator, playableGraph: UnityEngine.Playables.PlayableGraph, playableOutput: UnityEngine.Animations.AnimationPlayableOutput, playableClip: UnityEngine.Animations.AnimationClipPlayable, playableAnimationClips: System.Collections.Generic.List<Assets.Scripts.Unity.Display.Animation.CustomPlayableAnimationClip>, currentAnimationState: System.Int32, currentAnimation: Assets.Scripts.Unity.Display.Animation.CustomPlayableAnimationClip, currentAnimationName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.animator = animator
		self.playableGraph = playableGraph
		self.playableOutput = playableOutput
		self.playableClip = playableClip
		self.playableAnimationClips = playableAnimationClips
		self.currentAnimationState = currentAnimationState
		self.currentAnimation = currentAnimation
		self.currentAnimationName = currentAnimationName


class PowersWhitelist:
	frameBakerWhitelist: System.Collections.Generic.List<System.String>
    offsets = {'frameBakerWhitelist': 0}    
    def __init__(self, frameBakerWhitelist: System.Collections.Generic.List<System.String>, **kwargs):
        super().__init__(self, **kwargs)
		self.frameBakerWhitelist = frameBakerWhitelist


class RectanglesSave:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SpeedUpSlowDownRotation:

    offsets = {'baseSpeed': 24, 'triggerTime': 28, 'timeToWait': 32, 'currentSpeed': 36, 'rotator': 40, 'decelerate': 48, 'activate': 49, 'trigger': 50, 'anticlockwise': 51, 'maxSpeed': 52, 'acceleration': 56, 'deceleration': 60, 'minSpeed': 64, 'triggerOffset': 68}    
    def __init__(self, baseSpeed: System.Single, triggerTime: System.Single, timeToWait: System.Single, currentSpeed: System.Single, rotator: CustomRotationSimple, decelerate: System.Boolean, activate: System.Boolean, trigger: System.Boolean, anticlockwise: System.Boolean, maxSpeed: System.Single, acceleration: System.Single, deceleration: System.Single, minSpeed: System.Single, triggerOffset: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.baseSpeed = baseSpeed
		self.triggerTime = triggerTime
		self.timeToWait = timeToWait
		self.currentSpeed = currentSpeed
		self.rotator = rotator
		self.decelerate = decelerate
		self.activate = activate
		self.trigger = trigger
		self.anticlockwise = anticlockwise
		self.maxSpeed = maxSpeed
		self.acceleration = acceleration
		self.deceleration = deceleration
		self.minSpeed = minSpeed
		self.triggerOffset = triggerOffset


class Utils:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Effect:

    offsets = {'parent': 128, 'display': 136, 'expDisplay': 144, 'scale': 152, 'expScale': 160, 'lifespan': 168, 'expLifespan': 176, 'fullscreen': 184, 'expFullscreen': 192, 'useCenterPosition': 200, 'expUseCenterPosition': 208, 'useTransformPosition': 216, 'expUseTransformPosition': 224, 'useTransfromRotation': 232, 'expUseTransfromRotation': 240, 'destroyOnTransformDestroy': 248, 'expDestroyOnTransformDestroy': 256, 'alwaysUseAge': 264, 'expAlwaysUseAge': 272, 'useRoundTime': 280, 'expUseRoundTime': 288}    
    def __init__(self, parent: Assets.Scripts.Unity.Effects.Effect, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, scale: System.Single, expScale: System.String, lifespan: System.Single, expLifespan: System.String, fullscreen: System.Boolean, expFullscreen: System.String, useCenterPosition: System.Boolean, expUseCenterPosition: System.String, useTransformPosition: System.Boolean, expUseTransformPosition: System.String, useTransfromRotation: System.Boolean, expUseTransfromRotation: System.String, destroyOnTransformDestroy: System.Boolean, expDestroyOnTransformDestroy: System.String, alwaysUseAge: System.Boolean, expAlwaysUseAge: System.String, useRoundTime: System.Boolean, expUseRoundTime: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.display = display
		self.expDisplay = expDisplay
		self.scale = scale
		self.expScale = expScale
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.fullscreen = fullscreen
		self.expFullscreen = expFullscreen
		self.useCenterPosition = useCenterPosition
		self.expUseCenterPosition = expUseCenterPosition
		self.useTransformPosition = useTransformPosition
		self.expUseTransformPosition = expUseTransformPosition
		self.useTransfromRotation = useTransfromRotation
		self.expUseTransfromRotation = expUseTransfromRotation
		self.destroyOnTransformDestroy = destroyOnTransformDestroy
		self.expDestroyOnTransformDestroy = expDestroyOnTransformDestroy
		self.alwaysUseAge = alwaysUseAge
		self.expAlwaysUseAge = expAlwaysUseAge
		self.useRoundTime = useRoundTime
		self.expUseRoundTime = expUseRoundTime


class LightningEffect:

    offsets = {'lineRenderer': 24, 'startPos': 32, 'endPos': 40, 'pointsInLine': 48, 'arcResetTime': 52, 'arcResetTimeRandom': 56, 'arcStrengh': 60, 'sinWaveLength': 64, 'sinWaveStrength': 68, 'sinSwitchTime': 72, 'sinSwitchTimeRandom': 76, 'randomnessStrength': 80, 'edgeDampningPerc': 84, 'arcTimer': 104, 'sinOffset': 108, 'sinOffsetTimer': 112}    
    def __init__(self, lineRenderer: UnityEngine.LineRenderer, startPos: UnityEngine.Transform, endPos: UnityEngine.Transform, pointsInLine: System.Int32, arcResetTime: System.Single, arcResetTimeRandom: System.Single, arcStrengh: System.Single, sinWaveLength: System.Single, sinWaveStrength: System.Single, sinSwitchTime: System.Single, sinSwitchTimeRandom: System.Single, randomnessStrength: System.Single, edgeDampningPerc: System.Single, arcTimer: System.Single, sinOffset: System.Single, sinOffsetTimer: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.lineRenderer = lineRenderer
		self.startPos = startPos
		self.endPos = endPos
		self.pointsInLine = pointsInLine
		self.arcResetTime = arcResetTime
		self.arcResetTimeRandom = arcResetTimeRandom
		self.arcStrengh = arcStrengh
		self.sinWaveLength = sinWaveLength
		self.sinWaveStrength = sinWaveStrength
		self.sinSwitchTime = sinSwitchTime
		self.sinSwitchTimeRandom = sinSwitchTimeRandom
		self.randomnessStrength = randomnessStrength
		self.edgeDampningPerc = edgeDampningPerc
		self.arcTimer = arcTimer
		self.sinOffset = sinOffset
		self.sinOffsetTimer = sinOffsetTimer


class CandyEventManager:

    offsets = {'roundCandy': 24, 'candyNeededToActivate': 32, 'candy': 40, 'candyFallRadius': 48, 'ghost': 64, 'numberGhosts': 72, 'timeBetweenGhosts': 76, 'ghostSpawnOffset': 80, 'ghostTrackOffset': 84, 'collectedCandySound': 88, 'activatedCandySound': 96, 'def': 104}    
    def __init__(self, roundCandy: System.Collections.Generic.List<UnityEngine.Vector3>, candyNeededToActivate: System.Int32, candy: Assets.Scripts.Unity.Towers.Projectiles.Projectile, candyFallRadius: UnityEngine.Vector3, ghost: Assets.Scripts.Unity.Towers.Projectiles.Projectile, numberGhosts: System.Int32, timeBetweenGhosts: System.Single, ghostSpawnOffset: System.Single, ghostTrackOffset: System.Single, collectedCandySound: UnityEngine.AudioSource, activatedCandySound: UnityEngine.AudioSource, def: Assets.Scripts.Models.Events.CandyEvent.CandyEventManagerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.roundCandy = roundCandy
		self.candyNeededToActivate = candyNeededToActivate
		self.candy = candy
		self.candyFallRadius = candyFallRadius
		self.ghost = ghost
		self.numberGhosts = numberGhosts
		self.timeBetweenGhosts = timeBetweenGhosts
		self.ghostSpawnOffset = ghostSpawnOffset
		self.ghostTrackOffset = ghostTrackOffset
		self.collectedCandySound = collectedCandySound
		self.activatedCandySound = activatedCandySound
		self.def = def


class CandyEventMod:

    offsets = {'def': 128, 'managerHalloween': 136, 'managerChristmas': 144, 'managerEaster': 152}    
    def __init__(self, def: Assets.Scripts.Models.Events.CandyEvent.CandyEventModModel, managerHalloween: Assets.Scripts.Unity.Events.CandyEvent.CandyEventManager, managerChristmas: Assets.Scripts.Unity.Events.CandyEvent.CandyEventManager, managerEaster: Assets.Scripts.Unity.Events.CandyEvent.CandyEventManager, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def
		self.managerHalloween = managerHalloween
		self.managerChristmas = managerChristmas
		self.managerEaster = managerEaster


class GiftCurrency:

    offsets = {'name': 16, 'value': 24}    
    def __init__(self, name: System.String, value: Assets.Scripts.Unity.Gift.GiftCurrencyValue, **kwargs):
        super().__init__(self, **kwargs)
		self.name = name
		self.value = value


class GiftCurrencyValue:

    offsets = {'quantity': 16, 'tier': 24, 'tower': 32, 'xp': 40, 'product': 48, 'power': 56, 'type': 64, 'contents': 72, 'achievement': 80, 'showUnlockscreen': 88}    
    def __init__(self, quantity: System.Int32, tier: System.String, tower: System.String, xp: System.Int32, product: System.String, power: System.String, type: System.String, contents: System.String, achievement: System.String, showUnlockscreen: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.quantity = quantity
		self.tier = tier
		self.tower = tower
		self.xp = xp
		self.product = product
		self.power = power
		self.type = type
		self.contents = contents
		self.achievement = achievement
		self.showUnlockscreen = showUnlockscreen


class GiftMessageModel:

    offsets = {'id': 16, 'message': 24, 'loot': 32}    
    def __init__(self, id: System.String, message: System.String, loot: Assets.Scripts.Models.Store.LootSet, **kwargs):
        super().__init__(self, **kwargs)
		self.id = id
		self.message = message
		self.loot = loot


class Gifting:

    offsets = {'pendingGifts': 16, 'showingPopup': 24, 'needsSync': 25}    
    def __init__(self, pendingGifts: System.Collections.Generic.List<Assets.Scripts.Unity.Gift.GiftMessageModel>, showingPopup: System.Boolean, needsSync: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.pendingGifts = pendingGifts
		self.showingPopup = showingPopup
		self.needsSync = needsSync


class ServerGift:

    offsets = {'message': 24}    
    def __init__(self, message: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.message = message


class ClassCreationConverter<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ServerEventConverter:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class StringDateConverter:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class UnixDateTimeConverter:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AnimCurve:

    offsets = {'curve': 24}    
    def __init__(self, curve: UnityEngine.AnimationCurve, **kwargs):
        super().__init__(self, **kwargs)
		self.curve = curve


class AnimatorBehaviors:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AnimatorRandomStartFrame:

    offsets = {'randomLowerLimit': 24, 'randomUpperLimit': 28, 'alwaysChooseRandomFrame': 32}    
    def __init__(self, randomLowerLimit: System.Single, randomUpperLimit: System.Single, alwaysChooseRandomFrame: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.randomLowerLimit = randomLowerLimit
		self.randomUpperLimit = randomUpperLimit
		self.alwaysChooseRandomFrame = alwaysChooseRandomFrame


class AnimatorRandomStartFrameLabel:

    offsets = {'orChooseSpecificLabel': 24}    
    def __init__(self, orChooseSpecificLabel: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.orChooseSpecificLabel = orChooseSpecificLabel


class AnimatorRandomStateBehavior:

    offsets = {'paramVariableName': 24, 'numRandAnimChoices': 32, 'minRandomWaitTime': 36, 'allowDuplicateChoices': 40, 'lastChosenState': 44, 'id': 48, 'randWaitTime': 52}    
    def __init__(self, paramVariableName: System.String, numRandAnimChoices: System.Int32, minRandomWaitTime: System.Single, allowDuplicateChoices: System.Boolean, lastChosenState: System.Int32, id: System.Int32, randWaitTime: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.paramVariableName = paramVariableName
		self.numRandAnimChoices = numRandAnimChoices
		self.minRandomWaitTime = minRandomWaitTime
		self.allowDuplicateChoices = allowDuplicateChoices
		self.lastChosenState = lastChosenState
		self.id = id
		self.randWaitTime = randWaitTime


class AnimatorRandomStatePlayLength:

    offsets = {'randomWaitVarName': 24, 'minRandomWaitTime': 32, 'randWaitTime': 36}    
    def __init__(self, randomWaitVarName: System.String, minRandomWaitTime: System.Single, randWaitTime: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.randomWaitVarName = randomWaitVarName
		self.minRandomWaitTime = minRandomWaitTime
		self.randWaitTime = randWaitTime


class AnimatorWeightedRandomStateBehavior:

    offsets = {'textbox': 24, 'weightedVariableName': 32, 'textbox2': 48, 'weightedNum': 52}    
    def __init__(self, textbox: System.Int32, weightedVariableName: System.String, textbox2: System.Int32, weightedNum: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.textbox = textbox
		self.weightedVariableName = weightedVariableName
		self.textbox2 = textbox2
		self.weightedNum = weightedNum


class Area:

    offsets = {'type': 24, 'renderHeightOffset': 28, 'filterInTowerSizes': 32, 'filterInTowerSets': 40, 'filterOutSpecificTowers': 48, 'isBlocker': 56, 'isDisabled': 57, 'pivotPoint': 64, 'editorColor': 72, 'def': 96}    
    def __init__(self, type: Assets.Scripts.Models.Map.AreaType, renderHeightOffset: System.Single, filterInTowerSizes: System.String, filterInTowerSets: System.String, filterOutSpecificTowers: System.String, isBlocker: System.Boolean, isDisabled: System.Boolean, pivotPoint: UnityEngine.Transform, editorColor: UnityEngine.Color, def: Assets.Scripts.Models.Map.AreaModel, **kwargs):
        super().__init__(self, **kwargs)
		self.type = type
		self.renderHeightOffset = renderHeightOffset
		self.filterInTowerSizes = filterInTowerSizes
		self.filterInTowerSets = filterInTowerSets
		self.filterOutSpecificTowers = filterOutSpecificTowers
		self.isBlocker = isBlocker
		self.isDisabled = isDisabled
		self.pivotPoint = pivotPoint
		self.editorColor = editorColor
		self.def = def


class AreaLayoutType:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class BaseArea:

    offsets = {'type': 24}    
    def __init__(self, type: Assets.Scripts.Models.Map.AreaType, **kwargs):
        super().__init__(self, **kwargs)
		self.type = type


class BezierCurve:

    offsets = {'b': 16, 'c': 28, 'd': 40}    
    def __init__(self, b: UnityEngine.Vector3, c: UnityEngine.Vector3, d: UnityEngine.Vector3, **kwargs):
        super().__init__(self, **kwargs)
		self.b = b
		self.c = c
		self.d = d


class BezierLineNodes:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CoopArea:

    offsets = {'player': 24}    
    def __init__(self, player: Assets.Scripts.Unity.Map.Player, **kwargs):
        super().__init__(self, **kwargs)
		self.player = player


class CoopAreaDivisionType:

    offsets = {'divisionType': 24}    
    def __init__(self, divisionType: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.divisionType = divisionType


class CoopAreaLayout:

    offsets = {'layout': 24}    
    def __init__(self, layout: Assets.Scripts.Unity.Map.AreaLayoutType, **kwargs):
        super().__init__(self, **kwargs)
		self.layout = layout


class CoopAreaMark:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CoopPlayerIndicator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CurvedLineNodes:

    offsets = {'samplesPer100Units': 48}    
    def __init__(self, samplesPer100Units: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.samplesPer100Units = samplesPer100Units


class LeakPoint:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Map:

    offsets = {'drawMapBorder': 24, 'mapBorderThickness': 28, 'mapBorderColor': 32, 'mapBorderOutlineColor': 48, 'drawConsoleBorder': 64, 'consoleBorderThickness': 68, 'consoleBorderColor': 72, 'consoleBorderOutlineColor': 88}    
    def __init__(self, drawMapBorder: System.Boolean, mapBorderThickness: System.Single, mapBorderColor: UnityEngine.Color, mapBorderOutlineColor: UnityEngine.Color, drawConsoleBorder: System.Boolean, consoleBorderThickness: System.Single, consoleBorderColor: UnityEngine.Color, consoleBorderOutlineColor: UnityEngine.Color, **kwargs):
        super().__init__(self, **kwargs)
		self.drawMapBorder = drawMapBorder
		self.mapBorderThickness = mapBorderThickness
		self.mapBorderColor = mapBorderColor
		self.mapBorderOutlineColor = mapBorderOutlineColor
		self.drawConsoleBorder = drawConsoleBorder
		self.consoleBorderThickness = consoleBorderThickness
		self.consoleBorderColor = consoleBorderColor
		self.consoleBorderOutlineColor = consoleBorderOutlineColor


class MapLoader:

    offsets = {'currentMap': 16, 'currentMapName': 24, 'loadOperation': 32}    
    def __init__(self, currentMap: UnityEngine.GameObject, currentMapName: System.String, loadOperation: UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle<UnityEngine.ResourceManagement.ResourceProviders.SceneInstance>, **kwargs):
        super().__init__(self, **kwargs)
		self.currentMap = currentMap
		self.currentMapName = currentMapName
		self.loadOperation = loadOperation


class MapMods:

    offsets = {'bloonSpeed': 24}    
    def __init__(self, bloonSpeed: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonSpeed = bloonSpeed


class MapMusicTrack:

    offsets = {'assetId': 24}    
    def __init__(self, assetId: UnityEngine.AudioClip, **kwargs):
        super().__init__(self, **kwargs)
		self.assetId = assetId


class Path:

    offsets = {'isActive': 24, 'isHidden': 25, 'entrySplitter': 32, 'exitSplitter': 40, 'def': 48}    
    def __init__(self, isActive: System.Boolean, isHidden: System.Boolean, entrySplitter: Assets.Scripts.Unity.Map.Splitter, exitSplitter: Assets.Scripts.Unity.Map.Splitter, def: Assets.Scripts.Models.Map.PathModel, **kwargs):
        super().__init__(self, **kwargs)
		self.isActive = isActive
		self.isHidden = isHidden
		self.entrySplitter = entrySplitter
		self.exitSplitter = exitSplitter
		self.def = def


class PathPointInfo:

    offsets = {'id': 24, 'bloonScale': 32, 'moabScale': 36, 'bloonsInvulnerable': 40, 'moabsInvulnerable': 41}    
    def __init__(self, id: System.String, bloonScale: System.Single, moabScale: System.Single, bloonsInvulnerable: System.Boolean, moabsInvulnerable: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.id = id
		self.bloonScale = bloonScale
		self.moabScale = moabScale
		self.bloonsInvulnerable = bloonsInvulnerable
		self.moabsInvulnerable = moabsInvulnerable


class Player:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class PointSource:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PolyLineNodes:

    offsets = {'close': 24, 'editorColor': 28}    
    def __init__(self, close: System.Boolean, editorColor: UnityEngine.Color, **kwargs):
        super().__init__(self, **kwargs)
		self.close = close
		self.editorColor = editorColor


class RandomStateBehavior:

    offsets = {'paramName': 24, 'turnOffRandomSpeed': 32, 'numAnimChoices': 36, 'lastChosenState': 40, 'id': 44}    
    def __init__(self, paramName: System.String, turnOffRandomSpeed: System.Boolean, numAnimChoices: System.Int32, lastChosenState: System.Int32, id: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.paramName = paramName
		self.turnOffRandomSpeed = turnOffRandomSpeed
		self.numAnimChoices = numAnimChoices
		self.lastChosenState = lastChosenState
		self.id = id


class Removeable:

    offsets = {'removeableObject': 24, 'isActive': 32, 'menuName': 40, 'menuDescription': 48, 'removealCost': 56, 'defaultTerrianType': 60, 'denySellIfStackedTowers': 64, 'destroyArea': 65, 'textKey': 72, 'modPathId': 80, 'modPathBloonHeightOffset': 88, 'modPathMoabHeightOffset': 96, 'modPathBloonScale': 104, 'modPathMoabScale': 112, 'modPathBloonInvulnerabilitySet': 120, 'modPathMoabInvulnerabilitySet': 128, 'def': 136}    
    def __init__(self, removeableObject: UnityEngine.GameObject, isActive: System.Boolean, menuName: System.String, menuDescription: System.String, removealCost: System.Int32, defaultTerrianType: Assets.Scripts.Models.Map.AreaType, denySellIfStackedTowers: System.Boolean, destroyArea: System.Boolean, textKey: System.String, modPathId: System.String, modPathBloonHeightOffset: System.String, modPathMoabHeightOffset: System.String, modPathBloonScale: System.String, modPathMoabScale: System.String, modPathBloonInvulnerabilitySet: System.String, modPathMoabInvulnerabilitySet: System.String, def: Assets.Scripts.Models.Map.RemoveableModel, **kwargs):
        super().__init__(self, **kwargs)
		self.removeableObject = removeableObject
		self.isActive = isActive
		self.menuName = menuName
		self.menuDescription = menuDescription
		self.removealCost = removealCost
		self.defaultTerrianType = defaultTerrianType
		self.denySellIfStackedTowers = denySellIfStackedTowers
		self.destroyArea = destroyArea
		self.textKey = textKey
		self.modPathId = modPathId
		self.modPathBloonHeightOffset = modPathBloonHeightOffset
		self.modPathMoabHeightOffset = modPathMoabHeightOffset
		self.modPathBloonScale = modPathBloonScale
		self.modPathMoabScale = modPathMoabScale
		self.modPathBloonInvulnerabilitySet = modPathBloonInvulnerabilitySet
		self.modPathMoabInvulnerabilitySet = modPathMoabInvulnerabilitySet
		self.def = def


class ScrollTexture:

    offsets = {'rate': 24, 'min': 28, 'max': 32, 'horizontal': 36, 'flipUVX': 37, 'flipUVY': 38, 'material': 40, 'currentScroll': 48, 'rateMultiplayers': 56, 'finalRate': 64}    
    def __init__(self, rate: System.Single, min: System.Single, max: System.Single, horizontal: System.Boolean, flipUVX: System.Boolean, flipUVY: System.Boolean, material: UnityEngine.Material, currentScroll: System.Single, rateMultiplayers: System.Collections.Generic.List<System.Single>, finalRate: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.rate = rate
		self.min = min
		self.max = max
		self.horizontal = horizontal
		self.flipUVX = flipUVX
		self.flipUVY = flipUVY
		self.material = material
		self.currentScroll = currentScroll
		self.rateMultiplayers = rateMultiplayers
		self.finalRate = finalRate


class SpawnPoint:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Splitter:

    offsets = {'def': 32}    
    def __init__(self, def: Assets.Scripts.Models.Map.SplitterModel, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def


class TrackArrow:

    offsets = {'speed': 24, 'firstCoveragePercent': 28, 'secondCoveragePercent': 32, 'enterAndExitBuffer': 36, 'rate': 40, 'subRate': 44, 'numOfArrows': 48, 'firstColorStart': 52, 'firstColorEnd': 68, 'secondColorStart': 84, 'secondColorEnd': 100}    
    def __init__(self, speed: System.Single, firstCoveragePercent: System.Single, secondCoveragePercent: System.Single, enterAndExitBuffer: System.Single, rate: System.Single, subRate: System.Single, numOfArrows: System.Int32, firstColorStart: UnityEngine.Color, firstColorEnd: UnityEngine.Color, secondColorStart: UnityEngine.Color, secondColorEnd: UnityEngine.Color, **kwargs):
        super().__init__(self, **kwargs)
		self.speed = speed
		self.firstCoveragePercent = firstCoveragePercent
		self.secondCoveragePercent = secondCoveragePercent
		self.enterAndExitBuffer = enterAndExitBuffer
		self.rate = rate
		self.subRate = subRate
		self.numOfArrows = numOfArrows
		self.firstColorStart = firstColorStart
		self.firstColorEnd = firstColorEnd
		self.secondColorStart = secondColorStart
		self.secondColorEnd = secondColorEnd


class CreateObjectOnRemoveableSold:

    offsets = {'delay': 24, 'obj': 32, 'delayedAction': 40}    
    def __init__(self, delay: System.Single, obj: UnityEngine.GameObject, delayedAction: UnityEngine.Coroutine, **kwargs):
        super().__init__(self, **kwargs)
		self.delay = delay
		self.obj = obj
		self.delayedAction = delayedAction


class HideObjectOnRemoveableSold:

    offsets = {'delay': 24, 'obj': 32, 'delayedAction': 40}    
    def __init__(self, delay: System.Single, obj: UnityEngine.GameObject, delayedAction: UnityEngine.Coroutine, **kwargs):
        super().__init__(self, **kwargs)
		self.delay = delay
		self.obj = obj
		self.delayedAction = delayedAction


class InteractableClick:

    offsets = {'onClickHandler': 24, 'onClick': 32}    
    def __init__(self, onClickHandler: OnClickHandler, onClick: System.Action, **kwargs):
        super().__init__(self, **kwargs)
		self.onClickHandler = onClickHandler
		self.onClick = onClick


class InteractableClickSequence:

    offsets = {'syncToSimulation': 24, 'timeToBreakSequence': 48, 'regularSound': 56, 'failSound': 64, 'onSequenceComplete': 72, 'currSeq': 80, 'timer': 84}    
    def __init__(self, syncToSimulation: System.Boolean, timeToBreakSequence: System.Single, regularSound: UnityEngine.AudioClip, failSound: UnityEngine.AudioClip, onSequenceComplete: System.Action, currSeq: System.Int32, timer: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.syncToSimulation = syncToSimulation
		self.timeToBreakSequence = timeToBreakSequence
		self.regularSound = regularSound
		self.failSound = failSound
		self.onSequenceComplete = onSequenceComplete
		self.currSeq = currSeq
		self.timer = timer


class OnRemoveableSold:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PlayAnimationOnRemoveableSold:

    offsets = {'animator': 24, 'triggerId': 32, 'animationPrefab': 40, 'useGameObjectPosition': 48, 'position': 52, 'rotation': 64, 'monkeyAnimator': 80, 'simpleAnimator': 88, '_triggerTime': 96, 'clipLength': 100, 'prefab': 104, 'cloned': 112}    
    def __init__(self, animator: UnityEngine.Animator, triggerId: System.String, animationPrefab: UnityEngine.GameObject, useGameObjectPosition: System.Boolean, position: UnityEngine.Vector3, rotation: UnityEngine.Vector3, monkeyAnimator: Assets.Scripts.Unity.Display.Animation.MonkeyAnimationController, simpleAnimator: Assets.Scripts.Unity.Display.Animation.PlayableAnimatorSimple, _triggerTime: System.Single, clipLength: System.Single, prefab: UnityEngine.GameObject, cloned: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.animator = animator
		self.triggerId = triggerId
		self.animationPrefab = animationPrefab
		self.useGameObjectPosition = useGameObjectPosition
		self.position = position
		self.rotation = rotation
		self.monkeyAnimator = monkeyAnimator
		self.simpleAnimator = simpleAnimator
		self._triggerTime = _triggerTime
		self.clipLength = clipLength
		self.prefab = prefab
		self.cloned = cloned


class PlayEffectOnRemoveableSold:

    offsets = {'effectPrefab': 24, 'useGameObjectPosition': 32, 'position': 36, 'rotation': 48, 'delay': 60, 'duration': 64, 'effect': 72, 'triggerTime': 80, 'endTime': 84, 'particleLifespan': 88, 'positionUsingGameObjectTransform': 92, 'rotationUsingGameObjectTransform': 104}    
    def __init__(self, effectPrefab: UnityEngine.GameObject, useGameObjectPosition: System.Boolean, position: UnityEngine.Vector3, rotation: UnityEngine.Vector3, delay: System.Single, duration: System.Single, effect: UnityEngine.GameObject, triggerTime: System.Single, endTime: System.Single, particleLifespan: System.Single, positionUsingGameObjectTransform: UnityEngine.Vector3, rotationUsingGameObjectTransform: UnityEngine.Quaternion, **kwargs):
        super().__init__(self, **kwargs)
		self.effectPrefab = effectPrefab
		self.useGameObjectPosition = useGameObjectPosition
		self.position = position
		self.rotation = rotation
		self.delay = delay
		self.duration = duration
		self.effect = effect
		self.triggerTime = triggerTime
		self.endTime = endTime
		self.particleLifespan = particleLifespan
		self.positionUsingGameObjectTransform = positionUsingGameObjectTransform
		self.rotationUsingGameObjectTransform = rotationUsingGameObjectTransform


class PlaySoundOnRemoveableSold:

    offsets = {'playInteractableAudio': 24}    
    def __init__(self, playInteractableAudio: Assets.Scripts.Unity.UI_New.Main.WorldItems.PlayInteractableAudio, **kwargs):
        super().__init__(self, **kwargs)
		self.playInteractableAudio = playInteractableAudio


class Stormy:

    offsets = {'minTime': 32, 'maxTime': 36, 'objectDuration': 40, 'minMaxX': 44, 'minMaxZ': 52, 'timer': 60, 'nextCreationTime': 64, 'objPool': 72, 'livinObjects': 80}    
    def __init__(self, minTime: System.Single, maxTime: System.Single, objectDuration: System.Single, minMaxX: UnityEngine.Vector2, minMaxZ: UnityEngine.Vector2, timer: System.Single, nextCreationTime: System.Single, objPool: System.Collections.Generic.Dictionary<System.Int32,System.Collections.Generic.List<UnityEngine.GameObject>>, livinObjects: System.Collections.Generic.List<Assets.Scripts.Unity.Map.Effects.Stormy.ObjectTime>, **kwargs):
        super().__init__(self, **kwargs)
		self.minTime = minTime
		self.maxTime = maxTime
		self.objectDuration = objectDuration
		self.minMaxX = minMaxX
		self.minMaxZ = minMaxZ
		self.timer = timer
		self.nextCreationTime = nextCreationTime
		self.objPool = objPool
		self.livinObjects = livinObjects


class CandyFallsOompaChecker:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class GizmoTimeDisplay:

    offsets = {'text': 24}    
    def __init__(self, text: TMPro.TextMeshPro, **kwargs):
        super().__init__(self, **kwargs)
		self.text = text


class MapGizmo:

    offsets = {'timeDisplay': 40, 'def': 48}    
    def __init__(self, timeDisplay: Assets.Scripts.Unity.Map.Gizmos.GizmoTimeDisplay, def: Assets.Scripts.Models.Map.Gizmos.MapGizmoModel, **kwargs):
        super().__init__(self, **kwargs)
		self.timeDisplay = timeDisplay
		self.def = def


class MapGizmoBehavior:

    offsets = {'<Def>k__BackingField': 24}    
    def __init__(self, <Def>k__BackingField: Assets.Scripts.Models.Map.Gizmos.MapGizmoBehaviorModel, **kwargs):
        super().__init__(self, **kwargs)
		self.<Def>k__BackingField = <Def>k__BackingField


class WorkshopPowerCore:

    offsets = {'duration': 32, 'firstUseCost': 36, 'roundCost': 40, 'roundsPerCostTier': 44, 'costPerTimesUsed': 48, 'def': 72}    
    def __init__(self, duration: System.Single, firstUseCost: System.Int32, roundCost: System.Int32, roundsPerCostTier: System.Int32, costPerTimesUsed: System.Int32, def: Assets.Scripts.Models.Map.Gizmos.WorkshopPowerCoreModel, **kwargs):
        super().__init__(self, **kwargs)
		self.duration = duration
		self.firstUseCost = firstUseCost
		self.roundCost = roundCost
		self.roundsPerCostTier = roundsPerCostTier
		self.costPerTimesUsed = costPerTimesUsed
		self.def = def


class WorkshopReverseMotor:

    offsets = {'duration': 32, 'firstUseCost': 36, 'roundCost': 40, 'roundsPerCostTier': 44, 'costPerTimesUsed': 48, 'globalMapSpeedSet': 52, 'def': 56}    
    def __init__(self, duration: System.Single, firstUseCost: System.Int32, roundCost: System.Int32, roundsPerCostTier: System.Int32, costPerTimesUsed: System.Int32, globalMapSpeedSet: System.Single, def: Assets.Scripts.Models.Map.Gizmos.WorkshopReverseMotorModel, **kwargs):
        super().__init__(self, **kwargs)
		self.duration = duration
		self.firstUseCost = firstUseCost
		self.roundCost = roundCost
		self.roundsPerCostTier = roundsPerCostTier
		self.costPerTimesUsed = costPerTimesUsed
		self.globalMapSpeedSet = globalMapSpeedSet
		self.def = def


class AlternateBloonSplitter:

    offsets = {'def': 40}    
    def __init__(self, def: Assets.Scripts.Models.Map.Spawners.AlternateBloonsSplitterModel, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def


class AlternateRoundMultiPathSplitter:

    offsets = {'def': 48}    
    def __init__(self, def: Assets.Scripts.Models.Map.Spawners.AlternateRoundMultiPathSplitterModel, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def


class AlternateRoundSplitter:

    offsets = {'def': 40}    
    def __init__(self, def: Assets.Scripts.Models.Map.Spawners.AlternateRoundSplitterModel, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def


class MoabOnlySplitter:

    offsets = {'def': 48}    
    def __init__(self, def: Assets.Scripts.Models.Map.Spawners.MoabOnlySplitterModel, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def


class PathSpawner:

    offsets = {'forwardSplitter': 24, 'reverseSplitter': 32, 'def': 40}    
    def __init__(self, forwardSplitter: Assets.Scripts.Unity.Map.Splitter, reverseSplitter: Assets.Scripts.Unity.Map.Splitter, def: Assets.Scripts.Models.Map.Spawners.PathSpawnerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.forwardSplitter = forwardSplitter
		self.reverseSplitter = reverseSplitter
		self.def = def


class RuleBossBloon:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RulePrimeNumberRound:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RuleSplitter:

    offsets = {'def': 48}    
    def __init__(self, def: Assets.Scripts.Models.Map.Spawners.RuleSplitterModel, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def


class SplitterRule:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AdjustShaderAction:

    offsets = {'propertyName': 24, 'transitionTime': 32, 'propertyId': 36, 'startedTransitioningAt': 40, 'transitioning': 44}    
    def __init__(self, propertyName: System.String, transitionTime: System.Single, propertyId: System.Int32, startedTransitioningAt: System.Single, transitioning: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.propertyName = propertyName
		self.transitionTime = transitionTime
		self.propertyId = propertyId
		self.startedTransitioningAt = startedTransitioningAt
		self.transitioning = transitioning


class AdoraSunGodDarkMapTrigger:

    offsets = {'def': 24}    
    def __init__(self, def: Assets.Scripts.Models.Map.Triggers.AdoraSunGodDarkMapTriggerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def


class AfterRoundTrigger:

    offsets = {'round': 24, 'everyNthRound': 28, 'usePrimeNumbers': 32, 'def': 40}    
    def __init__(self, round: System.Int32, everyNthRound: System.Int32, usePrimeNumbers: System.Boolean, def: Assets.Scripts.Models.Map.Triggers.AfterRoundTriggerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.round = round
		self.everyNthRound = everyNthRound
		self.usePrimeNumbers = usePrimeNumbers
		self.def = def


class ChangeEmitProjectileAction:

    offsets = {'mapEvent': 24, 'newProjectile': 32, 'def': 40}    
    def __init__(self, mapEvent: Assets.Scripts.Unity.Map.Triggers.MapEvent, newProjectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, def: Assets.Scripts.Models.Map.Actions.MapActionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.mapEvent = mapEvent
		self.newProjectile = newProjectile
		self.def = def


class ChangeSimTimeElapsedTriggerAction:

    offsets = {'mapEvent': 24, 'timeReduction': 32, 'def': 40}    
    def __init__(self, mapEvent: Assets.Scripts.Unity.Map.Triggers.MapEvent, timeReduction: System.Single, def: Assets.Scripts.Models.Map.Actions.MapActionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.mapEvent = mapEvent
		self.timeReduction = timeReduction
		self.def = def


class CreateAreaAction:

    offsets = {'area': 24, 'def': 32}    
    def __init__(self, area: Assets.Scripts.Unity.Map.Area, def: Assets.Scripts.Models.Map.Actions.CreateAreaActionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.area = area
		self.def = def


class CreateTowerAction:

    offsets = {'preferredReleaseMarker': 24, 'preferredReverseReleaseMarker': 32, 'towerId': 40, 'minDistance': 48, 'maxDistance': 52, 'pointDistance': 56, 'idealDistanceWithinTrack': 60, 'delay': 64, 'def': 72}    
    def __init__(self, preferredReleaseMarker: UnityEngine.GameObject, preferredReverseReleaseMarker: UnityEngine.GameObject, towerId: System.String, minDistance: System.Single, maxDistance: System.Single, pointDistance: System.Single, idealDistanceWithinTrack: System.Single, delay: System.Single, def: Assets.Scripts.Models.Map.Actions.CreateTowerActionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.preferredReleaseMarker = preferredReleaseMarker
		self.preferredReverseReleaseMarker = preferredReverseReleaseMarker
		self.towerId = towerId
		self.minDistance = minDistance
		self.maxDistance = maxDistance
		self.pointDistance = pointDistance
		self.idealDistanceWithinTrack = idealDistanceWithinTrack
		self.delay = delay
		self.def = def


class DestroyAreaAction:

    offsets = {'area': 24, 'def': 32}    
    def __init__(self, area: Assets.Scripts.Unity.Map.Area, def: Assets.Scripts.Models.Map.Actions.DestroyAreaActionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.area = area
		self.def = def


class EmitProjectileAction:

    offsets = {'projectile': 24, 'projectileDisplay': 32, 'emission': 40, 'position': 48, 'delay': 56, 'setDirection': 60, 'emitRotationDegrees': 64, 'targetPriority': 72, 'targetRange': 80, 'def': 88}    
    def __init__(self, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, projectileDisplay: Assets.Scripts.Utils.PrefabReference, emission: Assets.Scripts.Unity.Towers.Emissions.Emission, position: UnityEngine.GameObject, delay: System.Single, setDirection: System.Boolean, emitRotationDegrees: System.Single, targetPriority: System.String, targetRange: System.Single, def: Assets.Scripts.Models.Map.Actions.MapActionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.projectile = projectile
		self.projectileDisplay = projectileDisplay
		self.emission = emission
		self.position = position
		self.delay = delay
		self.setDirection = setDirection
		self.emitRotationDegrees = emitRotationDegrees
		self.targetPriority = targetPriority
		self.targetRange = targetRange
		self.def = def


class EnableGameObjectAction:

    offsets = {'turnOn': 32, 'turnOff': 33, 'delay': 36, 'currentFrame': 40, 'showedObject': 44, 'triggered': 45, 'orgStates': 48}    
    def __init__(self, turnOn: System.Boolean, turnOff: System.Boolean, delay: System.Single, currentFrame: System.Int32, showedObject: System.Boolean, triggered: System.Boolean, orgStates: System.Collections.Generic.List<System.Boolean>, **kwargs):
        super().__init__(self, **kwargs)
		self.turnOn = turnOn
		self.turnOff = turnOff
		self.delay = delay
		self.currentFrame = currentFrame
		self.showedObject = showedObject
		self.triggered = triggered
		self.orgStates = orgStates


class InteractableClickSequenceTrigger:

    offsets = {'interactableClickSequence': 24, 'def': 32}    
    def __init__(self, interactableClickSequence: Assets.Scripts.Unity.Map.Effects.InteractableClickSequence, def: Assets.Scripts.Models.Map.Triggers.InteractableClickSequenceTriggerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.interactableClickSequence = interactableClickSequence
		self.def = def


class InteractableClickTrigger:

    offsets = {'interactableClick': 24, 'def': 32}    
    def __init__(self, interactableClick: Assets.Scripts.Unity.Map.Effects.InteractableClick, def: Assets.Scripts.Models.Map.Triggers.InteractableClickTriggerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.interactableClick = interactableClick
		self.def = def


class MapAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MapEvent:

    offsets = {'oneTimeEvent': 24, 'allTriggersRequired': 25, 'inactiveByDefault': 26, 'triggers': 32, 'actions': 40, 'unityActions': 48, 'def': 56}    
    def __init__(self, oneTimeEvent: System.Boolean, allTriggersRequired: System.Boolean, inactiveByDefault: System.Boolean, triggers: System.Collections.Generic.List<Assets.Scripts.Unity.Map.Triggers.MapTrigger>, actions: System.Collections.Generic.List<Assets.Scripts.Unity.Map.Triggers.MapAction>, unityActions: System.Collections.Generic.List<Assets.Scripts.Unity.Map.Triggers.MapUnityAction>, def: Assets.Scripts.Models.Map.Triggers.MapEventModel, **kwargs):
        super().__init__(self, **kwargs)
		self.oneTimeEvent = oneTimeEvent
		self.allTriggersRequired = allTriggersRequired
		self.inactiveByDefault = inactiveByDefault
		self.triggers = triggers
		self.actions = actions
		self.unityActions = unityActions
		self.def = def


class MapEventActiveAction:

    offsets = {'mapEvent': 24, 'setToActive': 32}    
    def __init__(self, mapEvent: Assets.Scripts.Unity.Map.Triggers.MapEvent, setToActive: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.mapEvent = mapEvent
		self.setToActive = setToActive


class MapTrigger:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MapUnityAction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MovingPlatformAction:

    offsets = {'animator': 32, 'animClip': 40, 'startingState': 48, 'xPosCurve': 72, 'zPosCurve': 80, 'yRotCurve': 88, 'def': 96}    
    def __init__(self, animator: UnityEngine.Animator, animClip: UnityEngine.AnimationClip, startingState: System.Int32, xPosCurve: UnityEngine.AnimationCurve, zPosCurve: UnityEngine.AnimationCurve, yRotCurve: UnityEngine.AnimationCurve, def: Assets.Scripts.Models.Map.Actions.MovingPlatformActionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.animator = animator
		self.animClip = animClip
		self.startingState = startingState
		self.xPosCurve = xPosCurve
		self.zPosCurve = zPosCurve
		self.yRotCurve = yRotCurve
		self.def = def


class OnProjectileHitTrigger:

    offsets = {'collisionMarker': 24, 'collisionRadius': 32, 'hitRangeMin': 36, 'hitRangeMax': 40, 'projectileChipTag': 48, 'def': 56}    
    def __init__(self, collisionMarker: UnityEngine.GameObject, collisionRadius: System.Single, hitRangeMin: System.Int32, hitRangeMax: System.Int32, projectileChipTag: System.String, def: Assets.Scripts.Models.Map.Triggers.OnProjectileHitTriggerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.collisionMarker = collisionMarker
		self.collisionRadius = collisionRadius
		self.hitRangeMin = hitRangeMin
		self.hitRangeMax = hitRangeMax
		self.projectileChipTag = projectileChipTag
		self.def = def


class PathActiveAction:

    offsets = {'path': 24, 'setActiveToo': 32, 'def': 40}    
    def __init__(self, path: Assets.Scripts.Unity.Map.Path, setActiveToo: System.Boolean, def: Assets.Scripts.Models.Map.Actions.PathActiveActionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.path = path
		self.setActiveToo = setActiveToo
		self.def = def


class PlayAnimationAction:

    offsets = {'anim': 24, 'resetLabel': 32, 'triggerLabel': 40, 'postTriggerLabel': 48}    
    def __init__(self, anim: UnityEngine.Animator, resetLabel: System.String, triggerLabel: System.String, postTriggerLabel: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.anim = anim
		self.resetLabel = resetLabel
		self.triggerLabel = triggerLabel
		self.postTriggerLabel = postTriggerLabel


class PlayEffectAction:

    offsets = {'delay': 32, 'currentFrame': 36, 'effectPlayed': 40, 'triggered': 41}    
    def __init__(self, delay: System.Single, currentFrame: System.Int32, effectPlayed: System.Boolean, triggered: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.delay = delay
		self.currentFrame = currentFrame
		self.effectPlayed = effectPlayed
		self.triggered = triggered


class PlaySoundUnityAction:

    offsets = {'sounds': 24, 'playInteractableAudio': 32, 'useAudioSequencer': 40}    
    def __init__(self, sounds: System.Collections.Generic.List<UnityEngine.AudioClip>, playInteractableAudio: Assets.Scripts.Unity.UI_New.Main.WorldItems.PlayInteractableAudio, useAudioSequencer: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.sounds = sounds
		self.playInteractableAudio = playInteractableAudio
		self.useAudioSequencer = useAudioSequencer


class PreBloonSpawnTrigger:

    offsets = {'bloonTag': 24, 'def': 32}    
    def __init__(self, bloonTag: System.String, def: Assets.Scripts.Models.Map.Triggers.PreBloonSpawnTriggerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonTag = bloonTag
		self.def = def


class RemovableActiveAction:

    offsets = {'removeable': 24, 'setActiveToo': 32, 'def': 40}    
    def __init__(self, removeable: Assets.Scripts.Unity.Map.Removeable, setActiveToo: System.Boolean, def: Assets.Scripts.Models.Map.Actions.RemovableActiveActionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.removeable = removeable
		self.setActiveToo = setActiveToo
		self.def = def


class RemoveableSoldTrigger:

    offsets = {'removeable': 24, 'def': 32}    
    def __init__(self, removeable: Assets.Scripts.Unity.Map.Removeable, def: Assets.Scripts.Models.Map.Triggers.RemoveableSoldTriggerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.removeable = removeable
		self.def = def


class ReverseModeTrigger:

    offsets = {'def': 24}    
    def __init__(self, def: Assets.Scripts.Models.Map.Triggers.ReverseModeTriggerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def


class RotateAreaAction:

    offsets = {'area': 24, 'rotation': 32, 'duration': 36, 'startSound': 48, 'stopSound': 56, 'def': 64}    
    def __init__(self, area: Assets.Scripts.Unity.Map.Area, rotation: System.Single, duration: System.Single, startSound: UnityEngine.AudioClip, stopSound: UnityEngine.AudioClip, def: Assets.Scripts.Models.Map.Actions.RotateAreaActionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.area = area
		self.rotation = rotation
		self.duration = duration
		self.startSound = startSound
		self.stopSound = stopSound
		self.def = def


class ScrollTextureChangeAction:

    offsets = {'scrollTextures': 24, 'enableScrollTexture': 32, 'disableScrollTexture': 33, 'applyMultiplier': 34, 'removeMultiplier': 35, 'scrollSpeedMul': 36, 'flipUVX': 40, 'flipUVY': 41, 'actionPerformed': 42, 'orgEnableStates': 48}    
    def __init__(self, scrollTextures: System.Collections.Generic.List<Assets.Scripts.Unity.Map.ScrollTexture>, enableScrollTexture: System.Boolean, disableScrollTexture: System.Boolean, applyMultiplier: System.Boolean, removeMultiplier: System.Boolean, scrollSpeedMul: System.Single, flipUVX: System.Boolean, flipUVY: System.Boolean, actionPerformed: System.Boolean, orgEnableStates: System.Collections.Generic.List<System.Boolean>, **kwargs):
        super().__init__(self, **kwargs)
		self.scrollTextures = scrollTextures
		self.enableScrollTexture = enableScrollTexture
		self.disableScrollTexture = disableScrollTexture
		self.applyMultiplier = applyMultiplier
		self.removeMultiplier = removeMultiplier
		self.scrollSpeedMul = scrollSpeedMul
		self.flipUVX = flipUVX
		self.flipUVY = flipUVY
		self.actionPerformed = actionPerformed
		self.orgEnableStates = orgEnableStates


class SellRemoveableAction:

    offsets = {'removeable': 24, 'def': 32}    
    def __init__(self, removeable: Assets.Scripts.Unity.Map.Removeable, def: Assets.Scripts.Models.Map.Actions.SellRemoveableActionModel, **kwargs):
        super().__init__(self, **kwargs)
		self.removeable = removeable
		self.def = def


class SimTimeElapsedTrigger:

    offsets = {'time': 24, 'rounds': 28, 'useRoundTime': 32, 'def': 40}    
    def __init__(self, time: System.Single, rounds: System.Int32, useRoundTime: System.Boolean, def: Assets.Scripts.Models.Map.Triggers.SimTimeElapsedTriggerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.time = time
		self.rounds = rounds
		self.useRoundTime = useRoundTime
		self.def = def


class StartMapTrigger:

    offsets = {'def': 24}    
    def __init__(self, def: Assets.Scripts.Models.Map.Triggers.StartMapTriggerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def


class StartRoundTrigger:

    offsets = {'round': 24, 'everyNthRound': 28, 'usePrimeNumbers': 32, 'def': 40}    
    def __init__(self, round: System.Int32, everyNthRound: System.Int32, usePrimeNumbers: System.Boolean, def: Assets.Scripts.Models.Map.Triggers.StartRoundTriggerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.round = round
		self.everyNthRound = everyNthRound
		self.usePrimeNumbers = usePrimeNumbers
		self.def = def


class TowerInAreaTrigger:

    offsets = {'def': 24, 'area': 32, 'towerId': 40, 'mustIncludeAllMutators': 64}    
    def __init__(self, def: Assets.Scripts.Models.Map.Triggers.TowerInAreaTriggerModel, area: Assets.Scripts.Unity.Map.Area, towerId: System.String, mustIncludeAllMutators: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def
		self.area = area
		self.towerId = towerId
		self.mustIncludeAllMutators = mustIncludeAllMutators


class GameMenu:

    offsets = {'hasReOpenAnimation': 24, 'anim': 32, 'transitionId': 40, 'commonPanel': 48}    
    def __init__(self, hasReOpenAnimation: System.Boolean, anim: UnityEngine.Animator, transitionId: System.Int32, commonPanel: Assets.Scripts.Unity.UI_New.CommonPanel, **kwargs):
        super().__init__(self, **kwargs)
		self.hasReOpenAnimation = hasReOpenAnimation
		self.anim = anim
		self.transitionId = transitionId
		self.commonPanel = commonPanel


class GameMenuWithSettings:

    offsets = {'inGameData': 56}    
    def __init__(self, inGameData: Assets.Scripts.Utils.Helpers.InGameData, **kwargs):
        super().__init__(self, **kwargs)
		self.inGameData = inGameData


class MenuManager:
	instance: Assets.Scripts.Unity.Menu.MenuManager
    offsets = {'instance': 0, 'titleMusic': 24, 'buttonClickSound': 32, 'buttonClick2Sound': 40, 'buttonClick3Sound': 48, 'returnSound': 56, 'return2Sound': 64, 'menuCameras': 72, 'ingameCameras': 80, 'menuStack': 88, 'menuQueue': 96, 'menuStackHistory': 104, 'dontUnload': 112, 'currMenu': 120, 'transitioning': 136, 'openingMenuAnimComplete': 137, 'closingMenuAnimComplete': 138, 'closingMenuName': 144, 'transitionEndAction': 152, 'inGame': 160, 'worldLoadedName': 168, 'activeAnimCoroutines': 176, 'hasInitialLoadingFinished': 184, 'onMenusOpened': 192, 'onMenusClosed': 200, 'sceneInstanceDict': 208, 'loadingScreen': 216}    
    def __init__(self, instance: Assets.Scripts.Unity.Menu.MenuManager, titleMusic: UnityEngine.AudioClip, buttonClickSound: UnityEngine.AudioClip, buttonClick2Sound: UnityEngine.AudioClip, buttonClick3Sound: UnityEngine.AudioClip, returnSound: UnityEngine.AudioClip, return2Sound: UnityEngine.AudioClip, menuCameras: UnityEngine.GameObject, ingameCameras: UnityEngine.GameObject, menuStack: System.Collections.Generic.List<System.ValueTuple<System.String,System.Object>>, menuQueue: System.Collections.Generic.List<System.ValueTuple<System.String,System.Object>>, menuStackHistory: System.Collections.Generic.List<System.ValueTuple<System.String,System.Object>>, dontUnload: System.Collections.Generic.List<System.String>, currMenu: System.ValueTuple<System.String,Assets.Scripts.Unity.Menu.GameMenu>, transitioning: System.Boolean, openingMenuAnimComplete: System.Boolean, closingMenuAnimComplete: System.Boolean, closingMenuName: System.String, transitionEndAction: System.Action, inGame: System.Boolean, worldLoadedName: System.String, activeAnimCoroutines: System.Collections.Generic.List<UnityEngine.Coroutine>, hasInitialLoadingFinished: System.Boolean, onMenusOpened: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Unity.Menu.MenuManager.OnMenuEvent>, onMenusClosed: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Unity.Menu.MenuManager.OnMenuEvent>, sceneInstanceDict: System.Collections.Generic.Dictionary<System.String,UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle<UnityEngine.ResourceManagement.ResourceProviders.SceneInstance>>, loadingScreen: Assets.Main.AnimatedSceneLoader<Assets.Main.Scenes.LoadingScreen>, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.titleMusic = titleMusic
		self.buttonClickSound = buttonClickSound
		self.buttonClick2Sound = buttonClick2Sound
		self.buttonClick3Sound = buttonClick3Sound
		self.returnSound = returnSound
		self.return2Sound = return2Sound
		self.menuCameras = menuCameras
		self.ingameCameras = ingameCameras
		self.menuStack = menuStack
		self.menuQueue = menuQueue
		self.menuStackHistory = menuStackHistory
		self.dontUnload = dontUnload
		self.currMenu = currMenu
		self.transitioning = transitioning
		self.openingMenuAnimComplete = openingMenuAnimComplete
		self.closingMenuAnimComplete = closingMenuAnimComplete
		self.closingMenuName = closingMenuName
		self.transitionEndAction = transitionEndAction
		self.inGame = inGame
		self.worldLoadedName = worldLoadedName
		self.activeAnimCoroutines = activeAnimCoroutines
		self.hasInitialLoadingFinished = hasInitialLoadingFinished
		self.onMenusOpened = onMenusOpened
		self.onMenusClosed = onMenusClosed
		self.sceneInstanceDict = sceneInstanceDict
		self.loadingScreen = loadingScreen


class Btd6CoopGame:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Btd6CoopGameNetworked:

    offsets = {'<OwnPlayerNumber>k__BackingField': 16, '<NumPlayers>k__BackingField': 17, 'Connection': 24, 'PlayersInfo': 32, 'eapn': 40}    
    def __init__(self, <OwnPlayerNumber>k__BackingField: System.Byte, <NumPlayers>k__BackingField: System.Byte, Connection: NinjaKiwi.LiNK.Lobbies.GameConnection, PlayersInfo: System.Collections.Generic.Dictionary<System.Byte,Assets.Scripts.Unity.Network.CoopPlayerInfo>, eapn: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.<OwnPlayerNumber>k__BackingField = <OwnPlayerNumber>k__BackingField
		self.<NumPlayers>k__BackingField = <NumPlayers>k__BackingField
		self.Connection = Connection
		self.PlayersInfo = PlayersInfo
		self.eapn = eapn


class Btd6CoopGameReplay:

    offsets = {'<OwnPlayerNumber>k__BackingField': 16, '<NumPlayers>k__BackingField': 17, 'replay': 24}    
    def __init__(self, <OwnPlayerNumber>k__BackingField: System.Byte, <NumPlayers>k__BackingField: System.Byte, replay: Assets.Scripts.Unity.Network.Replay, **kwargs):
        super().__init__(self, **kwargs)
		self.<OwnPlayerNumber>k__BackingField = <OwnPlayerNumber>k__BackingField
		self.<NumPlayers>k__BackingField = <NumPlayers>k__BackingField
		self.replay = replay


class Btd6LobbyParameters:

    offsets = {'Difficulty': 16, 'Map': 24, 'Mode': 32, 'TrackType': 40, 'MaxPlayers': 48, 'GameType': 52, 'GameSettingsId': 56, 'PublicWhenCreated': 64, 'CreatorSpec': 72, 'FuturePublicBucketName': 80}    
    def __init__(self, Difficulty: System.String, Map: System.String, Mode: System.String, TrackType: System.String, MaxPlayers: System.Int32, GameType: System.Int32, GameSettingsId: System.String, PublicWhenCreated: System.Boolean, CreatorSpec: System.String, FuturePublicBucketName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.Difficulty = Difficulty
		self.Map = Map
		self.Mode = Mode
		self.TrackType = TrackType
		self.MaxPlayers = MaxPlayers
		self.GameType = GameType
		self.GameSettingsId = GameSettingsId
		self.PublicWhenCreated = PublicWhenCreated
		self.CreatorSpec = CreatorSpec
		self.FuturePublicBucketName = FuturePublicBucketName


class Btd6MatchMakingParameters:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Btd6MatchMakingParametersExtensions:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Btd6Message:
	nextMessageId: System.Int32
    offsets = {'nextMessageId': 0, 'encoders': 8, 'code': 16, 'fromPlayer': 20, 'toPlayer': 21, 'messageId': 24, 'content': 32}    
    def __init__(self, nextMessageId: System.Int32, encoders: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Unity.Network.Btd6MessageEncoder>, code: System.Int32, fromPlayer: System.Byte, toPlayer: System.Byte, messageId: System.Int32, content: System.Object, **kwargs):
        super().__init__(self, **kwargs)
		self.nextMessageId = nextMessageId
		self.encoders = encoders
		self.code = code
		self.fromPlayer = fromPlayer
		self.toPlayer = toPlayer
		self.messageId = messageId
		self.content = content


class Btd6MessageEncoder:

    offsets = {'encode': 16, 'decode': 24}    
    def __init__(self, encode: System.Action<System.IO.BinaryWriter,System.Object>, decode: System.Func<System.IO.BinaryReader,System.Object>, **kwargs):
        super().__init__(self, **kwargs)
		self.encode = encode
		self.decode = decode


class CoopPlayerInfo:

    offsets = {'Info': 16, '<NetworkInfo>k__BackingField': 24, 'PlayerNumber': 32}    
    def __init__(self, Info: Assets.Scripts.Models.PlayerInfo, <NetworkInfo>k__BackingField: Assets.Scripts.Unity.Network.NetworkInfo, PlayerNumber: System.Byte, **kwargs):
        super().__init__(self, **kwargs)
		self.Info = Info
		self.<NetworkInfo>k__BackingField = <NetworkInfo>k__BackingField
		self.PlayerNumber = PlayerNumber


class CoopSkuSettings:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class NetworkInfo:

    offsets = {'Status': 16, 'IsAwol': 20, 'IsDisconnected': 21, 'Latency': 24, 'LatencyVariance': 32}    
    def __init__(self, Status: Assets.Scripts.Unity.Network.NetworkStatus, IsAwol: System.Boolean, IsDisconnected: System.Boolean, Latency: System.TimeSpan, LatencyVariance: System.TimeSpan, **kwargs):
        super().__init__(self, **kwargs)
		self.Status = Status
		self.IsAwol = IsAwol
		self.IsDisconnected = IsDisconnected
		self.Latency = Latency
		self.LatencyVariance = LatencyVariance


class NetworkStatus:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class PlayerEnumerableExtensions:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PlayerInfoExtensions:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class QuickMatch:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Replay:

    offsets = {'randomSeed': 16, 'ownPlayerNumber': 20, 'numPlayers': 21, 'inGameData': 24, 'actions': 168, 'desyncChecks': 176, 'otherPlayersList': 184, 'allPlayersList': 192}    
    def __init__(self, randomSeed: System.Int32, ownPlayerNumber: System.Byte, numPlayers: System.Byte, inGameData: Assets.Scripts.Utils.Helpers.InGameData, actions: System.Collections.Generic.List<Assets.Scripts.Unity.Bridge.NetworkedUnityToSimulation.Action>, desyncChecks: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Unity.Bridge.NetworkedUnityToSimulation.DesyncCheck>, otherPlayersList: System.Collections.Generic.List<Assets.Scripts.Unity.Network.CoopPlayerInfo>, allPlayersList: System.Collections.Generic.List<Assets.Scripts.Unity.Network.CoopPlayerInfo>, **kwargs):
        super().__init__(self, **kwargs)
		self.randomSeed = randomSeed
		self.ownPlayerNumber = ownPlayerNumber
		self.numPlayers = numPlayers
		self.inGameData = inGameData
		self.actions = actions
		self.desyncChecks = desyncChecks
		self.otherPlayersList = otherPlayersList
		self.allPlayersList = allPlayersList


class AppleLogin:
	s_signInWithApple: UnityEngine.SignInWithApple.SignInWithApple
    offsets = {'s_signInWithApple': 0, 'Logger': 16}    
    def __init__(self, s_signInWithApple: UnityEngine.SignInWithApple.SignInWithApple, Logger: NinjaKiwi.LiNK.Utils.MultiLevelLogger, **kwargs):
        super().__init__(self, **kwargs)
		self.s_signInWithApple = s_signInWithApple
		self.Logger = Logger


class AuthException:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class GameCenterLogin:

    offsets = {'Logger': 16, 'TriedAuth': 24}    
    def __init__(self, Logger: NinjaKiwi.LiNK.Utils.MultiLevelLogger, TriedAuth: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.Logger = Logger
		self.TriedAuth = TriedAuth


class GooglePlayAchievements:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class GooglePlayLogin:

    offsets = {'Logger': 16}    
    def __init__(self, Logger: NinjaKiwi.LiNK.Utils.MultiLevelLogger, **kwargs):
        super().__init__(self, **kwargs)
		self.Logger = Logger


class PlatformLogins:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SteamLogin:

    offsets = {'Logger': 16}    
    def __init__(self, Logger: NinjaKiwi.LiNK.Utils.MultiLevelLogger, **kwargs):
        super().__init__(self, **kwargs)
		self.Logger = Logger


class Btd6Player:

    offsets = {'debugUnlockAllUpgrades': 152, 'debugUnlockAllTowers': 153, 'debugSeenAllRounds': 154, '<LastSyncTime>k__BackingField': 160, 'trophySyncTask': 168, 'OnXpRankChanged': 176, 'onlineProfileModel': 184, 'OnOnlineProfileRefreshed': 192, 'OnRacePassBalanceChanged': 200, 'racePassSyncTask': 208, 'instaTowersQuanityChanged': 216, 'Hakxr': 224, 'odysseySaveData': 232}    
    def __init__(self, debugUnlockAllUpgrades: System.Boolean, debugUnlockAllTowers: System.Boolean, debugSeenAllRounds: System.Boolean, <LastSyncTime>k__BackingField: System.DateTime, trophySyncTask: System.Threading.Tasks.Task, OnXpRankChanged: System.Action, onlineProfileModel: Assets.Scripts.Models.Profile.OnlineProfileModel, OnOnlineProfileRefreshed: System.Action, OnRacePassBalanceChanged: System.Action, racePassSyncTask: System.Threading.Tasks.Task, instaTowersQuanityChanged: System.Action, Hakxr: Assets.Scripts.Unity.Player.Btd6Player.HakrStatus, odysseySaveData: Assets.Scripts.Unity.UI_New.Odyssey.SubScripts.OdysseySaveData, **kwargs):
        super().__init__(self, **kwargs)
		self.debugUnlockAllUpgrades = debugUnlockAllUpgrades
		self.debugUnlockAllTowers = debugUnlockAllTowers
		self.debugSeenAllRounds = debugSeenAllRounds
		self.<LastSyncTime>k__BackingField = <LastSyncTime>k__BackingField
		self.trophySyncTask = trophySyncTask
		self.OnXpRankChanged = OnXpRankChanged
		self.onlineProfileModel = onlineProfileModel
		self.OnOnlineProfileRefreshed = OnOnlineProfileRefreshed
		self.OnRacePassBalanceChanged = OnRacePassBalanceChanged
		self.racePassSyncTask = racePassSyncTask
		self.instaTowersQuanityChanged = instaTowersQuanityChanged
		self.Hakxr = Hakxr
		self.odysseySaveData = odysseySaveData


class Btd6PlayerStats:

    offsets = {'playerId': 16, 'playerName': 24, 'playerRank': 32, 'playerXp': 36, 'veteranRank': 40, 'veteranXp': 48, 'avatar': 56, 'frame': 64, 'banner': 72, 'gameCount': 80, 'gamesWon': 84, 'highestRound': 88, 'monkeysPlaced': 92, 'bloonsPopped': 96, 'camosPopped': 104, 'leadsPopped': 112, 'purplesPopped': 120, 'regrowsPopped': 128, 'ceramicsPopped': 136, 'moabsPopped': 144, 'bfbsPopped': 148, 'zomgsPopped': 152, 'ddtsPopped': 156, 'badsPopped': 160, 'bloonsLeaked': 164, 'cashEarned': 168, 'instaMonkeysUsed': 176, 'powersUsed': 180, 'abilitiesUsed': 184, 'coopBloonsPopped': 192, 'coopCashGiven': 200, 'achievementsClaimed': 208, 'achievements': 216, 'hiddenAchievements': 224, 'hiddenAchievementsClaimed': 232, 'heroesPlacedData': 240, 'towersPlacedData': 248, 'mapInfo': 256, 'spMedals': 264, 'coopMedals': 272, 'raceMedals': 280, 'bossMedals': 288, 'dailyRewards': 296, 'challengesCompleted': 300, 'savedStats': 304, 'namedMonkeyStats': 312, 'savedNamedMonkeyStats': 320, 'totalOdysseysCompleted': 328, 'totalOdysseyStars': 332, 'totalTrophiesEarned': 336, 'statsVersion': 340, 'necroBloonsReanimated': 344, 'transformingTonicsUsed': 352, 'mostExperiencedMonkey': 360, 'mostExperiencedMonkeyXp': 368, 'instaMonkeyCollection': 372, 'collectionChestsOpened': 376, 'goldenBloonsPopped': 380, 'monkeyTeamsWins': 384, 'paragonsPurchasedData': 392}    
    def __init__(self, playerId: System.String, playerName: System.String, playerRank: System.Int32, playerXp: System.Single, veteranRank: System.Int32, veteranXp: System.Int64, avatar: System.String, frame: System.String, banner: System.String, gameCount: System.Int32, gamesWon: System.Int32, highestRound: System.Int32, monkeysPlaced: System.Int32, bloonsPopped: System.Int64, camosPopped: System.Int64, leadsPopped: System.Int64, purplesPopped: System.Int64, regrowsPopped: System.Int64, ceramicsPopped: System.Int64, moabsPopped: System.Int32, bfbsPopped: System.Int32, zomgsPopped: System.Int32, ddtsPopped: System.Int32, badsPopped: System.Int32, bloonsLeaked: System.Int32, cashEarned: System.Int64, instaMonkeysUsed: System.Int32, powersUsed: System.Int32, abilitiesUsed: System.Int32, coopBloonsPopped: System.Int64, coopCashGiven: System.Int64, achievementsClaimed: System.Collections.Generic.List<System.Int32>, achievements: System.Collections.Generic.List<System.Int32>, hiddenAchievements: System.Collections.Generic.List<System.Int32>, hiddenAchievementsClaimed: System.Collections.Generic.List<System.Int32>, heroesPlacedData: System.Collections.Generic.Dictionary<System.String,System.Int32>, towersPlacedData: System.Collections.Generic.Dictionary<System.String,System.Int32>, mapInfo: Assets.Scripts.Models.Profile.MapInfoManager, spMedals: System.Collections.Generic.Dictionary<System.String,System.Int32>, coopMedals: System.Collections.Generic.Dictionary<System.String,System.Int32>, raceMedals: System.Collections.Generic.Dictionary<System.String,System.Int32>, bossMedals: System.Collections.Generic.Dictionary<System.Int32,System.Int32>, dailyRewards: System.Int32, challengesCompleted: System.Int32, savedStats: System.Collections.Generic.Dictionary<System.String,System.Boolean>, namedMonkeyStats: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Models.Profile.PublicNamedMonkeyStats>, savedNamedMonkeyStats: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.Dictionary<System.String,System.Boolean>>, totalOdysseysCompleted: System.Int32, totalOdysseyStars: System.Int32, totalTrophiesEarned: System.Int32, statsVersion: System.Int32, necroBloonsReanimated: System.Int64, transformingTonicsUsed: System.Int32, mostExperiencedMonkey: System.String, mostExperiencedMonkeyXp: System.Single, instaMonkeyCollection: System.Int32, collectionChestsOpened: System.Int32, goldenBloonsPopped: System.Int32, monkeyTeamsWins: System.Int32, paragonsPurchasedData: System.Collections.Generic.Dictionary<System.String,System.Int32>, **kwargs):
        super().__init__(self, **kwargs)
		self.playerId = playerId
		self.playerName = playerName
		self.playerRank = playerRank
		self.playerXp = playerXp
		self.veteranRank = veteranRank
		self.veteranXp = veteranXp
		self.avatar = avatar
		self.frame = frame
		self.banner = banner
		self.gameCount = gameCount
		self.gamesWon = gamesWon
		self.highestRound = highestRound
		self.monkeysPlaced = monkeysPlaced
		self.bloonsPopped = bloonsPopped
		self.camosPopped = camosPopped
		self.leadsPopped = leadsPopped
		self.purplesPopped = purplesPopped
		self.regrowsPopped = regrowsPopped
		self.ceramicsPopped = ceramicsPopped
		self.moabsPopped = moabsPopped
		self.bfbsPopped = bfbsPopped
		self.zomgsPopped = zomgsPopped
		self.ddtsPopped = ddtsPopped
		self.badsPopped = badsPopped
		self.bloonsLeaked = bloonsLeaked
		self.cashEarned = cashEarned
		self.instaMonkeysUsed = instaMonkeysUsed
		self.powersUsed = powersUsed
		self.abilitiesUsed = abilitiesUsed
		self.coopBloonsPopped = coopBloonsPopped
		self.coopCashGiven = coopCashGiven
		self.achievementsClaimed = achievementsClaimed
		self.achievements = achievements
		self.hiddenAchievements = hiddenAchievements
		self.hiddenAchievementsClaimed = hiddenAchievementsClaimed
		self.heroesPlacedData = heroesPlacedData
		self.towersPlacedData = towersPlacedData
		self.mapInfo = mapInfo
		self.spMedals = spMedals
		self.coopMedals = coopMedals
		self.raceMedals = raceMedals
		self.bossMedals = bossMedals
		self.dailyRewards = dailyRewards
		self.challengesCompleted = challengesCompleted
		self.savedStats = savedStats
		self.namedMonkeyStats = namedMonkeyStats
		self.savedNamedMonkeyStats = savedNamedMonkeyStats
		self.totalOdysseysCompleted = totalOdysseysCompleted
		self.totalOdysseyStars = totalOdysseyStars
		self.totalTrophiesEarned = totalTrophiesEarned
		self.statsVersion = statsVersion
		self.necroBloonsReanimated = necroBloonsReanimated
		self.transformingTonicsUsed = transformingTonicsUsed
		self.mostExperiencedMonkey = mostExperiencedMonkey
		self.mostExperiencedMonkeyXp = mostExperiencedMonkeyXp
		self.instaMonkeyCollection = instaMonkeyCollection
		self.collectionChestsOpened = collectionChestsOpened
		self.goldenBloonsPopped = goldenBloonsPopped
		self.monkeyTeamsWins = monkeyTeamsWins
		self.paragonsPurchasedData = paragonsPurchasedData


class DataConflict:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PlayerService:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class StatsSharing:
	lastUploadedHash: System.String
    offsets = {'lastUploadedHash': 0, 'SerialisationSettings': 8, 'DeserialisationSettings': 16}    
    def __init__(self, lastUploadedHash: System.String, SerialisationSettings: Newtonsoft.Json.JsonSerializerSettings, DeserialisationSettings: Newtonsoft.Json.JsonSerializerSettings, **kwargs):
        super().__init__(self, **kwargs)
		self.lastUploadedHash = lastUploadedHash
		self.SerialisationSettings = SerialisationSettings
		self.DeserialisationSettings = DeserialisationSettings


class Behavior:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CamoTrap:

    offsets = {'projectile': 24}    
    def __init__(self, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, **kwargs):
        super().__init__(self, **kwargs)
		self.projectile = projectile


class CashDrop:

    offsets = {'projectile': 24}    
    def __init__(self, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, **kwargs):
        super().__init__(self, **kwargs)
		self.projectile = projectile


class DamageAll:

    offsets = {'amount': 24}    
    def __init__(self, amount: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.amount = amount


class DartTime:

    offsets = {'bloonSpeed': 24, 'towerAttackSpeed': 28, 'duration': 32}    
    def __init__(self, bloonSpeed: System.Single, towerAttackSpeed: System.Single, duration: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonSpeed = bloonSpeed
		self.towerAttackSpeed = towerAttackSpeed
		self.duration = duration


class GlueTrap:

    offsets = {'projectile': 24}    
    def __init__(self, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, **kwargs):
        super().__init__(self, **kwargs)
		self.projectile = projectile


class InstaTower:

    offsets = {'tower': 24}    
    def __init__(self, tower: Assets.Scripts.Unity.Towers.Tower, **kwargs):
        super().__init__(self, **kwargs)
		self.tower = tower


class MoabMine:

    offsets = {'projectile': 24}    
    def __init__(self, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, **kwargs):
        super().__init__(self, **kwargs)
		self.projectile = projectile


class MonkeyBoost:

    offsets = {'rateScale': 24, 'duration': 28}    
    def __init__(self, rateScale: System.Single, duration: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.rateScale = rateScale
		self.duration = duration


class Power:

    offsets = {'cost': 24, 'canBeActivatedBetweenRounds': 28, 'icon': 32, 'tower': 40, 'isHidden': 48, 'showBuffsForTower': 49, 'quantity': 52, 'def': 56}    
    def __init__(self, cost: System.Int32, canBeActivatedBetweenRounds: System.Boolean, icon: UnityEngine.GameObject, tower: Assets.Scripts.Unity.Towers.Tower, isHidden: System.Boolean, showBuffsForTower: System.Boolean, quantity: System.Int32, def: Assets.Scripts.Models.Powers.PowerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.cost = cost
		self.canBeActivatedBetweenRounds = canBeActivatedBetweenRounds
		self.icon = icon
		self.tower = tower
		self.isHidden = isHidden
		self.showBuffsForTower = showBuffsForTower
		self.quantity = quantity
		self.def = def


class PowerBehavior:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PowerDetails:

    offsets = {'parent': 120, 'powerCount': 128, 'expPowerCount': 136}    
    def __init__(self, parent: Assets.Scripts.Unity.Powers.PowerDetails, powerCount: System.Int32, expPowerCount: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.powerCount = powerCount
		self.expPowerCount = expPowerCount


class RoadSpikes:

    offsets = {'projectile': 24}    
    def __init__(self, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, **kwargs):
        super().__init__(self, **kwargs)
		self.projectile = projectile


class Thrive:

    offsets = {'cashScale': 24}    
    def __init__(self, cashScale: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.cashScale = cashScale


class ShopPowerDetails:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CreateEffectOnPower:

    offsets = {'effect': 24}    
    def __init__(self, effect: Assets.Scripts.Unity.Effects.Effect, **kwargs):
        super().__init__(self, **kwargs)
		self.effect = effect


class CreateSoundOnPower:

    offsets = {'sound': 24}    
    def __init__(self, sound: UnityEngine.AudioSource, **kwargs):
        super().__init__(self, **kwargs)
		self.sound = sound


class BananaFarmerMod:

    offsets = {'rangeMultiplier': 128, 'def': 136}    
    def __init__(self, rangeMultiplier: System.Single, def: Assets.Scripts.Models.Powers.Mods.BananaFarmerModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.rangeMultiplier = rangeMultiplier
		self.def = def


class CamoTrapMod:

    offsets = {'pierceIncrease': 128, 'def': 136}    
    def __init__(self, pierceIncrease: System.Single, def: Assets.Scripts.Models.Powers.Mods.CamoTrapModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.pierceIncrease = pierceIncrease
		self.def = def


class DartTimeMod:

    offsets = {'durationIncrease': 128, 'def': 136}    
    def __init__(self, durationIncrease: System.Single, def: Assets.Scripts.Models.Powers.Mods.DartTimeModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.durationIncrease = durationIncrease
		self.def = def


class FreePowerMod:

    offsets = {'basePowerID': 128, 'charges': 136, 'def': 144}    
    def __init__(self, basePowerID: System.String, charges: System.Int32, def: Assets.Scripts.Models.Powers.Mods.FreePowerModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.basePowerID = basePowerID
		self.charges = charges
		self.def = def


class GlueTrapMod:

    offsets = {'def': 128}    
    def __init__(self, def: Assets.Scripts.Models.Powers.Mods.GlueTrapModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def


class MoabMineMod:

    offsets = {'damageIncrease': 128, 'def': 136}    
    def __init__(self, damageIncrease: System.Single, def: Assets.Scripts.Models.Powers.Mods.MoabMineModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.damageIncrease = damageIncrease
		self.def = def


class MonkeyBoostMod:

    offsets = {'durationIncrease': 128, 'def': 136}    
    def __init__(self, durationIncrease: System.Single, def: Assets.Scripts.Models.Powers.Mods.MonkeyBoostModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.durationIncrease = durationIncrease
		self.def = def


class PowerMod:

    offsets = {'costDecrease': 128, 'def': 136}    
    def __init__(self, costDecrease: System.Single, def: Assets.Scripts.Models.Powers.Mods.PowerModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.costDecrease = costDecrease
		self.def = def


class PreGamePrepMod:

    offsets = {'def': 128, 'distFromEdgeOfMap': 136, 'projectile': 144}    
    def __init__(self, def: Assets.Scripts.Models.Powers.Mods.PreGamePrepModModel, distFromEdgeOfMap: System.Single, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def
		self.distFromEdgeOfMap = distFromEdgeOfMap
		self.projectile = projectile


class RoadSpikesPierceMod:

    offsets = {'addition': 128, 'def': 136}    
    def __init__(self, addition: System.Single, def: Assets.Scripts.Models.Powers.Mods.RoadSpikesPierceModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.addition = addition
		self.def = def


class SuperMonkeyStormMod:

    offsets = {'damageIncrease': 128, 'def': 136}    
    def __init__(self, damageIncrease: System.Single, def: Assets.Scripts.Models.Powers.Mods.SuperMonkeyStormModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.damageIncrease = damageIncrease
		self.def = def


class ThriveMod:

    offsets = {'cashMultiplierIncrease': 128, 'def': 136}    
    def __init__(self, cashMultiplierIncrease: System.Single, def: Assets.Scripts.Models.Powers.Mods.ThriveModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.cashMultiplierIncrease = cashMultiplierIncrease
		self.def = def


class MPB_LerpFloatOnEnable:

    offsets = {'property': 24, 'duration': 32, '_renderer': 40, 'propertyId': 48}    
    def __init__(self, property: System.String, duration: System.Single, _renderer: UnityEngine.Renderer, propertyId: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.property = property
		self.duration = duration
		self._renderer = _renderer
		self.propertyId = propertyId


class FreeplayBloonGroup:

    offsets = {'prefab': 24, 'bloon': 32, 'count': 40, 'score': 44, 'def': 56}    
    def __init__(self, prefab: Assets.Scripts.Unity.Bloons.BloonOld, bloon: UnityEngine.GameObject, count: System.Int32, score: System.Single, def: Assets.Scripts.Models.Rounds.FreeplayBloonGroupModel, **kwargs):
        super().__init__(self, **kwargs)
		self.prefab = prefab
		self.bloon = bloon
		self.count = count
		self.score = score
		self.def = def


class HeroXPBonusMod:

    offsets = {'percentMultiplier': 128, 'def': 136}    
    def __init__(self, percentMultiplier: System.Single, def: Assets.Scripts.Models.SimulationBehaviors.Mods.HeroXPBonusModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.percentMultiplier = percentMultiplier
		self.def = def


class SkinBehavior:

    offsets = {'def': 120}    
    def __init__(self, def: Assets.Scripts.Models.Skins.SkinBehaviorModel, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def


class SkinManager:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SwapTowerGraphic:

    offsets = {'lodToReplace': 128, 'lodReplacement': 136, 'def': 144}    
    def __init__(self, lodToReplace: UnityEngine.GameObject, lodReplacement: UnityEngine.GameObject, def: Assets.Scripts.Models.Skins.Behaviors.SwapTowerGraphicModel, **kwargs):
        super().__init__(self, **kwargs)
		self.lodToReplace = lodToReplace
		self.lodReplacement = lodReplacement
		self.def = def


class SwapTowerSound:

    offsets = {'soundToReplace': 128, 'soundReplacement': 136, 'def': 144}    
    def __init__(self, soundToReplace: UnityEngine.GameObject, soundReplacement: UnityEngine.GameObject, def: Assets.Scripts.Models.Skins.Behaviors.SwapTowerSoundModel, **kwargs):
        super().__init__(self, **kwargs)
		self.soundToReplace = soundToReplace
		self.soundReplacement = soundReplacement
		self.def = def


class SwapTowerSprite:

    offsets = {'spriteToReplace': 128, 'spriteReplacement': 136, 'def': 144}    
    def __init__(self, spriteToReplace: UnityEngine.GameObject, spriteReplacement: UnityEngine.GameObject, def: Assets.Scripts.Models.Skins.Behaviors.SwapTowerSpriteModel, **kwargs):
        super().__init__(self, **kwargs)
		self.spriteToReplace = spriteToReplace
		self.spriteReplacement = spriteReplacement
		self.def = def


class HeroSkin:

    offsets = {'parent': 128, 'baseTower': 136, 'heroIcon': 144, 'locsKeySkinName': 152, 'locsKeySkinDescription': 160, 'mmCost': 168, 'expMmCost': 176, 'storeMainPortrait': 184, 'storeFirstPortrait': 192, 'firstLvlTxt': 200, 'storeSecondPortrait': 208, 'secondLvlTxt': 216, 'storeThirdPortrait': 224, 'thirdLvlTxt': 232, 'isDefaultTowerSkin': 240, 'expIsDefaultTowerSkin': 248, 'textMaterialId': 256, 'heroUnlockedEventSound': 264, 'heroUnlockedVoiceSound': 272}    
    def __init__(self, parent: Assets.Scripts.Unity.Skins.SkinTypes.HeroSkin, baseTower: Assets.Scripts.Unity.Towers.Tower, heroIcon: UnityEngine.GameObject, locsKeySkinName: System.String, locsKeySkinDescription: System.String, mmCost: System.Int32, expMmCost: System.String, storeMainPortrait: UnityEngine.GameObject, storeFirstPortrait: UnityEngine.GameObject, firstLvlTxt: System.String, storeSecondPortrait: UnityEngine.GameObject, secondLvlTxt: System.String, storeThirdPortrait: UnityEngine.GameObject, thirdLvlTxt: System.String, isDefaultTowerSkin: System.Boolean, expIsDefaultTowerSkin: System.String, textMaterialId: System.String, heroUnlockedEventSound: UnityEngine.GameObject, heroUnlockedVoiceSound: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.baseTower = baseTower
		self.heroIcon = heroIcon
		self.locsKeySkinName = locsKeySkinName
		self.locsKeySkinDescription = locsKeySkinDescription
		self.mmCost = mmCost
		self.expMmCost = expMmCost
		self.storeMainPortrait = storeMainPortrait
		self.storeFirstPortrait = storeFirstPortrait
		self.firstLvlTxt = firstLvlTxt
		self.storeSecondPortrait = storeSecondPortrait
		self.secondLvlTxt = secondLvlTxt
		self.storeThirdPortrait = storeThirdPortrait
		self.thirdLvlTxt = thirdLvlTxt
		self.isDefaultTowerSkin = isDefaultTowerSkin
		self.expIsDefaultTowerSkin = expIsDefaultTowerSkin
		self.textMaterialId = textMaterialId
		self.heroUnlockedEventSound = heroUnlockedEventSound
		self.heroUnlockedVoiceSound = heroUnlockedVoiceSound


class DailyReward:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ITask:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ParallelTasks:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SeriesTasks:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class StartCoroutine:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Task:

    offsets = {'Work': 64}    
    def __init__(self, Work: System.Func<System.Collections.IEnumerator>, **kwargs):
        super().__init__(self, **kwargs)
		self.Work = Work


class TaskList:

    offsets = {'Tasks': 64}    
    def __init__(self, Tasks: System.Collections.Generic.IEnumerable<Assets.Scripts.Unity.Tasks.ITask>, **kwargs):
        super().__init__(self, **kwargs)
		self.Tasks = Tasks


class TaskPromiseExtensions:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Behavior:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class HeroDetails:

    offsets = {'upgradeMax': 160, 'expUpgradeMax': 168, 'visibilePlayerLevel': 176, 'expVisibilePlayerLevel': 184, 'monkeyMoneyCost': 192, 'expMonkeyMoneyCost': 200, 'newestHero': 208, 'expNewestHero': 216}    
    def __init__(self, upgradeMax: System.Int32, expUpgradeMax: System.String, visibilePlayerLevel: System.Int32, expVisibilePlayerLevel: System.String, monkeyMoneyCost: System.Int32, expMonkeyMoneyCost: System.String, newestHero: System.Boolean, expNewestHero: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.upgradeMax = upgradeMax
		self.expUpgradeMax = expUpgradeMax
		self.visibilePlayerLevel = visibilePlayerLevel
		self.expVisibilePlayerLevel = expVisibilePlayerLevel
		self.monkeyMoneyCost = monkeyMoneyCost
		self.expMonkeyMoneyCost = expMonkeyMoneyCost
		self.newestHero = newestHero
		self.expNewestHero = expNewestHero


class ShopTowerDetails:

    offsets = {'pathOneMax': 160, 'expPathOneMax': 168, 'pathTwoMax': 176, 'expPathTwoMax': 184, 'pathThreeMax': 192, 'expPathThreeMax': 200}    
    def __init__(self, pathOneMax: System.Int32, expPathOneMax: System.String, pathTwoMax: System.Int32, expPathTwoMax: System.String, pathThreeMax: System.Int32, expPathThreeMax: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.pathOneMax = pathOneMax
		self.expPathOneMax = expPathOneMax
		self.pathTwoMax = pathTwoMax
		self.expPathTwoMax = expPathTwoMax
		self.pathThreeMax = pathThreeMax
		self.expPathThreeMax = expPathThreeMax


class TowerDetails:

    offsets = {'parent': 120, 'towerCount': 128, 'expTowerCount': 136, 'popsRequired': 144, 'expPopsRequired': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.TowerSets.Behaviors.TowerDetails, towerCount: System.Int32, expTowerCount: System.String, popsRequired: System.Int32, expPopsRequired: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.towerCount = towerCount
		self.expTowerCount = expTowerCount
		self.popsRequired = popsRequired
		self.expPopsRequired = expPopsRequired


class LockTowerMod:

    offsets = {'towerToLock': 128, 'def': 136}    
    def __init__(self, towerToLock: System.String, def: Assets.Scripts.Models.TowerSets.Mods.LockTowerModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.towerToLock = towerToLock
		self.def = def


class LockTowerSetMod:

    offsets = {'towerSetToLock': 128, 'def': 136}    
    def __init__(self, towerSetToLock: System.String, def: Assets.Scripts.Models.TowerSets.Mods.LockTowerSetModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.towerSetToLock = towerSetToLock
		self.def = def


class PathTierMaxMod:

    offsets = {'path': 128, 'maxTier': 132, 'def': 136}    
    def __init__(self, path: System.Int32, maxTier: System.Int32, def: Assets.Scripts.Models.TowerSets.Mods.PathTierMaxModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.path = path
		self.maxTier = maxTier
		self.def = def


class ClickBox:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DisablerBloon:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DisablerTower:

    offsets = {'disableComponentById': 168, 'expDisableComponentById': 176}    
    def __init__(self, disableComponentById: System.String, expDisableComponentById: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.disableComponentById = disableComponentById
		self.expDisableComponentById = expDisableComponentById


class Skin:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SpriteGroup:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SubTower:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Tower:

    offsets = {'parent': 120, 'baseId': 128, 'expBaseId': 136, 'towerSet': 144, 'expTowerSet': 152, 'cost': 160, 'expCost': 168, 'radius': 176, 'expRadius': 184, 'range': 192, 'expRange': 200, 'ignoreBlockers': 208, 'expIgnoreBlockers': 216, 'placeableArea': 224, 'expPlaceableArea': 232, 'ignoreTower': 240, 'expIgnoreTower': 248, 'isGlobalRange': 256, 'expIsGlobalRange': 264, 'dontDisplayUpgrades': 272, 'expDontDisplayUpgrades': 280, 'doesntRotate': 288, 'expDoesntRotate': 296, 'canAlwaysBeSold': 304, 'expCanAlwaysBeSold': 312, 'isSubTower': 320, 'icon': 336, 'expIcon': 344, 'portrait': 352, 'expPortrait': 360, 'instaIcon': 368, 'expInstaIcon': 376, 'display': 384, 'expDisplay': 392, 'emoteSpriteSmall': 400, 'expEmoteSpriteSmall': 408, 'emoteSpriteLarge': 416, 'expEmoteSpriteLarge': 424, 'towerSelectionMenuThemeId': 432, 'expTowerSelectionMenuThemeId': 440, 'def': 448, '_newBase': 456, 'cacheGetParentUpgradePath': 464}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Tower, baseId: System.String, expBaseId: System.String, towerSet: System.String, expTowerSet: System.String, cost: System.Single, expCost: System.String, radius: System.Single, expRadius: System.String, range: System.Single, expRange: System.String, ignoreBlockers: System.Boolean, expIgnoreBlockers: System.String, placeableArea: System.String, expPlaceableArea: System.String, ignoreTower: System.Boolean, expIgnoreTower: System.String, isGlobalRange: System.Boolean, expIsGlobalRange: System.String, dontDisplayUpgrades: System.Boolean, expDontDisplayUpgrades: System.String, doesntRotate: System.Boolean, expDoesntRotate: System.String, canAlwaysBeSold: System.Boolean, expCanAlwaysBeSold: System.String, isSubTower: System.Boolean, icon: UnityEngine.GameObject, expIcon: UnityEngine.GameObject, portrait: UnityEngine.GameObject, expPortrait: UnityEngine.GameObject, instaIcon: UnityEngine.GameObject, expInstaIcon: UnityEngine.GameObject, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, emoteSpriteSmall: UnityEngine.GameObject, expEmoteSpriteSmall: UnityEngine.GameObject, emoteSpriteLarge: UnityEngine.GameObject, expEmoteSpriteLarge: UnityEngine.GameObject, towerSelectionMenuThemeId: System.String, expTowerSelectionMenuThemeId: System.String, def: Assets.Scripts.Models.Towers.TowerModel, _newBase: Assets.Scripts.Utils.Cache<Assets.Scripts.Unity.Cascade.CascadingItem>, cacheGetParentUpgradePath: Assets.Scripts.Unity.Towers.Upgrades.UpgradePath, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.baseId = baseId
		self.expBaseId = expBaseId
		self.towerSet = towerSet
		self.expTowerSet = expTowerSet
		self.cost = cost
		self.expCost = expCost
		self.radius = radius
		self.expRadius = expRadius
		self.range = range
		self.expRange = expRange
		self.ignoreBlockers = ignoreBlockers
		self.expIgnoreBlockers = expIgnoreBlockers
		self.placeableArea = placeableArea
		self.expPlaceableArea = expPlaceableArea
		self.ignoreTower = ignoreTower
		self.expIgnoreTower = expIgnoreTower
		self.isGlobalRange = isGlobalRange
		self.expIsGlobalRange = expIsGlobalRange
		self.dontDisplayUpgrades = dontDisplayUpgrades
		self.expDontDisplayUpgrades = expDontDisplayUpgrades
		self.doesntRotate = doesntRotate
		self.expDoesntRotate = expDoesntRotate
		self.canAlwaysBeSold = canAlwaysBeSold
		self.expCanAlwaysBeSold = expCanAlwaysBeSold
		self.isSubTower = isSubTower
		self.icon = icon
		self.expIcon = expIcon
		self.portrait = portrait
		self.expPortrait = expPortrait
		self.instaIcon = instaIcon
		self.expInstaIcon = expInstaIcon
		self.display = display
		self.expDisplay = expDisplay
		self.emoteSpriteSmall = emoteSpriteSmall
		self.expEmoteSpriteSmall = expEmoteSpriteSmall
		self.emoteSpriteLarge = emoteSpriteLarge
		self.expEmoteSpriteLarge = expEmoteSpriteLarge
		self.towerSelectionMenuThemeId = towerSelectionMenuThemeId
		self.expTowerSelectionMenuThemeId = expTowerSelectionMenuThemeId
		self.def = def
		self._newBase = _newBase
		self.cacheGetParentUpgradePath = cacheGetParentUpgradePath


class TowerBehavior:

    offsets = {'throwMarker': 128}    
    def __init__(self, throwMarker: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.throwMarker = throwMarker


class TowerBehaviorBuff:

    offsets = {'buffLocsName': 136, 'expBuffLocsName': 144, 'buffIconName': 152, 'expBuffIconName': 160}    
    def __init__(self, buffLocsName: System.String, expBuffLocsName: System.String, buffIconName: System.String, expBuffIconName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.buffLocsName = buffLocsName
		self.expBuffLocsName = expBuffLocsName
		self.buffIconName = buffIconName
		self.expBuffIconName = expBuffIconName


class TowerBehaviorGlobalBuff:

    offsets = {'isGlobalRange': 168, 'expIsGlobalRange': 176}    
    def __init__(self, isGlobalRange: System.Boolean, expIsGlobalRange: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.isGlobalRange = isGlobalRange
		self.expIsGlobalRange = expIsGlobalRange


class Upgradeable:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AbilityCooldownScaleSupport:

    offsets = {'parent': 168, 'isUnique': 176, 'expIsUnique': 184, 'abilityCooldownSpeedScale': 192, 'expAbilityCooldownSpeedScale': 200, 'affectsOnlyWater': 208, 'expAffectsOnlyWater': 216, 'isGlobal': 224, 'expIsGlobal': 232, 'onlyShowBuffIconIfMutated': 240, 'expOnlyShowBuffIconIfMutated': 248}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.AbilityCooldownScaleSupport, isUnique: System.Boolean, expIsUnique: System.String, abilityCooldownSpeedScale: System.Single, expAbilityCooldownSpeedScale: System.String, affectsOnlyWater: System.Boolean, expAffectsOnlyWater: System.String, isGlobal: System.Boolean, expIsGlobal: System.String, onlyShowBuffIconIfMutated: System.Boolean, expOnlyShowBuffIconIfMutated: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.isUnique = isUnique
		self.expIsUnique = expIsUnique
		self.abilityCooldownSpeedScale = abilityCooldownSpeedScale
		self.expAbilityCooldownSpeedScale = expAbilityCooldownSpeedScale
		self.affectsOnlyWater = affectsOnlyWater
		self.expAffectsOnlyWater = expAffectsOnlyWater
		self.isGlobal = isGlobal
		self.expIsGlobal = expIsGlobal
		self.onlyShowBuffIconIfMutated = onlyShowBuffIconIfMutated
		self.expOnlyShowBuffIconIfMutated = expOnlyShowBuffIconIfMutated


class AcademyTowerMutatorGroup:

    offsets = {'cost': 144, 'expCost': 152, 'towerBaseId': 160, 'expTowerBaseId': 168}    
    def __init__(self, cost: System.Int32, expCost: System.String, towerBaseId: System.String, expTowerBaseId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.cost = cost
		self.expCost = expCost
		self.towerBaseId = towerBaseId
		self.expTowerBaseId = expTowerBaseId


class AcidicMixtureCheck:

    offsets = {'parent': 136, 'maxCount': 144, 'expMaxCount': 152, 'mutationId': 160, 'expMutationId': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.AcidicMixtureCheck, maxCount: System.Int32, expMaxCount: System.String, mutationId: System.String, expMutationId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.maxCount = maxCount
		self.expMaxCount = expMaxCount
		self.mutationId = mutationId
		self.expMutationId = expMutationId


class ActivateAbilityAfterInterval:

    offsets = {'parent': 136, 'ability': 144, 'expAbility': 152, 'interval': 160, 'expInterval': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.ActivateAbilityAfterInterval, ability: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Ability, expAbility: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Ability, interval: System.Single, expInterval: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.ability = ability
		self.expAbility = expAbility
		self.interval = interval
		self.expInterval = expInterval


class ActivateAbilityOnRoundStart:

    offsets = {'parent': 136, 'ability': 144, 'expAbility': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.ActivateAbilityOnRoundStart, ability: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Ability, expAbility: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Ability, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.ability = ability
		self.expAbility = expAbility


class AddBehaviorToBloonInZone:

    offsets = {'parent': 136, 'zoneRadius': 144, 'expZoneRadius': 152, 'mutationId': 160, 'expMutationId': 168, 'isUnique': 176, 'expIsUnique': 184, 'behavior': 192, 'expBehavior': 200, 'overlays': 208, 'expOverlays': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.AddBehaviorToBloonInZone, zoneRadius: System.Single, expZoneRadius: System.String, mutationId: System.String, expMutationId: System.String, isUnique: System.Boolean, expIsUnique: System.String, behavior: Assets.Scripts.Unity.Bloons.Behavior, expBehavior: Assets.Scripts.Unity.Bloons.Behavior, overlays: Assets.Scripts.Unity.Bloons.OverlayGroup, expOverlays: Assets.Scripts.Unity.Bloons.OverlayGroup, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.zoneRadius = zoneRadius
		self.expZoneRadius = expZoneRadius
		self.mutationId = mutationId
		self.expMutationId = expMutationId
		self.isUnique = isUnique
		self.expIsUnique = expIsUnique
		self.behavior = behavior
		self.expBehavior = expBehavior
		self.overlays = overlays
		self.expOverlays = expOverlays


class AddBehaviorToTowerSupport:

    offsets = {'parent': 168, 'mutationId': 176, 'expMutationId': 184, 'behavior': 192}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.AddBehaviorToTowerSupport, mutationId: System.String, expMutationId: System.String, behavior: Assets.Scripts.Unity.Towers.TowerBehavior, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.mutationId = mutationId
		self.expMutationId = expMutationId
		self.behavior = behavior


class AddDisplayObject:

    offsets = {'parent': 128, 'scale': 136, 'expScale': 144, 'offsetX': 152, 'expOffsetX': 160, 'offsetY': 168, 'expOffsetY': 176, 'offsetZ': 184, 'expOffsetZ': 192, 'ignoreRotation': 200, 'expIgnoreRotation': 208, 'display': 216, 'expDisplay': 224}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.AddDisplayObject, scale: System.Single, expScale: System.String, offsetX: System.Single, expOffsetX: System.String, offsetY: System.Single, expOffsetY: System.String, offsetZ: System.Single, expOffsetZ: System.String, ignoreRotation: System.Boolean, expIgnoreRotation: System.String, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.scale = scale
		self.expScale = expScale
		self.offsetX = offsetX
		self.expOffsetX = expOffsetX
		self.offsetY = offsetY
		self.expOffsetY = expOffsetY
		self.offsetZ = offsetZ
		self.expOffsetZ = expOffsetZ
		self.ignoreRotation = ignoreRotation
		self.expIgnoreRotation = expIgnoreRotation
		self.display = display
		self.expDisplay = expDisplay


class AddMakeshiftArea:

    offsets = {'parent': 136, 'placeableAreaObject': 144, 'areaType': 152, 'areaTypeString': 160, 'expAreaTypeString': 168, 'filterInTowerSizes': 176, 'expFilterInTowerSizes': 184, 'filterInTowerSets': 192, 'expFilterInTowerSets': 200, 'filterOutSpecificTowers': 208, 'expFilterOutSpecificTowers': 216, 'renderHeightOffset': 224, 'expRenderHeightOffset': 232, 'ignoreZAxisTowerCollision': 240, 'expIgnoreZAxisTowerCollision': 248, 'destroyTowersOnAreaWhenSold': 256, 'expDestroyTowersOnAreaWhenSold': 264}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.AddMakeshiftArea, placeableAreaObject: UnityEngine.GameObject, areaType: Assets.Scripts.Models.Map.AreaType, areaTypeString: System.String, expAreaTypeString: System.String, filterInTowerSizes: System.String, expFilterInTowerSizes: System.String, filterInTowerSets: System.String, expFilterInTowerSets: System.String, filterOutSpecificTowers: System.String, expFilterOutSpecificTowers: System.String, renderHeightOffset: System.Single, expRenderHeightOffset: System.String, ignoreZAxisTowerCollision: System.Boolean, expIgnoreZAxisTowerCollision: System.String, destroyTowersOnAreaWhenSold: System.Boolean, expDestroyTowersOnAreaWhenSold: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.placeableAreaObject = placeableAreaObject
		self.areaType = areaType
		self.areaTypeString = areaTypeString
		self.expAreaTypeString = expAreaTypeString
		self.filterInTowerSizes = filterInTowerSizes
		self.expFilterInTowerSizes = expFilterInTowerSizes
		self.filterInTowerSets = filterInTowerSets
		self.expFilterInTowerSets = expFilterInTowerSets
		self.filterOutSpecificTowers = filterOutSpecificTowers
		self.expFilterOutSpecificTowers = expFilterOutSpecificTowers
		self.renderHeightOffset = renderHeightOffset
		self.expRenderHeightOffset = expRenderHeightOffset
		self.ignoreZAxisTowerCollision = ignoreZAxisTowerCollision
		self.expIgnoreZAxisTowerCollision = expIgnoreZAxisTowerCollision
		self.destroyTowersOnAreaWhenSold = destroyTowersOnAreaWhenSold
		self.expDestroyTowersOnAreaWhenSold = expDestroyTowersOnAreaWhenSold


class AdoraSunGodTransformation:

    offsets = {'parent': 136, 'newDisplay': 144, 'expNewDisplay': 152, 'damageBoost': 160, 'expDamageBoost': 168, 'pierceBoost': 176, 'expPierceBoost': 184, 'upgradeAnimation': 192, 'expUpgradeAnimation': 200, 'weaponDelay': 208, 'expWeaponDelay': 216, 'effect': 224, 'expEffect': 232, 'portrait': 240, 'expPortrait': 248, 'newDisplayDark': 256, 'expNewDisplayDark': 264, 'projectileDisplayDark': 272, 'expProjectileDisplayDark': 280, 'bolDisplayDark': 288, 'expBolDisplayDark': 296, 'bolProjectileDisplayDark': 304, 'expBolProjectileDisplayDark': 312, 'laolProjectileDisplayDark': 320, 'expLaolProjectileDisplayDark': 328, 'effectDark': 336, 'expEffectDark': 344, 'portraitDark': 352, 'expPortraitDark': 360, 'upgradeAnimationDark': 368, 'expUpgradeAnimationDark': 376, 'beamHitDisplayDark': 384, 'expBeamHitDisplayDark': 392, 'longArmOfLightBehavior': 400, 'expLongArmOfLightBehavior': 408, 'ballOfLightTower': 416, 'expBallOfLightTower': 424, 'adoraTransformSounds': 432, 'expAdoraTransformSounds': 440}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.AdoraSunGodTransformation, newDisplay: UnityEngine.GameObject, expNewDisplay: UnityEngine.GameObject, damageBoost: System.Int32, expDamageBoost: System.String, pierceBoost: System.Int32, expPierceBoost: System.String, upgradeAnimation: System.Int32, expUpgradeAnimation: System.String, weaponDelay: System.Single, expWeaponDelay: System.String, effect: Assets.Scripts.Unity.Effects.Effect, expEffect: Assets.Scripts.Unity.Effects.Effect, portrait: UnityEngine.GameObject, expPortrait: UnityEngine.GameObject, newDisplayDark: UnityEngine.GameObject, expNewDisplayDark: UnityEngine.GameObject, projectileDisplayDark: UnityEngine.GameObject, expProjectileDisplayDark: UnityEngine.GameObject, bolDisplayDark: UnityEngine.GameObject, expBolDisplayDark: UnityEngine.GameObject, bolProjectileDisplayDark: UnityEngine.GameObject, expBolProjectileDisplayDark: UnityEngine.GameObject, laolProjectileDisplayDark: UnityEngine.GameObject, expLaolProjectileDisplayDark: UnityEngine.GameObject, effectDark: Assets.Scripts.Unity.Effects.Effect, expEffectDark: Assets.Scripts.Unity.Effects.Effect, portraitDark: UnityEngine.GameObject, expPortraitDark: UnityEngine.GameObject, upgradeAnimationDark: System.Int32, expUpgradeAnimationDark: System.String, beamHitDisplayDark: UnityEngine.GameObject, expBeamHitDisplayDark: UnityEngine.GameObject, longArmOfLightBehavior: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behavior, expLongArmOfLightBehavior: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behavior, ballOfLightTower: Assets.Scripts.Unity.Towers.Tower, expBallOfLightTower: Assets.Scripts.Unity.Towers.Tower, adoraTransformSounds: Assets.Scripts.Unity.Towers.Behaviors.AdoraTransformSound, expAdoraTransformSounds: Assets.Scripts.Unity.Towers.Behaviors.AdoraTransformSound, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.newDisplay = newDisplay
		self.expNewDisplay = expNewDisplay
		self.damageBoost = damageBoost
		self.expDamageBoost = expDamageBoost
		self.pierceBoost = pierceBoost
		self.expPierceBoost = expPierceBoost
		self.upgradeAnimation = upgradeAnimation
		self.expUpgradeAnimation = expUpgradeAnimation
		self.weaponDelay = weaponDelay
		self.expWeaponDelay = expWeaponDelay
		self.effect = effect
		self.expEffect = expEffect
		self.portrait = portrait
		self.expPortrait = expPortrait
		self.newDisplayDark = newDisplayDark
		self.expNewDisplayDark = expNewDisplayDark
		self.projectileDisplayDark = projectileDisplayDark
		self.expProjectileDisplayDark = expProjectileDisplayDark
		self.bolDisplayDark = bolDisplayDark
		self.expBolDisplayDark = expBolDisplayDark
		self.bolProjectileDisplayDark = bolProjectileDisplayDark
		self.expBolProjectileDisplayDark = expBolProjectileDisplayDark
		self.laolProjectileDisplayDark = laolProjectileDisplayDark
		self.expLaolProjectileDisplayDark = expLaolProjectileDisplayDark
		self.effectDark = effectDark
		self.expEffectDark = expEffectDark
		self.portraitDark = portraitDark
		self.expPortraitDark = expPortraitDark
		self.upgradeAnimationDark = upgradeAnimationDark
		self.expUpgradeAnimationDark = expUpgradeAnimationDark
		self.beamHitDisplayDark = beamHitDisplayDark
		self.expBeamHitDisplayDark = expBeamHitDisplayDark
		self.longArmOfLightBehavior = longArmOfLightBehavior
		self.expLongArmOfLightBehavior = expLongArmOfLightBehavior
		self.ballOfLightTower = ballOfLightTower
		self.expBallOfLightTower = expBallOfLightTower
		self.adoraTransformSounds = adoraTransformSounds
		self.expAdoraTransformSounds = expAdoraTransformSounds


class AdoraTransformSound:

    offsets = {'parent': 136, 'newSelectSound01': 144, 'newSelectSound02': 152, 'newSelectSound03': 160, 'newSelectSound04': 168, 'newSelectSound05': 176, 'newSelectSound06': 184, 'newSelectAltSound01': 192, 'newSelectAltSound02': 200, 'newLeakSound01': 208, 'newLeakSound02': 216, 'newMoabDestroyedSound01': 224, 'newMoabDestroyedSound02': 232, 'newMoabWarningSound': 240, 'newBfbWarningSound': 248, 'newZomgWarningSound': 256, 'newBadWarningSound': 264, 'newUltimate3Sound': 272, 'newUltimate7Sound': 280, 'newUltimate10Sound': 288, 'transformSound': 296}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.AdoraTransformSound, newSelectSound01: UnityEngine.AudioSource, newSelectSound02: UnityEngine.AudioSource, newSelectSound03: UnityEngine.AudioSource, newSelectSound04: UnityEngine.AudioSource, newSelectSound05: UnityEngine.AudioSource, newSelectSound06: UnityEngine.AudioSource, newSelectAltSound01: UnityEngine.AudioSource, newSelectAltSound02: UnityEngine.AudioSource, newLeakSound01: UnityEngine.AudioSource, newLeakSound02: UnityEngine.AudioSource, newMoabDestroyedSound01: UnityEngine.AudioSource, newMoabDestroyedSound02: UnityEngine.AudioSource, newMoabWarningSound: UnityEngine.AudioSource, newBfbWarningSound: UnityEngine.AudioSource, newZomgWarningSound: UnityEngine.AudioSource, newBadWarningSound: UnityEngine.AudioSource, newUltimate3Sound: UnityEngine.AudioSource, newUltimate7Sound: UnityEngine.AudioSource, newUltimate10Sound: UnityEngine.AudioSource, transformSound: UnityEngine.AudioSource, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.newSelectSound01 = newSelectSound01
		self.newSelectSound02 = newSelectSound02
		self.newSelectSound03 = newSelectSound03
		self.newSelectSound04 = newSelectSound04
		self.newSelectSound05 = newSelectSound05
		self.newSelectSound06 = newSelectSound06
		self.newSelectAltSound01 = newSelectAltSound01
		self.newSelectAltSound02 = newSelectAltSound02
		self.newLeakSound01 = newLeakSound01
		self.newLeakSound02 = newLeakSound02
		self.newMoabDestroyedSound01 = newMoabDestroyedSound01
		self.newMoabDestroyedSound02 = newMoabDestroyedSound02
		self.newMoabWarningSound = newMoabWarningSound
		self.newBfbWarningSound = newBfbWarningSound
		self.newZomgWarningSound = newZomgWarningSound
		self.newBadWarningSound = newBadWarningSound
		self.newUltimate3Sound = newUltimate3Sound
		self.newUltimate7Sound = newUltimate7Sound
		self.newUltimate10Sound = newUltimate10Sound
		self.transformSound = transformSound


class AirUnit:

    offsets = {'parent': 136, 'def': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.AirUnit, def: Assets.Scripts.Models.Towers.Behaviors.AirUnitModel, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.def = def


class AmmoBelt:

    offsets = {'parent': 136, 'startCount': 144, 'expStartCount': 152, 'maxCount': 160, 'expMaxCount': 168, 'regenRate': 176, 'expRegenRate': 184}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.AmmoBelt, startCount: System.Int32, expStartCount: System.String, maxCount: System.Int32, expMaxCount: System.String, regenRate: System.Single, expRegenRate: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.startCount = startCount
		self.expStartCount = expStartCount
		self.maxCount = maxCount
		self.expMaxCount = expMaxCount
		self.regenRate = regenRate
		self.expRegenRate = expRegenRate


class BananaBonusCashZone:

    offsets = {'parent': 136, 'multiplier': 144, 'expMultiplier': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.BananaBonusCashZone, multiplier: System.Single, expMultiplier: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.multiplier = multiplier
		self.expMultiplier = expMultiplier


class BananaCashIncreaseSupport:

    offsets = {'parent': 168, 'isUnique': 176, 'expIsUnique': 184, 'multiplier': 192, 'expMultiplier': 200, 'mutatorId': 208, 'expMutatorId': 216, 'useTiers': 224, 'expUseTiers': 232, 'firstPathTier': 240, 'expFirstPathTier': 248, 'secondPathTier': 256, 'expSecondPathTier': 264, 'thirdPathTier': 272, 'expThirdPathTier': 280}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.BananaCashIncreaseSupport, isUnique: System.Boolean, expIsUnique: System.String, multiplier: System.Single, expMultiplier: System.String, mutatorId: System.String, expMutatorId: System.String, useTiers: System.Boolean, expUseTiers: System.String, firstPathTier: System.Int32, expFirstPathTier: System.String, secondPathTier: System.Int32, expSecondPathTier: System.String, thirdPathTier: System.Int32, expThirdPathTier: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.isUnique = isUnique
		self.expIsUnique = expIsUnique
		self.multiplier = multiplier
		self.expMultiplier = expMultiplier
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId
		self.useTiers = useTiers
		self.expUseTiers = expUseTiers
		self.firstPathTier = firstPathTier
		self.expFirstPathTier = expFirstPathTier
		self.secondPathTier = secondPathTier
		self.expSecondPathTier = expSecondPathTier
		self.thirdPathTier = thirdPathTier
		self.expThirdPathTier = expThirdPathTier


class BananaCentralBuff:

    offsets = {'parent': 184, 'multiplier': 192, 'expMultiplier': 200, 'mutatorId': 208, 'expMutatorId': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.BananaCentralBuff, multiplier: System.Single, expMultiplier: System.String, mutatorId: System.String, expMutatorId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.multiplier = multiplier
		self.expMultiplier = expMultiplier
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId


class Bank:

    offsets = {'parent': 136, 'capacity': 144, 'expCapacity': 152, 'intrest': 160, 'expIntrest': 168, 'lifespan': 176, 'expLifespan': 184, 'display': 192, 'expDisplay': 200, 'autoCollect': 208, 'expAutoCollect': 216, 'fullDisplay': 224, 'expFullDisplay': 232, 'collectAnimation': 240, 'expCollectAnimation': 248}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Bank, capacity: System.Single, expCapacity: System.String, intrest: System.Single, expIntrest: System.String, lifespan: System.Single, expLifespan: System.String, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, autoCollect: System.Boolean, expAutoCollect: System.String, fullDisplay: UnityEngine.GameObject, expFullDisplay: UnityEngine.GameObject, collectAnimation: System.Int32, expCollectAnimation: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.capacity = capacity
		self.expCapacity = expCapacity
		self.intrest = intrest
		self.expIntrest = expIntrest
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.display = display
		self.expDisplay = expDisplay
		self.autoCollect = autoCollect
		self.expAutoCollect = expAutoCollect
		self.fullDisplay = fullDisplay
		self.expFullDisplay = expFullDisplay
		self.collectAnimation = collectAnimation
		self.expCollectAnimation = expCollectAnimation


class BaseTowersInRadius:

    offsets = {'parent': 136, 'towerGroup': 144, 'expTowerGroup': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.BaseTowersInRadius, towerGroup: System.String, expTowerGroup: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.towerGroup = towerGroup
		self.expTowerGroup = expTowerGroup


class BerserkerBrewCheck:

    offsets = {'parent': 136, 'maxCount': 144, 'expMaxCount': 152, 'mutationId': 160, 'expMutationId': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.BerserkerBrewCheck, maxCount: System.Int32, expMaxCount: System.String, mutationId: System.String, expMutationId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.maxCount = maxCount
		self.expMaxCount = expMaxCount
		self.mutationId = mutationId
		self.expMutationId = expMutationId


class BonusCashZone:

    offsets = {'parent': 136, 'multiplier': 144, 'expMultiplier': 152, 'stackLimit': 160, 'expStackLimit': 168, 'stackName': 176, 'expStackName': 184, 'groupName': 192, 'expGroupName': 200}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.BonusCashZone, multiplier: System.Single, expMultiplier: System.String, stackLimit: System.Int32, expStackLimit: System.String, stackName: System.String, expStackName: System.String, groupName: System.String, expGroupName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.multiplier = multiplier
		self.expMultiplier = expMultiplier
		self.stackLimit = stackLimit
		self.expStackLimit = expStackLimit
		self.stackName = stackName
		self.expStackName = expStackName
		self.groupName = groupName
		self.expGroupName = expGroupName


class BonusLivesPerRound:

    offsets = {'parent': 136, 'amount': 144, 'expAmount': 152, 'lifespan': 160, 'expLifespan': 168, 'display': 176, 'expDisplay': 184}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.BonusLivesPerRound, amount: System.Int32, expAmount: System.String, lifespan: System.Single, expLifespan: System.String, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.amount = amount
		self.expAmount = expAmount
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.display = display
		self.expDisplay = expDisplay


class CanBuffIndicator:

    offsets = {'parent': 168, 'isDisabled': 176, 'expIsDisabled': 184}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.CanBuffIndicator, isDisabled: System.Boolean, expIsDisabled: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.isDisabled = isDisabled
		self.expIsDisabled = expIsDisabled


class CashIncrease:

    offsets = {'parent': 136, 'increase': 144, 'expIncrease': 152, 'multiplier': 160, 'expMultiplier': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.CashIncrease, increase: System.Single, expIncrease: System.String, multiplier: System.Single, expMultiplier: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.increase = increase
		self.expIncrease = expIncrease
		self.multiplier = multiplier
		self.expMultiplier = expMultiplier


class CashbackZone:

    offsets = {'parent': 136, 'cashbackZoneMultiplier': 144, 'expCashbackZoneMultiplier': 152, 'cashbackMaxPercent': 160, 'expCashbackMaxPercent': 168, 'groupName': 176, 'expGroupName': 184}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.CashbackZone, cashbackZoneMultiplier: System.Single, expCashbackZoneMultiplier: System.String, cashbackMaxPercent: System.Single, expCashbackMaxPercent: System.String, groupName: System.String, expGroupName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.cashbackZoneMultiplier = cashbackZoneMultiplier
		self.expCashbackZoneMultiplier = expCashbackZoneMultiplier
		self.cashbackMaxPercent = cashbackMaxPercent
		self.expCashbackMaxPercent = expCashbackMaxPercent
		self.groupName = groupName
		self.expGroupName = expGroupName


class CentralMarketBuff:

    offsets = {'parent': 168, 'multiplier': 176, 'expMultiplier': 184, 'mutatorId': 192, 'expMutatorId': 200, 'maxStackCount': 208, 'expMaxStackCount': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.CentralMarketBuff, multiplier: System.Single, expMultiplier: System.String, mutatorId: System.String, expMutatorId: System.String, maxStackCount: System.Int32, expMaxStackCount: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.multiplier = multiplier
		self.expMultiplier = expMultiplier
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId
		self.maxStackCount = maxStackCount
		self.expMaxStackCount = expMaxStackCount


class ChurchillBaseRotation:

    offsets = {'parent': 136, 'rotationSpeed': 144, 'expRotationSpeed': 152, 'animationClockwise': 160, 'expAnimationMovingClockwise': 168, 'animationAntiClockwise': 176, 'expAnimationMovingAntiClockwise': 184, 'animationNotMoving': 192, 'expAnimationStateNotMoving': 200}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.ChurchillBaseRotation, rotationSpeed: System.Single, expRotationSpeed: System.String, animationClockwise: System.Int32, expAnimationMovingClockwise: System.String, animationAntiClockwise: System.Int32, expAnimationMovingAntiClockwise: System.String, animationNotMoving: System.Int32, expAnimationStateNotMoving: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.rotationSpeed = rotationSpeed
		self.expRotationSpeed = expRotationSpeed
		self.animationClockwise = animationClockwise
		self.expAnimationMovingClockwise = expAnimationMovingClockwise
		self.animationAntiClockwise = animationAntiClockwise
		self.expAnimationMovingAntiClockwise = expAnimationMovingAntiClockwise
		self.animationNotMoving = animationNotMoving
		self.expAnimationStateNotMoving = expAnimationStateNotMoving


class CircleFootprint:

    offsets = {'parent': 184, 'radius': 192, 'expRadius': 200}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.CircleFootprint, radius: System.Single, expRadius: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.radius = radius
		self.expRadius = expRadius


class CircleMovement:

    offsets = {'parent': 136, 'radius': 144, 'expRadius': 152, 'speed': 160, 'expSpeed': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.CircleMovement, radius: System.Single, expRadius: System.String, speed: System.Single, expSpeed: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.radius = radius
		self.expRadius = expRadius
		self.speed = speed
		self.expSpeed = expSpeed


class CollectCashZone:

    offsets = {'parent': 136, 'attractRange': 144, 'collectRange': 148, 'speed': 152, 'filterTower': 160, 'useTowerRange': 168, 'expUseTowerRange': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.CollectCashZone, attractRange: System.Single, collectRange: System.Single, speed: System.Single, filterTower: System.String, useTowerRange: System.Boolean, expUseTowerRange: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.attractRange = attractRange
		self.collectRange = collectRange
		self.speed = speed
		self.filterTower = filterTower
		self.useTowerRange = useTowerRange
		self.expUseTowerRange = expUseTowerRange


class CollectCreatedProjectile:

    offsets = {'parent': 136, 'projectile': 144, 'expProjectile': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.CollectCreatedProjectile, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, expProjectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.projectile = projectile
		self.expProjectile = expProjectile


class ComancheDefence:

    offsets = {'tower': 136, 'reinforcementCount': 144, 'expReinforcementCount': 152, 'duration': 160, 'expDuration': 168, 'cooldown': 176, 'expCooldown': 184, 'immediate': 192, 'expImmediate': 200, 'sound': 208, 'expSound': 216, 'maxActivationsPerRound': 224, 'expMaxActivationsPerRound': 232}    
    def __init__(self, tower: Assets.Scripts.Unity.Towers.Tower, reinforcementCount: System.Int32, expReinforcementCount: System.String, duration: System.Single, expDuration: System.String, cooldown: System.Single, expCooldown: System.String, immediate: System.Boolean, expImmediate: System.String, sound: UnityEngine.AudioSource, expSound: UnityEngine.AudioSource, maxActivationsPerRound: System.Int32, expMaxActivationsPerRound: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.tower = tower
		self.reinforcementCount = reinforcementCount
		self.expReinforcementCount = expReinforcementCount
		self.duration = duration
		self.expDuration = expDuration
		self.cooldown = cooldown
		self.expCooldown = expCooldown
		self.immediate = immediate
		self.expImmediate = expImmediate
		self.sound = sound
		self.expSound = expSound
		self.maxActivationsPerRound = maxActivationsPerRound
		self.expMaxActivationsPerRound = expMaxActivationsPerRound


class CreateEffectOnAirUnit:

    offsets = {'parent': 136, 'effect': 144, 'expEffect': 152, 'rotation': 160, 'expRotation': 168, 'scale': 176, 'expScale': 184}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.CreateEffectOnAirUnit, effect: Assets.Scripts.Unity.Effects.Effect, expEffect: Assets.Scripts.Unity.Effects.Effect, rotation: System.Single, expRotation: System.String, scale: System.Single, expScale: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.effect = effect
		self.expEffect = expEffect
		self.rotation = rotation
		self.expRotation = expRotation
		self.scale = scale
		self.expScale = expScale


class CreateEffectOnAirUnitDestroy:

    offsets = {'parent': 136, 'effect': 144, 'expEffect': 152, 'rotation': 160, 'expRotation': 168, 'scale': 176, 'expScale': 184}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.CreateEffectOnAirUnitDestroy, effect: Assets.Scripts.Unity.Effects.Effect, expEffect: Assets.Scripts.Unity.Effects.Effect, rotation: System.Single, expRotation: System.String, scale: System.Single, expScale: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.effect = effect
		self.expEffect = expEffect
		self.rotation = rotation
		self.expRotation = expRotation
		self.scale = scale
		self.expScale = expScale


class CreateEffectOnPlace:

    offsets = {'parent': 136, 'effect': 144, 'expEffect': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.CreateEffectOnPlace, effect: Assets.Scripts.Unity.Effects.Effect, expEffect: Assets.Scripts.Unity.Effects.Effect, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.effect = effect
		self.expEffect = expEffect


class CreateEffectOnSell:

    offsets = {'parent': 136, 'effect': 144, 'expEffect': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.CreateEffectOnSell, effect: Assets.Scripts.Unity.Effects.Effect, expEffect: Assets.Scripts.Unity.Effects.Effect, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.effect = effect
		self.expEffect = expEffect


class CreateEffectOnTowerExpire:

    offsets = {'parent': 136, 'effect': 144, 'expEffect': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.CreateEffectOnTowerExpire, effect: Assets.Scripts.Unity.Effects.Effect, expEffect: Assets.Scripts.Unity.Effects.Effect, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.effect = effect
		self.expEffect = expEffect


class CreateEffectOnUpgrade:

    offsets = {'parent': 136, 'effect': 144, 'expEffect': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.CreateEffectOnUpgrade, effect: Assets.Scripts.Unity.Effects.Effect, expEffect: Assets.Scripts.Unity.Effects.Effect, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.effect = effect
		self.expEffect = expEffect


class CreateProjectileOnTowerDestroy:

    offsets = {'parent': 136, 'projectile': 144, 'expProjectile': 152, 'emission': 160, 'expEmission': 168, 'useTowerRotation': 176, 'expUseTowerRotation': 184, 'setAgeZeroOnSell': 192, 'expSetAgeZeroOnSell': 200}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.CreateProjectileOnTowerDestroy, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, expProjectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, emission: Assets.Scripts.Unity.Towers.Emissions.Emission, expEmission: Assets.Scripts.Unity.Towers.Emissions.Emission, useTowerRotation: System.Boolean, expUseTowerRotation: System.String, setAgeZeroOnSell: System.Boolean, expSetAgeZeroOnSell: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.projectile = projectile
		self.expProjectile = expProjectile
		self.emission = emission
		self.expEmission = expEmission
		self.useTowerRotation = useTowerRotation
		self.expUseTowerRotation = expUseTowerRotation
		self.setAgeZeroOnSell = setAgeZeroOnSell
		self.expSetAgeZeroOnSell = expSetAgeZeroOnSell


class CreateSoundOnAttached:

    offsets = {'parent': 136, 'sound': 144, 'expSound': 152, 'altSound': 160, 'expAltSound': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.CreateSoundOnAttached, sound: UnityEngine.AudioSource, expSound: UnityEngine.AudioSource, altSound: UnityEngine.AudioSource, expAltSound: UnityEngine.AudioSource, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.sound = sound
		self.expSound = expSound
		self.altSound = altSound
		self.expAltSound = expAltSound


class CreateSoundOnBloonEnterTrack:

    offsets = {'parent': 136, 'enterMoabSound': 144, 'expEnterMoabSound': 152, 'enterBfbSound': 160, 'expEnterBfbSound': 168, 'enterDdtSound': 176, 'expEnterDdtSound': 184, 'enterZomgSound': 192, 'expEnterZomgSound': 200, 'enterBadSound': 208, 'expEnterBadSound': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.CreateSoundOnBloonEnterTrack, enterMoabSound: UnityEngine.AudioSource, expEnterMoabSound: UnityEngine.AudioSource, enterBfbSound: UnityEngine.AudioSource, expEnterBfbSound: UnityEngine.AudioSource, enterDdtSound: UnityEngine.AudioSource, expEnterDdtSound: UnityEngine.AudioSource, enterZomgSound: UnityEngine.AudioSource, expEnterZomgSound: UnityEngine.AudioSource, enterBadSound: UnityEngine.AudioSource, expEnterBadSound: UnityEngine.AudioSource, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.enterMoabSound = enterMoabSound
		self.expEnterMoabSound = expEnterMoabSound
		self.enterBfbSound = enterBfbSound
		self.expEnterBfbSound = expEnterBfbSound
		self.enterDdtSound = enterDdtSound
		self.expEnterDdtSound = expEnterDdtSound
		self.enterZomgSound = enterZomgSound
		self.expEnterZomgSound = expEnterZomgSound
		self.enterBadSound = enterBadSound
		self.expEnterBadSound = expEnterBadSound


class CreateSoundOnBloonLeak:

    offsets = {'parent': 136, 'sound1': 144, 'expSound1': 152, 'sound2': 160, 'expSound2': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.CreateSoundOnBloonLeak, sound1: UnityEngine.AudioSource, expSound1: UnityEngine.AudioSource, sound2: UnityEngine.AudioSource, expSound2: UnityEngine.AudioSource, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.sound1 = sound1
		self.expSound1 = expSound1
		self.sound2 = sound2
		self.expSound2 = expSound2


class CreateSoundOnMonkeyMoneyActivated:

    offsets = {'parent': 136, 'sound': 144, 'expSound': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.CreateSoundOnMonkeyMoneyActivated, sound: UnityEngine.AudioSource, expSound: UnityEngine.AudioSource, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.sound = sound
		self.expSound = expSound


class CreateSoundOnSelected:

    offsets = {'parent': 136, 'sound1': 144, 'expSound1': 152, 'sound2': 160, 'expSound2': 168, 'sound3': 176, 'expSound3': 184, 'sound4': 192, 'expSound4': 200, 'sound5': 208, 'expSound5': 216, 'sound6': 224, 'expSound6': 232, 'altSound1': 240, 'expAltSound1': 248, 'altSound2': 256, 'expAltSound2': 264}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.CreateSoundOnSelected, sound1: UnityEngine.AudioSource, expSound1: UnityEngine.AudioSource, sound2: UnityEngine.AudioSource, expSound2: UnityEngine.AudioSource, sound3: UnityEngine.AudioSource, expSound3: UnityEngine.AudioSource, sound4: UnityEngine.AudioSource, expSound4: UnityEngine.AudioSource, sound5: UnityEngine.AudioSource, expSound5: UnityEngine.AudioSource, sound6: UnityEngine.AudioSource, expSound6: UnityEngine.AudioSource, altSound1: UnityEngine.AudioSource, expAltSound1: UnityEngine.AudioSource, altSound2: UnityEngine.AudioSource, expAltSound2: UnityEngine.AudioSource, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.sound1 = sound1
		self.expSound1 = expSound1
		self.sound2 = sound2
		self.expSound2 = expSound2
		self.sound3 = sound3
		self.expSound3 = expSound3
		self.sound4 = sound4
		self.expSound4 = expSound4
		self.sound5 = sound5
		self.expSound5 = expSound5
		self.sound6 = sound6
		self.expSound6 = expSound6
		self.altSound1 = altSound1
		self.expAltSound1 = expAltSound1
		self.altSound2 = altSound2
		self.expAltSound2 = expAltSound2


class CreateSoundOnSell:

    offsets = {'parent': 136, 'sound': 144, 'expSound': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.CreateSoundOnSell, sound: UnityEngine.AudioSource, expSound: UnityEngine.AudioSource, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.sound = sound
		self.expSound = expSound


class CreateSoundOnTowerPlace:

    offsets = {'parent': 136, 'sound1': 144, 'expSound1': 152, 'sound2': 160, 'expSound2': 168, 'heroSound1': 176, 'expHeroSound1': 184, 'heroSound2': 192, 'expHeroSound2': 200}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.CreateSoundOnTowerPlace, sound1: UnityEngine.AudioSource, expSound1: UnityEngine.AudioSource, sound2: UnityEngine.AudioSource, expSound2: UnityEngine.AudioSource, heroSound1: UnityEngine.AudioSource, expHeroSound1: UnityEngine.AudioSource, heroSound2: UnityEngine.AudioSource, expHeroSound2: UnityEngine.AudioSource, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.sound1 = sound1
		self.expSound1 = expSound1
		self.sound2 = sound2
		self.expSound2 = expSound2
		self.heroSound1 = heroSound1
		self.expHeroSound1 = expHeroSound1
		self.heroSound2 = heroSound2
		self.expHeroSound2 = expHeroSound2


class CreateSoundOnUpgrade:

    offsets = {'parent': 136, 'sound': 144, 'expSound': 152, 'sound1': 160, 'expSound1': 168, 'sound2': 176, 'expSound2': 184, 'sound3': 192, 'expSound3': 200, 'sound4': 208, 'expSound4': 216, 'sound5': 224, 'expSound5': 232, 'sound6': 240, 'expSound6': 248, 'sound7': 256, 'expSound7': 264, 'sound8': 272, 'expSound8': 280}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.CreateSoundOnUpgrade, sound: UnityEngine.AudioSource, expSound: UnityEngine.AudioSource, sound1: UnityEngine.AudioSource, expSound1: UnityEngine.AudioSource, sound2: UnityEngine.AudioSource, expSound2: UnityEngine.AudioSource, sound3: UnityEngine.AudioSource, expSound3: UnityEngine.AudioSource, sound4: UnityEngine.AudioSource, expSound4: UnityEngine.AudioSource, sound5: UnityEngine.AudioSource, expSound5: UnityEngine.AudioSource, sound6: UnityEngine.AudioSource, expSound6: UnityEngine.AudioSource, sound7: UnityEngine.AudioSource, expSound7: UnityEngine.AudioSource, sound8: UnityEngine.AudioSource, expSound8: UnityEngine.AudioSource, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.sound = sound
		self.expSound = expSound
		self.sound1 = sound1
		self.expSound1 = expSound1
		self.sound2 = sound2
		self.expSound2 = expSound2
		self.sound3 = sound3
		self.expSound3 = expSound3
		self.sound4 = sound4
		self.expSound4 = expSound4
		self.sound5 = sound5
		self.expSound5 = expSound5
		self.sound6 = sound6
		self.expSound6 = expSound6
		self.sound7 = sound7
		self.expSound7 = expSound7
		self.sound8 = sound8
		self.expSound8 = expSound8


class CreditPopsToParentTower:

    offsets = {'parent': 136}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.CreditPopsToParentTower, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class DamageOverTimeZone:

    offsets = {'parent': 136, 'behavior': 144, 'range': 152, 'expRange': 160, 'isGlobal': 168, 'expIsGlobal': 176, 'filterInvisible': 184, 'expFilterInvisible': 192, 'onlyAffectOnscreen': 200, 'expOnlyAffectOnscreen': 208, 'mutatorId': 216, 'expMutatorId': 224}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.DamageOverTimeZone, behavior: Assets.Scripts.Unity.Bloons.Behaviors.DamageOverTime, range: System.Single, expRange: System.String, isGlobal: System.Boolean, expIsGlobal: System.String, filterInvisible: System.Boolean, expFilterInvisible: System.String, onlyAffectOnscreen: System.Boolean, expOnlyAffectOnscreen: System.String, mutatorId: System.String, expMutatorId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.behavior = behavior
		self.range = range
		self.expRange = expRange
		self.isGlobal = isGlobal
		self.expIsGlobal = expIsGlobal
		self.filterInvisible = filterInvisible
		self.expFilterInvisible = expFilterInvisible
		self.onlyAffectOnscreen = onlyAffectOnscreen
		self.expOnlyAffectOnscreen = expOnlyAffectOnscreen
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId


class DamageSupport:

    offsets = {'parent': 168, 'isUnique': 176, 'expIsUnique': 184, 'increase': 192, 'expIncrease': 200, 'mutatorId': 208, 'expMutatorId': 216, 'isGlobal': 224, 'expIsGlobal': 232, 'isCustomRadius': 240, 'expIsCustomRadius': 248, 'customRadius': 256, 'expCustomRadius': 264}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.DamageSupport, isUnique: System.Boolean, expIsUnique: System.String, increase: System.Single, expIncrease: System.String, mutatorId: System.String, expMutatorId: System.String, isGlobal: System.Boolean, expIsGlobal: System.String, isCustomRadius: System.Boolean, expIsCustomRadius: System.String, customRadius: System.Single, expCustomRadius: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.isUnique = isUnique
		self.expIsUnique = expIsUnique
		self.increase = increase
		self.expIncrease = expIncrease
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId
		self.isGlobal = isGlobal
		self.expIsGlobal = expIsGlobal
		self.isCustomRadius = isCustomRadius
		self.expIsCustomRadius = expIsCustomRadius
		self.customRadius = customRadius
		self.expCustomRadius = expCustomRadius


class DamageTypeSupport:

    offsets = {'parent': 168, 'isUnique': 176, 'expIsUnique': 184, 'damageType': 192, 'expDamageType': 200, 'mutatorId': 208, 'expMutatorId': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.DamageTypeSupport, isUnique: System.Boolean, expIsUnique: System.String, damageType: System.String, expDamageType: System.String, mutatorId: System.String, expMutatorId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.isUnique = isUnique
		self.expIsUnique = expIsUnique
		self.damageType = damageType
		self.expDamageType = expDamageType
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId


class DartlingMaintainLastPos:

    offsets = {'parent': 136}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.DartlingMaintainLastPos, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class DelayedShutoff:

    offsets = {'parent': 136, 'delay': 144, 'expDelay': 152, 'shutoffTime': 160, 'expShutoffTime': 168, 'effect': 176, 'expEffect': 184}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.DelayedShutoff, delay: System.Single, expDelay: System.String, shutoffTime: System.Single, expShutoffTime: System.String, effect: Assets.Scripts.Unity.Effects.Effect, expEffect: Assets.Scripts.Unity.Effects.Effect, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.delay = delay
		self.expDelay = expDelay
		self.shutoffTime = shutoffTime
		self.expShutoffTime = expShutoffTime
		self.effect = effect
		self.expEffect = expEffect


class DestroyChildTowersOnUpgrade:

    offsets = {'parent': 136, 'towerId': 144, 'expTowerId': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.DestroyChildTowersOnUpgrade, towerId: System.String, expTowerId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.towerId = towerId
		self.expTowerId = expTowerId


class DiscountZone:

    offsets = {'parent': 168, 'discountMultiplier': 176, 'expDiscountMultiplier': 184, 'stackLimit': 192, 'expStackLimit': 200, 'stackName': 208, 'expStackName': 216, 'groupName': 224, 'expGroupName': 232, 'affectSelf': 240, 'expAffectSelf': 248, 'tierCap': 256, 'expTierCap': 264}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.DiscountZone, discountMultiplier: System.Single, expDiscountMultiplier: System.String, stackLimit: System.Single, expStackLimit: System.String, stackName: System.String, expStackName: System.String, groupName: System.String, expGroupName: System.String, affectSelf: System.Boolean, expAffectSelf: System.String, tierCap: System.Int32, expTierCap: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.discountMultiplier = discountMultiplier
		self.expDiscountMultiplier = expDiscountMultiplier
		self.stackLimit = stackLimit
		self.expStackLimit = expStackLimit
		self.stackName = stackName
		self.expStackName = expStackName
		self.groupName = groupName
		self.expGroupName = expGroupName
		self.affectSelf = affectSelf
		self.expAffectSelf = expAffectSelf
		self.tierCap = tierCap
		self.expTierCap = expTierCap


class DroneIdle:

    offsets = {'parent': 136, 'outOfRangeRepositionTime': 144, 'expOutOfRangeRepositionTime': 152, 'idleRepositionTimeMin': 160, 'expIdleRepositionTimeMin': 168, 'idleRepositionTimeMax': 176, 'expIdleRepositionTimeMax': 184, 'greenLight': 192, 'expGreenLight': 200, 'redLight': 208, 'expRedLight': 216, 'blueLight': 224, 'expBlueLight': 232, 'yellowLight': 240, 'expYellowLight': 248, 'purpleLight': 256, 'expPurpleLight': 264}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.DroneIdle, outOfRangeRepositionTime: System.Single, expOutOfRangeRepositionTime: System.String, idleRepositionTimeMin: System.Single, expIdleRepositionTimeMin: System.String, idleRepositionTimeMax: System.Single, expIdleRepositionTimeMax: System.String, greenLight: UnityEngine.GameObject, expGreenLight: UnityEngine.GameObject, redLight: UnityEngine.GameObject, expRedLight: UnityEngine.GameObject, blueLight: UnityEngine.GameObject, expBlueLight: UnityEngine.GameObject, yellowLight: UnityEngine.GameObject, expYellowLight: UnityEngine.GameObject, purpleLight: UnityEngine.GameObject, expPurpleLight: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.outOfRangeRepositionTime = outOfRangeRepositionTime
		self.expOutOfRangeRepositionTime = expOutOfRangeRepositionTime
		self.idleRepositionTimeMin = idleRepositionTimeMin
		self.expIdleRepositionTimeMin = expIdleRepositionTimeMin
		self.idleRepositionTimeMax = idleRepositionTimeMax
		self.expIdleRepositionTimeMax = expIdleRepositionTimeMax
		self.greenLight = greenLight
		self.expGreenLight = expGreenLight
		self.redLight = redLight
		self.expRedLight = expRedLight
		self.blueLight = blueLight
		self.expBlueLight = expBlueLight
		self.yellowLight = yellowLight
		self.expYellowLight = expYellowLight
		self.purpleLight = purpleLight
		self.expPurpleLight = expPurpleLight


class DroneSupport:

    offsets = {'parent': 136, 'drone': 144, 'expDrone': 152, 'count': 160, 'expCount': 168, 'spawnDelay': 176, 'expSpawnDelay': 184, 'spawnAnimState': 192, 'expSpawnAnimState': 200, 'spawnMarker1Start': 208, 'expSpawnMarker1Start': 216, 'spawnMarker2Start': 224, 'expSpawnMarker2Start': 232, 'spawnMarker3Start': 240, 'expSpawnMarker3Start': 248, 'spawnMarker4Start': 256, 'expSpawnMarker4Start': 264, 'spawnMarker1End': 272, 'expSpawnMarker1End': 280, 'spawnMarker2End': 288, 'expSpawnMarker2End': 296, 'spawnMarker3End': 304, 'expSpawnMarker3End': 312, 'spawnMarker4End': 320, 'expSpawnMarker4End': 328, 'spawnIndexRotation': 336, 'expSpawnIndexRotation': 344, 'effectAtSpawn': 352, 'expEffectAtSpawn': 360, 'updateTargetType': 368, 'expUpdateTargetType': 376, 'effectOnDroneUpgrade': 384, 'expEffectOnDroneUpgrade': 392, 'createUpgradeEffect': 400, 'expCreateUpgradeEffect': 408, 'ignoreTargetingTime': 416, 'expIgnoreTargetingTime': 424}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.DroneSupport, drone: Assets.Scripts.Unity.Towers.Tower, expDrone: Assets.Scripts.Unity.Towers.Tower, count: System.Int32, expCount: System.String, spawnDelay: System.Single, expSpawnDelay: System.String, spawnAnimState: System.Int32, expSpawnAnimState: System.String, spawnMarker1Start: UnityEngine.GameObject, expSpawnMarker1Start: UnityEngine.GameObject, spawnMarker2Start: UnityEngine.GameObject, expSpawnMarker2Start: UnityEngine.GameObject, spawnMarker3Start: UnityEngine.GameObject, expSpawnMarker3Start: UnityEngine.GameObject, spawnMarker4Start: UnityEngine.GameObject, expSpawnMarker4Start: UnityEngine.GameObject, spawnMarker1End: UnityEngine.GameObject, expSpawnMarker1End: UnityEngine.GameObject, spawnMarker2End: UnityEngine.GameObject, expSpawnMarker2End: UnityEngine.GameObject, spawnMarker3End: UnityEngine.GameObject, expSpawnMarker3End: UnityEngine.GameObject, spawnMarker4End: UnityEngine.GameObject, expSpawnMarker4End: UnityEngine.GameObject, spawnIndexRotation: System.Single, expSpawnIndexRotation: System.String, effectAtSpawn: Assets.Scripts.Unity.Effects.Effect, expEffectAtSpawn: Assets.Scripts.Unity.Effects.Effect, updateTargetType: System.Boolean, expUpdateTargetType: System.String, effectOnDroneUpgrade: Assets.Scripts.Unity.Effects.Effect, expEffectOnDroneUpgrade: Assets.Scripts.Unity.Effects.Effect, createUpgradeEffect: System.Boolean, expCreateUpgradeEffect: System.String, ignoreTargetingTime: System.Single, expIgnoreTargetingTime: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.drone = drone
		self.expDrone = expDrone
		self.count = count
		self.expCount = expCount
		self.spawnDelay = spawnDelay
		self.expSpawnDelay = expSpawnDelay
		self.spawnAnimState = spawnAnimState
		self.expSpawnAnimState = expSpawnAnimState
		self.spawnMarker1Start = spawnMarker1Start
		self.expSpawnMarker1Start = expSpawnMarker1Start
		self.spawnMarker2Start = spawnMarker2Start
		self.expSpawnMarker2Start = expSpawnMarker2Start
		self.spawnMarker3Start = spawnMarker3Start
		self.expSpawnMarker3Start = expSpawnMarker3Start
		self.spawnMarker4Start = spawnMarker4Start
		self.expSpawnMarker4Start = expSpawnMarker4Start
		self.spawnMarker1End = spawnMarker1End
		self.expSpawnMarker1End = expSpawnMarker1End
		self.spawnMarker2End = spawnMarker2End
		self.expSpawnMarker2End = expSpawnMarker2End
		self.spawnMarker3End = spawnMarker3End
		self.expSpawnMarker3End = expSpawnMarker3End
		self.spawnMarker4End = spawnMarker4End
		self.expSpawnMarker4End = expSpawnMarker4End
		self.spawnIndexRotation = spawnIndexRotation
		self.expSpawnIndexRotation = expSpawnIndexRotation
		self.effectAtSpawn = effectAtSpawn
		self.expEffectAtSpawn = expEffectAtSpawn
		self.updateTargetType = updateTargetType
		self.expUpdateTargetType = expUpdateTargetType
		self.effectOnDroneUpgrade = effectOnDroneUpgrade
		self.expEffectOnDroneUpgrade = expEffectOnDroneUpgrade
		self.createUpgradeEffect = createUpgradeEffect
		self.expCreateUpgradeEffect = expCreateUpgradeEffect
		self.ignoreTargetingTime = ignoreTargetingTime
		self.expIgnoreTargetingTime = expIgnoreTargetingTime


class DruidOfWrathBuff:

    offsets = {'parent': 136, 'newPopCount': 144, 'expNewPopCount': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.DruidOfWrathBuff, newPopCount: System.Int32, expNewPopCount: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.newPopCount = newPopCount
		self.expNewPopCount = expNewPopCount


class DruidVengeanceEffect:

    offsets = {'parent': 136, 'smallGlowEffect': 144, 'expSmallGlowEffect': 152, 'mediumGlowEffect': 160, 'expMediumGlowEffect': 168, 'epicGlowEffect': 176, 'expEpicGlowEffect': 184, 'defaultProjectile': 192, 'expDefaultProjectile': 200, 'weakProjectile': 208, 'expWeakProjectile': 216, 'mediumProjectile': 224, 'expMediumProjectile': 232, 'epicProjectile': 240, 'expEpicProjectile': 248, 'smallGlowEffectStacks': 256, 'mediumGlowEffectStacks': 260, 'epicGlowEffectStacks': 264, 'expSmallGlowEffectStacks': 272, 'expMediumGlowEffectStacks': 280, 'expEpicGlowEffectStacks': 288, 'damageModifierWrath': 296, 'expDamageModifierWrath': 304}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.DruidVengeanceEffect, smallGlowEffect: Assets.Scripts.Unity.Effects.Effect, expSmallGlowEffect: Assets.Scripts.Unity.Effects.Effect, mediumGlowEffect: Assets.Scripts.Unity.Effects.Effect, expMediumGlowEffect: Assets.Scripts.Unity.Effects.Effect, epicGlowEffect: Assets.Scripts.Unity.Effects.Effect, expEpicGlowEffect: Assets.Scripts.Unity.Effects.Effect, defaultProjectile: UnityEngine.GameObject, expDefaultProjectile: UnityEngine.GameObject, weakProjectile: UnityEngine.GameObject, expWeakProjectile: UnityEngine.GameObject, mediumProjectile: UnityEngine.GameObject, expMediumProjectile: UnityEngine.GameObject, epicProjectile: UnityEngine.GameObject, expEpicProjectile: UnityEngine.GameObject, smallGlowEffectStacks: System.Int32, mediumGlowEffectStacks: System.Int32, epicGlowEffectStacks: System.Int32, expSmallGlowEffectStacks: System.String, expMediumGlowEffectStacks: System.String, expEpicGlowEffectStacks: System.String, damageModifierWrath: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.DamageModifierWrath, expDamageModifierWrath: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.DamageModifierWrath, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.smallGlowEffect = smallGlowEffect
		self.expSmallGlowEffect = expSmallGlowEffect
		self.mediumGlowEffect = mediumGlowEffect
		self.expMediumGlowEffect = expMediumGlowEffect
		self.epicGlowEffect = epicGlowEffect
		self.expEpicGlowEffect = expEpicGlowEffect
		self.defaultProjectile = defaultProjectile
		self.expDefaultProjectile = expDefaultProjectile
		self.weakProjectile = weakProjectile
		self.expWeakProjectile = expWeakProjectile
		self.mediumProjectile = mediumProjectile
		self.expMediumProjectile = expMediumProjectile
		self.epicProjectile = epicProjectile
		self.expEpicProjectile = expEpicProjectile
		self.smallGlowEffectStacks = smallGlowEffectStacks
		self.mediumGlowEffectStacks = mediumGlowEffectStacks
		self.epicGlowEffectStacks = epicGlowEffectStacks
		self.expSmallGlowEffectStacks = expSmallGlowEffectStacks
		self.expMediumGlowEffectStacks = expMediumGlowEffectStacks
		self.expEpicGlowEffectStacks = expEpicGlowEffectStacks
		self.damageModifierWrath = damageModifierWrath
		self.expDamageModifierWrath = expDamageModifierWrath


class DynamicDuo:

    offsets = {'parent': 136}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.DynamicDuo, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class EnergisingTotemAnimState:

    offsets = {'parent': 136, 'animState': 144, 'expAnimState': 152, 'effect': 160, 'expEffect': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.EnergisingTotemAnimState, animState: System.Int32, expAnimState: System.String, effect: Assets.Scripts.Unity.Effects.Effect, expEffect: Assets.Scripts.Unity.Effects.Effect, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.animState = animState
		self.expAnimState = expAnimState
		self.effect = effect
		self.expEffect = expEffect


class EnergisingTotemBehavior:

    offsets = {'parent': 136, 'rounds': 144, 'expRounds': 152, 'monkeyMonkeyCost': 160, 'expMonkeyMoneyCost': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.EnergisingTotemBehavior, rounds: System.Int32, expRounds: System.String, monkeyMonkeyCost: System.Int32, expMonkeyMoneyCost: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.rounds = rounds
		self.expRounds = expRounds
		self.monkeyMonkeyCost = monkeyMonkeyCost
		self.expMonkeyMoneyCost = expMonkeyMoneyCost


class EziliSupport:

    offsets = {'parent': 136, 'necroPierceMult': 144, 'expNecroPierceMult': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.EziliSupport, necroPierceMult: System.Single, expNecroPierceMult: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.necroPierceMult = necroPierceMult
		self.expNecroPierceMult = expNecroPierceMult


class FighterMovement:

    offsets = {'parent': 136, 'speed': 144, 'expSpeed': 152, 'turningSpeed': 160, 'expTurningSpeed': 168, 'minDistanceToTargetBeforeFlyover': 176, 'expMinDistanceToTargetBeforeFlyover': 184, 'minDistanceOfFlyover': 192, 'expMinDistanceOfFlyover': 200, 'bankAngleMax': 208, 'expBankAngleMax': 216, 'rollTotalTime': 224, 'expRollTotalTime': 232, 'rollRunUpDistance': 240, 'expRollRunUpDistance': 248, 'rollTimeBeforeNext': 256, 'expRollTimeBeforeNext': 264, 'rollChancePerSecondPassed': 272, 'expRollChancePerSecondPassed': 280, 'loopTotalTime': 288, 'expLoopTotalTime': 296, 'loopTimeBeforeNext': 304, 'expLoopTimeBeforeNext': 312, 'loopChancePerSecondPassed': 320, 'expLoopChancePerSecondPassed': 328, 'loopRadius': 336, 'expLoopRadius': 344, 'loopModelScale': 352, 'expLoopModelScale': 360}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.FighterMovement, speed: System.Single, expSpeed: System.String, turningSpeed: System.Single, expTurningSpeed: System.String, minDistanceToTargetBeforeFlyover: System.Single, expMinDistanceToTargetBeforeFlyover: System.String, minDistanceOfFlyover: System.Single, expMinDistanceOfFlyover: System.String, bankAngleMax: System.Single, expBankAngleMax: System.String, rollTotalTime: System.Single, expRollTotalTime: System.String, rollRunUpDistance: System.Single, expRollRunUpDistance: System.String, rollTimeBeforeNext: System.Single, expRollTimeBeforeNext: System.String, rollChancePerSecondPassed: System.Single, expRollChancePerSecondPassed: System.String, loopTotalTime: System.Single, expLoopTotalTime: System.String, loopTimeBeforeNext: System.Single, expLoopTimeBeforeNext: System.String, loopChancePerSecondPassed: System.Single, expLoopChancePerSecondPassed: System.String, loopRadius: System.Single, expLoopRadius: System.String, loopModelScale: System.Single, expLoopModelScale: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.speed = speed
		self.expSpeed = expSpeed
		self.turningSpeed = turningSpeed
		self.expTurningSpeed = expTurningSpeed
		self.minDistanceToTargetBeforeFlyover = minDistanceToTargetBeforeFlyover
		self.expMinDistanceToTargetBeforeFlyover = expMinDistanceToTargetBeforeFlyover
		self.minDistanceOfFlyover = minDistanceOfFlyover
		self.expMinDistanceOfFlyover = expMinDistanceOfFlyover
		self.bankAngleMax = bankAngleMax
		self.expBankAngleMax = expBankAngleMax
		self.rollTotalTime = rollTotalTime
		self.expRollTotalTime = expRollTotalTime
		self.rollRunUpDistance = rollRunUpDistance
		self.expRollRunUpDistance = expRollRunUpDistance
		self.rollTimeBeforeNext = rollTimeBeforeNext
		self.expRollTimeBeforeNext = expRollTimeBeforeNext
		self.rollChancePerSecondPassed = rollChancePerSecondPassed
		self.expRollChancePerSecondPassed = expRollChancePerSecondPassed
		self.loopTotalTime = loopTotalTime
		self.expLoopTotalTime = expLoopTotalTime
		self.loopTimeBeforeNext = loopTimeBeforeNext
		self.expLoopTimeBeforeNext = expLoopTimeBeforeNext
		self.loopChancePerSecondPassed = loopChancePerSecondPassed
		self.expLoopChancePerSecondPassed = expLoopChancePerSecondPassed
		self.loopRadius = loopRadius
		self.expLoopRadius = expLoopRadius
		self.loopModelScale = loopModelScale
		self.expLoopModelScale = expLoopModelScale


class FigureEightMovement:

    offsets = {'parent': 136, 'radius': 144, 'expRadius': 152, 'speed': 160, 'expSpeed': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.FigureEightMovement, radius: System.Single, expRadius: System.String, speed: System.Single, expSpeed: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.radius = radius
		self.expRadius = expRadius
		self.speed = speed
		self.expSpeed = expSpeed


class Footprint:

    offsets = {'doesntBlockTowerPlacement': 136, 'expDoesntBlockTowerPlacement': 144, 'ignoresPlacementCheck': 152, 'expIgnoresPlacementCheck': 160, 'ignoresTowerOverlap': 168, 'expIgnoresTowerOverlap': 176}    
    def __init__(self, doesntBlockTowerPlacement: System.Boolean, expDoesntBlockTowerPlacement: System.String, ignoresPlacementCheck: System.Boolean, expIgnoresPlacementCheck: System.String, ignoresTowerOverlap: System.Boolean, expIgnoresTowerOverlap: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.doesntBlockTowerPlacement = doesntBlockTowerPlacement
		self.expDoesntBlockTowerPlacement = expDoesntBlockTowerPlacement
		self.ignoresPlacementCheck = ignoresPlacementCheck
		self.expIgnoresPlacementCheck = expIgnoresPlacementCheck
		self.ignoresTowerOverlap = ignoresTowerOverlap
		self.expIgnoresTowerOverlap = expIgnoresTowerOverlap


class FootprintZone:

    offsets = {'parent': 168, 'isUnique': 176, 'expIsUnique': 184, 'footprintReduction': 192, 'expFootprintReduction': 200, 'mutatorId': 208, 'expMutatorId': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.FootprintZone, isUnique: System.Boolean, expIsUnique: System.String, footprintReduction: System.Single, expFootprintReduction: System.String, mutatorId: System.String, expMutatorId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.isUnique = isUnique
		self.expIsUnique = expIsUnique
		self.footprintReduction = footprintReduction
		self.expFootprintReduction = expFootprintReduction
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId


class FreeUpgradeSupport:

    offsets = {'parent': 168, 'mutatorId': 176, 'expMutatorId': 184, 'upgrade': 192, 'expUpgrade': 200}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.FreeUpgradeSupport, mutatorId: System.String, expMutatorId: System.String, upgrade: System.Int32, expUpgrade: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId
		self.upgrade = upgrade
		self.expUpgrade = expUpgrade


class FreezeNearbyWater:

    offsets = {'parent': 136, 'radius': 144, 'expRadius': 152, 'areaHeightOffset': 160, 'expAreaHeightOffset': 168, 'freezeDisplay': 176, 'expFreezeDisplay': 184}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.FreezeNearbyWater, radius: System.Single, expRadius: System.String, areaHeightOffset: System.Single, expAreaHeightOffset: System.String, freezeDisplay: UnityEngine.GameObject, expFreezeDisplay: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.radius = radius
		self.expRadius = expRadius
		self.areaHeightOffset = areaHeightOffset
		self.expAreaHeightOffset = expAreaHeightOffset
		self.freezeDisplay = freezeDisplay
		self.expFreezeDisplay = expFreezeDisplay


class GlobalRangeCircle:

    offsets = {'parent': 136}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.GlobalRangeCircle, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class HeliMovement:

    offsets = {'parent': 136, 'maxSpeed': 144, 'expMaxSpeed': 152, 'rotationSpeed': 160, 'expRotationSpeed': 168, 'strafeDistance': 176, 'expStrafeDistance': 184, 'otherHeliRepulsionRange': 192, 'expOtherHeliRepulsionRange': 200, 'movementForceStart': 208, 'expMovementForceStart': 216, 'movementForceEnd': 224, 'expMovementForceEnd': 232, 'brakeForce': 240, 'expBrakeForce': 248, 'otherHeliRepulsonForce': 256, 'expOtherHeliRepulsonForce': 264, 'slowdownRadiusMax': 272, 'expSlowdownRadiusMax': 280, 'slowdownRadiusMin': 288, 'expSlowdownRadiusMin': 296, 'minVelocityCapScale': 304, 'expMinVelocityCapScale': 312, 'destinationYOffset': 320, 'expDestinationYOffset': 328, 'tiltAngle': 336, 'expTiltAngle': 344}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.HeliMovement, maxSpeed: System.Single, expMaxSpeed: System.String, rotationSpeed: System.Single, expRotationSpeed: System.String, strafeDistance: System.Single, expStrafeDistance: System.String, otherHeliRepulsionRange: System.Single, expOtherHeliRepulsionRange: System.String, movementForceStart: System.Single, expMovementForceStart: System.String, movementForceEnd: System.Single, expMovementForceEnd: System.String, brakeForce: System.Single, expBrakeForce: System.String, otherHeliRepulsonForce: System.Single, expOtherHeliRepulsonForce: System.String, slowdownRadiusMax: System.Single, expSlowdownRadiusMax: System.String, slowdownRadiusMin: System.Single, expSlowdownRadiusMin: System.String, minVelocityCapScale: System.Single, expMinVelocityCapScale: System.String, destinationYOffset: System.Single, expDestinationYOffset: System.String, tiltAngle: System.Single, expTiltAngle: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.maxSpeed = maxSpeed
		self.expMaxSpeed = expMaxSpeed
		self.rotationSpeed = rotationSpeed
		self.expRotationSpeed = expRotationSpeed
		self.strafeDistance = strafeDistance
		self.expStrafeDistance = expStrafeDistance
		self.otherHeliRepulsionRange = otherHeliRepulsionRange
		self.expOtherHeliRepulsionRange = expOtherHeliRepulsionRange
		self.movementForceStart = movementForceStart
		self.expMovementForceStart = expMovementForceStart
		self.movementForceEnd = movementForceEnd
		self.expMovementForceEnd = expMovementForceEnd
		self.brakeForce = brakeForce
		self.expBrakeForce = expBrakeForce
		self.otherHeliRepulsonForce = otherHeliRepulsonForce
		self.expOtherHeliRepulsonForce = expOtherHeliRepulsonForce
		self.slowdownRadiusMax = slowdownRadiusMax
		self.expSlowdownRadiusMax = expSlowdownRadiusMax
		self.slowdownRadiusMin = slowdownRadiusMin
		self.expSlowdownRadiusMin = expSlowdownRadiusMin
		self.minVelocityCapScale = minVelocityCapScale
		self.expMinVelocityCapScale = expMinVelocityCapScale
		self.destinationYOffset = destinationYOffset
		self.expDestinationYOffset = expDestinationYOffset
		self.tiltAngle = tiltAngle
		self.expTiltAngle = expTiltAngle


class Hero:

    offsets = {'parent': 136, 'xpScale': 144, 'expXpScale': 152, 'costPerXpToLevel': 160, 'expCostPerXpToLevel': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Hero, xpScale: System.Single, expXpScale: System.String, costPerXpToLevel: System.Single, expCostPerXpToLevel: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.xpScale = xpScale
		self.expXpScale = expXpScale
		self.costPerXpToLevel = costPerXpToLevel
		self.expCostPerXpToLevel = expCostPerXpToLevel


class HeroXpPerRound:

    offsets = {'parent': 136, 'additionalXpPerRound': 144, 'expAdditionalXpPerRound': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.HeroXpPerRound, additionalXpPerRound: System.Single, expAdditionalXpPerRound: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.additionalXpPerRound = additionalXpPerRound
		self.expAdditionalXpPerRound = expAdditionalXpPerRound


class HeroXpScaleSupport:

    offsets = {'parent': 168, 'isUnique': 176, 'expIsUnique': 184, 'heroXpScale': 192, 'expHeroXpScale': 200}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.HeroXpScaleSupport, isUnique: System.Boolean, expIsUnique: System.String, heroXpScale: System.Single, expHeroXpScale: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.isUnique = isUnique
		self.expIsUnique = expIsUnique
		self.heroXpScale = heroXpScale
		self.expHeroXpScale = expHeroXpScale


class HexManager:

    offsets = {'parent': 136, 'hex': 144, 'expHex': 152, 'overlays': 160, 'expOverlays': 168, 'overlaysLayer': 176, 'expOverlaysLayer': 184}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.HexManager, hex: Assets.Scripts.Unity.Bloons.Behaviors.Hex, expHex: Assets.Scripts.Unity.Bloons.Behaviors.Hex, overlays: Assets.Scripts.Unity.Bloons.OverlayGroup, expOverlays: Assets.Scripts.Unity.Bloons.OverlayGroup, overlaysLayer: System.Int32, expOverlaysLayer: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.hex = hex
		self.expHex = expHex
		self.overlays = overlays
		self.expOverlays = expOverlays
		self.overlaysLayer = overlaysLayer
		self.expOverlaysLayer = expOverlaysLayer


class IgnoreAllMutatorsTower:

    offsets = {'parent': 136}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.IgnoreAllMutatorsTower, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class IgnoreTower:

    offsets = {'parent': 136, 'ignoreId': 144, 'expIgnoreId': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.IgnoreTower, ignoreId: System.String, expIgnoreId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.ignoreId = ignoreId
		self.expIgnoreId = expIgnoreId


class IgnoreTowersBlocker:

    offsets = {'parent': 136, 'whitelistedTowers': 144, 'expWhitelistedTowers': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.IgnoreTowersBlocker, whitelistedTowers: System.String, expWhitelistedTowers: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.whitelistedTowers = whitelistedTowers
		self.expWhitelistedTowers = expWhitelistedTowers


class LifeRegen:

    offsets = {'parent': 136, 'regenAmount': 144, 'expRegenAmount': 152, 'overRegenAmount': 160, 'expOverRegenAmount': 168, 'lifespan': 176, 'expLifespan': 184, 'display': 192, 'expDisplay': 200}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.LifeRegen, regenAmount: System.Single, expRegenAmount: System.String, overRegenAmount: System.Single, expOverRegenAmount: System.String, lifespan: System.Single, expLifespan: System.String, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.regenAmount = regenAmount
		self.expRegenAmount = expRegenAmount
		self.overRegenAmount = overRegenAmount
		self.expOverRegenAmount = expOverRegenAmount
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.display = display
		self.expDisplay = expDisplay


class LinkDisplayScaleToTowerRange:

    offsets = {'parent': 136, 'display': 144, 'expDisplay': 152, 'displayRadius': 160, 'expDisplayRadius': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.LinkDisplayScaleToTowerRange, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, displayRadius: System.Single, expDisplayRadius: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.display = display
		self.expDisplay = expDisplay
		self.displayRadius = displayRadius
		self.expDisplayRadius = expDisplayRadius


class LinkProjectileRadiusToTowerRange:

    offsets = {'parent': 136, 'projectile': 144, 'expProjectile': 152, 'projectileRadiusOffset': 160, 'expProjectileRadiusOffset': 168, 'displayRadius': 176, 'expDisplayRadius': 184}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.LinkProjectileRadiusToTowerRange, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, expProjectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, projectileRadiusOffset: System.Single, expProjectileRadiusOffset: System.String, displayRadius: System.Single, expDisplayRadius: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.projectile = projectile
		self.expProjectile = expProjectile
		self.projectileRadiusOffset = projectileRadiusOffset
		self.expProjectileRadiusOffset = expProjectileRadiusOffset
		self.displayRadius = displayRadius
		self.expDisplayRadius = expDisplayRadius


class LoadAlchemistBrewInfo:

    offsets = {'parent': 136, 'addBerserkerBrewToProjectile': 144, 'expAddBerserkerBrewToProjectile': 152, 'addAcidicMixtureToProjectile': 160, 'expAddAcidicMixtureToProjectile': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.LoadAlchemistBrewInfo, addBerserkerBrewToProjectile: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.AddBerserkerBrewToProjectile, expAddBerserkerBrewToProjectile: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.AddBerserkerBrewToProjectile, addAcidicMixtureToProjectile: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.AddAcidicMixtureToProjectile, expAddAcidicMixtureToProjectile: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.AddAcidicMixtureToProjectile, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.addBerserkerBrewToProjectile = addBerserkerBrewToProjectile
		self.expAddBerserkerBrewToProjectile = expAddBerserkerBrewToProjectile
		self.addAcidicMixtureToProjectile = addAcidicMixtureToProjectile
		self.expAddAcidicMixtureToProjectile = expAddAcidicMixtureToProjectile


class MerchantShip:

    offsets = {'parent': 136}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.MerchantShip, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class MoabShoveZone:

    offsets = {'parent': 136, 'range': 144, 'expRange': 152, 'moabPushSpeedScaleCap': 160, 'expMoabPushSpeedScaleCap': 168, 'bfbPushSpeedScaleCap': 176, 'expBfbPushSpeedScaleCap': 184, 'zomgPushSpeedScaleCap': 192, 'expZomgPushSpeedScaleCap': 200, 'filterInvisible': 208, 'expFilterInvisible': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.MoabShoveZone, range: System.Single, expRange: System.String, moabPushSpeedScaleCap: System.Single, expMoabPushSpeedScaleCap: System.String, bfbPushSpeedScaleCap: System.Single, expBfbPushSpeedScaleCap: System.String, zomgPushSpeedScaleCap: System.Single, expZomgPushSpeedScaleCap: System.String, filterInvisible: Assets.Scripts.Unity.Towers.Filters.FilterInvisible, expFilterInvisible: Assets.Scripts.Unity.Towers.Filters.FilterInvisible, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.range = range
		self.expRange = expRange
		self.moabPushSpeedScaleCap = moabPushSpeedScaleCap
		self.expMoabPushSpeedScaleCap = expMoabPushSpeedScaleCap
		self.bfbPushSpeedScaleCap = bfbPushSpeedScaleCap
		self.expBfbPushSpeedScaleCap = expBfbPushSpeedScaleCap
		self.zomgPushSpeedScaleCap = zomgPushSpeedScaleCap
		self.expZomgPushSpeedScaleCap = expZomgPushSpeedScaleCap
		self.filterInvisible = filterInvisible
		self.expFilterInvisible = expFilterInvisible


class MonkeyCity:

    offsets = {'parent': 136, 'roundsTillMultiplier': 144, 'expRoundsTillMultiplier': 152, 'towerId': 160, 'expTowerId': 168, 'multiplier': 176, 'expMultiplier': 184, 'mutatorId': 192, 'expMutatorId': 200}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.MonkeyCity, roundsTillMultiplier: System.Int32, expRoundsTillMultiplier: System.String, towerId: System.String, expTowerId: System.String, multiplier: System.Single, expMultiplier: System.String, mutatorId: System.String, expMutatorId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.roundsTillMultiplier = roundsTillMultiplier
		self.expRoundsTillMultiplier = expRoundsTillMultiplier
		self.towerId = towerId
		self.expTowerId = expTowerId
		self.multiplier = multiplier
		self.expMultiplier = expMultiplier
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId


class MonkeyCityIncomeSupport:

    offsets = {'parent': 168, 'isUnique': 176, 'expIsUnique': 184, 'incomeModifier': 192, 'expIncomeModifier': 200}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.MonkeyCityIncomeSupport, isUnique: System.Boolean, expIsUnique: System.String, incomeModifier: System.Single, expIncomeModifier: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.isUnique = isUnique
		self.expIsUnique = expIsUnique
		self.incomeModifier = incomeModifier
		self.expIncomeModifier = expIncomeModifier


class MonkeyTemple:

    offsets = {'parent': 136, 'towerGroupCount': 144, 'expTowerGroupCount': 152, 'placeAnimation': 160, 'expPlaceAnimation': 168, 'upgradeAnimation': 176, 'expUpgradeAnimation': 184, 'weaponDelay': 192, 'expWeaponDelay': 200, 'templeId': 208, 'expTempleId': 216, 'effect': 224, 'expEffect': 232, 'towerEffect': 240, 'expTowerEffect': 248, 'heroEffect': 256, 'expHeroEffect': 264, 'darkTransformationEffect': 272, 'expDarkTransformationEffect': 280, 'darkTheAntiBloonSacrificeEffect': 288, 'expDarkTheAntiBloonSacrificeEffect': 296, 'darkLegendOfTheNightSacrificeEffect': 304, 'expDarkLegendOfTheNightSacrificeEffect': 312, 'darkTransformationAnimation': 320, 'expDarkTransformationAnimation': 328, 'darkTransformationWeaponDelay': 336, 'expDarkTransformationWeaponDelay': 344, 'darkTransformSound': 352, 'expDarkTransformSound': 360, 'darkAltTransformSound': 368, 'expDarkAltTransformSound': 376, 'heroOverlapYAdjustment': 384, 'expHeroOverlapYAdjustment': 392}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.MonkeyTemple, towerGroupCount: System.Int32, expTowerGroupCount: System.String, placeAnimation: System.Int32, expPlaceAnimation: System.String, upgradeAnimation: System.Int32, expUpgradeAnimation: System.String, weaponDelay: System.Single, expWeaponDelay: System.String, templeId: System.String, expTempleId: System.String, effect: Assets.Scripts.Unity.Effects.Effect, expEffect: Assets.Scripts.Unity.Effects.Effect, towerEffect: Assets.Scripts.Unity.Effects.Effect, expTowerEffect: Assets.Scripts.Unity.Effects.Effect, heroEffect: Assets.Scripts.Unity.Effects.Effect, expHeroEffect: Assets.Scripts.Unity.Effects.Effect, darkTransformationEffect: Assets.Scripts.Unity.Effects.Effect, expDarkTransformationEffect: Assets.Scripts.Unity.Effects.Effect, darkTheAntiBloonSacrificeEffect: Assets.Scripts.Unity.Effects.Effect, expDarkTheAntiBloonSacrificeEffect: Assets.Scripts.Unity.Effects.Effect, darkLegendOfTheNightSacrificeEffect: Assets.Scripts.Unity.Effects.Effect, expDarkLegendOfTheNightSacrificeEffect: Assets.Scripts.Unity.Effects.Effect, darkTransformationAnimation: System.Int32, expDarkTransformationAnimation: System.String, darkTransformationWeaponDelay: System.Single, expDarkTransformationWeaponDelay: System.String, darkTransformSound: UnityEngine.AudioSource, expDarkTransformSound: UnityEngine.AudioSource, darkAltTransformSound: UnityEngine.AudioSource, expDarkAltTransformSound: UnityEngine.AudioSource, heroOverlapYAdjustment: System.Single, expHeroOverlapYAdjustment: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.towerGroupCount = towerGroupCount
		self.expTowerGroupCount = expTowerGroupCount
		self.placeAnimation = placeAnimation
		self.expPlaceAnimation = expPlaceAnimation
		self.upgradeAnimation = upgradeAnimation
		self.expUpgradeAnimation = expUpgradeAnimation
		self.weaponDelay = weaponDelay
		self.expWeaponDelay = expWeaponDelay
		self.templeId = templeId
		self.expTempleId = expTempleId
		self.effect = effect
		self.expEffect = expEffect
		self.towerEffect = towerEffect
		self.expTowerEffect = expTowerEffect
		self.heroEffect = heroEffect
		self.expHeroEffect = expHeroEffect
		self.darkTransformationEffect = darkTransformationEffect
		self.expDarkTransformationEffect = expDarkTransformationEffect
		self.darkTheAntiBloonSacrificeEffect = darkTheAntiBloonSacrificeEffect
		self.expDarkTheAntiBloonSacrificeEffect = expDarkTheAntiBloonSacrificeEffect
		self.darkLegendOfTheNightSacrificeEffect = darkLegendOfTheNightSacrificeEffect
		self.expDarkLegendOfTheNightSacrificeEffect = expDarkLegendOfTheNightSacrificeEffect
		self.darkTransformationAnimation = darkTransformationAnimation
		self.expDarkTransformationAnimation = expDarkTransformationAnimation
		self.darkTransformationWeaponDelay = darkTransformationWeaponDelay
		self.expDarkTransformationWeaponDelay = expDarkTransformationWeaponDelay
		self.darkTransformSound = darkTransformSound
		self.expDarkTransformSound = expDarkTransformSound
		self.darkAltTransformSound = darkAltTransformSound
		self.expDarkAltTransformSound = expDarkAltTransformSound
		self.heroOverlapYAdjustment = heroOverlapYAdjustment
		self.expHeroOverlapYAdjustment = expHeroOverlapYAdjustment


class Monkeyopolis:

    offsets = {'parent': 136, 'filterTower': 144, 'expFilterTower': 152, 'valueRequiredForCrate': 160, 'expValueRequiredForCrate': 168, 'cashFromCrate': 176, 'expCashFromCrate': 184}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Monkeyopolis, filterTower: System.String, expFilterTower: System.String, valueRequiredForCrate: System.Int32, expValueRequiredForCrate: System.String, cashFromCrate: System.Int32, expCashFromCrate: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.filterTower = filterTower
		self.expFilterTower = expFilterTower
		self.valueRequiredForCrate = valueRequiredForCrate
		self.expValueRequiredForCrate = expValueRequiredForCrate
		self.cashFromCrate = cashFromCrate
		self.expCashFromCrate = expCashFromCrate


class MonkeyopolisUpgradeCost:

    offsets = {'costPerFarm': 136, 'expCostPerFarm': 144, 'path': 152, 'expPath': 160, 'filterTower': 168, 'expFilterTower': 176}    
    def __init__(self, costPerFarm: System.Int32, expCostPerFarm: System.String, path: System.Int32, expPath: System.String, filterTower: System.String, expFilterTower: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.costPerFarm = costPerFarm
		self.expCostPerFarm = expCostPerFarm
		self.path = path
		self.expPath = expPath
		self.filterTower = filterTower
		self.expFilterTower = expFilterTower


class MutationImunityTower:

    offsets = {'parent': 136, 'mutationId': 144, 'expMutationId': 152, 'effectScale': 160, 'expEffectScale': 168, 'modifyEffectScale': 176, 'expModifyEffectScale': 184, 'durationScale': 192, 'expDurationScale': 200, 'modifyDurationScale': 208, 'expModifyDurationScale': 216, 'preventMutation': 224, 'expPreventMutation': 232}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.MutationImunityTower, mutationId: System.String, expMutationId: System.String, effectScale: System.Single, expEffectScale: System.String, modifyEffectScale: System.Boolean, expModifyEffectScale: System.String, durationScale: System.Single, expDurationScale: System.String, modifyDurationScale: System.Boolean, expModifyDurationScale: System.String, preventMutation: System.Boolean, expPreventMutation: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.mutationId = mutationId
		self.expMutationId = expMutationId
		self.effectScale = effectScale
		self.expEffectScale = expEffectScale
		self.modifyEffectScale = modifyEffectScale
		self.expModifyEffectScale = expModifyEffectScale
		self.durationScale = durationScale
		self.expDurationScale = expDurationScale
		self.modifyDurationScale = modifyDurationScale
		self.expModifyDurationScale = expModifyDurationScale
		self.preventMutation = preventMutation
		self.expPreventMutation = expPreventMutation


class NecromancerZone:

    offsets = {'parent': 136, 'attackUsedForRange': 144, 'expAttackUsedForRange': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.NecromancerZone, attackUsedForRange: Assets.Scripts.Unity.Towers.Behaviors.Attack.Attack, expAttackUsedForRange: Assets.Scripts.Unity.Towers.Behaviors.Attack.Attack, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.attackUsedForRange = attackUsedForRange
		self.expAttackUsedForRange = expAttackUsedForRange


class Orbit:

    offsets = {'parent': 136, 'count': 144, 'expCount': 152, 'range': 160, 'expRange': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Orbit, count: System.Int32, expCount: System.String, range: System.Single, expRange: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.count = count
		self.expCount = expCount
		self.range = range
		self.expRange = expRange


class OrbitingTower:

    offsets = {'parent': 136, 'rotationDegreesPerFrame': 144, 'expRotationDegreesPerFrame': 152, 'radius': 160, 'expRadius': 168, 'ignoreRotation': 176, 'expIgnoreRotation': 184, 'offsetHeight': 192, 'expOffsetHeight': 200, 'dontUseParentOrigin': 208, 'expDontUseParentOrigin': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.OrbitingTower, rotationDegreesPerFrame: System.Single, expRotationDegreesPerFrame: System.String, radius: System.Single, expRadius: System.String, ignoreRotation: System.Boolean, expIgnoreRotation: System.String, offsetHeight: System.Single, expOffsetHeight: System.String, dontUseParentOrigin: System.Boolean, expDontUseParentOrigin: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.rotationDegreesPerFrame = rotationDegreesPerFrame
		self.expRotationDegreesPerFrame = expRotationDegreesPerFrame
		self.radius = radius
		self.expRadius = expRadius
		self.ignoreRotation = ignoreRotation
		self.expIgnoreRotation = expIgnoreRotation
		self.offsetHeight = offsetHeight
		self.expOffsetHeight = expOffsetHeight
		self.dontUseParentOrigin = dontUseParentOrigin
		self.expDontUseParentOrigin = expDontUseParentOrigin


class OverrideCamoDetection:

    offsets = {'parent': 136, 'detectCamo': 144, 'expDetectCamo': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.OverrideCamoDetection, detectCamo: System.Boolean, expDetectCamo: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.detectCamo = detectCamo
		self.expDetectCamo = expDetectCamo


class ParagonAssetSwap:

    offsets = {'displayToSwap': 136, 'newDisplay': 144, 'degree': 152, 'expDegree': 160, 'applyToAllAbove': 168, 'expApplyToAllAbove': 176, 'def': 184}    
    def __init__(self, displayToSwap: UnityEngine.GameObject, newDisplay: UnityEngine.GameObject, degree: System.Int32, expDegree: System.String, applyToAllAbove: System.Boolean, expApplyToAllAbove: System.String, def: Assets.Scripts.Models.Towers.Behaviors.ParagonAssetSwapModel, **kwargs):
        super().__init__(self, **kwargs)
		self.displayToSwap = displayToSwap
		self.newDisplay = newDisplay
		self.degree = degree
		self.expDegree = expDegree
		self.applyToAllAbove = applyToAllAbove
		self.expApplyToAllAbove = expApplyToAllAbove
		self.def = def


class ParagonTower:

    offsets = {'parent': 136, 'displayDegree1': 144, 'expdisplayDegree1': 152, 'displayDegree2': 160, 'expdisplayDegree2': 168, 'displayDegree3': 176, 'expdisplayDegree3': 184, 'displayDegree4': 192, 'expdisplayDegree4': 200, 'displayDegree5': 208, 'expdisplayDegree5': 216, 'effectDuring': 224, 'expEffectDuring': 232, 'effectAfterInvestment': 240, 'expEffectAfterInvestment': 248, 'endEffect': 256, 'expEndEffect': 264, 'investmentEffect': 272, 'expInvestmentEffect': 280, 'investmentEffectTier5': 288, 'expInvestmentEffectTier5': 296, 'effectMinScale': 304, 'expEffectMinScale': 312, 'effectMaxScale': 320, 'expEffectMaxScale': 328, 'investStartScale': 336, 'expInvestStartScale': 344, 'investEndScale': 352, 'expInvestEndScale': 360, 'inactiveDuration': 368, 'expInactiveDuration': 376, 'endAnimationState': 384, 'expEndAnimationState': 392, 'effectsStartMovingAt': 400, 'expEffectsStartMovingAt': 408, 'effectsDontStartMovingAt': 416, 'expEffectsDontStartMovingAt': 424, 'investmentEffectHeight': 432, 'expInvestmentEffectHeight': 440, 'investmentEffectDestYOffset': 448, 'expInvestmentEffectDestYOffset': 456, 'degreeTextEffect': 464, 'expDegreeTextEffect': 472, 'degreeTextEffectLifespan': 480, 'expDegreeTextEffectLifespan': 488, 'changeAttackDisplay': 496, 'expChangeAttackDisplay': 504, 'effectScaleDownTime': 512, 'expEffectScaleDownTime': 520, 'investmentEffectExponent': 528, 'expInvestmentEffectExponent': 536}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.ParagonTower, displayDegree1: UnityEngine.GameObject, expdisplayDegree1: UnityEngine.GameObject, displayDegree2: UnityEngine.GameObject, expdisplayDegree2: UnityEngine.GameObject, displayDegree3: UnityEngine.GameObject, expdisplayDegree3: UnityEngine.GameObject, displayDegree4: UnityEngine.GameObject, expdisplayDegree4: UnityEngine.GameObject, displayDegree5: UnityEngine.GameObject, expdisplayDegree5: UnityEngine.GameObject, effectDuring: Assets.Scripts.Unity.Effects.Effect, expEffectDuring: Assets.Scripts.Unity.Effects.Effect, effectAfterInvestment: Assets.Scripts.Unity.Effects.Effect, expEffectAfterInvestment: Assets.Scripts.Unity.Effects.Effect, endEffect: Assets.Scripts.Unity.Effects.Effect, expEndEffect: Assets.Scripts.Unity.Effects.Effect, investmentEffect: Assets.Scripts.Unity.Effects.Effect, expInvestmentEffect: Assets.Scripts.Unity.Effects.Effect, investmentEffectTier5: Assets.Scripts.Unity.Effects.Effect, expInvestmentEffectTier5: Assets.Scripts.Unity.Effects.Effect, effectMinScale: System.Single, expEffectMinScale: System.String, effectMaxScale: System.Single, expEffectMaxScale: System.String, investStartScale: System.Single, expInvestStartScale: System.String, investEndScale: System.Single, expInvestEndScale: System.String, inactiveDuration: System.Single, expInactiveDuration: System.String, endAnimationState: System.Int32, expEndAnimationState: System.String, effectsStartMovingAt: System.Single, expEffectsStartMovingAt: System.String, effectsDontStartMovingAt: System.Single, expEffectsDontStartMovingAt: System.String, investmentEffectHeight: System.Single, expInvestmentEffectHeight: System.String, investmentEffectDestYOffset: System.Single, expInvestmentEffectDestYOffset: System.String, degreeTextEffect: UnityEngine.GameObject, expDegreeTextEffect: UnityEngine.GameObject, degreeTextEffectLifespan: System.Single, expDegreeTextEffectLifespan: System.String, changeAttackDisplay: System.Boolean, expChangeAttackDisplay: System.String, effectScaleDownTime: System.Single, expEffectScaleDownTime: System.String, investmentEffectExponent: System.Single, expInvestmentEffectExponent: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.displayDegree1 = displayDegree1
		self.expdisplayDegree1 = expdisplayDegree1
		self.displayDegree2 = displayDegree2
		self.expdisplayDegree2 = expdisplayDegree2
		self.displayDegree3 = displayDegree3
		self.expdisplayDegree3 = expdisplayDegree3
		self.displayDegree4 = displayDegree4
		self.expdisplayDegree4 = expdisplayDegree4
		self.displayDegree5 = displayDegree5
		self.expdisplayDegree5 = expdisplayDegree5
		self.effectDuring = effectDuring
		self.expEffectDuring = expEffectDuring
		self.effectAfterInvestment = effectAfterInvestment
		self.expEffectAfterInvestment = expEffectAfterInvestment
		self.endEffect = endEffect
		self.expEndEffect = expEndEffect
		self.investmentEffect = investmentEffect
		self.expInvestmentEffect = expInvestmentEffect
		self.investmentEffectTier5 = investmentEffectTier5
		self.expInvestmentEffectTier5 = expInvestmentEffectTier5
		self.effectMinScale = effectMinScale
		self.expEffectMinScale = expEffectMinScale
		self.effectMaxScale = effectMaxScale
		self.expEffectMaxScale = expEffectMaxScale
		self.investStartScale = investStartScale
		self.expInvestStartScale = expInvestStartScale
		self.investEndScale = investEndScale
		self.expInvestEndScale = expInvestEndScale
		self.inactiveDuration = inactiveDuration
		self.expInactiveDuration = expInactiveDuration
		self.endAnimationState = endAnimationState
		self.expEndAnimationState = expEndAnimationState
		self.effectsStartMovingAt = effectsStartMovingAt
		self.expEffectsStartMovingAt = expEffectsStartMovingAt
		self.effectsDontStartMovingAt = effectsDontStartMovingAt
		self.expEffectsDontStartMovingAt = expEffectsDontStartMovingAt
		self.investmentEffectHeight = investmentEffectHeight
		self.expInvestmentEffectHeight = expInvestmentEffectHeight
		self.investmentEffectDestYOffset = investmentEffectDestYOffset
		self.expInvestmentEffectDestYOffset = expInvestmentEffectDestYOffset
		self.degreeTextEffect = degreeTextEffect
		self.expDegreeTextEffect = expDegreeTextEffect
		self.degreeTextEffectLifespan = degreeTextEffectLifespan
		self.expDegreeTextEffectLifespan = expDegreeTextEffectLifespan
		self.changeAttackDisplay = changeAttackDisplay
		self.expChangeAttackDisplay = expChangeAttackDisplay
		self.effectScaleDownTime = effectScaleDownTime
		self.expEffectScaleDownTime = expEffectScaleDownTime
		self.investmentEffectExponent = investmentEffectExponent
		self.expInvestmentEffectExponent = expInvestmentEffectExponent


class PathMovement:

    offsets = {'parent': 136, 'speed': 144, 'expSpeed': 152, 'rotation': 160, 'expRotation': 168, 'bankRotation': 176, 'expBankRotation': 184, 'bankRotationMul': 192, 'expBankRotationMul': 200, 'ignoreTargetType': 208, 'expIgnoreTargetType': 216, 'catchUpSpeed': 224, 'expCatchUpSpeed': 232, 'takeOffTime': 240, 'expTakeOffTime': 248, 'takeOffExponent': 256, 'expTakeOffExponent': 264, 'takeOffAnimTime': 272, 'expTakeOffAnimTime': 280, 'takeOffScale': 288, 'expTakeOffScale': 296, 'takeOffScaleExponent': 304, 'expTakeOffScaleExponent': 312, 'takeOffPitch': 320, 'expTakeOffPitch': 328, 'takeOffPitchExponent': 336, 'expTakeOffPitchExponent': 344}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.PathMovement, speed: System.Single, expSpeed: System.String, rotation: System.Single, expRotation: System.String, bankRotation: System.Single, expBankRotation: System.String, bankRotationMul: System.Single, expBankRotationMul: System.String, ignoreTargetType: System.Boolean, expIgnoreTargetType: System.String, catchUpSpeed: System.Single, expCatchUpSpeed: System.String, takeOffTime: System.Single, expTakeOffTime: System.String, takeOffExponent: System.Single, expTakeOffExponent: System.String, takeOffAnimTime: System.Single, expTakeOffAnimTime: System.String, takeOffScale: System.Single, expTakeOffScale: System.String, takeOffScaleExponent: System.Single, expTakeOffScaleExponent: System.String, takeOffPitch: System.Single, expTakeOffPitch: System.String, takeOffPitchExponent: System.Single, expTakeOffPitchExponent: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.speed = speed
		self.expSpeed = expSpeed
		self.rotation = rotation
		self.expRotation = expRotation
		self.bankRotation = bankRotation
		self.expBankRotation = expBankRotation
		self.bankRotationMul = bankRotationMul
		self.expBankRotationMul = expBankRotationMul
		self.ignoreTargetType = ignoreTargetType
		self.expIgnoreTargetType = expIgnoreTargetType
		self.catchUpSpeed = catchUpSpeed
		self.expCatchUpSpeed = expCatchUpSpeed
		self.takeOffTime = takeOffTime
		self.expTakeOffTime = expTakeOffTime
		self.takeOffExponent = takeOffExponent
		self.expTakeOffExponent = expTakeOffExponent
		self.takeOffAnimTime = takeOffAnimTime
		self.expTakeOffAnimTime = expTakeOffAnimTime
		self.takeOffScale = takeOffScale
		self.expTakeOffScale = expTakeOffScale
		self.takeOffScaleExponent = takeOffScaleExponent
		self.expTakeOffScaleExponent = expTakeOffScaleExponent
		self.takeOffPitch = takeOffPitch
		self.expTakeOffPitch = expTakeOffPitch
		self.takeOffPitchExponent = takeOffPitchExponent
		self.expTakeOffPitchExponent = expTakeOffPitchExponent


class PathMovementFromScreenCenter:

    offsets = {'parent': 136, 'speed': 144, 'expSpeed': 152, 'ignoreTargetType': 160, 'expIgnoreTargetType': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.PathMovementFromScreenCenter, speed: System.Single, expSpeed: System.String, ignoreTargetType: System.Boolean, expIgnoreTargetType: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.speed = speed
		self.expSpeed = expSpeed
		self.ignoreTargetType = ignoreTargetType
		self.expIgnoreTargetType = expIgnoreTargetType


class PerRoundCashBonusTower:

    offsets = {'parent': 136, 'cashPerRound': 144, 'expCashPerRound': 152, 'cashRoundBonusMultiplier': 160, 'expCashRoundBonusMultiplier': 168, 'lifespan': 176, 'expLifespan': 184, 'display': 192, 'expDisplay': 200, 'distributeCash': 208, 'expDistributeCash': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.PerRoundCashBonusTower, cashPerRound: System.Single, expCashPerRound: System.String, cashRoundBonusMultiplier: System.Single, expCashRoundBonusMultiplier: System.String, lifespan: System.Single, expLifespan: System.String, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, distributeCash: System.Boolean, expDistributeCash: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.cashPerRound = cashPerRound
		self.expCashPerRound = expCashPerRound
		self.cashRoundBonusMultiplier = cashRoundBonusMultiplier
		self.expCashRoundBonusMultiplier = expCashRoundBonusMultiplier
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.display = display
		self.expDisplay = expDisplay
		self.distributeCash = distributeCash
		self.expDistributeCash = expDistributeCash


class PermanentBeserkerBrew:

    offsets = {'parent': 136, 'mutatorId': 144, 'expMutatorId': 152, 'priority': 160, 'expPriority': 168, 'rangeIncrease': 176, 'expRangeIncrease': 184, 'rateIncrease': 192, 'expRateIncrease': 200, 'damageIncrease': 208, 'expDamageIncrease': 216, 'pierceIncrease': 224, 'expPierceIncrease': 232}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.PermanentBeserkerBrew, mutatorId: System.String, expMutatorId: System.String, priority: System.Int32, expPriority: System.String, rangeIncrease: System.Single, expRangeIncrease: System.String, rateIncrease: System.Single, expRateIncrease: System.String, damageIncrease: System.Single, expDamageIncrease: System.String, pierceIncrease: System.Single, expPierceIncrease: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId
		self.priority = priority
		self.expPriority = expPriority
		self.rangeIncrease = rangeIncrease
		self.expRangeIncrease = expRangeIncrease
		self.rateIncrease = rateIncrease
		self.expRateIncrease = expRateIncrease
		self.damageIncrease = damageIncrease
		self.expDamageIncrease = expDamageIncrease
		self.pierceIncrease = pierceIncrease
		self.expPierceIncrease = expPierceIncrease


class PierceSupport:

    offsets = {'parent': 168, 'isUnique': 176, 'expIsUnique': 184, 'pierce': 192, 'expPierce': 200, 'mutatorId': 208, 'expMutatorId': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.PierceSupport, isUnique: System.Boolean, expIsUnique: System.String, pierce: System.Single, expPierce: System.String, mutatorId: System.String, expMutatorId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.isUnique = isUnique
		self.expIsUnique = expIsUnique
		self.pierce = pierce
		self.expPierce = expPierce
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId


class PlaceAlongTrack:

    offsets = {'parent': 136, 'objectToPlace1': 144, 'expObjectToPlace1': 152, 'objectToPlace2': 160, 'expObjectToPlace2': 168, 'objectToPlace3': 176, 'expObjectToPlace3': 184, 'objectToPlace4': 192, 'expObjectToPlace4': 200, 'spacingMin': 208, 'expSpacingMin': 216, 'spacingMax': 224, 'expSpacingMax': 232, 'scaleMin': 240, 'expScaleMin': 248, 'scaleMax': 256, 'expScaleMax': 264, 'rotationMin': 272, 'expRotationMin': 280, 'rotationMax': 288, 'expRotationMax': 296, 'offsetMin': 304, 'expOffsetMin': 312, 'offsetMax': 320, 'expOffsetMax': 328}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.PlaceAlongTrack, objectToPlace1: UnityEngine.GameObject, expObjectToPlace1: UnityEngine.GameObject, objectToPlace2: UnityEngine.GameObject, expObjectToPlace2: UnityEngine.GameObject, objectToPlace3: UnityEngine.GameObject, expObjectToPlace3: UnityEngine.GameObject, objectToPlace4: UnityEngine.GameObject, expObjectToPlace4: UnityEngine.GameObject, spacingMin: System.Single, expSpacingMin: System.String, spacingMax: System.Single, expSpacingMax: System.String, scaleMin: System.Single, expScaleMin: System.String, scaleMax: System.Single, expScaleMax: System.String, rotationMin: System.Single, expRotationMin: System.String, rotationMax: System.Single, expRotationMax: System.String, offsetMin: System.Single, expOffsetMin: System.String, offsetMax: System.Single, expOffsetMax: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.objectToPlace1 = objectToPlace1
		self.expObjectToPlace1 = expObjectToPlace1
		self.objectToPlace2 = objectToPlace2
		self.expObjectToPlace2 = expObjectToPlace2
		self.objectToPlace3 = objectToPlace3
		self.expObjectToPlace3 = expObjectToPlace3
		self.objectToPlace4 = objectToPlace4
		self.expObjectToPlace4 = expObjectToPlace4
		self.spacingMin = spacingMin
		self.expSpacingMin = expSpacingMin
		self.spacingMax = spacingMax
		self.expSpacingMax = expSpacingMax
		self.scaleMin = scaleMin
		self.expScaleMin = expScaleMin
		self.scaleMax = scaleMax
		self.expScaleMax = expScaleMax
		self.rotationMin = rotationMin
		self.expRotationMin = expRotationMin
		self.rotationMax = rotationMax
		self.expRotationMax = expRotationMax
		self.offsetMin = offsetMin
		self.expOffsetMin = expOffsetMin
		self.offsetMax = offsetMax
		self.expOffsetMax = expOffsetMax


class PlayAnimationIndex:

    offsets = {'parent': 136, 'placeAnimation': 144, 'expPlaceAnimation': 152, 'upgradeAnimation': 160, 'expUpgradeAnimation': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.PlayAnimationIndex, placeAnimation: System.Int32, expPlaceAnimation: System.String, upgradeAnimation: System.Int32, expUpgradeAnimation: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.placeAnimation = placeAnimation
		self.expPlaceAnimation = expPlaceAnimation
		self.upgradeAnimation = upgradeAnimation
		self.expUpgradeAnimation = expUpgradeAnimation


class PoplustSupport:

    offsets = {'parent': 168, 'mutatorId': 176, 'expMutatorId': 184, 'maxStacks': 192, 'expMaxStacks': 200, 'ratePercentIncrease': 208, 'expRatePercentIncrease': 216, 'piercePercentIncrease': 224, 'expPiercePercentIncrease': 232}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.PoplustSupport, mutatorId: System.String, expMutatorId: System.String, maxStacks: System.Int32, expMaxStacks: System.String, ratePercentIncrease: System.Single, expRatePercentIncrease: System.String, piercePercentIncrease: System.Single, expPiercePercentIncrease: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId
		self.maxStacks = maxStacks
		self.expMaxStacks = expMaxStacks
		self.ratePercentIncrease = ratePercentIncrease
		self.expRatePercentIncrease = expRatePercentIncrease
		self.piercePercentIncrease = piercePercentIncrease
		self.expPiercePercentIncrease = expPiercePercentIncrease


class PreEmptiveStrikeLauncher:

    offsets = {'parent': 136, 'projectile': 144, 'expProjectile': 152, 'emission': 160, 'expEmission': 168, 'ejectEffect': 176, 'expEjectEffect': 184, 'animationState': 192, 'expAnimationState': 200, 'throwMarker': 208}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.PreEmptiveStrikeLauncher, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, expProjectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, emission: Assets.Scripts.Unity.Towers.Emissions.Emission, expEmission: Assets.Scripts.Unity.Towers.Emissions.Emission, ejectEffect: Assets.Scripts.Unity.Effects.Effect, expEjectEffect: Assets.Scripts.Unity.Effects.Effect, animationState: System.Int32, expAnimationState: System.String, throwMarker: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.projectile = projectile
		self.expProjectile = expProjectile
		self.emission = emission
		self.expEmission = expEmission
		self.ejectEffect = ejectEffect
		self.expEjectEffect = expEjectEffect
		self.animationState = animationState
		self.expAnimationState = expAnimationState
		self.throwMarker = throwMarker


class PrinceOfDarknessZombieBuff:

    offsets = {'parent': 184, 'damageIncrease': 192, 'expDamageIncrease': 200, 'distanceMultiplier': 208, 'expDistanceMultiplier': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.PrinceOfDarknessZombieBuff, damageIncrease: System.Single, expDamageIncrease: System.String, distanceMultiplier: System.Single, expDistanceMultiplier: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.damageIncrease = damageIncrease
		self.expDamageIncrease = expDamageIncrease
		self.distanceMultiplier = distanceMultiplier
		self.expDistanceMultiplier = expDistanceMultiplier


class ProjectileRadiusSupport:

    offsets = {'filterTowers': 168, 'expFilterTowers': 176, 'isUnique': 184, 'expIsUnique': 192, 'multiplier': 200, 'expMultiplier': 208, 'mutatorId': 216, 'expMutatorId': 224, 'isGlobal': 232, 'expIsGlobal': 240}    
    def __init__(self, filterTowers: System.String, expFilterTowers: System.String, isUnique: System.Boolean, expIsUnique: System.String, multiplier: System.Single, expMultiplier: System.String, mutatorId: System.String, expMutatorId: System.String, isGlobal: System.Boolean, expIsGlobal: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.filterTowers = filterTowers
		self.expFilterTowers = expFilterTowers
		self.isUnique = isUnique
		self.expIsUnique = expIsUnique
		self.multiplier = multiplier
		self.expMultiplier = expMultiplier
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId
		self.isGlobal = isGlobal
		self.expIsGlobal = expIsGlobal


class ProjectileSpeedSupport:

    offsets = {'parent': 168, 'isUnique': 176, 'expIsUnique': 184, 'multiplier': 192, 'expMultiplier': 200, 'mutatorId': 208, 'expMutatorId': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.ProjectileSpeedSupport, isUnique: System.Boolean, expIsUnique: System.String, multiplier: System.Single, expMultiplier: System.String, mutatorId: System.String, expMutatorId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.isUnique = isUnique
		self.expIsUnique = expIsUnique
		self.multiplier = multiplier
		self.expMultiplier = expMultiplier
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId


class RangeSupport:

    offsets = {'parent': 168, 'isUnique': 176, 'expIsUnique': 184, 'multiplier': 192, 'expMultiplier': 200, 'additive': 208, 'expAdditive': 216, 'mutatorId': 224, 'expMutatorId': 232, 'isGlobal': 240, 'expIsGlobal': 248}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.RangeSupport, isUnique: System.Boolean, expIsUnique: System.String, multiplier: System.Single, expMultiplier: System.String, additive: System.Single, expAdditive: System.String, mutatorId: System.String, expMutatorId: System.String, isGlobal: System.Boolean, expIsGlobal: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.isUnique = isUnique
		self.expIsUnique = expIsUnique
		self.multiplier = multiplier
		self.expMultiplier = expMultiplier
		self.additive = additive
		self.expAdditive = expAdditive
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId
		self.isGlobal = isGlobal
		self.expIsGlobal = expIsGlobal


class RangeUpFromUpgrade:

    offsets = {'parent': 136, 'rangePerUpgrade': 144, 'expRangePerUpgrade': 152, 'upgradeTier': 160, 'expUpgradeTier': 168, 'upgradePath': 176, 'expUpgradePath': 184, 'towerBaseId': 192, 'expTowerBaseId': 200}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.RangeUpFromUpgrade, rangePerUpgrade: System.Single, expRangePerUpgrade: System.String, upgradeTier: System.Single, expUpgradeTier: System.String, upgradePath: System.Single, expUpgradePath: System.String, towerBaseId: System.String, expTowerBaseId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.rangePerUpgrade = rangePerUpgrade
		self.expRangePerUpgrade = expRangePerUpgrade
		self.upgradeTier = upgradeTier
		self.expUpgradeTier = expUpgradeTier
		self.upgradePath = upgradePath
		self.expUpgradePath = expUpgradePath
		self.towerBaseId = towerBaseId
		self.expTowerBaseId = expTowerBaseId


class RateSupport:

    offsets = {'parent': 168, 'isUnique': 176, 'expIsUnique': 184, 'multiplier': 192, 'expMultiplier': 200, 'mutatorId': 208, 'expMutatorId': 216, 'isGlobal': 224, 'expIsGlobal': 232, 'priority': 240, 'expPriority': 248}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.RateSupport, isUnique: System.Boolean, expIsUnique: System.String, multiplier: System.Single, expMultiplier: System.String, mutatorId: System.String, expMutatorId: System.String, isGlobal: System.String, expIsGlobal: System.String, priority: System.Int32, expPriority: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.isUnique = isUnique
		self.expIsUnique = expIsUnique
		self.multiplier = multiplier
		self.expMultiplier = expMultiplier
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId
		self.isGlobal = isGlobal
		self.expIsGlobal = expIsGlobal
		self.priority = priority
		self.expPriority = expPriority


class RateSupportBombExpert:

    offsets = {'isThisUnique': 168, 'expIsThisUnique': 176, 'rangeMultiplier': 184, 'expRangeMultiplier': 192, 'pierceMultiplier': 200, 'expPierceMultiplier': 208, 'isGlobal': 216, 'expIsGlobal': 224}    
    def __init__(self, isThisUnique: System.Boolean, expIsThisUnique: System.String, rangeMultiplier: System.Single, expRangeMultiplier: System.String, pierceMultiplier: System.Single, expPierceMultiplier: System.String, isGlobal: System.Boolean, expIsGlobal: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.isThisUnique = isThisUnique
		self.expIsThisUnique = expIsThisUnique
		self.rangeMultiplier = rangeMultiplier
		self.expRangeMultiplier = expRangeMultiplier
		self.pierceMultiplier = pierceMultiplier
		self.expPierceMultiplier = expPierceMultiplier
		self.isGlobal = isGlobal
		self.expIsGlobal = expIsGlobal


class RateSupportExplosive:

    offsets = {'filterTowers': 168, 'expFilterTowers': 176, 'isUnique': 184, 'expIsUnique': 192, 'multiplier': 200, 'expMultiplier': 208, 'mutatorId': 216, 'expMutatorId': 224, 'isGlobal': 232, 'expIsGlobal': 240}    
    def __init__(self, filterTowers: System.String, expFilterTowers: System.String, isUnique: System.Boolean, expIsUnique: System.String, multiplier: System.Single, expMultiplier: System.String, mutatorId: System.String, expMutatorId: System.String, isGlobal: System.String, expIsGlobal: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.filterTowers = filterTowers
		self.expFilterTowers = expFilterTowers
		self.isUnique = isUnique
		self.expIsUnique = expIsUnique
		self.multiplier = multiplier
		self.expMultiplier = expMultiplier
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId
		self.isGlobal = isGlobal
		self.expIsGlobal = expIsGlobal


class RectangleFootprint:

    offsets = {'parent': 184, 'xWidth': 192, 'expXWidth': 200, 'yWidth': 208, 'expYWidth': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.RectangleFootprint, xWidth: System.Single, expXWidth: System.String, yWidth: System.Single, expYWidth: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.xWidth = xWidth
		self.expXWidth = expXWidth
		self.yWidth = yWidth
		self.expYWidth = expYWidth


class RemoveMutatorOnUpgrade:

    offsets = {'parent': 136, 'mutatorId': 144, 'expMutatorId': 152, 'firstPath': 160, 'expFirstPath': 168, 'secondPath': 176, 'expSecondPath': 184, 'thirdPath': 192, 'expThirdPath': 200}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.RemoveMutatorOnUpgrade, mutatorId: System.String, expMutatorId: System.String, firstPath: System.Int32, expFirstPath: System.String, secondPath: System.Int32, expSecondPath: System.String, thirdPath: System.Int32, expThirdPath: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId
		self.firstPath = firstPath
		self.expFirstPath = expFirstPath
		self.secondPath = secondPath
		self.expSecondPath = expSecondPath
		self.thirdPath = thirdPath
		self.expThirdPath = expThirdPath


class RemovePermaBrew:

    offsets = {'parent': 136}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.LoadAlchemistBrewInfo, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class RotateToDefaultPositionTower:

    offsets = {'parent': 136, 'rotation': 144, 'expRotation': 152, 'onlyOnReachingTier': 160, 'expOnlyOnReachingTier': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.RotateToDefaultPositionTower, rotation: System.Single, expRotation: System.String, onlyOnReachingTier: System.Int32, expOnlyOnReachingTier: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.rotation = rotation
		self.expRotation = expRotation
		self.onlyOnReachingTier = onlyOnReachingTier
		self.expOnlyOnReachingTier = expOnlyOnReachingTier


class SavedSubTower:

    offsets = {'parent': 136}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.SavedSubTower, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class SellIncreaseZone:

    offsets = {'parent': 136, 'sellMultiplier': 144, 'expSellMultiplier': 152, 'stackName': 160, 'expStackName': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.SellIncreaseZone, sellMultiplier: System.Single, expSellMultiplier: System.String, stackName: System.String, expStackName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.sellMultiplier = sellMultiplier
		self.expSellMultiplier = expSellMultiplier
		self.stackName = stackName
		self.expStackName = expStackName


class SellStackedTowers:

    offsets = {'parent': 136, 'def': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.SellStackedTowers, def: Assets.Scripts.Models.Towers.Behaviors.SellStackedTowersModel, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.def = def


class SetTargetPriorityOnUpgrade:

    offsets = {'parent': 136, 'firstPath': 144, 'expFirstPath': 152, 'secondPath': 160, 'expSecondPath': 168, 'thirdPath': 176, 'expThirdPath': 184, 'targetTypeId': 192, 'expTargetTypeId': 200}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.SetTargetPriorityOnUpgrade, firstPath: System.Int32, expFirstPath: System.String, secondPath: System.Int32, expSecondPath: System.String, thirdPath: System.Int32, expThirdPath: System.String, targetTypeId: System.String, expTargetTypeId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.firstPath = firstPath
		self.expFirstPath = expFirstPath
		self.secondPath = secondPath
		self.expSecondPath = expSecondPath
		self.thirdPath = thirdPath
		self.expThirdPath = expThirdPath
		self.targetTypeId = targetTypeId
		self.expTargetTypeId = expTargetTypeId


class ShowCashIconInstead:

    offsets = {'parent': 136}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.ShowCashIconInstead, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class SkimBloons:

    offsets = {'parent': 136, 'skimAmount': 144, 'expSkimAmount': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.SkimBloons, skimAmount: System.Single, expSkimAmount: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.skimAmount = skimAmount
		self.expSkimAmount = expSkimAmount


class SlowBloonsZone:

    offsets = {'parent': 136, 'zoneRadius': 144, 'expZoneRadius': 152, 'mutationId': 160, 'expMutationId': 168, 'isUnique': 176, 'expIsUnique': 184, 'speedScale': 192, 'expSpeedScale': 200, 'speedChange': 208, 'expSpeedChange': 216, 'bindRadiusToTowerRange': 224, 'expBindRadiusToTowerRange': 232, 'radiusOffset': 240, 'expRadiusOffset': 248, 'bloonTag': 256, 'expBloonTag': 264, 'inclusive': 272, 'expInclusive': 280}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.SlowBloonsZone, zoneRadius: System.Single, expZoneRadius: System.String, mutationId: System.String, expMutationId: System.String, isUnique: System.Boolean, expIsUnique: System.String, speedScale: System.Single, expSpeedScale: System.String, speedChange: System.Single, expSpeedChange: System.String, bindRadiusToTowerRange: System.Boolean, expBindRadiusToTowerRange: System.String, radiusOffset: System.Single, expRadiusOffset: System.String, bloonTag: System.String, expBloonTag: System.String, inclusive: System.Boolean, expInclusive: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.zoneRadius = zoneRadius
		self.expZoneRadius = expZoneRadius
		self.mutationId = mutationId
		self.expMutationId = expMutationId
		self.isUnique = isUnique
		self.expIsUnique = expIsUnique
		self.speedScale = speedScale
		self.expSpeedScale = expSpeedScale
		self.speedChange = speedChange
		self.expSpeedChange = expSpeedChange
		self.bindRadiusToTowerRange = bindRadiusToTowerRange
		self.expBindRadiusToTowerRange = expBindRadiusToTowerRange
		self.radiusOffset = radiusOffset
		self.expRadiusOffset = expRadiusOffset
		self.bloonTag = bloonTag
		self.expBloonTag = expBloonTag
		self.inclusive = inclusive
		self.expInclusive = expInclusive


class SoulbindManager:

    offsets = {'parent': 136, 'effectOnTransitionBack': 144, 'expEffectOnTransitionBack': 152, 'display': 160, 'expDisplay': 168, 'lifespan': 176, 'expLifespan': 184}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.SoulbindManager, effectOnTransitionBack: Assets.Scripts.Unity.Effects.Effect, expEffectOnTransitionBack: Assets.Scripts.Unity.Effects.Effect, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, lifespan: System.Single, expLifespan: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.effectOnTransitionBack = effectOnTransitionBack
		self.expEffectOnTransitionBack = expEffectOnTransitionBack
		self.display = display
		self.expDisplay = expDisplay
		self.lifespan = lifespan
		self.expLifespan = expLifespan


class SpiritOfTheForest:

    offsets = {'parent': 136, 'objectToPlace1Far': 144, 'expObjectToPlace1Far': 152, 'objectToPlace2Far': 160, 'expObjectToPlace2Far': 168, 'objectToPlace3Far': 176, 'expObjectToPlace3Far': 184, 'objectToPlace4Far': 192, 'expObjectToPlace4Far': 200, 'objectToPlace1Middle': 208, 'expObjectToPlace1Middle': 216, 'objectToPlace2Middle': 224, 'expObjectToPlace2Middle': 232, 'objectToPlace3Middle': 240, 'expObjectToPlace3Middle': 248, 'objectToPlace4Middle': 256, 'expObjectToPlace4Middle': 264, 'objectToPlace1Close': 272, 'expObjectToPlace1Close': 280, 'objectToPlace2Close': 288, 'expObjectToPlace2Close': 296, 'objectToPlace3Close': 304, 'expObjectToPlace3Close': 312, 'objectToPlace4Close': 320, 'expObjectToPlace4Close': 328, 'damageOverTimeZoneFar': 336, 'expDamageOverTimeZoneFar': 344, 'damageOverTimeZoneMiddle': 352, 'expDamageOverTimeZoneMiddle': 360, 'damageOverTimeZoneClose': 368, 'expDamageOverTimeZoneClose': 376, 'middleRange': 384, 'expMiddleRange': 392, 'closeRange': 400, 'expCloseRange': 408, 'spacingMin': 416, 'expSpacingMin': 424, 'spacingMax': 432, 'expSpacingMax': 440, 'scaleMin': 448, 'expScaleMin': 456, 'scaleMax': 464, 'expScaleMax': 472, 'rotationMin': 480, 'expRotationMin': 488, 'rotationMax': 496, 'expRotationMax': 504, 'offsetMin': 512, 'expOffsetMin': 520, 'offsetMax': 528, 'expOffsetMax': 536, 'circleRadius': 544, 'expCircleRadius': 552, 'generateRadius': 560, 'expGenerateRadius': 568, 'time': 576, 'expTime': 584, 'minScale': 592, 'expMinScale': 600, 'maxScale': 608, 'expMaxScale': 616, 'scaleTime': 624, 'expScaleTime': 632}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.SpiritOfTheForest, objectToPlace1Far: UnityEngine.GameObject, expObjectToPlace1Far: UnityEngine.GameObject, objectToPlace2Far: UnityEngine.GameObject, expObjectToPlace2Far: UnityEngine.GameObject, objectToPlace3Far: UnityEngine.GameObject, expObjectToPlace3Far: UnityEngine.GameObject, objectToPlace4Far: UnityEngine.GameObject, expObjectToPlace4Far: UnityEngine.GameObject, objectToPlace1Middle: UnityEngine.GameObject, expObjectToPlace1Middle: UnityEngine.GameObject, objectToPlace2Middle: UnityEngine.GameObject, expObjectToPlace2Middle: UnityEngine.GameObject, objectToPlace3Middle: UnityEngine.GameObject, expObjectToPlace3Middle: UnityEngine.GameObject, objectToPlace4Middle: UnityEngine.GameObject, expObjectToPlace4Middle: UnityEngine.GameObject, objectToPlace1Close: UnityEngine.GameObject, expObjectToPlace1Close: UnityEngine.GameObject, objectToPlace2Close: UnityEngine.GameObject, expObjectToPlace2Close: UnityEngine.GameObject, objectToPlace3Close: UnityEngine.GameObject, expObjectToPlace3Close: UnityEngine.GameObject, objectToPlace4Close: UnityEngine.GameObject, expObjectToPlace4Close: UnityEngine.GameObject, damageOverTimeZoneFar: Assets.Scripts.Unity.Towers.Behaviors.DamageOverTimeZone, expDamageOverTimeZoneFar: Assets.Scripts.Unity.Towers.Behaviors.DamageOverTimeZone, damageOverTimeZoneMiddle: Assets.Scripts.Unity.Towers.Behaviors.DamageOverTimeZone, expDamageOverTimeZoneMiddle: Assets.Scripts.Unity.Towers.Behaviors.DamageOverTimeZone, damageOverTimeZoneClose: Assets.Scripts.Unity.Towers.Behaviors.DamageOverTimeZone, expDamageOverTimeZoneClose: Assets.Scripts.Unity.Towers.Behaviors.DamageOverTimeZone, middleRange: System.Single, expMiddleRange: System.String, closeRange: System.Single, expCloseRange: System.String, spacingMin: System.Single, expSpacingMin: System.String, spacingMax: System.Single, expSpacingMax: System.String, scaleMin: System.Single, expScaleMin: System.String, scaleMax: System.Single, expScaleMax: System.String, rotationMin: System.Single, expRotationMin: System.String, rotationMax: System.Single, expRotationMax: System.String, offsetMin: System.Single, expOffsetMin: System.String, offsetMax: System.Single, expOffsetMax: System.String, circleRadius: System.Single, expCircleRadius: System.String, generateRadius: System.Single, expGenerateRadius: System.String, time: System.Single, expTime: System.String, minScale: System.Single, expMinScale: System.String, maxScale: System.Single, expMaxScale: System.String, scaleTime: System.Single, expScaleTime: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.objectToPlace1Far = objectToPlace1Far
		self.expObjectToPlace1Far = expObjectToPlace1Far
		self.objectToPlace2Far = objectToPlace2Far
		self.expObjectToPlace2Far = expObjectToPlace2Far
		self.objectToPlace3Far = objectToPlace3Far
		self.expObjectToPlace3Far = expObjectToPlace3Far
		self.objectToPlace4Far = objectToPlace4Far
		self.expObjectToPlace4Far = expObjectToPlace4Far
		self.objectToPlace1Middle = objectToPlace1Middle
		self.expObjectToPlace1Middle = expObjectToPlace1Middle
		self.objectToPlace2Middle = objectToPlace2Middle
		self.expObjectToPlace2Middle = expObjectToPlace2Middle
		self.objectToPlace3Middle = objectToPlace3Middle
		self.expObjectToPlace3Middle = expObjectToPlace3Middle
		self.objectToPlace4Middle = objectToPlace4Middle
		self.expObjectToPlace4Middle = expObjectToPlace4Middle
		self.objectToPlace1Close = objectToPlace1Close
		self.expObjectToPlace1Close = expObjectToPlace1Close
		self.objectToPlace2Close = objectToPlace2Close
		self.expObjectToPlace2Close = expObjectToPlace2Close
		self.objectToPlace3Close = objectToPlace3Close
		self.expObjectToPlace3Close = expObjectToPlace3Close
		self.objectToPlace4Close = objectToPlace4Close
		self.expObjectToPlace4Close = expObjectToPlace4Close
		self.damageOverTimeZoneFar = damageOverTimeZoneFar
		self.expDamageOverTimeZoneFar = expDamageOverTimeZoneFar
		self.damageOverTimeZoneMiddle = damageOverTimeZoneMiddle
		self.expDamageOverTimeZoneMiddle = expDamageOverTimeZoneMiddle
		self.damageOverTimeZoneClose = damageOverTimeZoneClose
		self.expDamageOverTimeZoneClose = expDamageOverTimeZoneClose
		self.middleRange = middleRange
		self.expMiddleRange = expMiddleRange
		self.closeRange = closeRange
		self.expCloseRange = expCloseRange
		self.spacingMin = spacingMin
		self.expSpacingMin = expSpacingMin
		self.spacingMax = spacingMax
		self.expSpacingMax = expSpacingMax
		self.scaleMin = scaleMin
		self.expScaleMin = expScaleMin
		self.scaleMax = scaleMax
		self.expScaleMax = expScaleMax
		self.rotationMin = rotationMin
		self.expRotationMin = expRotationMin
		self.rotationMax = rotationMax
		self.expRotationMax = expRotationMax
		self.offsetMin = offsetMin
		self.expOffsetMin = expOffsetMin
		self.offsetMax = offsetMax
		self.expOffsetMax = expOffsetMax
		self.circleRadius = circleRadius
		self.expCircleRadius = expCircleRadius
		self.generateRadius = generateRadius
		self.expGenerateRadius = expGenerateRadius
		self.time = time
		self.expTime = expTime
		self.minScale = minScale
		self.expMinScale = expMinScale
		self.maxScale = maxScale
		self.expMaxScale = expMaxScale
		self.scaleTime = scaleTime
		self.expScaleTime = expScaleTime


class StaggeredShots:

    offsets = {'parent': 136, 'filterTower': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.StaggeredShots, filterTower: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.filterTower = filterTower


class StartOfRoundRateBuff:

    offsets = {'parent': 136, 'modifier': 144, 'expModifier': 152, 'duration': 160, 'expDuration': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.StartOfRoundRateBuff, modifier: System.Single, expModifier: System.String, duration: System.Single, expDuration: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.modifier = modifier
		self.expModifier = expModifier
		self.duration = duration
		self.expDuration = expDuration


class SubCommanderSupport:

    offsets = {'isUnique': 168, 'expIsUnique': 176, 'pierceIncrease': 184, 'expPierceIncrease': 192, 'damageIncrease': 200, 'expDamageIncrease': 208, 'damageScale': 216, 'expDamageScale': 224, 'filterTower': 232, 'expFilterTower': 240, 'appliesToOwningTower': 248, 'expAppliesToOwningTower': 256}    
    def __init__(self, isUnique: System.Boolean, expIsUnique: System.String, pierceIncrease: System.Int32, expPierceIncrease: System.String, damageIncrease: System.Int32, expDamageIncrease: System.String, damageScale: System.Single, expDamageScale: System.String, filterTower: System.String, expFilterTower: System.String, appliesToOwningTower: System.Boolean, expAppliesToOwningTower: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.isUnique = isUnique
		self.expIsUnique = expIsUnique
		self.pierceIncrease = pierceIncrease
		self.expPierceIncrease = expPierceIncrease
		self.damageIncrease = damageIncrease
		self.expDamageIncrease = expDamageIncrease
		self.damageScale = damageScale
		self.expDamageScale = expDamageScale
		self.filterTower = filterTower
		self.expFilterTower = expFilterTower
		self.appliesToOwningTower = appliesToOwningTower
		self.expAppliesToOwningTower = expAppliesToOwningTower


class Submerge:

    offsets = {'parent': 168, 'submergeAttack': 176, 'expSubmergeAttack': 184, 'abilitySpeedScale': 192, 'expAbilitySpeedScale': 200, 'globalAbilitySpeedScale': 208, 'expGlobalAbilitySpeedScale': 216, 'heroXpScale': 224, 'expHeroXpScale': 232, 'attackDisplay': 240, 'expAttackDisplay': 248, 'submergeDepth': 256, 'expSubmergeDepth': 264, 'submergeSpeed': 272, 'expSubmergeSpeed': 280, 'submergeSound': 288, 'emergeSound': 296, 'supportMutatorPriority': 304, 'expSupportMutatorPriority': 312}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Submerge, submergeAttack: Assets.Scripts.Unity.Towers.Behaviors.Attack.Attack, expSubmergeAttack: Assets.Scripts.Unity.Towers.Behaviors.Attack.Attack, abilitySpeedScale: System.Single, expAbilitySpeedScale: System.String, globalAbilitySpeedScale: System.Single, expGlobalAbilitySpeedScale: System.String, heroXpScale: System.Single, expHeroXpScale: System.String, attackDisplay: UnityEngine.GameObject, expAttackDisplay: UnityEngine.GameObject, submergeDepth: System.Single, expSubmergeDepth: System.String, submergeSpeed: System.Single, expSubmergeSpeed: System.String, submergeSound: UnityEngine.AudioSource, emergeSound: UnityEngine.AudioSource, supportMutatorPriority: System.Int32, expSupportMutatorPriority: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.submergeAttack = submergeAttack
		self.expSubmergeAttack = expSubmergeAttack
		self.abilitySpeedScale = abilitySpeedScale
		self.expAbilitySpeedScale = expAbilitySpeedScale
		self.globalAbilitySpeedScale = globalAbilitySpeedScale
		self.expGlobalAbilitySpeedScale = expGlobalAbilitySpeedScale
		self.heroXpScale = heroXpScale
		self.expHeroXpScale = expHeroXpScale
		self.attackDisplay = attackDisplay
		self.expAttackDisplay = expAttackDisplay
		self.submergeDepth = submergeDepth
		self.expSubmergeDepth = expSubmergeDepth
		self.submergeSpeed = submergeSpeed
		self.expSubmergeSpeed = expSubmergeSpeed
		self.submergeSound = submergeSound
		self.emergeSound = emergeSound
		self.supportMutatorPriority = supportMutatorPriority
		self.expSupportMutatorPriority = expSupportMutatorPriority


class SubmergeEffect:

    offsets = {'parent': 136, 'effect': 144, 'expEffect': 152, 'projectile': 160, 'expProjectile': 168, 'displayRadius': 176, 'expDisplayRadius': 184}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.SubmergeEffect, effect: Assets.Scripts.Unity.Effects.Effect, expEffect: Assets.Scripts.Unity.Effects.Effect, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, expProjectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, displayRadius: System.Single, expDisplayRadius: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.effect = effect
		self.expEffect = expEffect
		self.projectile = projectile
		self.expProjectile = expProjectile
		self.displayRadius = displayRadius
		self.expDisplayRadius = expDisplayRadius


class SupportBehavior:

    offsets = {'buffLocsName': 136, 'expBuffLocsName': 144, 'buffIconName': 152, 'expBuffIconName': 160}    
    def __init__(self, buffLocsName: System.String, expBuffLocsName: System.String, buffIconName: System.String, expBuffIconName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.buffLocsName = buffLocsName
		self.expBuffLocsName = expBuffLocsName
		self.buffIconName = buffIconName
		self.expBuffIconName = expBuffIconName


class SupportRemoveFilterOutTag:

    offsets = {'parent': 168, 'removeScriptWithSupportMutatorId': 176, 'expRemoveScriptWithSupportMutatorId': 184, 'mutatorId': 192, 'expMutatorId': 200, 'isGlobal': 208, 'expIsGlobal': 216, 'isCustomRadius': 224, 'expIsCustomRadius': 232, 'customRadius': 240, 'expCustomRadius': 248}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.SupportRemoveFilterOutTag, removeScriptWithSupportMutatorId: System.String, expRemoveScriptWithSupportMutatorId: System.String, mutatorId: System.String, expMutatorId: System.String, isGlobal: System.Boolean, expIsGlobal: System.String, isCustomRadius: System.Boolean, expIsCustomRadius: System.String, customRadius: System.Single, expCustomRadius: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.removeScriptWithSupportMutatorId = removeScriptWithSupportMutatorId
		self.expRemoveScriptWithSupportMutatorId = expRemoveScriptWithSupportMutatorId
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId
		self.isGlobal = isGlobal
		self.expIsGlobal = expIsGlobal
		self.isCustomRadius = isCustomRadius
		self.expIsCustomRadius = expIsCustomRadius
		self.customRadius = customRadius
		self.expCustomRadius = expCustomRadius


class SupportShinobiTactics:

    offsets = {'parent': 168, 'mutatorId': 176, 'expMutatorId': 184, 'maxStacks': 192, 'expMaxStacks': 200, 'multiplier': 208, 'expMultiplier': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.SupportShinobiTactics, mutatorId: System.String, expMutatorId: System.String, maxStacks: System.Int32, expMaxStacks: System.String, multiplier: System.Single, expMultiplier: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId
		self.maxStacks = maxStacks
		self.expMaxStacks = expMaxStacks
		self.multiplier = multiplier
		self.expMultiplier = expMultiplier


class SupportTowerPlacementZone:

    offsets = {'parent': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.SupportTowerPlacementZone, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class SwitchTargetSupplierOnUpgrade:

    offsets = {'parent': 136, 'targetSupplierName': 144, 'expTargetSupplierName': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.SwitchTargetSupplierOnUpgrade, targetSupplierName: System.String, expTargetSupplierName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.targetSupplierName = targetSupplierName
		self.expTargetSupplierName = expTargetSupplierName


class SyncTargetPriorityWithSubTowers:

    offsets = {'parent': 136}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.SyncTargetPriorityWithSubTowers, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class Syphon:

    offsets = {'parent': 136, 'mutationId': 144, 'expMutationId': 152, 'multiplier': 160, 'expMultiplier': 168, 'charges': 176, 'expCharges': 184, 'lifespan': 192, 'expLifespan': 200, 'ignoreTags': 208, 'expIgnoreTags': 216, 'overlays': 224, 'expOverlays': 232, 'overlayLayer': 240, 'expOverlayLayer': 248}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Syphon, mutationId: System.String, expMutationId: System.String, multiplier: System.Single, expMultiplier: System.String, charges: System.Int32, expCharges: System.String, lifespan: System.Single, expLifespan: System.String, ignoreTags: System.String, expIgnoreTags: System.String, overlays: Assets.Scripts.Unity.Bloons.OverlayGroup, expOverlays: Assets.Scripts.Unity.Bloons.OverlayGroup, overlayLayer: System.Int32, expOverlayLayer: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.mutationId = mutationId
		self.expMutationId = expMutationId
		self.multiplier = multiplier
		self.expMultiplier = expMultiplier
		self.charges = charges
		self.expCharges = expCharges
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.ignoreTags = ignoreTags
		self.expIgnoreTags = expIgnoreTags
		self.overlays = overlays
		self.expOverlays = expOverlays
		self.overlayLayer = overlayLayer
		self.expOverlayLayer = expOverlayLayer


class TargetSupplierSupport:

    offsets = {'parent': 168, 'mutatorId': 176, 'expMutatorId': 184, 'targetSupplier': 192, 'expTargetSupplier': 200}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.TargetSupplierSupport, mutatorId: System.String, expMutatorId: System.String, targetSupplier: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behavior, expTargetSupplier: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behavior, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId
		self.targetSupplier = targetSupplier
		self.expTargetSupplier = expTargetSupplier


class TempleTowerMutatorGroup:

    offsets = {'cost': 144, 'expCost': 152, 'towerSet': 160, 'expTowerSet': 168}    
    def __init__(self, cost: System.Int32, expCost: System.String, towerSet: System.String, expTowerSet: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.cost = cost
		self.expCost = expCost
		self.towerSet = towerSet
		self.expTowerSet = expTowerSet


class TempleTowerMutatorGroupTierOne:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TempleTowerMutatorGroupTierTwo:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TierFiveLock:

    offsets = {'REMOVE_ME': 24}    
    def __init__(self, REMOVE_ME: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.REMOVE_ME = REMOVE_ME


class TowerCreateTower:

    offsets = {'parent': 136, 'tower': 144, 'expTower': 152, 'isAirBasedTower': 160, 'expIsAirBasedTower': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.TowerCreateTower, tower: Assets.Scripts.Unity.Towers.Tower, expTower: Assets.Scripts.Unity.Towers.Tower, isAirBasedTower: System.Boolean, expIsAirBasedTower: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.tower = tower
		self.expTower = expTower
		self.isAirBasedTower = isAirBasedTower
		self.expIsAirBasedTower = expIsAirBasedTower


class TowerExpire:

    offsets = {'parent': 136, 'lifespan': 144, 'expLifespan': 152, 'expireOnRoundComplete': 160, 'expExpireOnRoundComplete': 168, 'expireOnDefeatScreen': 176, 'expExpireOnDefeatScreen': 184}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.TowerExpire, lifespan: System.Single, expLifespan: System.String, expireOnRoundComplete: System.Boolean, expExpireOnRoundComplete: System.String, expireOnDefeatScreen: System.Boolean, expExpireOnDefeatScreen: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.expireOnRoundComplete = expireOnRoundComplete
		self.expExpireOnRoundComplete = expExpireOnRoundComplete
		self.expireOnDefeatScreen = expireOnDefeatScreen
		self.expExpireOnDefeatScreen = expExpireOnDefeatScreen


class TowerExpireOnParentDestroyed:

    offsets = {'parent': 136}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.TowerExpireOnParentDestroyed, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class TowerExpireOnParentUpgraded:

    offsets = {'parent': 136}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.TowerExpireOnParentDestroyed, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class TowerMutatorGroup:

    offsets = {'parent': 136}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.TowerMutatorGroup, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class TowerRadius:

    offsets = {'parent': 136}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Bank, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class TradeEmpireBuff:

    offsets = {'parent': 184, 'cashPerRoundPerMechantship': 192, 'expCashPerRoundPerMechantship': 200, 'maxMerchantmanCapBonus': 208, 'expMaxMerchantmanCapBonus': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.TradeEmpireBuff, cashPerRoundPerMechantship: System.Single, expCashPerRoundPerMechantship: System.String, maxMerchantmanCapBonus: System.Int32, expMaxMerchantmanCapBonus: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.cashPerRoundPerMechantship = cashPerRoundPerMechantship
		self.expCashPerRoundPerMechantship = expCashPerRoundPerMechantship
		self.maxMerchantmanCapBonus = maxMerchantmanCapBonus
		self.expMaxMerchantmanCapBonus = expMaxMerchantmanCapBonus


class VisibilitySupport:

    offsets = {'parent': 168, 'isUnique': 176, 'expIsUnique': 184, 'mutatorId': 192, 'expMutatorId': 200}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.VisibilitySupport, isUnique: System.Boolean, expIsUnique: System.String, mutatorId: System.String, expMutatorId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.isUnique = isUnique
		self.expIsUnique = expIsUnique
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId


class WizardsLibrary:

    offsets = {'parent': 136}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.WizardsLibrary, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class Ability:

    offsets = {'parent': 136, 'displayName': 144, 'expDisplayName': 152, 'description': 160, 'expDescription': 168, 'animationState': 176, 'expAnimationState': 184, 'animationOffset': 192, 'expAnimationOffset': 200, 'icon': 208, 'expIcon': 216, 'cooldown': 224, 'expCooldown': 232, 'activateOnPreLeak': 240, 'expActivateOnPreLeak': 248, 'activateOnLeak': 256, 'expActivateOnLeak': 264, 'addedViaUpgrade': 272, 'expAddedViaUpgrade': 280, 'cooldownSpeedScale': 288, 'expCooldownSpeedScale': 296, 'resetCooldownOnUpgrade': 304, 'expResetCooldownOnUpgrade': 312, 'livesCost': 320, 'expLivesCost': 328, 'maxActivationsPerRound': 336, 'expMaxActivationsPerRound': 344, 'canActivateBetweenRounds': 352, 'expCanActivateBetweenRounds': 360, 'activateOnLivesLost': 368, 'expActivateOnLivesLost': 376, 'sharedCooldown': 384, 'expSharedCooldown': 392, 'dontShowStacked': 400, 'expDontShowStacked': 408, 'animateOnMainAttackDisplay': 416, 'expAnimateOnMainAttackDisplay': 424}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Ability, displayName: System.String, expDisplayName: System.String, description: System.String, expDescription: System.String, animationState: System.Int32, expAnimationState: System.String, animationOffset: System.Single, expAnimationOffset: System.String, icon: UnityEngine.GameObject, expIcon: UnityEngine.GameObject, cooldown: System.Single, expCooldown: System.String, activateOnPreLeak: System.String, expActivateOnPreLeak: System.String, activateOnLeak: System.String, expActivateOnLeak: System.String, addedViaUpgrade: Assets.Scripts.Unity.Towers.Upgrades.Upgrade, expAddedViaUpgrade: Assets.Scripts.Unity.Towers.Upgrades.Upgrade, cooldownSpeedScale: System.Single, expCooldownSpeedScale: System.String, resetCooldownOnUpgrade: System.Boolean, expResetCooldownOnUpgrade: System.String, livesCost: System.Int32, expLivesCost: System.String, maxActivationsPerRound: System.Int32, expMaxActivationsPerRound: System.String, canActivateBetweenRounds: System.Boolean, expCanActivateBetweenRounds: System.String, activateOnLivesLost: System.Boolean, expActivateOnLivesLost: System.String, sharedCooldown: System.Boolean, expSharedCooldown: System.String, dontShowStacked: System.Boolean, expDontShowStacked: System.String, animateOnMainAttackDisplay: System.Boolean, expAnimateOnMainAttackDisplay: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.displayName = displayName
		self.expDisplayName = expDisplayName
		self.description = description
		self.expDescription = expDescription
		self.animationState = animationState
		self.expAnimationState = expAnimationState
		self.animationOffset = animationOffset
		self.expAnimationOffset = expAnimationOffset
		self.icon = icon
		self.expIcon = expIcon
		self.cooldown = cooldown
		self.expCooldown = expCooldown
		self.activateOnPreLeak = activateOnPreLeak
		self.expActivateOnPreLeak = expActivateOnPreLeak
		self.activateOnLeak = activateOnLeak
		self.expActivateOnLeak = expActivateOnLeak
		self.addedViaUpgrade = addedViaUpgrade
		self.expAddedViaUpgrade = expAddedViaUpgrade
		self.cooldownSpeedScale = cooldownSpeedScale
		self.expCooldownSpeedScale = expCooldownSpeedScale
		self.resetCooldownOnUpgrade = resetCooldownOnUpgrade
		self.expResetCooldownOnUpgrade = expResetCooldownOnUpgrade
		self.livesCost = livesCost
		self.expLivesCost = expLivesCost
		self.maxActivationsPerRound = maxActivationsPerRound
		self.expMaxActivationsPerRound = expMaxActivationsPerRound
		self.canActivateBetweenRounds = canActivateBetweenRounds
		self.expCanActivateBetweenRounds = expCanActivateBetweenRounds
		self.activateOnLivesLost = activateOnLivesLost
		self.expActivateOnLivesLost = expActivateOnLivesLost
		self.sharedCooldown = sharedCooldown
		self.expSharedCooldown = expSharedCooldown
		self.dontShowStacked = dontShowStacked
		self.expDontShowStacked = expDontShowStacked
		self.animateOnMainAttackDisplay = animateOnMainAttackDisplay
		self.expAnimateOnMainAttackDisplay = expAnimateOnMainAttackDisplay


class Behavior:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CreateSoundOnAbility:

    offsets = {'parent': 128, 'sound': 136, 'expSound': 144, 'heroSound': 152, 'expHeroSound': 160, 'heroSound2': 168, 'expHeroSound2': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.CreateSoundOnAbility, sound: UnityEngine.AudioSource, expSound: UnityEngine.AudioSource, heroSound: UnityEngine.AudioSource, expHeroSound: UnityEngine.AudioSource, heroSound2: UnityEngine.AudioSource, expHeroSound2: UnityEngine.AudioSource, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.sound = sound
		self.expSound = expSound
		self.heroSound = heroSound
		self.expHeroSound = expHeroSound
		self.heroSound2 = heroSound2
		self.expHeroSound2 = expHeroSound2


class AbilityCreateTower:

    offsets = {'parent': 128, 'tower': 136, 'expTower': 144, 'isAirBasedTower': 152, 'expIsAirBasedTower': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.AbilityCreateTower, tower: Assets.Scripts.Unity.Towers.Tower, expTower: Assets.Scripts.Unity.Towers.Tower, isAirBasedTower: System.Boolean, expIsAirBasedTower: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.tower = tower
		self.expTower = expTower
		self.isAirBasedTower = isAirBasedTower
		self.expIsAirBasedTower = expIsAirBasedTower


class ActivateAttack:

    offsets = {'parent': 128, 'lifespan': 136, 'expLifespan': 144, 'processOnActivate': 152, 'expProcessOnActivate': 160, 'cancelIfNoTargets': 168, 'expCancelIfNoTargets': 176, 'pauseExisting': 184, 'expPauseExisting': 192, 'endOnRoundEnd': 200, 'expEndOnRoundEnd': 208, 'endOnDefeatScreen': 216, 'expEndOnDefeatScreen': 224, 'isOneShot': 232, 'expIsOneShot': 240}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.ActivateAttack, lifespan: System.Single, expLifespan: System.String, processOnActivate: System.Boolean, expProcessOnActivate: System.String, cancelIfNoTargets: System.Boolean, expCancelIfNoTargets: System.String, pauseExisting: System.Boolean, expPauseExisting: System.String, endOnRoundEnd: System.Boolean, expEndOnRoundEnd: System.String, endOnDefeatScreen: System.Boolean, expEndOnDefeatScreen: System.String, isOneShot: System.Boolean, expIsOneShot: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.processOnActivate = processOnActivate
		self.expProcessOnActivate = expProcessOnActivate
		self.cancelIfNoTargets = cancelIfNoTargets
		self.expCancelIfNoTargets = expCancelIfNoTargets
		self.pauseExisting = pauseExisting
		self.expPauseExisting = expPauseExisting
		self.endOnRoundEnd = endOnRoundEnd
		self.expEndOnRoundEnd = expEndOnRoundEnd
		self.endOnDefeatScreen = endOnDefeatScreen
		self.expEndOnDefeatScreen = expEndOnDefeatScreen
		self.isOneShot = isOneShot
		self.expIsOneShot = expIsOneShot


class ActivateAttackSwitch:

    offsets = {'parent': 128, 'lifespan': 136, 'expLifespan': 144, 'firstAttack': 152, 'secondAttack': 160, 'processOnActivate': 168, 'expProcessOnActivate': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.ActivateAttackSwitch, lifespan: System.Single, expLifespan: System.String, firstAttack: Assets.Scripts.Unity.Towers.Behaviors.Attack.Attack, secondAttack: Assets.Scripts.Unity.Towers.Behaviors.Attack.Attack, processOnActivate: System.Boolean, expProcessOnActivate: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.firstAttack = firstAttack
		self.secondAttack = secondAttack
		self.processOnActivate = processOnActivate
		self.expProcessOnActivate = expProcessOnActivate


class ActivateMutator:

    offsets = {'parent': 128, 'towerMutator': 136}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.ActivateMutator, towerMutator: Assets.Scripts.Unity.Towers.Mutators.TowerMutator, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.towerMutator = towerMutator


class ActivatePierceSupportZone:

    offsets = {'parent': 128, 'mutatorId': 136, 'expMutatorId': 144, 'lifespan': 152, 'expLifespan': 160, 'isUnique': 168, 'expIsUnique': 176, 'pierceIncrease': 184, 'expPierceIncrease': 192, 'range': 200, 'expRange': 208, 'maxNumTowersModified': 216, 'expMaxNumTowersModified': 224, 'affectThisTower': 232, 'expAffectThisTower': 240, 'useTowerRange': 248, 'expUseTowerRange': 256, 'buffLocsName': 264, 'expBuffLocsName': 272, 'buffIconName': 280, 'expBuffIconName': 288}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.ActivatePierceSupportZone, mutatorId: System.String, expMutatorId: System.String, lifespan: System.Single, expLifespan: System.String, isUnique: System.Boolean, expIsUnique: System.String, pierceIncrease: System.Int32, expPierceIncrease: System.String, range: System.Single, expRange: System.String, maxNumTowersModified: System.Int32, expMaxNumTowersModified: System.String, affectThisTower: System.Boolean, expAffectThisTower: System.String, useTowerRange: System.Boolean, expUseTowerRange: System.String, buffLocsName: System.String, expBuffLocsName: System.String, buffIconName: System.String, expBuffIconName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.isUnique = isUnique
		self.expIsUnique = expIsUnique
		self.pierceIncrease = pierceIncrease
		self.expPierceIncrease = expPierceIncrease
		self.range = range
		self.expRange = expRange
		self.maxNumTowersModified = maxNumTowersModified
		self.expMaxNumTowersModified = expMaxNumTowersModified
		self.affectThisTower = affectThisTower
		self.expAffectThisTower = expAffectThisTower
		self.useTowerRange = useTowerRange
		self.expUseTowerRange = expUseTowerRange
		self.buffLocsName = buffLocsName
		self.expBuffLocsName = expBuffLocsName
		self.buffIconName = buffIconName
		self.expBuffIconName = expBuffIconName


class ActivateRateSupportZone:

    offsets = {'parent': 128, 'mutatorId': 136, 'expMutatorId': 144, 'lifespan': 152, 'expLifespan': 160, 'isUnique': 168, 'expIsUnique': 176, 'rateModifier': 184, 'expRateModifier': 192, 'range': 200, 'expRange': 208, 'maxNumTowersModified': 216, 'expMaxNumTowersModified': 224, 'affectThisTower': 232, 'expAffectThisTower': 240, 'useTowerRange': 248, 'expUseTowerRange': 256, 'addEffectToTowersAffected': 264, 'expAddEffectToTowersAffected': 272, 'buffLocsName': 280, 'expBuffLocsName': 288, 'buffIconName': 296, 'expBuffIconName': 304}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.ActivateRateSupportZone, mutatorId: System.String, expMutatorId: System.String, lifespan: System.Single, expLifespan: System.String, isUnique: System.Boolean, expIsUnique: System.String, rateModifier: System.Single, expRateModifier: System.String, range: System.Single, expRange: System.String, maxNumTowersModified: System.Int32, expMaxNumTowersModified: System.String, affectThisTower: System.Boolean, expAffectThisTower: System.String, useTowerRange: System.Boolean, expUseTowerRange: System.String, addEffectToTowersAffected: UnityEngine.GameObject, expAddEffectToTowersAffected: UnityEngine.GameObject, buffLocsName: System.String, expBuffLocsName: System.String, buffIconName: System.String, expBuffIconName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.isUnique = isUnique
		self.expIsUnique = expIsUnique
		self.rateModifier = rateModifier
		self.expRateModifier = expRateModifier
		self.range = range
		self.expRange = expRange
		self.maxNumTowersModified = maxNumTowersModified
		self.expMaxNumTowersModified = expMaxNumTowersModified
		self.affectThisTower = affectThisTower
		self.expAffectThisTower = expAffectThisTower
		self.useTowerRange = useTowerRange
		self.expUseTowerRange = expUseTowerRange
		self.addEffectToTowersAffected = addEffectToTowersAffected
		self.expAddEffectToTowersAffected = expAddEffectToTowersAffected
		self.buffLocsName = buffLocsName
		self.expBuffLocsName = expBuffLocsName
		self.buffIconName = buffIconName
		self.expBuffIconName = expBuffIconName


class ActivateTowerDamageSupportZone:

    offsets = {'parent': 128, 'mutatorId': 136, 'expMutatorId': 144, 'lifespan': 152, 'expLifespan': 160, 'isUnique': 168, 'expIsUnique': 176, 'damageIncrease': 184, 'expDamageIncrease': 192, 'range': 200, 'expRange': 208, 'maxNumTowersModified': 216, 'expMaxNumTowersModified': 224, 'canEffectThisTower': 232, 'expCanEffectThisTower': 240, 'addEffectToTowersAffected': 248, 'expAddEffectToTowersAffected': 256, 'buffLocsName': 264, 'expBuffLocsName': 272, 'buffIconName': 280, 'expBuffIconName': 288, 'damageTypeToSet': 296, 'expDamageTypeToSet': 304, 'useTowerRange': 312, 'expUseTowerRange': 320}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.ActivateTowerDamageSupportZone, mutatorId: System.String, expMutatorId: System.String, lifespan: System.Single, expLifespan: System.String, isUnique: System.Boolean, expIsUnique: System.String, damageIncrease: System.Single, expDamageIncrease: System.String, range: System.Single, expRange: System.String, maxNumTowersModified: System.Single, expMaxNumTowersModified: System.String, canEffectThisTower: System.Boolean, expCanEffectThisTower: System.String, addEffectToTowersAffected: UnityEngine.GameObject, expAddEffectToTowersAffected: UnityEngine.GameObject, buffLocsName: System.String, expBuffLocsName: System.String, buffIconName: System.String, expBuffIconName: System.String, damageTypeToSet: System.String, expDamageTypeToSet: System.String, useTowerRange: System.Boolean, expUseTowerRange: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.isUnique = isUnique
		self.expIsUnique = expIsUnique
		self.damageIncrease = damageIncrease
		self.expDamageIncrease = expDamageIncrease
		self.range = range
		self.expRange = expRange
		self.maxNumTowersModified = maxNumTowersModified
		self.expMaxNumTowersModified = expMaxNumTowersModified
		self.canEffectThisTower = canEffectThisTower
		self.expCanEffectThisTower = expCanEffectThisTower
		self.addEffectToTowersAffected = addEffectToTowersAffected
		self.expAddEffectToTowersAffected = expAddEffectToTowersAffected
		self.buffLocsName = buffLocsName
		self.expBuffLocsName = expBuffLocsName
		self.buffIconName = buffIconName
		self.expBuffIconName = expBuffIconName
		self.damageTypeToSet = damageTypeToSet
		self.expDamageTypeToSet = expDamageTypeToSet
		self.useTowerRange = useTowerRange
		self.expUseTowerRange = expUseTowerRange


class ActivateVisibilitySupportZone:

    offsets = {'parent': 128, 'mutatorId': 136, 'expMutatorId': 144, 'lifespan': 152, 'expLifespan': 160, 'isUnique': 168, 'expIsUnique': 176, 'range': 184, 'expRange': 192, 'maxNumTowersModified': 200, 'expMaxNumTowersModified': 208, 'affectThisTower': 216, 'expAffectThisTower': 224, 'useTowerRange': 232, 'expUseTowerRange': 240, 'buffLocsName': 248, 'expBuffLocsName': 256, 'buffIconName': 264, 'expBuffIconName': 272}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.ActivateVisibilitySupportZone, mutatorId: System.String, expMutatorId: System.String, lifespan: System.Single, expLifespan: System.String, isUnique: System.Boolean, expIsUnique: System.String, range: System.Single, expRange: System.String, maxNumTowersModified: System.Int32, expMaxNumTowersModified: System.String, affectThisTower: System.Boolean, expAffectThisTower: System.String, useTowerRange: System.Boolean, expUseTowerRange: System.String, buffLocsName: System.String, expBuffLocsName: System.String, buffIconName: System.String, expBuffIconName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.isUnique = isUnique
		self.expIsUnique = expIsUnique
		self.range = range
		self.expRange = expRange
		self.maxNumTowersModified = maxNumTowersModified
		self.expMaxNumTowersModified = expMaxNumTowersModified
		self.affectThisTower = affectThisTower
		self.expAffectThisTower = expAffectThisTower
		self.useTowerRange = useTowerRange
		self.expUseTowerRange = expUseTowerRange
		self.buffLocsName = buffLocsName
		self.expBuffLocsName = expBuffLocsName
		self.buffIconName = buffIconName
		self.expBuffIconName = expBuffIconName


class AmbushTech:

    offsets = {'parent': 128, 'display': 136, 'expDisplay': 144, 'radius': 152, 'expRadius': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.AmbushTech, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, radius: System.Single, expRadius: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.display = display
		self.expDisplay = expDisplay
		self.radius = radius
		self.expRadius = expRadius


class ArtilleryCommand:

    offsets = {'parent': 128, 'givesBuff': 136, 'expGivesBuff': 144, 'buffDuration': 152, 'expBuffDuration': 160, 'otherTowerEffect': 168, 'expOtherTowerEffect': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.ArtilleryCommand, givesBuff: System.String, expGivesBuff: System.String, buffDuration: System.Single, expBuffDuration: System.String, otherTowerEffect: Assets.Scripts.Unity.Effects.Effect, expOtherTowerEffect: Assets.Scripts.Unity.Effects.Effect, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.givesBuff = givesBuff
		self.expGivesBuff = expGivesBuff
		self.buffDuration = buffDuration
		self.expBuffDuration = expBuffDuration
		self.otherTowerEffect = otherTowerEffect
		self.expOtherTowerEffect = expOtherTowerEffect


class Biohack:

    offsets = {'parent': 128, 'lifespan': 136, 'expLifespan': 144, 'damageIncrease': 152, 'expDamageIncrease': 160, 'affectedCount': 168, 'expAffectedCount': 176, 'filterTowers': 184, 'expFilterTowers': 192, 'effect': 200, 'expEffect': 208, 'buffLocsName': 216, 'expBuffLocsName': 224, 'buffIconName': 232, 'expBuffIconName': 240}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.Biohack, lifespan: System.Single, expLifespan: System.String, damageIncrease: System.Single, expDamageIncrease: System.String, affectedCount: System.Int32, expAffectedCount: System.String, filterTowers: System.String, expFilterTowers: System.String, effect: Assets.Scripts.Unity.Effects.Effect, expEffect: Assets.Scripts.Unity.Effects.Effect, buffLocsName: System.String, expBuffLocsName: System.String, buffIconName: System.String, expBuffIconName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.damageIncrease = damageIncrease
		self.expDamageIncrease = expDamageIncrease
		self.affectedCount = affectedCount
		self.expAffectedCount = expAffectedCount
		self.filterTowers = filterTowers
		self.expFilterTowers = expFilterTowers
		self.effect = effect
		self.expEffect = expEffect
		self.buffLocsName = buffLocsName
		self.expBuffLocsName = expBuffLocsName
		self.buffIconName = buffIconName
		self.expBuffIconName = expBuffIconName


class BloodSacrifice:

    offsets = {'parent': 128, 'xpMultiplier': 136, 'expXpMultiplier': 144, 'activateSound': 152, 'expActivateSound': 160, 'confirmSound': 168, 'expConfirmSound': 176, 'selectionObject': 184, 'expSelectionObject': 192, 'effectAtSacrifice': 200, 'expEffectAtSacrifice': 208, 'rateBonusMultiplier': 216, 'expRateBonusMultiplier': 224, 'rangeBonusMultiplier': 232, 'expRangeBonusMultiplier': 240, 'buffDuration': 248, 'expBuffDuration': 256, 'buffDisplay': 264, 'expBuffDisplay': 272, 'buffLocsName': 280, 'expBuffLocsName': 288, 'buffIconName': 296, 'expBuffIconName': 304, 'bonusMultiplierPerSacrifice': 312, 'expBonusMultiplierPerSacrifice': 320, 'bonusSacrificeAmount': 328, 'expBonusSacrificeAmount': 336, 'maxBonusCount': 344, 'expMaxBonusCount': 352}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.BloodSacrifice, xpMultiplier: System.Single, expXpMultiplier: System.String, activateSound: UnityEngine.AudioSource, expActivateSound: UnityEngine.AudioSource, confirmSound: UnityEngine.AudioSource, expConfirmSound: UnityEngine.AudioSource, selectionObject: UnityEngine.GameObject, expSelectionObject: UnityEngine.GameObject, effectAtSacrifice: Assets.Scripts.Unity.Effects.Effect, expEffectAtSacrifice: Assets.Scripts.Unity.Effects.Effect, rateBonusMultiplier: System.Single, expRateBonusMultiplier: System.String, rangeBonusMultiplier: System.Single, expRangeBonusMultiplier: System.String, buffDuration: System.Single, expBuffDuration: System.String, buffDisplay: UnityEngine.GameObject, expBuffDisplay: UnityEngine.GameObject, buffLocsName: System.String, expBuffLocsName: System.String, buffIconName: System.String, expBuffIconName: System.String, bonusMultiplierPerSacrifice: System.Single, expBonusMultiplierPerSacrifice: System.String, bonusSacrificeAmount: System.Single, expBonusSacrificeAmount: System.String, maxBonusCount: System.Int32, expMaxBonusCount: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.xpMultiplier = xpMultiplier
		self.expXpMultiplier = expXpMultiplier
		self.activateSound = activateSound
		self.expActivateSound = expActivateSound
		self.confirmSound = confirmSound
		self.expConfirmSound = expConfirmSound
		self.selectionObject = selectionObject
		self.expSelectionObject = expSelectionObject
		self.effectAtSacrifice = effectAtSacrifice
		self.expEffectAtSacrifice = expEffectAtSacrifice
		self.rateBonusMultiplier = rateBonusMultiplier
		self.expRateBonusMultiplier = expRateBonusMultiplier
		self.rangeBonusMultiplier = rangeBonusMultiplier
		self.expRangeBonusMultiplier = expRangeBonusMultiplier
		self.buffDuration = buffDuration
		self.expBuffDuration = expBuffDuration
		self.buffDisplay = buffDisplay
		self.expBuffDisplay = expBuffDisplay
		self.buffLocsName = buffLocsName
		self.expBuffLocsName = expBuffLocsName
		self.buffIconName = buffIconName
		self.expBuffIconName = expBuffIconName
		self.bonusMultiplierPerSacrifice = bonusMultiplierPerSacrifice
		self.expBonusMultiplierPerSacrifice = expBonusMultiplierPerSacrifice
		self.bonusSacrificeAmount = bonusSacrificeAmount
		self.expBonusSacrificeAmount = expBonusSacrificeAmount
		self.maxBonusCount = maxBonusCount
		self.expMaxBonusCount = expMaxBonusCount


class BonusLivesOnAbility:

    offsets = {'parent': 128, 'amount': 136, 'expAmount': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.BonusLivesOnAbility, amount: System.Single, expAmount: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.amount = amount
		self.expAmount = expAmount


class CallToArms:

    offsets = {'parent': 128, 'lifespan': 136, 'expLifespan': 144, 'multiplier': 152, 'expMultiplier': 160, 'useRadius': 168, 'expUseRadius': 176, 'buffLocsName': 184, 'expBuffLocsName': 192, 'buffIconName': 200, 'expBuffIconName': 208}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.CallToArms, lifespan: System.Single, expLifespan: System.String, multiplier: System.Single, expMultiplier: System.String, useRadius: System.String, expUseRadius: System.String, buffLocsName: System.String, expBuffLocsName: System.String, buffIconName: System.String, expBuffIconName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.multiplier = multiplier
		self.expMultiplier = expMultiplier
		self.useRadius = useRadius
		self.expUseRadius = expUseRadius
		self.buffLocsName = buffLocsName
		self.expBuffLocsName = expBuffLocsName
		self.buffIconName = buffIconName
		self.expBuffIconName = expBuffIconName


class CashBoost:

    offsets = {'parent': 128, 'lifespan': 136, 'expLifespan': 144, 'multiplier': 152, 'expMultiplier': 160, 'range': 168, 'expRange': 176, 'filterTower': 184}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.CashBoost, lifespan: System.Single, expLifespan: System.String, multiplier: System.Single, expMultiplier: System.String, range: System.Single, expRange: System.String, filterTower: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.multiplier = multiplier
		self.expMultiplier = expMultiplier
		self.range = range
		self.expRange = expRange
		self.filterTower = filterTower


class CashPerBananaFarmInRange:

    offsets = {'parent': 128, 'baseCash': 136, 'expBaseCash': 144, 'cash': 152, 'expCash': 160, 'rangeIncrease': 168, 'expRangeIncrease': 176, 'textDisplay': 184, 'expTextDisplay': 192, 'textLifespan': 200, 'expTextLifespan': 208}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.CashBoost, baseCash: System.Single, expBaseCash: System.String, cash: System.Single, expCash: System.String, rangeIncrease: System.Single, expRangeIncrease: System.String, textDisplay: UnityEngine.GameObject, expTextDisplay: UnityEngine.GameObject, textLifespan: System.Single, expTextLifespan: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.baseCash = baseCash
		self.expBaseCash = expBaseCash
		self.cash = cash
		self.expCash = expCash
		self.rangeIncrease = rangeIncrease
		self.expRangeIncrease = expRangeIncrease
		self.textDisplay = textDisplay
		self.expTextDisplay = expTextDisplay
		self.textLifespan = textLifespan
		self.expTextLifespan = expTextLifespan


class ChangeDamageType:

    offsets = {'parent': 128, 'lifespan': 136, 'expLifespan': 144, 'damageType': 152, 'expDamageType': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.ChangeDamageType, lifespan: System.Single, expLifespan: System.String, damageType: System.String, expDamageType: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.damageType = damageType
		self.expDamageType = expDamageType


class ChangeProjectileDisplay:

    offsets = {'parent': 128, 'lifespan': 136, 'expLifespan': 144, 'display': 152, 'expDisplay': 160, 'projectile': 168, 'expProjectile': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.ChangeProjectileDisplay, lifespan: System.Single, expLifespan: System.String, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, projectile: UnityEngine.GameObject, expProjectile: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.display = display
		self.expDisplay = expDisplay
		self.projectile = projectile
		self.expProjectile = expProjectile


class CollectFromBank:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.CollectFromBank, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class CreateEffectOnAbility:

    offsets = {'parent': 128, 'effect': 136, 'expEffect': 144, 'centerEffect': 152, 'expCenterEffect': 160, 'randomRotation': 168, 'expRandomRotation': 176, 'destroyOnEnd': 184, 'expDestroyOnEnd': 192, 'useAttackTransform': 200, 'expUseAttackTransform': 208, 'canSave': 216, 'expCanSave': 224}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.CreateEffectOnAbility, effect: Assets.Scripts.Unity.Effects.Effect, expEffect: Assets.Scripts.Unity.Effects.Effect, centerEffect: System.Boolean, expCenterEffect: System.String, randomRotation: System.Boolean, expRandomRotation: System.String, destroyOnEnd: System.Boolean, expDestroyOnEnd: System.String, useAttackTransform: System.Boolean, expUseAttackTransform: System.String, canSave: System.Boolean, expCanSave: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.effect = effect
		self.expEffect = expEffect
		self.centerEffect = centerEffect
		self.expCenterEffect = expCenterEffect
		self.randomRotation = randomRotation
		self.expRandomRotation = expRandomRotation
		self.destroyOnEnd = destroyOnEnd
		self.expDestroyOnEnd = expDestroyOnEnd
		self.useAttackTransform = useAttackTransform
		self.expUseAttackTransform = expUseAttackTransform
		self.canSave = canSave
		self.expCanSave = expCanSave


class CreateEffectOnAbilityEnd:

    offsets = {'parent': 128, 'effect': 136, 'expEffect': 144, 'lifespan': 152, 'expLifespan': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.CreateEffectOnAbilityEnd, effect: Assets.Scripts.Unity.Effects.Effect, expEffect: Assets.Scripts.Unity.Effects.Effect, lifespan: System.Single, expLifespan: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.effect = effect
		self.expEffect = expEffect
		self.lifespan = lifespan
		self.expLifespan = expLifespan


class DamageUp:

    offsets = {'parent': 128, 'lifespan': 136, 'expLifespan': 144, 'additionalDamage': 152, 'expAdditionalDamage': 160, 'projectileDisplay': 168, 'expProjectileDisplay': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.DamageUp, lifespan: System.Single, expLifespan: System.String, additionalDamage: System.Int32, expAdditionalDamage: System.String, projectileDisplay: UnityEngine.GameObject, expProjectileDisplay: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.additionalDamage = additionalDamage
		self.expAdditionalDamage = expAdditionalDamage
		self.projectileDisplay = projectileDisplay
		self.expProjectileDisplay = expProjectileDisplay


class Darkshift:

    offsets = {'parent': 128, 'restrictToTowerRadius': 136, 'expRestrictToTowerRadius': 144, 'placementZoneAssetRadius': 152, 'expPlacementZoneAssetRadius': 160, 'placementZoneAsset': 168, 'expPlacementZoneAsset': 176, 'darkshiftSound': 184, 'expDarkshiftSound': 192, 'disappearEffect': 200, 'expDisappearEffect': 208, 'reappearEffect': 216, 'expReappearEffect': 224}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.Darkshift, restrictToTowerRadius: System.Boolean, expRestrictToTowerRadius: System.String, placementZoneAssetRadius: System.Single, expPlacementZoneAssetRadius: System.String, placementZoneAsset: UnityEngine.GameObject, expPlacementZoneAsset: UnityEngine.GameObject, darkshiftSound: UnityEngine.AudioSource, expDarkshiftSound: UnityEngine.AudioSource, disappearEffect: Assets.Scripts.Unity.Effects.Effect, expDisappearEffect: Assets.Scripts.Unity.Effects.Effect, reappearEffect: Assets.Scripts.Unity.Effects.Effect, expReappearEffect: Assets.Scripts.Unity.Effects.Effect, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.restrictToTowerRadius = restrictToTowerRadius
		self.expRestrictToTowerRadius = expRestrictToTowerRadius
		self.placementZoneAssetRadius = placementZoneAssetRadius
		self.expPlacementZoneAssetRadius = expPlacementZoneAssetRadius
		self.placementZoneAsset = placementZoneAsset
		self.expPlacementZoneAsset = expPlacementZoneAsset
		self.darkshiftSound = darkshiftSound
		self.expDarkshiftSound = expDarkshiftSound
		self.disappearEffect = disappearEffect
		self.expDisappearEffect = expDisappearEffect
		self.reappearEffect = reappearEffect
		self.expReappearEffect = expReappearEffect


class Deploy:

    offsets = {'parent': 128, 'activateSound': 136, 'expActivateSound': 144, 'dropOffSound': 152, 'expDropOffSound': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.Deploy, activateSound: UnityEngine.AudioSource, expActivateSound: UnityEngine.AudioSource, dropOffSound: UnityEngine.AudioSource, expDropOffSound: UnityEngine.AudioSource, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.activateSound = activateSound
		self.expActivateSound = expActivateSound
		self.dropOffSound = dropOffSound
		self.expDropOffSound = expDropOffSound


class DoorGunner:

    offsets = {'parent': 128, 'selectionObject': 136, 'expSelectionObject': 144, 'isSelectableObject': 152, 'expIsSelectableObject': 160, 'activateSound': 168, 'expActivateSound': 176, 'pickupSound': 184, 'expPickupSound': 192}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.DoorGunner, selectionObject: UnityEngine.GameObject, expSelectionObject: UnityEngine.GameObject, isSelectableObject: UnityEngine.GameObject, expIsSelectableObject: UnityEngine.GameObject, activateSound: UnityEngine.AudioSource, expActivateSound: UnityEngine.AudioSource, pickupSound: UnityEngine.AudioSource, expPickupSound: UnityEngine.AudioSource, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.selectionObject = selectionObject
		self.expSelectionObject = expSelectionObject
		self.isSelectableObject = isSelectableObject
		self.expIsSelectableObject = expIsSelectableObject
		self.activateSound = activateSound
		self.expActivateSound = expActivateSound
		self.pickupSound = pickupSound
		self.expPickupSound = expPickupSound


class DroneSwarm:

    offsets = {'parent': 128, 'duration': 136, 'expDuration': 144, 'droneSupport': 152, 'expDroneSupport': 160, 'droneEndRadius': 168, 'expDroneEndRadius': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.DroneSwarm, duration: System.Single, expDuration: System.String, droneSupport: Assets.Scripts.Unity.Towers.Behaviors.DroneSupport, expDroneSupport: Assets.Scripts.Unity.Towers.Behaviors.DroneSupport, droneEndRadius: System.Single, expDroneEndRadius: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.duration = duration
		self.expDuration = expDuration
		self.droneSupport = droneSupport
		self.expDroneSupport = expDroneSupport
		self.droneEndRadius = droneEndRadius
		self.expDroneEndRadius = expDroneEndRadius


class EmergencyUnlock:

    offsets = {'parent': 128, 'swivelSpeedMultiplier': 136, 'expSwivelSpeedMultiplier': 144, 'duration': 152, 'expDuration': 160, 'activateSound': 168, 'expActivateSound': 176, 'buffDisplay': 184, 'expBuffDisplay': 192}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.EmergencyUnlock, swivelSpeedMultiplier: System.Single, expSwivelSpeedMultiplier: System.String, duration: System.Single, expDuration: System.String, activateSound: UnityEngine.AudioSource, expActivateSound: UnityEngine.AudioSource, buffDisplay: UnityEngine.GameObject, expBuffDisplay: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.swivelSpeedMultiplier = swivelSpeedMultiplier
		self.expSwivelSpeedMultiplier = expSwivelSpeedMultiplier
		self.duration = duration
		self.expDuration = expDuration
		self.activateSound = activateSound
		self.expActivateSound = expActivateSound
		self.buffDisplay = buffDisplay
		self.expBuffDisplay = expBuffDisplay


class FindDeploymentLocation:

    offsets = {'parent': 128, 'searchRadius': 136, 'expSearchRadius': 144, 'pointDistance': 152, 'expPointDistance': 160, 'tower': 168, 'expTower': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.DamageUp, searchRadius: System.Single, expSearchRadius: System.String, pointDistance: System.Single, expPointDistance: System.String, tower: Assets.Scripts.Unity.Towers.Tower, expTower: Assets.Scripts.Unity.Towers.Tower, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.searchRadius = searchRadius
		self.expSearchRadius = expSearchRadius
		self.pointDistance = pointDistance
		self.expPointDistance = expPointDistance
		self.tower = tower
		self.expTower = expTower


class GroundZeroBombBuff:

    offsets = {'parent': 128, 'damageIncrease': 136, 'expDamageIncrease': 144, 'lifespan': 152, 'expLifespan': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.GroundZeroBombBuff, damageIncrease: System.Int32, expDamageIncrease: System.String, lifespan: System.Single, expLifespan: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.damageIncrease = damageIncrease
		self.expDamageIncrease = expDamageIncrease
		self.lifespan = lifespan
		self.expLifespan = expLifespan


class ImfLoan:

    offsets = {'parent': 128, 'amount': 136, 'expAmount': 144, 'incomeRecoveryRate': 152, 'expIncomeRecoveryRate': 160, 'lifespan': 168, 'expLifespan': 176, 'display': 184, 'expDisplay': 192}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.ImfLoan, amount: System.Single, expAmount: System.String, incomeRecoveryRate: System.Single, expIncomeRecoveryRate: System.String, lifespan: System.Single, expLifespan: System.String, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.amount = amount
		self.expAmount = expAmount
		self.incomeRecoveryRate = incomeRecoveryRate
		self.expIncomeRecoveryRate = expIncomeRecoveryRate
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.display = display
		self.expDisplay = expDisplay


class Immunity:

    offsets = {'parent': 128, 'lifespan': 136, 'expLifespan': 144, 'effect': 152, 'expEffect': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.Turbo, lifespan: System.Single, expLifespan: System.String, effect: Assets.Scripts.Unity.Effects.Effect, expEffect: Assets.Scripts.Unity.Effects.Effect, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.effect = effect
		self.expEffect = expEffect


class IncreaseRange:

    offsets = {'parent': 128, 'lifespan': 136, 'expLifespan': 144, 'multiplier': 152, 'expMultiplier': 160, 'addative': 168, 'expAddative': 176, 'endOnDefeatScreen': 184, 'expEndOnDefeatScreen': 192}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.IncreaseRange, lifespan: System.Single, expLifespan: System.String, multiplier: System.Single, expMultiplier: System.String, addative: System.Single, expAddative: System.String, endOnDefeatScreen: System.Boolean, expEndOnDefeatScreen: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.multiplier = multiplier
		self.expMultiplier = expMultiplier
		self.addative = addative
		self.expAddative = expAddative
		self.endOnDefeatScreen = endOnDefeatScreen
		self.expEndOnDefeatScreen = expEndOnDefeatScreen


class LeapingSword:

    offsets = {'parent': 128, 'timeUntilFinish': 136, 'expTimeUntilFinish': 144, 'landDelay': 152, 'expLandDelay': 160, 'impactProjectile': 168, 'expImpactProjectile': 176, 'dotProjectile': 184, 'expDotProjectile': 192, 'effectAtTarget': 200, 'expEffectAtTarget': 208, 'impactEffect': 216, 'expImpactEffect': 224, 'finishingEffect': 232, 'expFinishingEffect': 240, 'landingSound': 248, 'expLandingSound': 256, 'finishingEffectDelay': 264, 'expFinishingEffectDelay': 272}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.LeapingSword, timeUntilFinish: System.Single, expTimeUntilFinish: System.String, landDelay: System.Single, expLandDelay: System.String, impactProjectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, expImpactProjectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, dotProjectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, expDotProjectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, effectAtTarget: Assets.Scripts.Unity.Effects.Effect, expEffectAtTarget: Assets.Scripts.Unity.Effects.Effect, impactEffect: Assets.Scripts.Unity.Effects.Effect, expImpactEffect: Assets.Scripts.Unity.Effects.Effect, finishingEffect: Assets.Scripts.Unity.Effects.Effect, expFinishingEffect: Assets.Scripts.Unity.Effects.Effect, landingSound: UnityEngine.AudioSource, expLandingSound: UnityEngine.AudioSource, finishingEffectDelay: System.Single, expFinishingEffectDelay: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.timeUntilFinish = timeUntilFinish
		self.expTimeUntilFinish = expTimeUntilFinish
		self.landDelay = landDelay
		self.expLandDelay = expLandDelay
		self.impactProjectile = impactProjectile
		self.expImpactProjectile = expImpactProjectile
		self.dotProjectile = dotProjectile
		self.expDotProjectile = expDotProjectile
		self.effectAtTarget = effectAtTarget
		self.expEffectAtTarget = expEffectAtTarget
		self.impactEffect = impactEffect
		self.expImpactEffect = expImpactEffect
		self.finishingEffect = finishingEffect
		self.expFinishingEffect = expFinishingEffect
		self.landingSound = landingSound
		self.expLandingSound = expLandingSound
		self.finishingEffectDelay = finishingEffectDelay
		self.expFinishingEffectDelay = expFinishingEffectDelay


class LongArmOfLight:

    offsets = {'parent': 128, 'lifespan': 136, 'expLifespan': 144, 'multiplier': 152, 'expMultiplier': 160, 'projectileDisplay': 168, 'expProjectileDisplay': 176, 'projectileRadiusMultiplier': 184, 'expProjectileRadiusMultiplier': 192, 'damageType': 200, 'expDamageType': 208, 'damageIncrease': 216, 'expDamageIncrease': 224, 'mutatorId': 232, 'expMutatorId': 240}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.LongArmOfLight, lifespan: System.Single, expLifespan: System.String, multiplier: System.Single, expMultiplier: System.String, projectileDisplay: UnityEngine.GameObject, expProjectileDisplay: UnityEngine.GameObject, projectileRadiusMultiplier: System.Single, expProjectileRadiusMultiplier: System.String, damageType: System.String, expDamageType: System.String, damageIncrease: System.Int32, expDamageIncrease: System.String, mutatorId: System.String, expMutatorId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.multiplier = multiplier
		self.expMultiplier = expMultiplier
		self.projectileDisplay = projectileDisplay
		self.expProjectileDisplay = expProjectileDisplay
		self.projectileRadiusMultiplier = projectileRadiusMultiplier
		self.expProjectileRadiusMultiplier = expProjectileRadiusMultiplier
		self.damageType = damageType
		self.expDamageType = expDamageType
		self.damageIncrease = damageIncrease
		self.expDamageIncrease = expDamageIncrease
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId


class MoabBarrage:

    offsets = {'parent': 128, 'duration': 136, 'expDuration': 144, 'mutatorId': 152, 'expMutatorId': 160, 'targets': 168, 'expTargets': 176, 'behavior': 184, 'expBehavior': 192}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.MoabBarrage, duration: System.Single, expDuration: System.String, mutatorId: System.String, expMutatorId: System.String, targets: System.Int32, expTargets: System.String, behavior: Assets.Scripts.Unity.Bloons.Behavior, expBehavior: Assets.Scripts.Unity.Bloons.Behavior, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.duration = duration
		self.expDuration = expDuration
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId
		self.targets = targets
		self.expTargets = expTargets
		self.behavior = behavior
		self.expBehavior = expBehavior


class MonkeyFanClub:

    offsets = {'parent': 128, 'lifespan': 136, 'expLifespan': 144, 'maxTier': 152, 'expMaxTier': 160, 'towerCount': 168, 'expTowerCount': 176, 'range': 184, 'expRange': 192, 'reloadModifier': 200, 'expReloadModifier': 208, 'damageType': 216, 'expDamageType': 224, 'bonusPierce': 232, 'expBonusPierce': 240, 'projectileRadius': 248, 'expProjectileRadius': 256, 'bonusDamage': 264, 'expBonusDamage': 272, 'originDisplay': 280, 'expOriginDisplay': 288, 'towerOriginDisplay': 296, 'expTowerOriginDisplay': 304, 'display': 312, 'expDisplay': 320, 'towerDisplay': 328, 'expTowerDisplay': 336, 'effectDisplay': 344, 'expEffectDisplay': 352, 'effectDisplayLeader': 360, 'expEffectDisplayLeader': 368, 'effectOnOthersDisplay': 376, 'expEffectOnOthersDisplay': 384, 'degradeEffect': 392, 'expDegradeEffect': 400, 'handBlurEjectEffect': 408, 'throwMarker': 416, 'expThrowMarker': 424, 'ignoreWithMutators': 432, 'expIgnoreWithMutators': 440}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.MonkeyFanClub, lifespan: System.Single, expLifespan: System.String, maxTier: System.Single, expMaxTier: System.String, towerCount: System.Single, expTowerCount: System.String, range: System.Single, expRange: System.String, reloadModifier: System.Single, expReloadModifier: System.String, damageType: System.String, expDamageType: System.String, bonusPierce: System.Single, expBonusPierce: System.String, projectileRadius: System.Single, expProjectileRadius: System.String, bonusDamage: System.Int32, expBonusDamage: System.String, originDisplay: UnityEngine.GameObject, expOriginDisplay: UnityEngine.GameObject, towerOriginDisplay: UnityEngine.GameObject, expTowerOriginDisplay: UnityEngine.GameObject, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, towerDisplay: UnityEngine.GameObject, expTowerDisplay: UnityEngine.GameObject, effectDisplay: UnityEngine.GameObject, expEffectDisplay: UnityEngine.GameObject, effectDisplayLeader: UnityEngine.GameObject, expEffectDisplayLeader: UnityEngine.GameObject, effectOnOthersDisplay: UnityEngine.GameObject, expEffectOnOthersDisplay: UnityEngine.GameObject, degradeEffect: Assets.Scripts.Unity.Effects.Effect, expDegradeEffect: Assets.Scripts.Unity.Effects.Effect, handBlurEjectEffect: Assets.Scripts.Unity.Towers.Weapons.Behaviors.EjectEffect, throwMarker: UnityEngine.GameObject, expThrowMarker: UnityEngine.GameObject, ignoreWithMutators: System.String, expIgnoreWithMutators: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.maxTier = maxTier
		self.expMaxTier = expMaxTier
		self.towerCount = towerCount
		self.expTowerCount = expTowerCount
		self.range = range
		self.expRange = expRange
		self.reloadModifier = reloadModifier
		self.expReloadModifier = expReloadModifier
		self.damageType = damageType
		self.expDamageType = expDamageType
		self.bonusPierce = bonusPierce
		self.expBonusPierce = expBonusPierce
		self.projectileRadius = projectileRadius
		self.expProjectileRadius = expProjectileRadius
		self.bonusDamage = bonusDamage
		self.expBonusDamage = expBonusDamage
		self.originDisplay = originDisplay
		self.expOriginDisplay = expOriginDisplay
		self.towerOriginDisplay = towerOriginDisplay
		self.expTowerOriginDisplay = expTowerOriginDisplay
		self.display = display
		self.expDisplay = expDisplay
		self.towerDisplay = towerDisplay
		self.expTowerDisplay = expTowerDisplay
		self.effectDisplay = effectDisplay
		self.expEffectDisplay = expEffectDisplay
		self.effectDisplayLeader = effectDisplayLeader
		self.expEffectDisplayLeader = expEffectDisplayLeader
		self.effectOnOthersDisplay = effectOnOthersDisplay
		self.expEffectOnOthersDisplay = expEffectOnOthersDisplay
		self.degradeEffect = degradeEffect
		self.expDegradeEffect = expDegradeEffect
		self.handBlurEjectEffect = handBlurEjectEffect
		self.throwMarker = throwMarker
		self.expThrowMarker = expThrowMarker
		self.ignoreWithMutators = ignoreWithMutators
		self.expIgnoreWithMutators = expIgnoreWithMutators


class MorphTower:

    offsets = {'parent': 128, 'isUnique': 136, 'expIsUnique': 144, 'priority': 152, 'expPriority': 160, 'mutatorId': 168, 'expMutatorId': 176, 'lifespan': 184, 'expLifespan': 192, 'mutateAll': 200, 'expMutateAll': 208, 'mutateSelf': 216, 'expMutateSelf': 224, 'tower': 232, 'expTower': 240, 'secondaryTower': 248, 'expSecondaryTower': 256, 'effect': 264, 'expEffect': 272, 'maxTier': 280, 'expMaxTier': 288, 'maxCost': 296, 'expMaxCost': 304, 'maxTowers': 312, 'expMaxTowers': 320, 'affectList': 328, 'expAffectList': 336, 'effectOnTransitionBack': 344, 'expEffectOnTransitionBack': 352, 'resetOnDefeatScreen': 360, 'expResetOnDefeatScreen': 368, 'ignoreWithMutators': 376, 'expIgnoreWithMutators': 384}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.MorphTower, isUnique: System.Boolean, expIsUnique: System.String, priority: System.Single, expPriority: System.String, mutatorId: System.String, expMutatorId: System.String, lifespan: System.Single, expLifespan: System.String, mutateAll: System.Boolean, expMutateAll: System.String, mutateSelf: System.Boolean, expMutateSelf: System.String, tower: Assets.Scripts.Unity.Towers.Tower, expTower: Assets.Scripts.Unity.Towers.Tower, secondaryTower: Assets.Scripts.Unity.Towers.Tower, expSecondaryTower: Assets.Scripts.Unity.Towers.Tower, effect: Assets.Scripts.Unity.Effects.Effect, expEffect: Assets.Scripts.Unity.Effects.Effect, maxTier: System.Single, expMaxTier: System.String, maxCost: System.Single, expMaxCost: System.String, maxTowers: System.Single, expMaxTowers: System.String, affectList: System.String, expAffectList: System.String, effectOnTransitionBack: Assets.Scripts.Unity.Effects.Effect, expEffectOnTransitionBack: Assets.Scripts.Unity.Effects.Effect, resetOnDefeatScreen: System.Boolean, expResetOnDefeatScreen: System.String, ignoreWithMutators: System.String, expIgnoreWithMutators: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.isUnique = isUnique
		self.expIsUnique = expIsUnique
		self.priority = priority
		self.expPriority = expPriority
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.mutateAll = mutateAll
		self.expMutateAll = expMutateAll
		self.mutateSelf = mutateSelf
		self.expMutateSelf = expMutateSelf
		self.tower = tower
		self.expTower = expTower
		self.secondaryTower = secondaryTower
		self.expSecondaryTower = expSecondaryTower
		self.effect = effect
		self.expEffect = expEffect
		self.maxTier = maxTier
		self.expMaxTier = expMaxTier
		self.maxCost = maxCost
		self.expMaxCost = expMaxCost
		self.maxTowers = maxTowers
		self.expMaxTowers = expMaxTowers
		self.affectList = affectList
		self.expAffectList = expAffectList
		self.effectOnTransitionBack = effectOnTransitionBack
		self.expEffectOnTransitionBack = expEffectOnTransitionBack
		self.resetOnDefeatScreen = resetOnDefeatScreen
		self.expResetOnDefeatScreen = expResetOnDefeatScreen
		self.ignoreWithMutators = ignoreWithMutators
		self.expIgnoreWithMutators = expIgnoreWithMutators


class MutateCreateProjectileOnExhaustPierceOnAbility:

    offsets = {'parent': 128, 'lifespan': 136, 'expLifespan': 144, 'countIncrease': 152, 'expCountIncrease': 160, 'targetBehavior': 168, 'expTargetBehavior': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.MutateCreateProjectileOnExhaustPierceOnAbility, lifespan: System.Single, expLifespan: System.String, countIncrease: System.Int32, expCountIncrease: System.String, targetBehavior: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.CreateProjectileOnExhaustPierce, expTargetBehavior: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.CreateProjectileOnExhaustPierce, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.countIncrease = countIncrease
		self.expCountIncrease = expCountIncrease
		self.targetBehavior = targetBehavior
		self.expTargetBehavior = expTargetBehavior


class MutateDamageOnAbility:

    offsets = {'parent': 128, 'lifespan': 136, 'expLifespan': 144, 'damageIncrease': 152, 'expDamageIncrease': 160, 'targetDamage': 168, 'expTargetDamage': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.MutateDamageOnAbility, lifespan: System.Single, expLifespan: System.String, damageIncrease: System.Int32, expDamageIncrease: System.String, targetDamage: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.Damage, expTargetDamage: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.Damage, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.damageIncrease = damageIncrease
		self.expDamageIncrease = expDamageIncrease
		self.targetDamage = targetDamage
		self.expTargetDamage = expTargetDamage


class MutateProjectileOnAbility:

    offsets = {'parent': 128, 'lifespan': 136, 'expLifespan': 144, 'projectileBehavior': 152, 'mutatorId': 160, 'expMutatorId': 168, 'projectile': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.MutateProjectileOnAbility, lifespan: System.Single, expLifespan: System.String, projectileBehavior: Assets.Scripts.Unity.Towers.Projectiles.ProjectileBehavior, mutatorId: System.String, expMutatorId: System.String, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.projectileBehavior = projectileBehavior
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId
		self.projectile = projectile


class MutateRemoveAllAttacksOnAbilityActivate:

    offsets = {'parent': 128, 'lifespan': 136, 'expLifespan': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.MutateRemoveAllAttacksOnAbilityActivate, lifespan: System.Single, expLifespan: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan


class Overclock:

    offsets = {'parent': 128, 'lifespan': 136, 'expLifespan': 144, 'rateModifier': 152, 'expRateModifier': 160, 'villageRangeModifier': 168, 'expVillageRangeModifier': 176, 'mutatorId': 184, 'expMutatorId': 192, 'mutatorSaveId': 200, 'expMutatorSaveId': 208, 'maxStacks': 216, 'expMaxStacks': 224, 'selectionObject': 232, 'expSelectionObject': 240, 'buffDisplay': 248, 'expBuffDisplay': 256, 'initialEffect': 264, 'expInitialEffect': 272, 'tier0DurationMultiplier': 280, 'expTier0DurationMultiplier': 288, 'tier1DurationMultiplier': 296, 'expTier1DurationMultiplier': 304, 'tier2DurationMultiplier': 312, 'expTier2DurationMultiplier': 320, 'tier3DurationMultiplier': 328, 'expTier3DurationMultiplier': 336, 'tier4DurationMultiplier': 344, 'expTier4DurationMultiplier': 352, 'tier5DurationMultiplier': 360, 'expTier5DurationMultiplier': 368, 'buffLocsName': 376, 'expBuffLocsName': 384, 'buffIconName': 392, 'expBuffIconName': 400}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.Overclock, lifespan: System.Single, expLifespan: System.String, rateModifier: System.Single, expRateModifier: System.String, villageRangeModifier: System.Single, expVillageRangeModifier: System.String, mutatorId: System.String, expMutatorId: System.String, mutatorSaveId: System.String, expMutatorSaveId: System.String, maxStacks: System.Int32, expMaxStacks: System.String, selectionObject: UnityEngine.GameObject, expSelectionObject: UnityEngine.GameObject, buffDisplay: UnityEngine.GameObject, expBuffDisplay: UnityEngine.GameObject, initialEffect: Assets.Scripts.Unity.Effects.Effect, expInitialEffect: Assets.Scripts.Unity.Effects.Effect, tier0DurationMultiplier: System.Single, expTier0DurationMultiplier: System.String, tier1DurationMultiplier: System.Single, expTier1DurationMultiplier: System.String, tier2DurationMultiplier: System.Single, expTier2DurationMultiplier: System.String, tier3DurationMultiplier: System.Single, expTier3DurationMultiplier: System.String, tier4DurationMultiplier: System.Single, expTier4DurationMultiplier: System.String, tier5DurationMultiplier: System.Single, expTier5DurationMultiplier: System.String, buffLocsName: System.String, expBuffLocsName: System.String, buffIconName: System.String, expBuffIconName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.rateModifier = rateModifier
		self.expRateModifier = expRateModifier
		self.villageRangeModifier = villageRangeModifier
		self.expVillageRangeModifier = expVillageRangeModifier
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId
		self.mutatorSaveId = mutatorSaveId
		self.expMutatorSaveId = expMutatorSaveId
		self.maxStacks = maxStacks
		self.expMaxStacks = expMaxStacks
		self.selectionObject = selectionObject
		self.expSelectionObject = expSelectionObject
		self.buffDisplay = buffDisplay
		self.expBuffDisplay = expBuffDisplay
		self.initialEffect = initialEffect
		self.expInitialEffect = expInitialEffect
		self.tier0DurationMultiplier = tier0DurationMultiplier
		self.expTier0DurationMultiplier = expTier0DurationMultiplier
		self.tier1DurationMultiplier = tier1DurationMultiplier
		self.expTier1DurationMultiplier = expTier1DurationMultiplier
		self.tier2DurationMultiplier = tier2DurationMultiplier
		self.expTier2DurationMultiplier = expTier2DurationMultiplier
		self.tier3DurationMultiplier = tier3DurationMultiplier
		self.expTier3DurationMultiplier = expTier3DurationMultiplier
		self.tier4DurationMultiplier = tier4DurationMultiplier
		self.expTier4DurationMultiplier = expTier4DurationMultiplier
		self.tier5DurationMultiplier = tier5DurationMultiplier
		self.expTier5DurationMultiplier = expTier5DurationMultiplier
		self.buffLocsName = buffLocsName
		self.expBuffLocsName = expBuffLocsName
		self.buffIconName = buffIconName
		self.expBuffIconName = expBuffIconName


class OverclockPermanent:

    offsets = {'parent': 128, 'rateModifier': 136, 'expRateModifier': 144, 'villageRangeModifier': 152, 'expVillageRangeModifier': 160, 'mutatorId': 168, 'expMutatorId': 176, 'maxStacks': 184, 'expMaxStacks': 192, 'buffLocsName': 200, 'expBuffLocsName': 208, 'buffIconName': 216, 'expBuffIconName': 224}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.OverclockPermanent, rateModifier: System.Single, expRateModifier: System.String, villageRangeModifier: System.Single, expVillageRangeModifier: System.String, mutatorId: System.String, expMutatorId: System.String, maxStacks: System.Int32, expMaxStacks: System.String, buffLocsName: System.String, expBuffLocsName: System.String, buffIconName: System.String, expBuffIconName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.rateModifier = rateModifier
		self.expRateModifier = expRateModifier
		self.villageRangeModifier = villageRangeModifier
		self.expVillageRangeModifier = expVillageRangeModifier
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId
		self.maxStacks = maxStacks
		self.expMaxStacks = expMaxStacks
		self.buffLocsName = buffLocsName
		self.expBuffLocsName = expBuffLocsName
		self.buffIconName = buffIconName
		self.expBuffIconName = expBuffIconName


class PauseAllOtherAttacks:

    offsets = {'parent': 128, 'lifespan': 136, 'expLifespan': 144, 'endOnRoundEnd': 152, 'expEndOnRoundEnd': 160, 'endOnDefeatScreen': 168, 'expEndOnDefeatScreen': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.PauseAllOtherAttacks, lifespan: System.Single, expLifespan: System.String, endOnRoundEnd: System.Boolean, expEndOnRoundEnd: System.String, endOnDefeatScreen: System.Boolean, expEndOnDefeatScreen: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.endOnRoundEnd = endOnRoundEnd
		self.expEndOnRoundEnd = expEndOnRoundEnd
		self.endOnDefeatScreen = endOnDefeatScreen
		self.expEndOnDefeatScreen = expEndOnDefeatScreen


class PlaceProjectileAt:

    offsets = {'parent': 128, 'projectile': 136, 'emission': 144, 'placeableArea': 152, 'expPlaceableArea': 160, 'placementRadius': 168, 'expPlacementRadius': 176, 'rangeCircleRadius': 184, 'expRangeCircleRadius': 192, 'delay': 200, 'expDelay': 208, 'effectAtLocation': 216, 'expEffectAtLocation': 224, 'effectAtTower': 232, 'expEffectAtTower': 240, 'effectAtTowerMarker': 248, 'expEffectAtTowerMarker': 256, 'soundOnPlace': 264, 'expSoundOnPlace': 272, 'useRandomRotation': 280, 'expUseRandomRotation': 288, 'placingDisplay': 296, 'expPlacingDisplay': 304}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.PlaceProjectileAt, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, emission: Assets.Scripts.Unity.Towers.Emissions.Emission, placeableArea: System.String, expPlaceableArea: System.String, placementRadius: System.Single, expPlacementRadius: System.String, rangeCircleRadius: System.Single, expRangeCircleRadius: System.String, delay: System.Single, expDelay: System.String, effectAtLocation: Assets.Scripts.Unity.Effects.Effect, expEffectAtLocation: Assets.Scripts.Unity.Effects.Effect, effectAtTower: Assets.Scripts.Unity.Effects.Effect, expEffectAtTower: Assets.Scripts.Unity.Effects.Effect, effectAtTowerMarker: UnityEngine.GameObject, expEffectAtTowerMarker: UnityEngine.GameObject, soundOnPlace: UnityEngine.AudioSource, expSoundOnPlace: UnityEngine.AudioSource, useRandomRotation: System.Boolean, expUseRandomRotation: System.String, placingDisplay: UnityEngine.GameObject, expPlacingDisplay: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.projectile = projectile
		self.emission = emission
		self.placeableArea = placeableArea
		self.expPlaceableArea = expPlaceableArea
		self.placementRadius = placementRadius
		self.expPlacementRadius = expPlacementRadius
		self.rangeCircleRadius = rangeCircleRadius
		self.expRangeCircleRadius = expRangeCircleRadius
		self.delay = delay
		self.expDelay = expDelay
		self.effectAtLocation = effectAtLocation
		self.expEffectAtLocation = expEffectAtLocation
		self.effectAtTower = effectAtTower
		self.expEffectAtTower = expEffectAtTower
		self.effectAtTowerMarker = effectAtTowerMarker
		self.expEffectAtTowerMarker = expEffectAtTowerMarker
		self.soundOnPlace = soundOnPlace
		self.expSoundOnPlace = expSoundOnPlace
		self.useRandomRotation = useRandomRotation
		self.expUseRandomRotation = expUseRandomRotation
		self.placingDisplay = placingDisplay
		self.expPlacingDisplay = expPlacingDisplay


class Redeploy:

    offsets = {'parent': 128, 'selectionObject': 136, 'expSelectionObject': 144, 'isSelectableObject': 152, 'expIsSelectableObject': 160, 'activateSound': 168, 'expActivateSound': 176, 'pickupSound': 184, 'expPickupSound': 192, 'dropOffSound': 200, 'expDropOffSound': 208}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.Redeploy, selectionObject: UnityEngine.GameObject, expSelectionObject: UnityEngine.GameObject, isSelectableObject: UnityEngine.GameObject, expIsSelectableObject: UnityEngine.GameObject, activateSound: UnityEngine.AudioSource, expActivateSound: UnityEngine.AudioSource, pickupSound: UnityEngine.AudioSource, expPickupSound: UnityEngine.AudioSource, dropOffSound: UnityEngine.AudioSource, expDropOffSound: UnityEngine.AudioSource, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.selectionObject = selectionObject
		self.expSelectionObject = expSelectionObject
		self.isSelectableObject = isSelectableObject
		self.expIsSelectableObject = expIsSelectableObject
		self.activateSound = activateSound
		self.expActivateSound = expActivateSound
		self.pickupSound = pickupSound
		self.expPickupSound = expPickupSound
		self.dropOffSound = dropOffSound
		self.expDropOffSound = expDropOffSound


class Soulbind:

    offsets = {'parent': 128, 'selectionObject': 136, 'expSelectionObject': 144, 'soulbindEffectOnTarget': 152, 'expSoulbindEffectOnTarget': 160, 'soulbindEffectOnBoundTargets': 168, 'expSoulbindEffectOnBoundTargets': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.Soulbind, selectionObject: UnityEngine.GameObject, expSelectionObject: UnityEngine.GameObject, soulbindEffectOnTarget: Assets.Scripts.Unity.Effects.Effect, expSoulbindEffectOnTarget: Assets.Scripts.Unity.Effects.Effect, soulbindEffectOnBoundTargets: UnityEngine.GameObject, expSoulbindEffectOnBoundTargets: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.selectionObject = selectionObject
		self.expSelectionObject = expSelectionObject
		self.soulbindEffectOnTarget = soulbindEffectOnTarget
		self.expSoulbindEffectOnTarget = expSoulbindEffectOnTarget
		self.soulbindEffectOnBoundTargets = soulbindEffectOnBoundTargets
		self.expSoulbindEffectOnBoundTargets = expSoulbindEffectOnBoundTargets


class SwitchDisplay:

    offsets = {'parent': 128, 'lifespan': 136, 'expLifespan': 144, 'excludeSubTowers': 152, 'expExcludeSubTowers': 160, 'resetOnDefeatScreen': 168, 'expResetOnDefeatScreen': 176, 'display': 184, 'expDisplay': 192, 'createEffectOnSwitchBack': 200, 'expCreateEffectOnSwitchBack': 208}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.SwitchDisplay, lifespan: System.Single, expLifespan: System.String, excludeSubTowers: System.Boolean, expExcludeSubTowers: System.String, resetOnDefeatScreen: System.Boolean, expResetOnDefeatScreen: System.String, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, createEffectOnSwitchBack: Assets.Scripts.Unity.Effects.Effect, expCreateEffectOnSwitchBack: Assets.Scripts.Unity.Effects.Effect, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.excludeSubTowers = excludeSubTowers
		self.expExcludeSubTowers = expExcludeSubTowers
		self.resetOnDefeatScreen = resetOnDefeatScreen
		self.expResetOnDefeatScreen = expResetOnDefeatScreen
		self.display = display
		self.expDisplay = expDisplay
		self.createEffectOnSwitchBack = createEffectOnSwitchBack
		self.expCreateEffectOnSwitchBack = expCreateEffectOnSwitchBack


class SwordCharge:

    offsets = {'parent': 128, 'initialDelay': 136, 'expInitialDelay': 144, 'endDelay': 152, 'expEndDelay': 160, 'iterations': 168, 'expIterations': 176, 'projectile': 184, 'expProjectile': 192, 'effectAtEnd': 200, 'expEffectAtEnd': 208, 'effectDuringCharge': 216, 'expEffectDuringCharge': 224, 'chargeEffectDestroyDelay': 232, 'expChargeEffectDestroyDelay': 240, 'spawnSound': 248, 'expSpawnSound': 256, 'landingSound': 264, 'expLandingSound': 272}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.SwordCharge, initialDelay: System.Single, expInitialDelay: System.String, endDelay: System.Single, expEndDelay: System.String, iterations: System.Int32, expIterations: System.String, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, expProjectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, effectAtEnd: Assets.Scripts.Unity.Effects.Effect, expEffectAtEnd: Assets.Scripts.Unity.Effects.Effect, effectDuringCharge: Assets.Scripts.Unity.Effects.Effect, expEffectDuringCharge: Assets.Scripts.Unity.Effects.Effect, chargeEffectDestroyDelay: System.Single, expChargeEffectDestroyDelay: System.String, spawnSound: UnityEngine.AudioSource, expSpawnSound: UnityEngine.AudioSource, landingSound: UnityEngine.AudioSource, expLandingSound: UnityEngine.AudioSource, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.initialDelay = initialDelay
		self.expInitialDelay = expInitialDelay
		self.endDelay = endDelay
		self.expEndDelay = expEndDelay
		self.iterations = iterations
		self.expIterations = expIterations
		self.projectile = projectile
		self.expProjectile = expProjectile
		self.effectAtEnd = effectAtEnd
		self.expEffectAtEnd = expEffectAtEnd
		self.effectDuringCharge = effectDuringCharge
		self.expEffectDuringCharge = expEffectDuringCharge
		self.chargeEffectDestroyDelay = chargeEffectDestroyDelay
		self.expChargeEffectDestroyDelay = expChargeEffectDestroyDelay
		self.spawnSound = spawnSound
		self.expSpawnSound = expSpawnSound
		self.landingSound = landingSound
		self.expLandingSound = expLandingSound


class SyphonFunding:

    offsets = {'parent': 128, 'lifespan': 136, 'expLifespan': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.SyphonFunding, lifespan: System.Single, expLifespan: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan


class TechBotLink:

    offsets = {'parent': 128, 'selectionObject': 136, 'expSelectionObject': 144, 'isSelectableObject': 152, 'expIsSelectableObject': 160, 'activateSound': 168, 'expActivateSound': 176, 'confirmSound': 184, 'expConfirmSound': 192, 'activatedTowerAbilityEffect': 200, 'expActivatedTowerAbilityEffect': 208, 'lineDisplay': 216, 'expLineDisplay': 224, 'lineDotOffset': 232, 'expLineDotOffset': 240, 'lineDotSpacing': 248, 'expLineDotSpacing': 256, 'activateAnimationState': 264, 'expActivateAnimationState': 272, 'linkAnimationState': 280, 'expLinkAnimationState': 288, 'idleAnimationState': 296, 'expIdleAnimationState': 304, 'travelEffect': 312, 'expTravelEffect': 320, 'travelEffectSpeed': 328, 'expTravelEffectSpeed': 336, 'rotatingDisplay': 344, 'expRotatingDisplay': 352}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.TechBotLink, selectionObject: UnityEngine.GameObject, expSelectionObject: UnityEngine.GameObject, isSelectableObject: UnityEngine.GameObject, expIsSelectableObject: UnityEngine.GameObject, activateSound: UnityEngine.AudioSource, expActivateSound: UnityEngine.AudioSource, confirmSound: UnityEngine.AudioSource, expConfirmSound: UnityEngine.AudioSource, activatedTowerAbilityEffect: Assets.Scripts.Unity.Effects.Effect, expActivatedTowerAbilityEffect: Assets.Scripts.Unity.Effects.Effect, lineDisplay: UnityEngine.GameObject, expLineDisplay: UnityEngine.GameObject, lineDotOffset: System.Single, expLineDotOffset: System.String, lineDotSpacing: System.Single, expLineDotSpacing: System.String, activateAnimationState: System.Int32, expActivateAnimationState: System.String, linkAnimationState: System.Int32, expLinkAnimationState: System.String, idleAnimationState: System.Int32, expIdleAnimationState: System.String, travelEffect: Assets.Scripts.Unity.Effects.Effect, expTravelEffect: Assets.Scripts.Unity.Effects.Effect, travelEffectSpeed: System.Single, expTravelEffectSpeed: System.String, rotatingDisplay: UnityEngine.GameObject, expRotatingDisplay: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.selectionObject = selectionObject
		self.expSelectionObject = expSelectionObject
		self.isSelectableObject = isSelectableObject
		self.expIsSelectableObject = expIsSelectableObject
		self.activateSound = activateSound
		self.expActivateSound = expActivateSound
		self.confirmSound = confirmSound
		self.expConfirmSound = expConfirmSound
		self.activatedTowerAbilityEffect = activatedTowerAbilityEffect
		self.expActivatedTowerAbilityEffect = expActivatedTowerAbilityEffect
		self.lineDisplay = lineDisplay
		self.expLineDisplay = expLineDisplay
		self.lineDotOffset = lineDotOffset
		self.expLineDotOffset = expLineDotOffset
		self.lineDotSpacing = lineDotSpacing
		self.expLineDotSpacing = expLineDotSpacing
		self.activateAnimationState = activateAnimationState
		self.expActivateAnimationState = expActivateAnimationState
		self.linkAnimationState = linkAnimationState
		self.expLinkAnimationState = expLinkAnimationState
		self.idleAnimationState = idleAnimationState
		self.expIdleAnimationState = expIdleAnimationState
		self.travelEffect = travelEffect
		self.expTravelEffect = expTravelEffect
		self.travelEffectSpeed = travelEffectSpeed
		self.expTravelEffectSpeed = expTravelEffectSpeed
		self.rotatingDisplay = rotatingDisplay
		self.expRotatingDisplay = expRotatingDisplay


class TechBotUnlink:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.TechBotUnlink, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class Turbo:

    offsets = {'parent': 128, 'lifespan': 136, 'expLifespan': 144, 'multiplier': 152, 'expMultiplier': 160, 'projectileDisplay': 168, 'expProjectileDisplay': 176, 'extraDamage': 184, 'expExtraDamage': 192, 'projectileRadiusScaleBonus': 200, 'expProjectileRadiusScaleBonus': 208, 'dontRemoveMutatorOnDestroy': 216, 'expDontRemoveMutatorOnDestroy': 224}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.Turbo, lifespan: System.Single, expLifespan: System.String, multiplier: System.Single, expMultiplier: System.String, projectileDisplay: UnityEngine.GameObject, expProjectileDisplay: UnityEngine.GameObject, extraDamage: System.Int32, expExtraDamage: System.String, projectileRadiusScaleBonus: System.Single, expProjectileRadiusScaleBonus: System.String, dontRemoveMutatorOnDestroy: System.Boolean, expDontRemoveMutatorOnDestroy: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.multiplier = multiplier
		self.expMultiplier = expMultiplier
		self.projectileDisplay = projectileDisplay
		self.expProjectileDisplay = expProjectileDisplay
		self.extraDamage = extraDamage
		self.expExtraDamage = expExtraDamage
		self.projectileRadiusScaleBonus = projectileRadiusScaleBonus
		self.expProjectileRadiusScaleBonus = expProjectileRadiusScaleBonus
		self.dontRemoveMutatorOnDestroy = dontRemoveMutatorOnDestroy
		self.expDontRemoveMutatorOnDestroy = expDontRemoveMutatorOnDestroy


class UCAV:

    offsets = {'parent': 128, 'duration': 136, 'expDuration': 144, 'uavTower': 152, 'expUavTower': 160, 'ucavTower': 168, 'expUcavTower': 176, 'effectAtTowerStart': 184, 'expEffectAtTowerStart': 192, 'effectAtTowerEnd': 200, 'expEffectAtTowerEnd': 208}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.UCAV, duration: System.Single, expDuration: System.String, uavTower: Assets.Scripts.Unity.Towers.Tower, expUavTower: Assets.Scripts.Unity.Towers.Tower, ucavTower: Assets.Scripts.Unity.Towers.Tower, expUcavTower: Assets.Scripts.Unity.Towers.Tower, effectAtTowerStart: Assets.Scripts.Unity.Effects.Effect, expEffectAtTowerStart: Assets.Scripts.Unity.Effects.Effect, effectAtTowerEnd: Assets.Scripts.Unity.Effects.Effect, expEffectAtTowerEnd: Assets.Scripts.Unity.Effects.Effect, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.duration = duration
		self.expDuration = expDuration
		self.uavTower = uavTower
		self.expUavTower = expUavTower
		self.ucavTower = ucavTower
		self.expUcavTower = expUcavTower
		self.effectAtTowerStart = effectAtTowerStart
		self.expEffectAtTowerStart = expEffectAtTowerStart
		self.effectAtTowerEnd = effectAtTowerEnd
		self.expEffectAtTowerEnd = expEffectAtTowerEnd


class VineRupture:

    offsets = {'parent': 128, 'effect': 136, 'expEffect': 144, 'interval': 152, 'expInterval': 160, 'projectile': 168, 'expProjectile': 176, 'sound1': 184, 'expSound1': 192, 'sound2': 200, 'expSound2': 208, 'sound3': 216, 'expSound3': 224, 'sound4': 232, 'expSound4': 240}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Behaviors.VineRupture, effect: Assets.Scripts.Unity.Effects.Effect, expEffect: Assets.Scripts.Unity.Effects.Effect, interval: System.Single, expInterval: System.String, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, expProjectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, sound1: UnityEngine.AudioSource, expSound1: UnityEngine.AudioSource, sound2: UnityEngine.AudioSource, expSound2: UnityEngine.AudioSource, sound3: UnityEngine.AudioSource, expSound3: UnityEngine.AudioSource, sound4: UnityEngine.AudioSource, expSound4: UnityEngine.AudioSource, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.effect = effect
		self.expEffect = expEffect
		self.interval = interval
		self.expInterval = expInterval
		self.projectile = projectile
		self.expProjectile = expProjectile
		self.sound1 = sound1
		self.expSound1 = expSound1
		self.sound2 = sound2
		self.expSound2 = expSound2
		self.sound3 = sound3
		self.expSound3 = expSound3
		self.sound4 = sound4
		self.expSound4 = expSound4


class Attack:

    offsets = {'parent': 136, 'range': 144, 'expRange': 152, 'targetProvider': 160, 'expTargetProvider': 168, 'display': 176, 'expDisplay': 184, 'attackThroughWalls': 192, 'expAttackThroughWalls': 200, 'fireWithoutTarget': 208, 'expFireWithoutTarget': 216, 'framesBeforeRetarget': 224, 'expFramesBeforeRetarget': 232, 'addsToSharedGrid': 240, 'expAddsToSharedGrid': 248, 'sharedGridRange': 256, 'expSharedGridRange': 264}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Attack, range: System.Single, expRange: System.String, targetProvider: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behavior, expTargetProvider: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behavior, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, attackThroughWalls: System.Boolean, expAttackThroughWalls: System.String, fireWithoutTarget: System.Boolean, expFireWithoutTarget: System.String, framesBeforeRetarget: System.Int32, expFramesBeforeRetarget: System.String, addsToSharedGrid: System.Boolean, expAddsToSharedGrid: System.String, sharedGridRange: System.Single, expSharedGridRange: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.range = range
		self.expRange = expRange
		self.targetProvider = targetProvider
		self.expTargetProvider = expTargetProvider
		self.display = display
		self.expDisplay = expDisplay
		self.attackThroughWalls = attackThroughWalls
		self.expAttackThroughWalls = expAttackThroughWalls
		self.fireWithoutTarget = fireWithoutTarget
		self.expFireWithoutTarget = expFireWithoutTarget
		self.framesBeforeRetarget = framesBeforeRetarget
		self.expFramesBeforeRetarget = expFramesBeforeRetarget
		self.addsToSharedGrid = addsToSharedGrid
		self.expAddsToSharedGrid = expAddsToSharedGrid
		self.sharedGridRange = sharedGridRange
		self.expSharedGridRange = expSharedGridRange


class AttackAirUnit:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Behavior:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AttackFilter:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.AttackFilter, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class BrewTargetting:

    offsets = {'parent': 144, 'towerIgnoreList': 152, 'expTowerIgnoreList': 160, 'ignoreMutationsByOrder': 168, 'expIgnoreMutationsByOrder': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.BrewTargetting, towerIgnoreList: System.String, expTowerIgnoreList: System.String, ignoreMutationsByOrder: System.String, expIgnoreMutationsByOrder: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.towerIgnoreList = towerIgnoreList
		self.expTowerIgnoreList = expTowerIgnoreList
		self.ignoreMutationsByOrder = ignoreMutationsByOrder
		self.expIgnoreMutationsByOrder = expIgnoreMutationsByOrder


class CenterElipsePattern:

    offsets = {'parent': 144, 'widthRadius': 152, 'expWidthRadius': 160, 'heightRadius': 168, 'expHeightRadius': 176, 'reverse': 184, 'expReverse': 192, 'display': 200, 'expDisplay': 208, 'displayCount': 216, 'expDisplayCount': 224, 'canSelectPoint': 232, 'expCanSelectPoint': 240, 'pointDisplay': 248, 'expPointDisplay': 256}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.CenterElipsePattern, widthRadius: System.Single, expWidthRadius: System.String, heightRadius: System.Single, expHeightRadius: System.String, reverse: System.Boolean, expReverse: System.String, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, displayCount: System.Int32, expDisplayCount: System.String, canSelectPoint: System.Boolean, expCanSelectPoint: System.String, pointDisplay: UnityEngine.GameObject, expPointDisplay: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.widthRadius = widthRadius
		self.expWidthRadius = expWidthRadius
		self.heightRadius = heightRadius
		self.expHeightRadius = expHeightRadius
		self.reverse = reverse
		self.expReverse = expReverse
		self.display = display
		self.expDisplay = expDisplay
		self.displayCount = displayCount
		self.expDisplayCount = expDisplayCount
		self.canSelectPoint = canSelectPoint
		self.expCanSelectPoint = expCanSelectPoint
		self.pointDisplay = pointDisplay
		self.expPointDisplay = expPointDisplay


class CheckTargetsWithoutOffsets:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.CheckTargetsWithoutOffsets, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class CirclePattern:

    offsets = {'parent': 144, 'radius': 152, 'expRadius': 160, 'reverse': 168, 'expReverse': 176, 'display': 184, 'expDisplay': 192, 'displayCount': 200, 'expDisplayCount': 208}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.CirclePattern, radius: System.Single, expRadius: System.String, reverse: System.Boolean, expReverse: System.String, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, displayCount: System.Int32, expDisplayCount: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.radius = radius
		self.expRadius = expRadius
		self.reverse = reverse
		self.expReverse = expReverse
		self.display = display
		self.expDisplay = expDisplay
		self.displayCount = displayCount
		self.expDisplayCount = expDisplayCount


class CirclePatternClose:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CirclePatternFirst:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CirclePatternLast:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CirclePatternStrong:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CloseTargetTrack:

    offsets = {'parent': 144, 'radius': 152, 'expRadius': 160, 'maxOffset': 168, 'expMaxOffset': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.CloseTargetTrack, radius: System.Single, expRadius: System.String, maxOffset: System.Single, expMaxOffset: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.radius = radius
		self.expRadius = expRadius
		self.maxOffset = maxOffset
		self.expMaxOffset = expMaxOffset


class CreateEffectWhileAttacking:

    offsets = {'parent': 128, 'effect': 136, 'expEffect': 144, 'exitEffect': 152, 'expExitEffect': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.CreateEffectWhileAttacking, effect: Assets.Scripts.Unity.Effects.Effect, expEffect: Assets.Scripts.Unity.Effects.Effect, exitEffect: Assets.Scripts.Unity.Effects.Effect, expExitEffect: Assets.Scripts.Unity.Effects.Effect, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.effect = effect
		self.expEffect = expEffect
		self.exitEffect = exitEffect
		self.expExitEffect = expExitEffect


class FarTargetTrack:

    offsets = {'parent': 144, 'radius': 152, 'expRadius': 160, 'donutRadius': 168, 'expDonutRadius': 176, 'maxOffset': 184, 'expMaxOffset': 192}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.FarTargetTrack, radius: System.Single, expRadius: System.String, donutRadius: System.Single, expDonutRadius: System.String, maxOffset: System.Single, expMaxOffset: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.radius = radius
		self.expRadius = expRadius
		self.donutRadius = donutRadius
		self.expDonutRadius = expDonutRadius
		self.maxOffset = maxOffset
		self.expMaxOffset = expMaxOffset


class FighterPilotPatternClose:

    offsets = {'parent': 144, 'offsetDistance': 152, 'expOffsetDistance': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.FighterPilotPatternClose, offsetDistance: System.Single, expOffsetDistance: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.offsetDistance = offsetDistance
		self.expOffsetDistance = expOffsetDistance


class FighterPilotPatternFirst:

    offsets = {'parent': 144, 'offsetDistance': 152, 'expOffsetDistance': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.FighterPilotPatternFirst, offsetDistance: System.Single, expOffsetDistance: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.offsetDistance = offsetDistance
		self.expOffsetDistance = expOffsetDistance


class FighterPilotPatternLast:

    offsets = {'parent': 144, 'offsetDistance': 152, 'expOffsetDistance': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.FighterPilotPatternLast, offsetDistance: System.Single, expOffsetDistance: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.offsetDistance = offsetDistance
		self.expOffsetDistance = expOffsetDistance


class FighterPilotPatternStrong:

    offsets = {'parent': 144, 'offsetDistance': 152, 'expOffsetDistance': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.FighterPilotPatternStrong, offsetDistance: System.Single, expOffsetDistance: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.offsetDistance = offsetDistance
		self.expOffsetDistance = expOffsetDistance


class FigureEightPattern:

    offsets = {'parent': 144, 'radius': 152, 'expRadius': 160, 'rotated': 168, 'expRotated': 176, 'display': 184, 'expDisplay': 192, 'displayCount': 200, 'expDisplayCount': 208}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.FigureEightPattern, radius: System.Single, expRadius: System.String, rotated: System.Boolean, expRotated: System.String, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, displayCount: System.Int32, expDisplayCount: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.radius = radius
		self.expRadius = expRadius
		self.rotated = rotated
		self.expRotated = expRotated
		self.display = display
		self.expDisplay = expDisplay
		self.displayCount = displayCount
		self.expDisplayCount = expDisplayCount


class FollowTouchSetting:

    offsets = {'parent': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.FollowTouchSetting, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class LockInPlaceSetting:

    offsets = {'parent': 144, 'display': 152, 'expDisplay': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.LockInPlaceSetting, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.display = display
		self.expDisplay = expDisplay


class NecromancerTargetTrackWithinRange:

    offsets = {'parent': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.NecromancerTargetTrackWithinRange, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class OffsetToTrackTarget:

    offsets = {'parent': 144, 'trackOffset': 152, 'expTrackOffset': 160, 'attack': 168, 'expAttack': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.OffsetToTrackTarget, trackOffset: System.Single, expTrackOffset: System.String, attack: Assets.Scripts.Unity.Towers.Behaviors.Attack.Attack, expAttack: Assets.Scripts.Unity.Towers.Behaviors.Attack.Attack, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.trackOffset = trackOffset
		self.expTrackOffset = expTrackOffset
		self.attack = attack
		self.expAttack = expAttack


class PathMovementFromScreenCenterPattern:

    offsets = {'parent': 144, 'radius': 152, 'expRadius': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.PathMovementFromScreenCenterPattern, radius: System.Single, expRadius: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.radius = radius
		self.expRadius = expRadius


class PatrolPointsSetting:

    offsets = {'parent': 144, 'pointSwitchDistance': 152, 'expPointSwitchDistance': 160, 'minimumPointDistance': 168, 'expMinimumPointDistance': 176, 'lineDelay': 184, 'expLineDelay': 192, 'dotSpacing': 200, 'expDotSpacing': 208, 'dotOffset': 216, 'expDotOffset': 224, 'display': 232, 'expDisplay': 240, 'lineDisplay': 248, 'expLineDisplay': 256}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.PatrolPointsSetting, pointSwitchDistance: System.Single, expPointSwitchDistance: System.String, minimumPointDistance: System.Single, expMinimumPointDistance: System.String, lineDelay: System.Single, expLineDelay: System.String, dotSpacing: System.Single, expDotSpacing: System.String, dotOffset: System.Single, expDotOffset: System.String, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, lineDisplay: UnityEngine.GameObject, expLineDisplay: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.pointSwitchDistance = pointSwitchDistance
		self.expPointSwitchDistance = expPointSwitchDistance
		self.minimumPointDistance = minimumPointDistance
		self.expMinimumPointDistance = expMinimumPointDistance
		self.lineDelay = lineDelay
		self.expLineDelay = expLineDelay
		self.dotSpacing = dotSpacing
		self.expDotSpacing = expDotSpacing
		self.dotOffset = dotOffset
		self.expDotOffset = expDotOffset
		self.display = display
		self.expDisplay = expDisplay
		self.lineDisplay = lineDisplay
		self.expLineDisplay = expLineDisplay


class PrioritiseRotation:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.PrioritiseRotation, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class PursuitSetting:

    offsets = {'parent': 144, 'pursuitDistance': 152, 'expPursuitDistance': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.PursuitSetting, pursuitDistance: System.Single, expPursuitDistance: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.pursuitDistance = pursuitDistance
		self.expPursuitDistance = expPursuitDistance


class PursuitSettingCustom:

    offsets = {'initialTargetType': 168, 'expInitialTargetType': 176, 'useParentForClose': 184, 'expUseParentForClose': 192, 'mustBeInRangeOfParent': 200, 'expMustBeInRangeOfParent': 208}    
    def __init__(self, initialTargetType: System.String, expInitialTargetType: System.String, useParentForClose: System.Boolean, expUseParentForClose: System.String, mustBeInRangeOfParent: System.Boolean, expMustBeInRangeOfParent: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.initialTargetType = initialTargetType
		self.expInitialTargetType = expInitialTargetType
		self.useParentForClose = useParentForClose
		self.expUseParentForClose = expUseParentForClose
		self.mustBeInRangeOfParent = mustBeInRangeOfParent
		self.expMustBeInRangeOfParent = expMustBeInRangeOfParent


class RandomPosition:

    offsets = {'parent': 144, 'minDistance': 152, 'expMinDistance': 160, 'maxDistance': 168, 'expMaxDistance': 176, 'targetRadius': 184, 'expTargetRadius': 192, 'pointDistance': 200, 'expPointDistance': 208, 'dontUseTowerPosition': 216, 'expDontUseTowerPosition': 224, 'areaType': 232, 'expAreaType': 240, 'useInverted': 248, 'expUseInverted': 256, 'ignoreTerrain': 264, 'expIgnoreTerrain': 272, 'idealDistanceWithinTrack': 280, 'expIdealDistanceWithinTrack': 288}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.RandomPosition, minDistance: System.Single, expMinDistance: System.String, maxDistance: System.Single, expMaxDistance: System.String, targetRadius: System.Single, expTargetRadius: System.String, pointDistance: System.Single, expPointDistance: System.String, dontUseTowerPosition: System.Boolean, expDontUseTowerPosition: System.String, areaType: System.String, expAreaType: System.String, useInverted: System.Boolean, expUseInverted: System.String, ignoreTerrain: System.Boolean, expIgnoreTerrain: System.String, idealDistanceWithinTrack: System.Single, expIdealDistanceWithinTrack: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.minDistance = minDistance
		self.expMinDistance = expMinDistance
		self.maxDistance = maxDistance
		self.expMaxDistance = expMaxDistance
		self.targetRadius = targetRadius
		self.expTargetRadius = expTargetRadius
		self.pointDistance = pointDistance
		self.expPointDistance = expPointDistance
		self.dontUseTowerPosition = dontUseTowerPosition
		self.expDontUseTowerPosition = expDontUseTowerPosition
		self.areaType = areaType
		self.expAreaType = expAreaType
		self.useInverted = useInverted
		self.expUseInverted = expUseInverted
		self.ignoreTerrain = ignoreTerrain
		self.expIgnoreTerrain = expIgnoreTerrain
		self.idealDistanceWithinTrack = idealDistanceWithinTrack
		self.expIdealDistanceWithinTrack = expIdealDistanceWithinTrack


class RandomPositionBasic:

    offsets = {'parent': 144, 'minRadius': 152, 'expMinRadius': 160, 'maxRadius': 168, 'expMaxRadius': 176, 'mapBorder': 184, 'expMapBorder': 192, 'useTerrainHeight': 200, 'expUseTerrainHeight': 208}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.RandomPositionBasic, minRadius: System.Single, expMinRadius: System.String, maxRadius: System.Single, expMaxRadius: System.String, mapBorder: System.Single, expMapBorder: System.String, useTerrainHeight: System.Boolean, expUseTerrainHeight: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.minRadius = minRadius
		self.expMinRadius = expMinRadius
		self.maxRadius = maxRadius
		self.expMaxRadius = expMaxRadius
		self.mapBorder = mapBorder
		self.expMapBorder = expMapBorder
		self.useTerrainHeight = useTerrainHeight
		self.expUseTerrainHeight = expUseTerrainHeight


class RandomTarget:

    offsets = {'parent': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.RandomTarget, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class RandomTargetTrack:

    offsets = {'parent': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.RandomTargetTrack, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class RotateSideToTarget:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.RotateSideToTarget, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class RotateToDefaultPosition:

    offsets = {'parent': 128, 'rotation': 136, 'expRotation': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.RotateToTarget, rotation: System.Single, expRotation: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.rotation = rotation
		self.expRotation = expRotation


class RotateToMiddleOfTargets:

    offsets = {'parent': 128, 'onlyRotateDuringThrow': 136, 'expOnlyRotateDuringThrow': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.RotateToMiddleOfTargets, onlyRotateDuringThrow: System.Boolean, expOnlyRotateDuringThrow: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.onlyRotateDuringThrow = onlyRotateDuringThrow
		self.expOnlyRotateDuringThrow = expOnlyRotateDuringThrow


class RotateToParent:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.RotateToParent, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class RotateToPointer:

    offsets = {'parent': 128, 'rate': 136, 'expRate': 144, 'rotateTower': 152, 'expRotateTower': 160, 'alignToWeaponEject': 168, 'expAlignToWeaponEject': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.RotateToPointer, rate: System.Single, expRate: System.String, rotateTower: System.Boolean, expRotateTower: System.String, alignToWeaponEject: System.Boolean, expAlignToWeaponEject: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.rate = rate
		self.expRate = expRate
		self.rotateTower = rotateTower
		self.expRotateTower = expRotateTower
		self.alignToWeaponEject = alignToWeaponEject
		self.expAlignToWeaponEject = expAlignToWeaponEject


class RotateToTarget:

    offsets = {'parent': 128, 'onlyRotateDuringThrow': 136, 'expOnlyRotateDuringThrow': 144, 'useThrowMarkerHeight': 152, 'expUseThrowMarkerHeight': 160, 'rotateOnlyOnThrow': 168, 'expRotateOnlyOnThrow': 176, 'additionalRotation': 184, 'expAdditionalRotation': 192, 'dontRotateTower': 200, 'expDontRotateTower': 208, 'useMainAttackRotation': 216, 'expUseMainAttackRotation': 224}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.RotateToTarget, onlyRotateDuringThrow: System.Boolean, expOnlyRotateDuringThrow: System.String, useThrowMarkerHeight: System.Boolean, expUseThrowMarkerHeight: System.String, rotateOnlyOnThrow: System.Boolean, expRotateOnlyOnThrow: System.String, additionalRotation: System.Int32, expAdditionalRotation: System.String, dontRotateTower: System.Boolean, expDontRotateTower: System.String, useMainAttackRotation: System.Boolean, expUseMainAttackRotation: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.onlyRotateDuringThrow = onlyRotateDuringThrow
		self.expOnlyRotateDuringThrow = expOnlyRotateDuringThrow
		self.useThrowMarkerHeight = useThrowMarkerHeight
		self.expUseThrowMarkerHeight = expUseThrowMarkerHeight
		self.rotateOnlyOnThrow = rotateOnlyOnThrow
		self.expRotateOnlyOnThrow = expRotateOnlyOnThrow
		self.additionalRotation = additionalRotation
		self.expAdditionalRotation = expAdditionalRotation
		self.dontRotateTower = dontRotateTower
		self.expDontRotateTower = expDontRotateTower
		self.useMainAttackRotation = useMainAttackRotation
		self.expUseMainAttackRotation = expUseMainAttackRotation


class RotateToTargetAirUnit:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RotateToTargetAttackOffset:

    offsets = {'ignoreParentRotationTime': 232, 'expIgnoreParentRotationTime': 240}    
    def __init__(self, ignoreParentRotationTime: System.Single, expIgnoreParentRotationTime: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.ignoreParentRotationTime = ignoreParentRotationTime
		self.expIgnoreParentRotationTime = expIgnoreParentRotationTime


class SetTargetIndexFromBase:

    offsets = {'parent': 128, 'indexOffset': 136, 'expIndexOffset': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.SetTargetIndexFromBase, indexOffset: System.Int32, expIndexOffset: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.indexOffset = indexOffset
		self.expIndexOffset = expIndexOffset


class SmartTargetTrack:

    offsets = {'parent': 144, 'radius': 152, 'expRadius': 160, 'maxOffset': 168, 'expMaxOffset': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.SmartTargetTrack, radius: System.Single, expRadius: System.String, maxOffset: System.Single, expMaxOffset: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.radius = radius
		self.expRadius = expRadius
		self.maxOffset = maxOffset
		self.expMaxOffset = expMaxOffset


class SubmergedTarget:

    offsets = {'parent': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.SubmergedTarget, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class TargetClose:

    offsets = {'parent': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.TargetClose, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class TargetCloseAirUnit:

    offsets = {'parent': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.TargetCloseAirUnit, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class TargetCloseSharedRange:

    offsets = {'parent': 144, 'isSharedRangeEnabled': 152, 'expIsSharedRangeEnabled': 160, 'isGlobalRange': 168, 'expIsGlobalRange': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.TargetCloseSharedRange, isSharedRangeEnabled: System.Boolean, expIsSharedRangeEnabled: System.String, isGlobalRange: System.Boolean, expIsGlobalRange: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.isSharedRangeEnabled = isSharedRangeEnabled
		self.expIsSharedRangeEnabled = expIsSharedRangeEnabled
		self.isGlobalRange = isGlobalRange
		self.expIsGlobalRange = expIsGlobalRange


class TargetDivideAndConquer:

    offsets = {'parent': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.TargetDivideAndConquer, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class TargetEliteTargetting:

    offsets = {'parent': 144, 'percentageThroughMap': 152, 'expPercentageThroughMap': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.TargetEliteTargetting, percentageThroughMap: System.Single, expPercentageThroughMap: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.percentageThroughMap = percentageThroughMap
		self.expPercentageThroughMap = expPercentageThroughMap


class TargetExpensiveFriendly:

    offsets = {'parent': 144, 'ignoreList': 152, 'expIgnoreList': 160, 'ignorePrevious': 168, 'expIgnorePrevious': 176, 'previousId': 184, 'expPreviousId': 192, 'useRange': 200, 'expUseRange': 208}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.TargetExpensiveFriendly, ignoreList: System.String, expIgnoreList: System.String, ignorePrevious: System.Boolean, expIgnorePrevious: System.String, previousId: System.String, expPreviousId: System.String, useRange: System.Boolean, expUseRange: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.ignoreList = ignoreList
		self.expIgnoreList = expIgnoreList
		self.ignorePrevious = ignorePrevious
		self.expIgnorePrevious = expIgnorePrevious
		self.previousId = previousId
		self.expPreviousId = expPreviousId
		self.useRange = useRange
		self.expUseRange = expUseRange


class TargetFirst:

    offsets = {'parent': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.TargetFirst, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class TargetFirstAirUnit:

    offsets = {'parent': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.TargetFirstAirUnit, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class TargetFirstSharedRange:

    offsets = {'parent': 144, 'isSharedRangeEnabled': 152, 'expIsSharedRangeEnabled': 160, 'isGlobalRange': 168, 'expIsGlobalRange': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.TargetFirstSharedRange, isSharedRangeEnabled: System.Boolean, expIsSharedRangeEnabled: System.String, isGlobalRange: System.Boolean, expIsGlobalRange: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.isSharedRangeEnabled = isSharedRangeEnabled
		self.expIsSharedRangeEnabled = expIsSharedRangeEnabled
		self.isGlobalRange = isGlobalRange
		self.expIsGlobalRange = expIsGlobalRange


class TargetFirstWithPreference:

    offsets = {'parent': 144, 'priorityBloonTags': 152, 'expPriorityBloonTags': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.TargetFirstWithPreference, priorityBloonTags: System.String, expPriorityBloonTags: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.priorityBloonTags = priorityBloonTags
		self.expPriorityBloonTags = expPriorityBloonTags


class TargetFriendly:

    offsets = {'parent': 144, 'ignoreList': 152, 'expIgnoreList': 160, 'mutationId': 168, 'expMutationId': 176, 'mustHaveWeapon': 184, 'expMustHaveWeapon': 192}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.TargetFriendly, ignoreList: System.String, expIgnoreList: System.String, mutationId: System.String, expMutationId: System.String, mustHaveWeapon: System.Boolean, expMustHaveWeapon: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.ignoreList = ignoreList
		self.expIgnoreList = expIgnoreList
		self.mutationId = mutationId
		self.expMutationId = expMutationId
		self.mustHaveWeapon = mustHaveWeapon
		self.expMustHaveWeapon = expMustHaveWeapon


class TargetGrapplable:

    offsets = {'parent': 144, 'canHitZomg': 152, 'expCanHitZomg': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.TargetGrapplable, canHitZomg: System.Boolean, expCanHitZomg: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.canHitZomg = canHitZomg
		self.expCanHitZomg = expCanHitZomg


class TargetInFrontOfAirUnit:

    offsets = {'parent': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.TargetInFrontOfAirUnit, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class TargetIndependant:

    offsets = {'parent': 144, 'targetProvider': 152, 'expTargetProvider': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.TargetIndependant, targetProvider: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behavior, expTargetProvider: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behavior, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.targetProvider = targetProvider
		self.expTargetProvider = expTargetProvider


class TargetLast:

    offsets = {'parent': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.TargetLast, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class TargetLastAirUnit:

    offsets = {'parent': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.TargetLastAirUnit, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class TargetLastSharedRange:

    offsets = {'parent': 144, 'isSharedRangeEnabled': 152, 'expIsSharedRangeEnabled': 160, 'isGlobalRange': 168, 'expIsGlobalRange': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.TargetLastSharedRange, isSharedRangeEnabled: System.Boolean, expIsSharedRangeEnabled: System.String, isGlobalRange: System.Boolean, expIsGlobalRange: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.isSharedRangeEnabled = isSharedRangeEnabled
		self.expIsSharedRangeEnabled = expIsSharedRangeEnabled
		self.isGlobalRange = isGlobalRange
		self.expIsGlobalRange = expIsGlobalRange


class TargetLeftHand:

    offsets = {'parent': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.TargetLeftHand, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class TargetMoab:

    offsets = {'parent': 144, 'findStrongest': 152, 'expFindStrongest': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.TargetMoab, findStrongest: System.Boolean, expFindStrongest: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.findStrongest = findStrongest
		self.expFindStrongest = expFindStrongest


class TargetOpposite:

    offsets = {'parent': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.TargetOpposite, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class TargetPointer:

    offsets = {'parent': 144, 'customName': 152, 'expCustomName': 160, 'setOnAttached': 168, 'expSetOnAttached': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.TargetPointer, customName: System.String, expCustomName: System.String, setOnAttached: System.Boolean, expSetOnAttached: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.customName = customName
		self.expCustomName = expCustomName
		self.setOnAttached = setOnAttached
		self.expSetOnAttached = expSetOnAttached


class TargetRightHand:

    offsets = {'parent': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.TargetRightHand, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class TargetSelectedPoint:

    offsets = {'parent': 144, 'display': 152, 'expDisplay': 160, 'scale': 168, 'expScale': 176, 'customName': 184, 'expCustomName': 192}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.TargetSelectedPoint, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, scale: System.Single, expScale: System.String, customName: System.String, expCustomName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.display = display
		self.expDisplay = expDisplay
		self.scale = scale
		self.expScale = expScale
		self.customName = customName
		self.expCustomName = expCustomName


class TargetStaggeredShots:

    offsets = {'parent': 200, 'filterTower': 208}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.TargetStaggeredShots, filterTower: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.filterTower = filterTower


class TargetStrong:

    offsets = {'parent': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.TargetStrong, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class TargetStrongAirUnit:

    offsets = {'parent': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.TargetStrongAirUnit, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class TargetStrongSharedRange:

    offsets = {'parent': 144, 'isSharedRangeEnabled': 152, 'expIsSharedRangeEnabled': 160, 'isGlobalRange': 168, 'expIsGlobalRange': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.TargetStrongSharedRange, isSharedRangeEnabled: System.Boolean, expIsSharedRangeEnabled: System.String, isGlobalRange: System.Boolean, expIsGlobalRange: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.isSharedRangeEnabled = isSharedRangeEnabled
		self.expIsSharedRangeEnabled = expIsSharedRangeEnabled
		self.isGlobalRange = isGlobalRange
		self.expIsGlobalRange = expIsGlobalRange


class TargetTag:

    offsets = {'parent': 144, 'tagValue': 152, 'expTagValue': 160, 'findStrongest': 168, 'expFindStrongest': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.TargetTag, tagValue: System.String, expTagValue: System.String, findStrongest: System.Boolean, expFindStrongest: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.tagValue = tagValue
		self.expTagValue = expTagValue
		self.findStrongest = findStrongest
		self.expFindStrongest = expFindStrongest


class TargetTrack:

    offsets = {'parent': 144, 'maxOffset': 152, 'expMaxOffset': 160, 'expOnlyTargetPathsWithBloons': 168, 'onlyTargetPathsWithBloons': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.TargetTrack, maxOffset: System.Single, expMaxOffset: System.String, expOnlyTargetPathsWithBloons: System.String, onlyTargetPathsWithBloons: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.maxOffset = maxOffset
		self.expMaxOffset = expMaxOffset
		self.expOnlyTargetPathsWithBloons = expOnlyTargetPathsWithBloons
		self.onlyTargetPathsWithBloons = onlyTargetPathsWithBloons


class TargetTrackOrDefault:

    offsets = {'parent': 144, 'radius': 152, 'expRadius': 160, 'useTowerRange': 168, 'expUseTowerRange': 176, 'forceTargetTrack': 184, 'expForceTargetTrack': 192, 'useClosestTrack': 200, 'expUseClosestTrack': 208, 'maxTrackOffset': 216, 'expMaxTrackOffset': 224}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.TargetTrackOrDefault, radius: System.Single, expRadius: System.String, useTowerRange: System.Boolean, expUseTowerRange: System.String, forceTargetTrack: System.Boolean, expForceTargetTrack: System.String, useClosestTrack: System.Boolean, expUseClosestTrack: System.String, maxTrackOffset: System.Single, expMaxTrackOffset: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.radius = radius
		self.expRadius = expRadius
		self.useTowerRange = useTowerRange
		self.expUseTowerRange = expUseTowerRange
		self.forceTargetTrack = forceTargetTrack
		self.expForceTargetTrack = expForceTargetTrack
		self.useClosestTrack = useClosestTrack
		self.expUseClosestTrack = expUseClosestTrack
		self.maxTrackOffset = maxTrackOffset
		self.expMaxTrackOffset = expMaxTrackOffset


class TargetTrackOrDefaultAcidPool:

    offsets = {'parent': 144, 'radius': 152, 'expRadius': 160, 'useTowerRange': 168, 'expUseTowerRange': 176, 'isActive': 184, 'expIsActive': 192}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.TargetTrackOrDefaultAcidPool, radius: System.Single, expRadius: System.String, useTowerRange: System.Boolean, expUseTowerRange: System.String, isActive: System.Boolean, expIsActive: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.radius = radius
		self.expRadius = expRadius
		self.useTowerRange = useTowerRange
		self.expUseTowerRange = expUseTowerRange
		self.isActive = isActive
		self.expIsActive = expIsActive


class TargetTypeBehavior:

    offsets = {'isSelectable': 128, 'expIsSelectable': 136}    
    def __init__(self, isSelectable: System.Boolean, expIsSelectable: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.isSelectable = isSelectable
		self.expIsSelectable = expIsSelectable


class TargetZoneDefence:

    offsets = {'parent': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.TargetZoneDefence, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class UsePresetTarget:

    offsets = {'parent': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.UsePresetTarget, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class UseTowerRange:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.UseTowerRange, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class WingmonkeyPattern:

    offsets = {'parent': 144, 'speed': 152, 'expSpeed': 160, 'turningSpeed': 168, 'expTurningSpeed': 176, 'minDistanceToTargetBeforeFlyover': 184, 'expMinDistanceToTargetBeforeFlyover': 192, 'minDistanceOfFlyover': 200, 'expMinDistanceOfFlyover': 208, 'bankAngleMax': 216, 'expBankAngleMax': 224, 'bankSmoothness': 232, 'expBankSmoothness': 240, 'updateDelay': 248, 'expUpdateDelay': 256, 'maximumAdjacentTargetAngle': 264, 'expMaximumAdjacentTargetAngle': 272, 'overshootDistance': 280, 'expOvershootDistance': 288}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.WingmonkeyPattern, speed: System.Single, expSpeed: System.String, turningSpeed: System.Single, expTurningSpeed: System.String, minDistanceToTargetBeforeFlyover: System.Single, expMinDistanceToTargetBeforeFlyover: System.String, minDistanceOfFlyover: System.Single, expMinDistanceOfFlyover: System.String, bankAngleMax: System.Single, expBankAngleMax: System.String, bankSmoothness: System.Single, expBankSmoothness: System.String, updateDelay: System.Single, expUpdateDelay: System.String, maximumAdjacentTargetAngle: System.Single, expMaximumAdjacentTargetAngle: System.String, overshootDistance: System.Single, expOvershootDistance: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.speed = speed
		self.expSpeed = expSpeed
		self.turningSpeed = turningSpeed
		self.expTurningSpeed = expTurningSpeed
		self.minDistanceToTargetBeforeFlyover = minDistanceToTargetBeforeFlyover
		self.expMinDistanceToTargetBeforeFlyover = expMinDistanceToTargetBeforeFlyover
		self.minDistanceOfFlyover = minDistanceOfFlyover
		self.expMinDistanceOfFlyover = expMinDistanceOfFlyover
		self.bankAngleMax = bankAngleMax
		self.expBankAngleMax = expBankAngleMax
		self.bankSmoothness = bankSmoothness
		self.expBankSmoothness = expBankSmoothness
		self.updateDelay = updateDelay
		self.expUpdateDelay = expUpdateDelay
		self.maximumAdjacentTargetAngle = maximumAdjacentTargetAngle
		self.expMaximumAdjacentTargetAngle = expMaximumAdjacentTargetAngle
		self.overshootDistance = overshootDistance
		self.expOvershootDistance = expOvershootDistance


class PlacementAreaTypeHeightSetting:

    offsets = {'parent': 136, 'landHeight': 144, 'expLandHeight': 152, 'waterHeight': 160, 'expwaterHeight': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Behaviors.PlacementBehaviors.PlacementAreaTypeHeightSetting, landHeight: System.Single, expLandHeight: System.String, waterHeight: System.Single, expwaterHeight: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.landHeight = landHeight
		self.expLandHeight = expLandHeight
		self.waterHeight = waterHeight
		self.expwaterHeight = expwaterHeight


class PlacementBehavior:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AdoraEmission:

    offsets = {'parent': 128, 'count': 136, 'expCount': 144, 'angleBetween': 152, 'expAngleBetween': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Emissions.AdoraEmission, count: System.Int32, expCount: System.String, angleBetween: System.Single, expAngleBetween: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.count = count
		self.expCount = expCount
		self.angleBetween = angleBetween
		self.expAngleBetween = expAngleBetween


class AlternatingArcEmission:

    offsets = {'parent': 128, 'useParentRotation': 136, 'expUseParentRotation': 144, 'angle': 152, 'expAngle': 160, 'count': 168, 'expCount': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Emissions.AlternatingArcEmission, useParentRotation: System.Boolean, expUseParentRotation: System.String, angle: System.Single, expAngle: System.String, count: System.Single, expCount: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.useParentRotation = useParentRotation
		self.expUseParentRotation = expUseParentRotation
		self.angle = angle
		self.expAngle = expAngle
		self.count = count
		self.expCount = expCount


class ArcEmission:

    offsets = {'parent': 128, 'angle': 136, 'expAngle': 144, 'offset': 152, 'expOffset': 160, 'count': 168, 'expCount': 176, 'ignoreTowerRotation': 184, 'expIgnoreTowerRotation': 192, 'useProjectileRotation': 200, 'expUseProjectileRotation': 208}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Emissions.ArcEmission, angle: System.Single, expAngle: System.String, offset: System.Single, expOffset: System.String, count: System.Single, expCount: System.String, ignoreTowerRotation: System.Boolean, expIgnoreTowerRotation: System.String, useProjectileRotation: System.Boolean, expUseProjectileRotation: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.angle = angle
		self.expAngle = expAngle
		self.offset = offset
		self.expOffset = expOffset
		self.count = count
		self.expCount = expCount
		self.ignoreTowerRotation = ignoreTowerRotation
		self.expIgnoreTowerRotation = expIgnoreTowerRotation
		self.useProjectileRotation = useProjectileRotation
		self.expUseProjectileRotation = expUseProjectileRotation


class Emission:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class EmissionBehavior:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class EmissionClosestOffset:

    offsets = {'parent': 128, 'rotateProjectileWithTower': 136, 'expRotateProjectileWithTower': 144, 'animationOriginState': 152, 'expAnimationOriginState': 160, 'effect': 168, 'expEffect': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Emissions.EmissionClosestOffset, rotateProjectileWithTower: System.Boolean, expRotateProjectileWithTower: System.String, animationOriginState: System.Int32, expAnimationOriginState: System.String, effect: Assets.Scripts.Unity.Effects.Effect, expEffect: Assets.Scripts.Unity.Effects.Effect, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.rotateProjectileWithTower = rotateProjectileWithTower
		self.expRotateProjectileWithTower = expRotateProjectileWithTower
		self.animationOriginState = animationOriginState
		self.expAnimationOriginState = expAnimationOriginState
		self.effect = effect
		self.expEffect = expEffect


class EmissionOverTime:

    offsets = {'parent': 128, 'count': 136, 'expCount': 144, 'timeBetween': 152, 'expTimeBetween': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Emissions.EmissionOverTime, count: System.Int32, expCount: System.String, timeBetween: System.Single, expTimeBetween: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.count = count
		self.expCount = expCount
		self.timeBetween = timeBetween
		self.expTimeBetween = expTimeBetween


class EmissionWithOffsets:

    offsets = {'parent': 128, 'projectileCount': 136, 'expProjectileCount': 144, 'rotateProjectileWithTower': 152, 'expRotateProjectileWithTower': 160, 'randomRotationCone': 168, 'expRandomRotationCone': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Emissions.EmissionWithOffsets, projectileCount: System.Int32, expProjectileCount: System.String, rotateProjectileWithTower: System.Boolean, expRotateProjectileWithTower: System.String, randomRotationCone: System.Single, expRandomRotationCone: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.projectileCount = projectileCount
		self.expProjectileCount = expProjectileCount
		self.rotateProjectileWithTower = rotateProjectileWithTower
		self.expRotateProjectileWithTower = expRotateProjectileWithTower
		self.randomRotationCone = randomRotationCone
		self.expRandomRotationCone = expRandomRotationCone


class GrappleEmission:

    offsets = {'parent': 128, 'numGrapples': 136, 'expNumGrapples': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Emissions.GrappleEmission, numGrapples: System.Single, expNumGrapples: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.numGrapples = numGrapples
		self.expNumGrapples = expNumGrapples


class InstantDamageEmission:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Emissions.InstantDamageEmission, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class LerpEmission:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Emissions.LerpEmission, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class LineProjectileEmission:

    offsets = {'parent': 128, 'useTargetAsEndPoint': 136, 'expUseTargetAsEndPoint': 144, 'display': 152, 'expDisplay': 160, 'displayLifetime': 168, 'expDisplayLifetime': 176, 'ignoreBlockers': 184, 'expIgnoreBlockers': 192, 'effectAtEnd': 200, 'expEffectAtEnd': 208, 'effectAtEndRate': 216, 'expEffectAtEndRate': 224, 'dontUseTowerPosition': 232, 'expDontUseTowerPosition': 240, 'useTowerRotation': 248, 'expUseTowerRotation': 256, 'useLengthSpeed': 264, 'expUseLengthSpeed': 272, 'lengthSpeed': 280, 'expLengthSpeed': 288, 'projectileAtEnd': 296, 'emissionAtEnd': 304, 'expEmissionAtEnd': 312, 'endProjectileSharesPierce': 320, 'expEndProjectileSharesPierce': 328}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Emissions.LineProjectileEmission, useTargetAsEndPoint: System.Boolean, expUseTargetAsEndPoint: System.String, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, displayLifetime: System.Single, expDisplayLifetime: System.String, ignoreBlockers: System.Boolean, expIgnoreBlockers: System.String, effectAtEnd: Assets.Scripts.Unity.Effects.Effect, expEffectAtEnd: Assets.Scripts.Unity.Effects.Effect, effectAtEndRate: System.Single, expEffectAtEndRate: System.String, dontUseTowerPosition: System.Boolean, expDontUseTowerPosition: System.String, useTowerRotation: System.Boolean, expUseTowerRotation: System.String, useLengthSpeed: System.Boolean, expUseLengthSpeed: System.String, lengthSpeed: System.Single, expLengthSpeed: System.String, projectileAtEnd: Assets.Scripts.Unity.Towers.Projectiles.Projectile, emissionAtEnd: Assets.Scripts.Unity.Towers.Emissions.Emission, expEmissionAtEnd: Assets.Scripts.Unity.Towers.Emissions.Emission, endProjectileSharesPierce: System.Boolean, expEndProjectileSharesPierce: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.useTargetAsEndPoint = useTargetAsEndPoint
		self.expUseTargetAsEndPoint = expUseTargetAsEndPoint
		self.display = display
		self.expDisplay = expDisplay
		self.displayLifetime = displayLifetime
		self.expDisplayLifetime = expDisplayLifetime
		self.ignoreBlockers = ignoreBlockers
		self.expIgnoreBlockers = expIgnoreBlockers
		self.effectAtEnd = effectAtEnd
		self.expEffectAtEnd = expEffectAtEnd
		self.effectAtEndRate = effectAtEndRate
		self.expEffectAtEndRate = expEffectAtEndRate
		self.dontUseTowerPosition = dontUseTowerPosition
		self.expDontUseTowerPosition = expDontUseTowerPosition
		self.useTowerRotation = useTowerRotation
		self.expUseTowerRotation = expUseTowerRotation
		self.useLengthSpeed = useLengthSpeed
		self.expUseLengthSpeed = expUseLengthSpeed
		self.lengthSpeed = lengthSpeed
		self.expLengthSpeed = expLengthSpeed
		self.projectileAtEnd = projectileAtEnd
		self.emissionAtEnd = emissionAtEnd
		self.expEmissionAtEnd = expEmissionAtEnd
		self.endProjectileSharesPierce = endProjectileSharesPierce
		self.expEndProjectileSharesPierce = expEndProjectileSharesPierce


class MultipleTrackEmission:

    offsets = {'parent': 128, 'offset': 136, 'count': 140, 'expOffset': 144, 'expCount': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Emissions.MultipleTrackEmission, offset: System.Single, count: System.Single, expOffset: System.String, expCount: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.offset = offset
		self.count = count
		self.expOffset = expOffset
		self.expCount = expCount


class NecromancerEmission:

    offsets = {'parent': 128, 'maxRbeStored': 136, 'expMaxRbeStored': 144, 'maxRbeSpawnedPerSecond': 152, 'expMaxRbeSpawnedPerSecond': 160, 'minBloonsSpawnedPerWave': 168, 'expMinBloonsSpawnedPerWave': 176, 'maxBloonsSpawnedPerWave': 184, 'expMaxBloonsSpawnedPerWave': 192, 'maxPiercePerBloon': 200, 'expMaxPiercePerBloon': 208, 'maxPathRandomRange': 216, 'expMaxPathRandomRange': 224, 'maxPathOffset': 232, 'expMaxPathOffset': 240, 'rateStackMax': 248, 'expRateStackMax': 256, 'rateRbePerStack': 264, 'expRateRbePerStack': 272, 'damageStackMax': 280, 'expDamageStackMax': 288, 'damageRbePerStack': 296, 'expDamageRbePerStack': 304, 'roundsBeforeDecay': 312, 'expRoundsBeforeDecay': 320}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Emissions.GrappleEmission, maxRbeStored: System.Int32, expMaxRbeStored: System.String, maxRbeSpawnedPerSecond: System.Int32, expMaxRbeSpawnedPerSecond: System.String, minBloonsSpawnedPerWave: System.Int32, expMinBloonsSpawnedPerWave: System.String, maxBloonsSpawnedPerWave: System.Int32, expMaxBloonsSpawnedPerWave: System.String, maxPiercePerBloon: System.Int32, expMaxPiercePerBloon: System.String, maxPathRandomRange: System.Int32, expMaxPathRandomRange: System.String, maxPathOffset: System.Int32, expMaxPathOffset: System.String, rateStackMax: System.Int32, expRateStackMax: System.String, rateRbePerStack: System.Int32, expRateRbePerStack: System.String, damageStackMax: System.Int32, expDamageStackMax: System.String, damageRbePerStack: System.Int32, expDamageRbePerStack: System.String, roundsBeforeDecay: System.Int32, expRoundsBeforeDecay: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.maxRbeStored = maxRbeStored
		self.expMaxRbeStored = expMaxRbeStored
		self.maxRbeSpawnedPerSecond = maxRbeSpawnedPerSecond
		self.expMaxRbeSpawnedPerSecond = expMaxRbeSpawnedPerSecond
		self.minBloonsSpawnedPerWave = minBloonsSpawnedPerWave
		self.expMinBloonsSpawnedPerWave = expMinBloonsSpawnedPerWave
		self.maxBloonsSpawnedPerWave = maxBloonsSpawnedPerWave
		self.expMaxBloonsSpawnedPerWave = expMaxBloonsSpawnedPerWave
		self.maxPiercePerBloon = maxPiercePerBloon
		self.expMaxPiercePerBloon = expMaxPiercePerBloon
		self.maxPathRandomRange = maxPathRandomRange
		self.expMaxPathRandomRange = expMaxPathRandomRange
		self.maxPathOffset = maxPathOffset
		self.expMaxPathOffset = expMaxPathOffset
		self.rateStackMax = rateStackMax
		self.expRateStackMax = expRateStackMax
		self.rateRbePerStack = rateRbePerStack
		self.expRateRbePerStack = expRateRbePerStack
		self.damageStackMax = damageStackMax
		self.expDamageStackMax = expDamageStackMax
		self.damageRbePerStack = damageRbePerStack
		self.expDamageRbePerStack = expDamageRbePerStack
		self.roundsBeforeDecay = roundsBeforeDecay
		self.expRoundsBeforeDecay = expRoundsBeforeDecay


class ParallelEmission:

    offsets = {'parent': 128, 'spreadLength': 136, 'expSpreadLength': 144, 'yOffset': 152, 'expYOffset': 160, 'count': 168, 'expCount': 176, 'linear': 184, 'expLinear': 192}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Emissions.ParallelEmission, spreadLength: System.Single, expSpreadLength: System.String, yOffset: System.Single, expYOffset: System.String, count: System.Single, expCount: System.String, linear: System.Boolean, expLinear: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.spreadLength = spreadLength
		self.expSpreadLength = expSpreadLength
		self.yOffset = yOffset
		self.expYOffset = expYOffset
		self.count = count
		self.expCount = expCount
		self.linear = linear
		self.expLinear = expLinear


class PointEmission:

    offsets = {'parent': 128, 'checkLineOfSight': 136, 'expCheckLineOfSight': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Emissions.PointEmission, checkLineOfSight: System.Boolean, expCheckLineOfSight: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.checkLineOfSight = checkLineOfSight
		self.expCheckLineOfSight = expCheckLineOfSight


class PrinceOfDarknessEmission:

    offsets = {'parent': 128, 'minPiercePerBloon': 136, 'expMinPiercePerBloon': 144, 'maxPathRandomRange': 152, 'expMaxPathRandomRange': 160, 'maxPathOffset': 168, 'expMaxPathOffset': 176, 'alternateProjectile': 184, 'expAlternateProjectile': 192}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Emissions.GrappleEmission, minPiercePerBloon: System.Int32, expMinPiercePerBloon: System.String, maxPathRandomRange: System.Int32, expMaxPathRandomRange: System.String, maxPathOffset: System.Int32, expMaxPathOffset: System.String, alternateProjectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, expAlternateProjectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.minPiercePerBloon = minPiercePerBloon
		self.expMinPiercePerBloon = expMinPiercePerBloon
		self.maxPathRandomRange = maxPathRandomRange
		self.expMaxPathRandomRange = expMaxPathRandomRange
		self.maxPathOffset = maxPathOffset
		self.expMaxPathOffset = expMaxPathOffset
		self.alternateProjectile = alternateProjectile
		self.expAlternateProjectile = expAlternateProjectile


class RandomArcEmission:

    offsets = {'parent': 128, 'angle': 136, 'expAngle': 144, 'count': 152, 'expCount': 160, 'offset': 168, 'expOffset': 176, 'randomAngle': 184, 'expRandomAngle': 192, 'startOffset': 200, 'expStartOffset': 208}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Emissions.RandomArcEmission, angle: System.Single, expAngle: System.String, count: System.Single, expCount: System.String, offset: System.Single, expOffset: System.String, randomAngle: System.Single, expRandomAngle: System.String, startOffset: System.Single, expStartOffset: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.angle = angle
		self.expAngle = expAngle
		self.count = count
		self.expCount = expCount
		self.offset = offset
		self.expOffset = expOffset
		self.randomAngle = randomAngle
		self.expRandomAngle = expRandomAngle
		self.startOffset = startOffset
		self.expStartOffset = expStartOffset


class RandomEmission:

    offsets = {'parent': 128, 'angle': 136, 'count': 140, 'startOffset': 144, 'expAngle': 152, 'expCount': 160, 'expStartOffset': 168, 'useSpeedMultiplier': 176, 'expUseSpeedMultiplier': 184, 'speedMultiplierMin': 192, 'expSpeedMultiplierMin': 200, 'speedMultiplierMax': 208, 'expSpeedMultiplierMax': 216, 'ejectPointRandomness': 224, 'expEjectPointRandomness': 232, 'useMainAttackRotation': 240, 'expUseMainAttackRotation': 248}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Emissions.RandomEmission, angle: System.Single, count: System.Single, startOffset: System.Single, expAngle: System.String, expCount: System.String, expStartOffset: System.String, useSpeedMultiplier: System.Boolean, expUseSpeedMultiplier: System.String, speedMultiplierMin: System.Single, expSpeedMultiplierMin: System.String, speedMultiplierMax: System.Single, expSpeedMultiplierMax: System.String, ejectPointRandomness: System.Single, expEjectPointRandomness: System.String, useMainAttackRotation: System.Boolean, expUseMainAttackRotation: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.angle = angle
		self.count = count
		self.startOffset = startOffset
		self.expAngle = expAngle
		self.expCount = expCount
		self.expStartOffset = expStartOffset
		self.useSpeedMultiplier = useSpeedMultiplier
		self.expUseSpeedMultiplier = expUseSpeedMultiplier
		self.speedMultiplierMin = speedMultiplierMin
		self.expSpeedMultiplierMin = expSpeedMultiplierMin
		self.speedMultiplierMax = speedMultiplierMax
		self.expSpeedMultiplierMax = expSpeedMultiplierMax
		self.ejectPointRandomness = ejectPointRandomness
		self.expEjectPointRandomness = expEjectPointRandomness
		self.useMainAttackRotation = useMainAttackRotation
		self.expUseMainAttackRotation = expUseMainAttackRotation


class RandomRotationEmission:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Emissions.RandomRotationEmission, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class RandomTargetSpread:

    offsets = {'parent': 128, 'spread': 136, 'expSpread': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Emissions.RandomTargetSpread, spread: System.Single, expSpread: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.spread = spread
		self.expSpread = expSpread


class SendToBank:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Emissions.SendToBank, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class SingleEmission:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Emissions.SingleEmission, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class SingleEmissionAtTower:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Emissions.SingleEmissionAtTower, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class SingleEmissionDisplayOffset:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Emissions.SingleEmissionDisplayOffset, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class SingleEmmisionTowardsTarget:

    offsets = {'parent': 128, 'offset': 136, 'expOffset': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Emissions.SingleEmmisionTowardsTarget, offset: System.Single, expOffset: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.offset = offset
		self.expOffset = expOffset


class Filter:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class FilterAll:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Filters.FilterAll, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class FilterAllExceptTarget:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Filters.FilterAllExceptTarget, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class FilterAlternateWeaponTargetAngle:

    offsets = {'parent': 128, 'fieldOfView': 136, 'expFieldOfView': 144, 'baseTowerRotationOffset': 152, 'expBaseTowerRotationOffset': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Filters.FilterAlternateWeaponTargetAngle, fieldOfView: System.Single, expFieldOfView: System.String, baseTowerRotationOffset: System.Single, expBaseTowerRotationOffset: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.fieldOfView = fieldOfView
		self.expFieldOfView = expFieldOfView
		self.baseTowerRotationOffset = baseTowerRotationOffset
		self.expBaseTowerRotationOffset = expBaseTowerRotationOffset


class FilterBloonIfDamageType:

    offsets = {'parent': 128, 'ifCantHitBloonProperty': 136, 'expIfCantHitBloonProperty': 144, 'damage': 152, 'expDamage': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Filters.FilterBloonIfDamageType, ifCantHitBloonProperty: System.String, expIfCantHitBloonProperty: System.String, damage: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.Damage, expDamage: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.Damage, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.ifCantHitBloonProperty = ifCantHitBloonProperty
		self.expIfCantHitBloonProperty = expIfCantHitBloonProperty
		self.damage = damage
		self.expDamage = expDamage


class FilterCollisionWhileMoving:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Filters.FilterCollisionWhileMoving, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class FilterFrozenBloons:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Filters.FilterFrozenBloons, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class FilterGlueLevel:

    offsets = {'parent': 128, 'glueLevel': 136, 'expGlueLevel': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Filters.FilterGlueLevel, glueLevel: System.Int32, expGlueLevel: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.glueLevel = glueLevel
		self.expGlueLevel = expGlueLevel


class FilterInvisible:

    offsets = {'parent': 128, 'isActive': 136, 'expIsActive': 144, 'ignoreBroadPhase': 152, 'expIgnoreBroadPhase': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Filters.FilterInvisible, isActive: System.String, expIsActive: System.String, ignoreBroadPhase: System.String, expIgnoreBroadPhase: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.isActive = isActive
		self.expIsActive = expIsActive
		self.ignoreBroadPhase = ignoreBroadPhase
		self.expIgnoreBroadPhase = expIgnoreBroadPhase


class FilterInvisibleSubIntel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class FilterMoab:

    offsets = {'parent': 128, 'flip': 136, 'expFlip': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Filters.FilterMoab, flip: System.Boolean, expFlip: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.flip = flip
		self.expFlip = expFlip


class FilterMutatedTarget:

    offsets = {'parent': 128, 'mutationId': 136, 'expMutationId': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Filters.FilterMutatedTarget, mutationId: System.String, expMutationId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.mutationId = mutationId
		self.expMutationId = expMutationId


class FilterOfftrack:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Filters.FilterOfftrack, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class FilterOnlyCamoIn:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Filters.FilterOnlyCamoIn, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class FilterOutBloon:

    offsets = {'parent': 128, 'bloonId': 136, 'expBloonId': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Filters.FilterOutBloon, bloonId: System.String, expBloonId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.bloonId = bloonId
		self.expBloonId = expBloonId


class FilterOutOffscreen:

    offsets = {'parent': 128, 'includeBloonRadius': 136, 'expIncludeBloonRadius': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Filters.FilterOutOffscreen, includeBloonRadius: System.Boolean, expIncludeBloonRadius: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.includeBloonRadius = includeBloonRadius
		self.expIncludeBloonRadius = expIncludeBloonRadius


class FilterOutTag:

    offsets = {'parent': 128, 'bloonTag': 136, 'expBloonTag': 144, 'disableWhenSupportMutatorID': 152, 'expDisableWhenSupportMutatorID': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Filters.FilterOutTag, bloonTag: System.String, expBloonTag: System.String, disableWhenSupportMutatorID: System.String, expDisableWhenSupportMutatorID: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.bloonTag = bloonTag
		self.expBloonTag = expBloonTag
		self.disableWhenSupportMutatorID = disableWhenSupportMutatorID
		self.expDisableWhenSupportMutatorID = expDisableWhenSupportMutatorID


class FilterOveridingMutatedTarget:

    offsets = {'parent': 128, 'mutationOverideOrder': 136, 'expMutationOverideOrder': 144, 'highestPriorityMutationId': 152, 'expHighestPriorityMutationId': 160, 'defaultMutationId': 168, 'expDefaultMutationId': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Filters.FilterOveridingMutatedTarget, mutationOverideOrder: System.String, expMutationOverideOrder: System.String, highestPriorityMutationId: System.String, expHighestPriorityMutationId: System.String, defaultMutationId: System.String, expDefaultMutationId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.mutationOverideOrder = mutationOverideOrder
		self.expMutationOverideOrder = expMutationOverideOrder
		self.highestPriorityMutationId = highestPriorityMutationId
		self.expHighestPriorityMutationId = expHighestPriorityMutationId
		self.defaultMutationId = defaultMutationId
		self.expDefaultMutationId = expDefaultMutationId


class FilterParentTowerRange:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Filters.FilterParentTowerRange, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class FilterTargetAngle:

    offsets = {'parent': 128, 'fieldOfView': 136, 'expFieldOfView': 144, 'baseTowerRotationOffset': 152, 'expBaseTowerRotationOffset': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Filters.FilterTargetAngle, fieldOfView: System.Single, expFieldOfView: System.String, baseTowerRotationOffset: System.Single, expBaseTowerRotationOffset: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.fieldOfView = fieldOfView
		self.expFieldOfView = expFieldOfView
		self.baseTowerRotationOffset = baseTowerRotationOffset
		self.expBaseTowerRotationOffset = expBaseTowerRotationOffset


class FilterWithChance:

    offsets = {'parent': 128, 'filterPercentage': 136, 'expFilterPercentage': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Filters.FilterWithChance, filterPercentage: System.Single, expFilterPercentage: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.filterPercentage = filterPercentage
		self.expFilterPercentage = expFilterPercentage


class FilterWithTag:

    offsets = {'parent': 128, 'bloonTag': 136, 'expBloonTag': 144, 'inclusive': 152, 'expInclusive': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Filters.FilterWithTag, bloonTag: System.String, expBloonTag: System.String, inclusive: System.String, expInclusive: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.bloonTag = bloonTag
		self.expBloonTag = expBloonTag
		self.inclusive = inclusive
		self.expInclusive = expInclusive


class FilterWithTags:

    offsets = {'parent': 128, 'bloonTags': 136, 'expBloonTags': 144, 'inclusive': 152, 'expInclusive': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Filters.FilterWithTags, bloonTags: System.String, expBloonTags: System.String, inclusive: System.Boolean, expInclusive: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.bloonTags = bloonTags
		self.expBloonTags = expBloonTags
		self.inclusive = inclusive
		self.expInclusive = expInclusive


class Knowledge:

    offsets = {'def': 24, 'id': 32, 'dontPreApply': 40}    
    def __init__(self, def: Assets.Scripts.Models.Towers.Knowledge.KnowledgeModel, id: System.String, dontPreApply: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def
		self.id = id
		self.dontPreApply = dontPreApply


class KnowledgeLevel:

    offsets = {'level': 24, 'mmCost': 28, 'def': 32}    
    def __init__(self, level: System.Int32, mmCost: System.Int32, def: Assets.Scripts.Models.Towers.Knowledge.KnowledgeLevelModel, **kwargs):
        super().__init__(self, **kwargs)
		self.level = level
		self.mmCost = mmCost
		self.def = def


class KnowledgeSet:

    offsets = {'def': 24}    
    def __init__(self, def: Assets.Scripts.Models.Towers.Knowledge.KnowledgeSetModel, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def


class KnowledgeTier:

    offsets = {'tier': 24, 'investmentRequired': 28, 'def': 32}    
    def __init__(self, tier: System.Int32, investmentRequired: System.Int32, def: Assets.Scripts.Models.Towers.Knowledge.KnowledgeTierModel, **kwargs):
        super().__init__(self, **kwargs)
		self.tier = tier
		self.investmentRequired = investmentRequired
		self.def = def


class Prerequisite:

    offsets = {'required': 24}    
    def __init__(self, required: Assets.Scripts.Unity.Towers.Knowledge.Knowledge, **kwargs):
        super().__init__(self, **kwargs)
		self.required = required


class AbilityCooldownPercentageMod:

    offsets = {'cooldownPercentageReduction': 128, 'def': 136}    
    def __init__(self, cooldownPercentageReduction: System.Single, def: Assets.Scripts.Models.Towers.Mods.AbilityCooldownPercentageModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.cooldownPercentageReduction = cooldownPercentageReduction
		self.def = def


class AbilityCooldownTimeMod:

    offsets = {'cooldownTimeReduction': 128, 'def': 136}    
    def __init__(self, cooldownTimeReduction: System.Single, def: Assets.Scripts.Models.Towers.Mods.AbilityCooldownTimeModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.cooldownTimeReduction = cooldownTimeReduction
		self.def = def


class AcidPoolMod:

    offsets = {'additionalTime': 128, 'def': 136}    
    def __init__(self, additionalTime: System.Single, def: Assets.Scripts.Models.Towers.Mods.AcidPoolModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalTime = additionalTime
		self.def = def


class ActivateAttackMod:

    offsets = {'additionalTime': 128, 'def': 136}    
    def __init__(self, additionalTime: System.Single, def: Assets.Scripts.Models.Towers.Mods.ActivateAttackModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalTime = additionalTime
		self.def = def


class AddAbilityToTowerMod:

    offsets = {'ability': 128, 'def': 136}    
    def __init__(self, ability: Assets.Scripts.Unity.Towers.Behaviors.Abilities.Ability, def: Assets.Scripts.Models.Towers.Mods.AddAbilityToTowerModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.ability = ability
		self.def = def


class AddBehaviourToBloonMutationMod:

    offsets = {'mutationId': 128, 'def': 136}    
    def __init__(self, mutationId: System.String, def: Assets.Scripts.Models.Towers.Mods.AddBehaviourToBloonMutationModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.mutationId = mutationId
		self.def = def


class AgeMod:

    offsets = {'additionalTime': 128, 'def': 136}    
    def __init__(self, additionalTime: System.Single, def: Assets.Scripts.Models.Towers.Mods.AgeModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalTime = additionalTime
		self.def = def


class AlternateArcMod:

    offsets = {'increase': 128, 'shotCount': 132, 'def': 136}    
    def __init__(self, increase: System.Int32, shotCount: System.Int32, def: Assets.Scripts.Models.Towers.Mods.AlternateArcModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.increase = increase
		self.shotCount = shotCount
		self.def = def


class AmbidextrousRangsMod:

    offsets = {'def': 128}    
    def __init__(self, def: Assets.Scripts.Models.Towers.Mods.AmbidextrousRangsModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def


class AmbushTechMod:

    offsets = {'def': 128}    
    def __init__(self, def: Assets.Scripts.Models.Towers.Mods.AmbushTechModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def


class ApplyMod:

    offsets = {'mod': 120, 'target': 128, 'targetNames': 136, 'def': 144}    
    def __init__(self, mod: Assets.Scripts.Unity.Towers.Mods.Mod, target: Assets.Scripts.Unity.Cascade.CascadingItem, targetNames: System.String, def: Assets.Scripts.Models.Towers.Mods.ApplyModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.mod = mod
		self.target = target
		self.targetNames = targetNames
		self.def = def


class BankDepositsMod:

    offsets = {'depositPercent': 128, 'tsmThemeId': 136, 'displayLifetime': 144, 'display': 152, 'expDisplay': 160, 'def': 168}    
    def __init__(self, depositPercent: System.Single, tsmThemeId: System.String, displayLifetime: System.Single, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, def: Assets.Scripts.Models.Towers.Mods.BankDepositsModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.depositPercent = depositPercent
		self.tsmThemeId = tsmThemeId
		self.displayLifetime = displayLifetime
		self.display = display
		self.expDisplay = expDisplay
		self.def = def


class BankMod:

    offsets = {'additionalCapacity': 128, 'def': 136}    
    def __init__(self, additionalCapacity: System.Single, def: Assets.Scripts.Models.Towers.Mods.BankModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalCapacity = additionalCapacity
		self.def = def


class BloonHealthMod:

    offsets = {'percentageHealthReduced': 128, 'def': 136}    
    def __init__(self, percentageHealthReduced: System.Single, def: Assets.Scripts.Models.Towers.Mods.BloonHealthModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.percentageHealthReduced = percentageHealthReduced
		self.def = def


class BloonSetMod:

    offsets = {'sceneName': 128, 'def': 136}    
    def __init__(self, sceneName: System.String, def: Assets.Scripts.Models.Towers.Mods.BloonSetModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.sceneName = sceneName
		self.def = def


class BonusCashPerRoundMod:

    offsets = {'roundMultiple': 128, 'baseCash': 132, 'def': 136}    
    def __init__(self, roundMultiple: System.Single, baseCash: System.Single, def: Assets.Scripts.Models.Towers.Mods.BonusCashPerRoundModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.roundMultiple = roundMultiple
		self.baseCash = baseCash
		self.def = def


class CallToArmsMod:

    offsets = {'additionalTime': 128, 'def': 136}    
    def __init__(self, additionalTime: System.Single, def: Assets.Scripts.Models.Towers.Mods.CallToArmsModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalTime = additionalTime
		self.def = def


class CashIncreaseMod:

    offsets = {'additionalAmount': 128, 'percentIncrease': 132, 'def': 136}    
    def __init__(self, additionalAmount: System.Single, percentIncrease: System.Single, def: Assets.Scripts.Models.Towers.Mods.CashIncreaseModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalAmount = additionalAmount
		self.percentIncrease = percentIncrease
		self.def = def


class CashMod:

    offsets = {'percentBonus': 128, 'bonusMultiplierBuff': 132, 'def': 136}    
    def __init__(self, percentBonus: System.Single, bonusMultiplierBuff: System.Single, def: Assets.Scripts.Models.Towers.Mods.CashModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.percentBonus = percentBonus
		self.bonusMultiplierBuff = bonusMultiplierBuff
		self.def = def


class CashPerRoundMod:

    offsets = {'additionalMoney': 128, 'def': 136}    
    def __init__(self, additionalMoney: System.Single, def: Assets.Scripts.Models.Towers.Mods.CashPerRoundModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalMoney = additionalMoney
		self.def = def


class CeramicShockMod:

    offsets = {'slowModelToUse': 128, 'def': 136}    
    def __init__(self, slowModelToUse: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.SlowForBloon, def: Assets.Scripts.Models.Towers.Mods.CeramicShockModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.slowModelToUse = slowModelToUse
		self.def = def


class ChimpsMod:

    offsets = {'def': 128}    
    def __init__(self, def: Assets.Scripts.Models.Towers.Mods.ChimpsModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def


class ColdFrontMod:

    offsets = {'def': 128, 'freeze': 136, 'addBehaviorToBloon': 144, 'chanceToFreeze': 152}    
    def __init__(self, def: Assets.Scripts.Models.Towers.Mods.ColdFrontModModel, freeze: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.Freeze, addBehaviorToBloon: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.AddBehaviorToBloon, chanceToFreeze: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def
		self.freeze = freeze
		self.addBehaviorToBloon = addBehaviorToBloon
		self.chanceToFreeze = chanceToFreeze


class ComeOnEverybodyMod:

    offsets = {'discountMultiplier': 128, 'rateMultiplier': 132, 'buffLocsNameRate': 136, 'buffIconNameRate': 144, 'buffLocsnNamePrice': 152, 'buffIconNamePrice': 160, 'def': 168}    
    def __init__(self, discountMultiplier: System.Single, rateMultiplier: System.Single, buffLocsNameRate: System.String, buffIconNameRate: System.String, buffLocsnNamePrice: System.String, buffIconNamePrice: System.String, def: Assets.Scripts.Models.Towers.Mods.ComeOnEverybodyModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.discountMultiplier = discountMultiplier
		self.rateMultiplier = rateMultiplier
		self.buffLocsNameRate = buffLocsNameRate
		self.buffIconNameRate = buffIconNameRate
		self.buffLocsnNamePrice = buffLocsnNamePrice
		self.buffIconNamePrice = buffIconNamePrice
		self.def = def


class CreateEffectOnAbilityMod:

    offsets = {'additionalLifespan': 128, 'def': 136}    
    def __init__(self, additionalLifespan: System.Single, def: Assets.Scripts.Models.Towers.Mods.CreateEffectOnAbilityModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalLifespan = additionalLifespan
		self.def = def


class CrossTheStreamsMod:

    offsets = {'projectile': 128, 'expProjectile': 136, 'effect': 144, 'expEffect': 152, 'rate': 160, 'expRate': 168, 'positionRandomness': 176, 'expPositionRandomness': 184, 'endPointOffset': 192, 'expEndPointOffset': 200, 'def': 208}    
    def __init__(self, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, expProjectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, effect: Assets.Scripts.Unity.Effects.Effect, expEffect: Assets.Scripts.Unity.Effects.Effect, rate: System.Single, expRate: System.String, positionRandomness: System.Single, expPositionRandomness: System.String, endPointOffset: System.Single, expEndPointOffset: System.String, def: Assets.Scripts.Models.Towers.Mods.CrossTheStreamsModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.projectile = projectile
		self.expProjectile = expProjectile
		self.effect = effect
		self.expEffect = expEffect
		self.rate = rate
		self.expRate = expRate
		self.positionRandomness = positionRandomness
		self.expPositionRandomness = expPositionRandomness
		self.endPointOffset = endPointOffset
		self.expEndPointOffset = expEndPointOffset
		self.def = def


class DamageIncreaseMod:

    offsets = {'amount': 128, 'optionalDamageScriptIds': 136, 'def': 144}    
    def __init__(self, amount: System.Single, optionalDamageScriptIds: System.String, def: Assets.Scripts.Models.Towers.Mods.DamageIncreaseModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.amount = amount
		self.optionalDamageScriptIds = optionalDamageScriptIds
		self.def = def


class DamageModifierForBloonTypeMod:

    offsets = {'percentBonus': 128, 'additiveBonus': 132, 'multiplierOverride': 136, 'bloonName': 144, 'def': 152}    
    def __init__(self, percentBonus: System.Single, additiveBonus: System.Single, multiplierOverride: System.Single, bloonName: System.String, def: Assets.Scripts.Models.Towers.Mods.DamageModifierForBloonTypeModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.percentBonus = percentBonus
		self.additiveBonus = additiveBonus
		self.multiplierOverride = multiplierOverride
		self.bloonName = bloonName
		self.def = def


class DamageModifierForTagMod:

    offsets = {'bloonTag': 128, 'multiplierAddative': 136, 'addative': 140, 'def': 144}    
    def __init__(self, bloonTag: System.String, multiplierAddative: System.Single, addative: System.Single, def: Assets.Scripts.Models.Towers.Mods.DamageModifierForTagModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonTag = bloonTag
		self.multiplierAddative = multiplierAddative
		self.addative = addative
		self.def = def


class DamageOverTimeMod:

    offsets = {'timeReductionAmount': 128, 'damageIncreaseAmount': 132, 'def': 136}    
    def __init__(self, timeReductionAmount: System.Single, damageIncreaseAmount: System.Int32, def: Assets.Scripts.Models.Towers.Mods.DamageOverTimeModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.timeReductionAmount = timeReductionAmount
		self.damageIncreaseAmount = damageIncreaseAmount
		self.def = def


class DamageTypeMod:

    offsets = {'canHitBloonProperties': 128, 'def': 136}    
    def __init__(self, canHitBloonProperties: System.String, def: Assets.Scripts.Models.Towers.Mods.DamageTypeModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.canHitBloonProperties = canHitBloonProperties
		self.def = def


class DisableContinueMod:

    offsets = {'def': 128}    
    def __init__(self, def: Assets.Scripts.Models.Towers.Mods.DisableContinueModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def


class DisableMonkeyKnowledgeMod:

    offsets = {'def': 128}    
    def __init__(self, def: Assets.Scripts.Models.Towers.Mods.DisableMonkeyKnowledgeModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def


class DisablePowersMod:

    offsets = {'def': 128}    
    def __init__(self, def: Assets.Scripts.Models.Towers.Mods.DisablePowersModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def


class DisableSellTowerMod:

    offsets = {'def': 128}    
    def __init__(self, def: Assets.Scripts.Models.Towers.Mods.DisableSellTowerModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def


class DiscountZoneMod:

    offsets = {'additionalMultiplier': 128, 'specificScriptID': 136, 'def': 144}    
    def __init__(self, additionalMultiplier: System.Single, specificScriptID: System.String, def: Assets.Scripts.Models.Towers.Mods.DiscountZoneModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalMultiplier = additionalMultiplier
		self.specificScriptID = specificScriptID
		self.def = def


class DisplayMod:

    offsets = {'scaleReverseToBaseValueMultiplier': 128, 'baseValueAdditive': 132, 'baseValueMultiplier': 136, 'def': 144}    
    def __init__(self, scaleReverseToBaseValueMultiplier: System.Single, baseValueAdditive: System.Single, baseValueMultiplier: System.Single, def: Assets.Scripts.Models.Towers.Mods.DisplayModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.scaleReverseToBaseValueMultiplier = scaleReverseToBaseValueMultiplier
		self.baseValueAdditive = baseValueAdditive
		self.baseValueMultiplier = baseValueMultiplier
		self.def = def


class DoorGunnerMod:

    offsets = {'def': 128}    
    def __init__(self, def: Assets.Scripts.Models.Towers.Mods.DoorGunnerModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def


class EatBloonMod:

    offsets = {'additionalTrapAmount': 128, 'def': 136}    
    def __init__(self, additionalTrapAmount: System.Single, def: Assets.Scripts.Models.Towers.Mods.EatBloonModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalTrapAmount = additionalTrapAmount
		self.def = def


class EffectMod:

    offsets = {'scaleReverseToBaseValueMultiplier': 128, 'baseValueAdditive': 132, 'baseValueMultiplier': 136, 'def': 144}    
    def __init__(self, scaleReverseToBaseValueMultiplier: System.Single, baseValueAdditive: System.Single, baseValueMultiplier: System.Single, def: Assets.Scripts.Models.Towers.Mods.EffectModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.scaleReverseToBaseValueMultiplier = scaleReverseToBaseValueMultiplier
		self.baseValueAdditive = baseValueAdditive
		self.baseValueMultiplier = baseValueMultiplier
		self.def = def


class EmergencyUnlockMod:

    offsets = {'def': 128}    
    def __init__(self, def: Assets.Scripts.Models.Towers.Mods.EmergencyUnlockModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def


class EmissionArcCountMod:

    offsets = {'additionalCount': 128, 'def': 136}    
    def __init__(self, additionalCount: System.Int32, def: Assets.Scripts.Models.Towers.Mods.EmissionArcCountModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalCount = additionalCount
		self.def = def


class EmissionRandomCountMod:

    offsets = {'additionalCount': 128, 'def': 136}    
    def __init__(self, additionalCount: System.Int32, def: Assets.Scripts.Models.Towers.Mods.EmissionRandomCountModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalCount = additionalCount
		self.def = def


class EndRoundMod:

    offsets = {'round': 128, 'def': 136}    
    def __init__(self, round: System.Int32, def: Assets.Scripts.Models.Towers.Mods.EndRoundModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.round = round
		self.def = def


class FreeTowerMod:

    offsets = {'baseTowerID': 128, 'charges': 136, 'def': 144}    
    def __init__(self, baseTowerID: System.String, charges: System.Int32, def: Assets.Scripts.Models.Towers.Mods.FreeTowerModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.baseTowerID = baseTowerID
		self.charges = charges
		self.def = def


class FreezeMod:

    offsets = {'amount': 128, 'def': 136}    
    def __init__(self, amount: System.Single, def: Assets.Scripts.Models.Towers.Mods.FreezeModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.amount = amount
		self.def = def


class FreezeModifierMod:

    offsets = {'durationModifier': 128, 'durationAdd': 132, 'mutationId': 136, 'def': 144}    
    def __init__(self, durationModifier: System.Single, durationAdd: System.Single, mutationId: System.String, def: Assets.Scripts.Models.Towers.Mods.FreezeModifierModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.durationModifier = durationModifier
		self.durationAdd = durationAdd
		self.mutationId = mutationId
		self.def = def


class FreezeMutationMod:

    offsets = {'mutationId': 128, 'def': 136}    
    def __init__(self, mutationId: System.String, def: Assets.Scripts.Models.Towers.Mods.FreezeMutationModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.mutationId = mutationId
		self.def = def


class GlobalCostMod:

    offsets = {'multiplier': 128, 'set': 136, 'def': 144}    
    def __init__(self, multiplier: System.Single, set: System.String, def: Assets.Scripts.Models.Towers.Mods.GlobalCostModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.set = set
		self.def = def


class GlobalSpeedMod:

    offsets = {'multiplier': 128, 'addition': 132, 'def': 136}    
    def __init__(self, multiplier: System.Single, addition: System.Single, def: Assets.Scripts.Models.Towers.Mods.GlobalSpeedModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.addition = addition
		self.def = def


class GorgonStormMod:

    offsets = {'def': 128, 'slow': 136}    
    def __init__(self, def: Assets.Scripts.Models.Towers.Mods.GorgonStormModModel, slow: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.Slow, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def
		self.slow = slow


class HealthyBananasMod:

    offsets = {'marketplaceLives': 128, 'centralMarketLives': 132, 'display': 136, 'displayLifespan': 144, 'def': 152}    
    def __init__(self, marketplaceLives: System.Int32, centralMarketLives: System.Int32, display: UnityEngine.GameObject, displayLifespan: System.Single, def: Assets.Scripts.Models.Towers.Mods.HealthyBananasModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.marketplaceLives = marketplaceLives
		self.centralMarketLives = centralMarketLives
		self.display = display
		self.displayLifespan = displayLifespan
		self.def = def


class HeroCostToLevelMod:

    offsets = {'costMultiplier': 128, 'expCostMultiplier': 136, 'def': 144}    
    def __init__(self, costMultiplier: System.Single, expCostMultiplier: System.String, def: Assets.Scripts.Models.Towers.Mods.HeroCostToLevelModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.costMultiplier = costMultiplier
		self.expCostMultiplier = expCostMultiplier
		self.def = def


class HeroXpPerRoundMod:

    offsets = {'additionalXpBonus': 128, 'applyGlobally': 132, 'expApplyGlobally': 136, 'def': 144}    
    def __init__(self, additionalXpBonus: System.Single, applyGlobally: System.Boolean, expApplyGlobally: System.String, def: Assets.Scripts.Models.Towers.Mods.HeroXpPerRoundModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalXpBonus = additionalXpBonus
		self.applyGlobally = applyGlobally
		self.expApplyGlobally = expApplyGlobally
		self.def = def


class IgnoreImmunityForBloonTypeMod:

    offsets = {'bloonTypes': 128, 'def': 136}    
    def __init__(self, bloonTypes: System.String, def: Assets.Scripts.Models.Towers.Mods.IgnoreImmunityForBloonTypeModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonTypes = bloonTypes
		self.def = def


class ImfLoanMod:

    offsets = {'additionalLoanAmount': 128, 'interestRateDecreaseAmount': 132, 'def': 136}    
    def __init__(self, additionalLoanAmount: System.Single, interestRateDecreaseAmount: System.Single, def: Assets.Scripts.Models.Towers.Mods.ImfLoanModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalLoanAmount = additionalLoanAmount
		self.interestRateDecreaseAmount = interestRateDecreaseAmount
		self.def = def


class ImpoppableModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class IncreaseRangeMod:

    offsets = {'additionalFrames': 128, 'def': 136}    
    def __init__(self, additionalFrames: System.Int32, def: Assets.Scripts.Models.Towers.Mods.IncreaseRangeModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalFrames = additionalFrames
		self.def = def


class KnockbackMod:

    offsets = {'percentMultiplierAdded': 128, 'def': 136}    
    def __init__(self, percentMultiplierAdded: System.Single, def: Assets.Scripts.Models.Towers.Mods.KnockbackModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.percentMultiplierAdded = percentMultiplierAdded
		self.def = def


class LivesMod:

    offsets = {'percentBonus': 128, 'def': 136}    
    def __init__(self, percentBonus: System.Single, def: Assets.Scripts.Models.Towers.Mods.LivesModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.percentBonus = percentBonus
		self.def = def


class MaxHealthMod:

    offsets = {'multiplier': 128, 'addition': 132, 'set': 136, 'def': 144}    
    def __init__(self, multiplier: System.Single, addition: System.Single, set: System.Single, def: Assets.Scripts.Models.Towers.Mods.MaxHealthModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.addition = addition
		self.set = set
		self.def = def


class Mod:

    offsets = {'toggles': 24, 'def': 32}    
    def __init__(self, toggles: System.String, def: Assets.Scripts.Models.Towers.Mods.ModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.toggles = toggles
		self.def = def


class ModifyAllCashMod:

    offsets = {'multiplier': 128, 'def': 136}    
    def __init__(self, multiplier: System.Single, def: Assets.Scripts.Models.Towers.Mods.ModifyAllCashModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.def = def


class MonkeyMoneyMod:

    offsets = {'multiplier': 128, 'def': 136}    
    def __init__(self, multiplier: System.Single, def: Assets.Scripts.Models.Towers.Mods.MonkeyMoneyModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.def = def


class MutatorMod:

    offsets = {'def': 120}    
    def __init__(self, def: Assets.Scripts.Models.Towers.Mods.MutatorModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def


class NavalUpgradesMod:

    offsets = {'additionalPierce': 128, 'def': 136}    
    def __init__(self, additionalPierce: System.Single, def: Assets.Scripts.Models.Towers.Mods.NavalUpgradesModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalPierce = additionalPierce
		self.def = def


class OnMonkeyKnowledgePurchaseMod:

    offsets = {'towers': 128, 'xpToAdd': 136, 'def': 144}    
    def __init__(self, towers: System.String, xpToAdd: System.Single, def: Assets.Scripts.Models.Towers.Mods.OnMonkeyKnowledgePurchaseModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.towers = towers
		self.xpToAdd = xpToAdd
		self.def = def


class PaintStripperMod:

    offsets = {'removeBloonModifiers': 128, 'blacklistTags': 136, 'whitelistTags': 144, 'def': 152}    
    def __init__(self, removeBloonModifiers: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.RemoveBloonModifiers, blacklistTags: System.String, whitelistTags: System.String, def: Assets.Scripts.Models.Towers.Mods.PaintStripperModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.removeBloonModifiers = removeBloonModifiers
		self.blacklistTags = blacklistTags
		self.whitelistTags = whitelistTags
		self.def = def


class ProjectilePierceMod:

    offsets = {'additionalPierce': 128, 'def': 136}    
    def __init__(self, additionalPierce: System.Single, def: Assets.Scripts.Models.Towers.Mods.ProjectilePierceModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalPierce = additionalPierce
		self.def = def


class ProjectileRadiusMod:

    offsets = {'additiveAmount': 128, 'multiplierAmount': 132, 'def': 136}    
    def __init__(self, additiveAmount: System.Single, multiplierAmount: System.Single, def: Assets.Scripts.Models.Towers.Mods.ProjectileRadiusModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.additiveAmount = additiveAmount
		self.multiplierAmount = multiplierAmount
		self.def = def


class ProjectileRangeMod:

    offsets = {'amount': 128, 'def': 136}    
    def __init__(self, amount: System.Single, def: Assets.Scripts.Models.Towers.Mods.ProjectileRangeModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.amount = amount
		self.def = def


class ProjectileRangePercentageMod:

    offsets = {'percentIncrease': 128, 'def': 136}    
    def __init__(self, percentIncrease: System.Single, def: Assets.Scripts.Models.Towers.Mods.ProjectileRangePercentageModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.percentIncrease = percentIncrease
		self.def = def


class ProjectileSpeedMod:

    offsets = {'multiplier': 128, 'def': 136}    
    def __init__(self, multiplier: System.Single, def: Assets.Scripts.Models.Towers.Mods.ProjectileSpeedModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.def = def


class ProjectileTrackTargetMod:

    offsets = {'multiplierTurnRate': 128, 'def': 136}    
    def __init__(self, multiplierTurnRate: System.Single, def: Assets.Scripts.Models.Towers.Mods.ProjectileTrackTargetModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplierTurnRate = multiplierTurnRate
		self.def = def


class PushBackIncreaseMod:

    offsets = {'amount': 128, 'def': 136}    
    def __init__(self, amount: System.Single, def: Assets.Scripts.Models.Towers.Mods.PushBackIncreaseModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.amount = amount
		self.def = def


class RangeMod:

    offsets = {'multiplier': 128, 'addative': 132, 'def': 136}    
    def __init__(self, multiplier: System.Single, addative: System.Single, def: Assets.Scripts.Models.Towers.Mods.RangeModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.addative = addative
		self.def = def


class RecurringRangsMod:

    offsets = {'def': 128, 'newPath': 136, 'newEasePath': 144, 'path1TierMin': 152, 'path1TierMax': 156, 'path2TierMin': 160, 'path2TierMax': 164, 'path3TierMin': 168, 'path3TierMax': 172}    
    def __init__(self, def: Assets.Scripts.Models.Towers.Mods.RecurringRangsModModel, newPath: Assets.Scripts.Unity.Map.PointSource, newEasePath: Assets.Scripts.Unity.Map.PointSource, path1TierMin: System.Int32, path1TierMax: System.Int32, path2TierMin: System.Int32, path2TierMax: System.Int32, path3TierMin: System.Int32, path3TierMax: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def
		self.newPath = newPath
		self.newEasePath = newEasePath
		self.path1TierMin = path1TierMin
		self.path1TierMax = path1TierMax
		self.path2TierMin = path2TierMin
		self.path2TierMax = path2TierMax
		self.path3TierMin = path3TierMin
		self.path3TierMax = path3TierMax


class ReduceCostMod:

    offsets = {'amount': 128, 'def': 136}    
    def __init__(self, amount: System.Single, def: Assets.Scripts.Models.Towers.Mods.ReduceCostModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.amount = amount
		self.def = def


class RemoveAbilityMod:

    offsets = {'def': 128}    
    def __init__(self, def: Assets.Scripts.Models.Towers.Mods.RemoveAbilityModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def


class RemoveManaShieldMod:

    offsets = {'def': 128}    
    def __init__(self, def: Assets.Scripts.Models.Towers.Mods.RemoveManaShieldModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def


class RetargetIncreaseMod:

    offsets = {'amount': 128, 'def': 136}    
    def __init__(self, amount: System.Int32, def: Assets.Scripts.Models.Towers.Mods.RetargetIncreaseModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.amount = amount
		self.def = def


class SelectedDifficultyRatingMod:

    offsets = {'addition': 128, 'multiplier': 132, 'def': 136}    
    def __init__(self, addition: System.Single, multiplier: System.Single, def: Assets.Scripts.Models.Towers.Mods.SelectedDifficultyRatingModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.addition = addition
		self.multiplier = multiplier
		self.def = def


class SellMultiplierMod:

    offsets = {'multiplier': 128, 'addition': 132, 'def': 136}    
    def __init__(self, multiplier: System.Single, addition: System.Single, def: Assets.Scripts.Models.Towers.Mods.SellMultiplierModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.addition = addition
		self.def = def


class SetHealthForBloonMod:

    offsets = {'round': 128, 'bloonId': 136, 'healthMultiplier': 144, 'gameMode': 152, 'def': 160}    
    def __init__(self, round: System.Int32, bloonId: System.String, healthMultiplier: System.Single, gameMode: System.String, def: Assets.Scripts.Models.Towers.Mods.SetHealthForBloonModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.round = round
		self.bloonId = bloonId
		self.healthMultiplier = healthMultiplier
		self.gameMode = gameMode
		self.def = def


class SetHeroLevelOnPlaceMod:

    offsets = {'level': 128, 'def': 136}    
    def __init__(self, level: System.Int32, def: Assets.Scripts.Models.Towers.Mods.SetHeroLevelOnPlaceModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.level = level
		self.def = def


class SimPowerDiscountMod:

    offsets = {'power': 128, 'multiplier': 136, 'subtraction': 140, 'charges': 144, 'def': 152}    
    def __init__(self, power: System.String, multiplier: System.Single, subtraction: System.Single, charges: System.Int32, def: Assets.Scripts.Models.Powers.Mods.SimPowerDiscountModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.power = power
		self.multiplier = multiplier
		self.subtraction = subtraction
		self.charges = charges
		self.def = def


class SimTowerDiscountMod:

    offsets = {'tower': 128, 'multiplier': 136, 'subtraction': 140, 'charges': 144, 'def': 152}    
    def __init__(self, tower: System.String, multiplier: System.Single, subtraction: System.Single, charges: System.Int32, def: Assets.Scripts.Models.Towers.Mods.SimTowerDiscountModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.tower = tower
		self.multiplier = multiplier
		self.subtraction = subtraction
		self.charges = charges
		self.def = def


class SlowModifierForTagMod:

    offsets = {'slowModifier': 128, 'tag': 136, 'def': 144}    
    def __init__(self, slowModifier: System.Single, tag: System.String, def: Assets.Scripts.Models.Towers.Mods.SlowModifierForTagModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.slowModifier = slowModifier
		self.tag = tag
		self.def = def


class SlowModifierMod:

    offsets = {'durationModifier': 128, 'slowModifier': 132, 'mutationId': 136, 'def': 144}    
    def __init__(self, durationModifier: System.Single, slowModifier: System.Single, mutationId: System.String, def: Assets.Scripts.Models.Towers.Mods.SlowModifierModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.durationModifier = durationModifier
		self.slowModifier = slowModifier
		self.mutationId = mutationId
		self.def = def


class SlowMutationMod:

    offsets = {'mutationId': 128, 'mutationFilterId': 136, 'def': 144}    
    def __init__(self, mutationId: System.String, mutationFilterId: System.String, def: Assets.Scripts.Models.Towers.Mods.SlowMutationModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.mutationId = mutationId
		self.mutationFilterId = mutationFilterId
		self.def = def


class StartingCashMod:

    offsets = {'changeBase': 128, 'addition': 132, 'multiplier': 136, 'def': 144}    
    def __init__(self, changeBase: System.Single, addition: System.Single, multiplier: System.Single, def: Assets.Scripts.Models.Towers.Mods.StartingCashModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.changeBase = changeBase
		self.addition = addition
		self.multiplier = multiplier
		self.def = def


class StartingHealthMod:

    offsets = {'multiplier': 128, 'addition': 132, 'def': 136}    
    def __init__(self, multiplier: System.Single, addition: System.Single, def: Assets.Scripts.Models.Towers.Mods.StartingHealthModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.addition = addition
		self.def = def


class StartingRoundMod:

    offsets = {'round': 128, 'def': 136}    
    def __init__(self, round: System.Int32, def: Assets.Scripts.Models.Towers.Mods.StartingRoundModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.round = round
		self.def = def


class StartingShieldMod:

    offsets = {'startingShield': 128, 'maxShield': 132, 'shieldPerRound': 136, 'def': 144}    
    def __init__(self, startingShield: System.Single, maxShield: System.Single, shieldPerRound: System.Single, def: Assets.Scripts.Models.Towers.Mods.StartingShieldModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.startingShield = startingShield
		self.maxShield = maxShield
		self.shieldPerRound = shieldPerRound
		self.def = def


class StrikeDownTheFalseMod:

    offsets = {'def': 128, 'script': 136}    
    def __init__(self, def: Assets.Scripts.Models.Towers.Mods.StrikeDownTheFalseModModel, script: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.DamageModifierForTag, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def
		self.script = script


class SupportMaxRangeMod:

    offsets = {'def': 128}    
    def __init__(self, def: Assets.Scripts.Models.Towers.Mods.SupportMaxRangeModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def


class TCBOOMod:

    offsets = {'def': 128}    
    def __init__(self, def: Assets.Scripts.Models.Towers.Mods.TCBOOModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def


class TargetedPineapplesMod:

    offsets = {'checkAirUnitOverTrackScript': 128, 'def': 136}    
    def __init__(self, checkAirUnitOverTrackScript: Assets.Scripts.Unity.Towers.Weapons.Behaviors.CheckAirUnitOverTrack, def: Assets.Scripts.Models.Towers.Mods.TargetedPineapplesModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.checkAirUnitOverTrackScript = checkAirUnitOverTrackScript
		self.def = def


class TierFiveCountMod:

    offsets = {'towerBaseId': 128, 'path': 136, 'tier': 140, 'maxCountAdditive': 144, 'def': 152}    
    def __init__(self, towerBaseId: System.String, path: System.Int32, tier: System.Int32, maxCountAdditive: System.Int32, def: Assets.Scripts.Models.Towers.Mods.TierFiveCountModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.towerBaseId = towerBaseId
		self.path = path
		self.tier = tier
		self.maxCountAdditive = maxCountAdditive
		self.def = def


class TinyTornadoesMod:

    offsets = {'projectile': 128, 'emission': 136, 'emissionBehavior': 144, 'def': 152}    
    def __init__(self, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, emission: Assets.Scripts.Unity.Towers.Emissions.Emission, emissionBehavior: Assets.Scripts.Unity.Towers.Weapons.Behaviors.EmissionRotationOffProjectileDirection, def: Assets.Scripts.Models.Towers.Mods.TinyTornadoesModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.projectile = projectile
		self.emission = emission
		self.emissionBehavior = emissionBehavior
		self.def = def


class TowerExpireMod:

    offsets = {'additionalTimeBonus': 128, 'def': 136}    
    def __init__(self, additionalTimeBonus: System.Single, def: Assets.Scripts.Models.Towers.Mods.TowerExpireModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.additionalTimeBonus = additionalTimeBonus
		self.def = def


class TowerSellMod:

    offsets = {'multiplier': 128, 'additional': 132, 'charges': 136, 'def': 144}    
    def __init__(self, multiplier: System.Single, additional: System.Single, charges: System.Int32, def: Assets.Scripts.Models.Towers.Mods.TowerSellModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.additional = additional
		self.charges = charges
		self.def = def


class TowerXpMod:

    offsets = {'multiplier': 128, 'def': 136}    
    def __init__(self, multiplier: System.Single, def: Assets.Scripts.Models.Towers.Mods.TowerXpModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.def = def


class TurboDurationIncreaseMod:

    offsets = {'amount': 128, 'def': 136}    
    def __init__(self, amount: System.Single, def: Assets.Scripts.Models.Towers.Mods.TurboDurationIncreaseModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.amount = amount
		self.def = def


class UpgradeCostMod:

    offsets = {'amountReduced': 128, 'percentageReduced': 132, 'upgradeName': 136, 'def': 144}    
    def __init__(self, amountReduced: System.Int32, percentageReduced: System.Single, upgradeName: System.String, def: Assets.Scripts.Models.Towers.Mods.UpgradeCostModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.amountReduced = amountReduced
		self.percentageReduced = percentageReduced
		self.upgradeName = upgradeName
		self.def = def


class WeaponClearProjectileHitListMod:

    offsets = {'reductionAmount': 128, 'def': 136}    
    def __init__(self, reductionAmount: System.Single, def: Assets.Scripts.Models.Towers.Mods.WeaponClearProjectileHitListModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.reductionAmount = reductionAmount
		self.def = def


class WeaponReloadPercentageMod:

    offsets = {'percentMultiplier': 128, 'def': 136}    
    def __init__(self, percentMultiplier: System.Single, def: Assets.Scripts.Models.Towers.Mods.WeaponReloadPercentageModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.percentMultiplier = percentMultiplier
		self.def = def


class WeaponReloadPercentageOnTargetPrioMod:

    offsets = {'percentMultiplier': 128, 'targetPriority': 136, 'def': 144}    
    def __init__(self, percentMultiplier: System.Single, targetPriority: System.String, def: Assets.Scripts.Models.Towers.Mods.WeaponReloadPercentageOnTargetPrioModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.percentMultiplier = percentMultiplier
		self.targetPriority = targetPriority
		self.def = def


class WeaponReloadReductionMod:

    offsets = {'reductionAmount': 128, 'def': 136}    
    def __init__(self, reductionAmount: System.Single, def: Assets.Scripts.Models.Towers.Mods.WeaponReloadReductionModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.reductionAmount = reductionAmount
		self.def = def


class WindMod:

    offsets = {'chanceIncrease': 128, 'def': 136}    
    def __init__(self, chanceIncrease: System.Single, def: Assets.Scripts.Models.Towers.Mods.WindModModel, **kwargs):
        super().__init__(self, **kwargs)
		self.chanceIncrease = chanceIncrease
		self.def = def


class WingmonkeyMod:

    offsets = {'def': 128, 'wingmonkeyPattern': 136}    
    def __init__(self, def: Assets.Scripts.Models.Towers.Mods.WingmonkeyModModel, wingmonkeyPattern: Assets.Scripts.Unity.Towers.Behaviors.Attack.Behaviors.WingmonkeyPattern, **kwargs):
        super().__init__(self, **kwargs)
		self.def = def
		self.wingmonkeyPattern = wingmonkeyPattern


class AddAttackTowerMutator:

    offsets = {'attack': 168, 'expAttack': 176, 'lifespan': 184, 'expLifespan': 192}    
    def __init__(self, attack: Assets.Scripts.Unity.Towers.Behaviors.Attack.Attack, expAttack: Assets.Scripts.Unity.Towers.Behaviors.Attack.Attack, lifespan: System.Single, expLifespan: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.attack = attack
		self.expAttack = expAttack
		self.lifespan = lifespan
		self.expLifespan = expLifespan


class AddBehaviorToTowerMutator:

    offsets = {'lifespan': 168, 'expLifespan': 176, 'behavior': 184}    
    def __init__(self, lifespan: System.Single, expLifespan: System.String, behavior: Assets.Scripts.Unity.Towers.TowerBehavior, **kwargs):
        super().__init__(self, **kwargs)
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.behavior = behavior


class AddTowerToTowerMutator:

    offsets = {'tower': 168, 'expTower': 176, 'lifespan': 184, 'expLifespan': 192}    
    def __init__(self, tower: Assets.Scripts.Unity.Towers.Tower, expTower: Assets.Scripts.Unity.Towers.Tower, lifespan: System.Single, expLifespan: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.tower = tower
		self.expTower = expTower
		self.lifespan = lifespan
		self.expLifespan = expLifespan


class DamageTowerMutator:

    offsets = {'damage': 168, 'expDamage': 176, 'lifespan': 184, 'expLifespan': 192}    
    def __init__(self, damage: System.Single, expDamage: System.String, lifespan: System.Single, expLifespan: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.damage = damage
		self.expDamage = expDamage
		self.lifespan = lifespan
		self.expLifespan = expLifespan


class PierceTowerMutator:

    offsets = {'pierce': 168, 'expPierce': 176, 'lifespan': 184, 'expLifespan': 192}    
    def __init__(self, pierce: System.Int32, expPierce: System.String, lifespan: System.Single, expLifespan: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.pierce = pierce
		self.expPierce = expPierce
		self.lifespan = lifespan
		self.expLifespan = expLifespan


class ProjectileSizeTowerMutator:

    offsets = {'sizeModifier': 168, 'expSizeModifier': 176, 'lifespan': 184, 'expLifespan': 192}    
    def __init__(self, sizeModifier: System.Single, expSizeModifier: System.String, lifespan: System.Single, expLifespan: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.sizeModifier = sizeModifier
		self.expSizeModifier = expSizeModifier
		self.lifespan = lifespan
		self.expLifespan = expLifespan


class ProjectileSpeedTowerMutator:

    offsets = {'speedModifier': 168, 'expSpeedModifier': 176, 'lifespan': 184, 'expLifespan': 192}    
    def __init__(self, speedModifier: System.Single, expSpeedModifier: System.String, lifespan: System.Single, expLifespan: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.speedModifier = speedModifier
		self.expSpeedModifier = expSpeedModifier
		self.lifespan = lifespan
		self.expLifespan = expLifespan


class RangeTowerMutator:

    offsets = {'rangeIncrease': 168, 'expRangeIncrease': 176, 'lifespan': 184, 'expLifespan': 192}    
    def __init__(self, rangeIncrease: System.Single, expRangeIncrease: System.String, lifespan: System.Single, expLifespan: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.rangeIncrease = rangeIncrease
		self.expRangeIncrease = expRangeIncrease
		self.lifespan = lifespan
		self.expLifespan = expLifespan


class ReloadTimeTowerMutator:

    offsets = {'multiplier': 168, 'expMultiplier': 176, 'lifespan': 184, 'expLifespan': 192}    
    def __init__(self, multiplier: System.Single, expMultiplier: System.String, lifespan: System.Single, expLifespan: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.multiplier = multiplier
		self.expMultiplier = expMultiplier
		self.lifespan = lifespan
		self.expLifespan = expLifespan


class TowerMutator:

    offsets = {'parent': 128, 'conditional': 136, 'expConditional': 144, 'mutationId': 152, 'expMutationId': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Mutators.TowerMutator, conditional: Assets.Scripts.Unity.Towers.Mutators.Conditions.Conditional, expConditional: Assets.Scripts.Unity.Towers.Mutators.Conditions.Conditional, mutationId: System.String, expMutationId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.conditional = conditional
		self.expConditional = expConditional
		self.mutationId = mutationId
		self.expMutationId = expMutationId


class WindChanceTowerMutator:

    offsets = {'chanceIncrease': 168, 'expChanceIncrease': 176, 'lifespan': 184, 'expLifespan': 192}    
    def __init__(self, chanceIncrease: System.Single, expChanceIncrease: System.String, lifespan: System.Single, expLifespan: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.chanceIncrease = chanceIncrease
		self.expChanceIncrease = expChanceIncrease
		self.lifespan = lifespan
		self.expLifespan = expLifespan


class Conditional:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CheckAcademyUnderLevel:

    offsets = {'cost': 128, 'expCost': 136, 'baseId': 144, 'expBaseId': 152}    
    def __init__(self, cost: System.Int32, expCost: System.String, baseId: System.String, expBaseId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.cost = cost
		self.expCost = expCost
		self.baseId = baseId
		self.expBaseId = expBaseId


class CheckTempleUnderLevel:

    offsets = {'cost': 128, 'expCost': 136, 'towerSet': 144, 'expTowerSet': 152, 'templeType': 160, 'expTempleType': 168}    
    def __init__(self, cost: System.Int32, expCost: System.String, towerSet: System.String, expTowerSet: System.String, templeType: System.String, expTempleType: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.cost = cost
		self.expCost = expCost
		self.towerSet = towerSet
		self.expTowerSet = expTowerSet
		self.templeType = templeType
		self.expTempleType = expTempleType


class PetBehavior:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PetCreateEffectOnPlace:

    offsets = {'effect': 16, 'lifespan': 24, 'def': 32}    
    def __init__(self, effect: Assets.Scripts.Utils.PrefabReference, lifespan: System.Single, def: Assets.Scripts.Models.Towers.Pets.PetBehaviorModel, **kwargs):
        super().__init__(self, **kwargs)
		self.effect = effect
		self.lifespan = lifespan
		self.def = def


class PetCreateEffectOnSell:

    offsets = {'effect': 16, 'lifespan': 24, 'def': 32}    
    def __init__(self, effect: Assets.Scripts.Utils.PrefabReference, lifespan: System.Single, def: Assets.Scripts.Models.Towers.Pets.PetBehaviorModel, **kwargs):
        super().__init__(self, **kwargs)
		self.effect = effect
		self.lifespan = lifespan
		self.def = def


class PetCreateSoundOnIdle:

    offsets = {'sound1': 16, 'sound2': 24, 'sound3': 32, 'sound4': 40, 'idleMin': 48, 'idleMax': 52, 'def': 56}    
    def __init__(self, sound1: Assets.Scripts.Utils.AudioSourceReference, sound2: Assets.Scripts.Utils.AudioSourceReference, sound3: Assets.Scripts.Utils.AudioSourceReference, sound4: Assets.Scripts.Utils.AudioSourceReference, idleMin: System.Int32, idleMax: System.Int32, def: Assets.Scripts.Models.Towers.Pets.PetBehaviorModel, **kwargs):
        super().__init__(self, **kwargs)
		self.sound1 = sound1
		self.sound2 = sound2
		self.sound3 = sound3
		self.sound4 = sound4
		self.idleMin = idleMin
		self.idleMax = idleMax
		self.def = def


class PetCreateSoundOnPlace:

    offsets = {'sound': 16, 'delay': 24, 'def': 32}    
    def __init__(self, sound: Assets.Scripts.Utils.AudioSourceReference, delay: System.Single, def: Assets.Scripts.Models.Towers.Pets.PetBehaviorModel, **kwargs):
        super().__init__(self, **kwargs)
		self.sound = sound
		self.delay = delay
		self.def = def


class PetTerrainHandler:

    offsets = {'landHeightOffset': 16, 'waterHeightOffset': 20, 'moveSpeed': 24, 'def': 32}    
    def __init__(self, landHeightOffset: System.Single, waterHeightOffset: System.Single, moveSpeed: System.Single, def: Assets.Scripts.Models.Towers.Pets.PetBehaviorModel, **kwargs):
        super().__init__(self, **kwargs)
		self.landHeightOffset = landHeightOffset
		self.waterHeightOffset = waterHeightOffset
		self.moveSpeed = moveSpeed
		self.def = def


class Wander:

    offsets = {'stayInArea': 16, 'speed': 20, 'innerRadius': 24, 'outerRadius': 28, 'idleTimeMin': 32, 'idleTimeMax': 36, 'motionCurve': 40, 'def': 48}    
    def __init__(self, stayInArea: System.Boolean, speed: System.Single, innerRadius: System.Single, outerRadius: System.Single, idleTimeMin: System.Single, idleTimeMax: System.Single, motionCurve: UnityEngine.AnimationCurve, def: Assets.Scripts.Models.Towers.Pets.PetBehaviorModel, **kwargs):
        super().__init__(self, **kwargs)
		self.stayInArea = stayInArea
		self.speed = speed
		self.innerRadius = innerRadius
		self.outerRadius = outerRadius
		self.idleTimeMin = idleTimeMin
		self.idleTimeMax = idleTimeMax
		self.motionCurve = motionCurve
		self.def = def


class Projectile:

    offsets = {'parent': 128, 'display': 136, 'expDisplay': 144, 'pierce': 152, 'expPierce': 160, 'maxPierce': 168, 'expMaxPierce': 176, 'radius': 184, 'expRadius': 192, 'vsBlockerRadius': 200, 'expVsBlockerRadius': 208, 'ignoreBlockers': 216, 'expIgnoreBlockers': 224, 'usePointCollisionWithBloons': 232, 'expUsePointCollisionWithBloons': 240, 'canCollisionBeBlockedByMapLos': 248, 'expCanCollisionBeBlockedByMapLos': 256, 'dontUseCollisionChecker': 264, 'expDontUseCollisionChecker': 272, 'checkCollisionFrames': 280, 'expCheckCollisionFrames': 288, 'ignoreInvulnerable': 296, 'expIgnoreInvulnerable': 304, 'ignorePierceExhaustion': 312, 'expIgnorePierceExhaustion': 320, 'saveId': 328, 'expSaveId': 336, 'def': 344}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Projectile, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, pierce: System.Single, expPierce: System.String, maxPierce: System.Single, expMaxPierce: System.String, radius: System.Single, expRadius: System.String, vsBlockerRadius: System.Single, expVsBlockerRadius: System.String, ignoreBlockers: System.Boolean, expIgnoreBlockers: System.String, usePointCollisionWithBloons: System.Boolean, expUsePointCollisionWithBloons: System.String, canCollisionBeBlockedByMapLos: System.Boolean, expCanCollisionBeBlockedByMapLos: System.String, dontUseCollisionChecker: System.Boolean, expDontUseCollisionChecker: System.String, checkCollisionFrames: System.Int32, expCheckCollisionFrames: System.String, ignoreInvulnerable: System.Boolean, expIgnoreInvulnerable: System.String, ignorePierceExhaustion: System.Boolean, expIgnorePierceExhaustion: System.String, saveId: System.String, expSaveId: System.String, def: Assets.Scripts.Models.Towers.Projectiles.ProjectileModel, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.display = display
		self.expDisplay = expDisplay
		self.pierce = pierce
		self.expPierce = expPierce
		self.maxPierce = maxPierce
		self.expMaxPierce = expMaxPierce
		self.radius = radius
		self.expRadius = expRadius
		self.vsBlockerRadius = vsBlockerRadius
		self.expVsBlockerRadius = expVsBlockerRadius
		self.ignoreBlockers = ignoreBlockers
		self.expIgnoreBlockers = expIgnoreBlockers
		self.usePointCollisionWithBloons = usePointCollisionWithBloons
		self.expUsePointCollisionWithBloons = expUsePointCollisionWithBloons
		self.canCollisionBeBlockedByMapLos = canCollisionBeBlockedByMapLos
		self.expCanCollisionBeBlockedByMapLos = expCanCollisionBeBlockedByMapLos
		self.dontUseCollisionChecker = dontUseCollisionChecker
		self.expDontUseCollisionChecker = expDontUseCollisionChecker
		self.checkCollisionFrames = checkCollisionFrames
		self.expCheckCollisionFrames = expCheckCollisionFrames
		self.ignoreInvulnerable = ignoreInvulnerable
		self.expIgnoreInvulnerable = expIgnoreInvulnerable
		self.ignorePierceExhaustion = ignorePierceExhaustion
		self.expIgnorePierceExhaustion = expIgnorePierceExhaustion
		self.saveId = saveId
		self.expSaveId = expSaveId
		self.def = def


class ProjectileBehavior:

    offsets = {'<Def>k__BackingField': 128}    
    def __init__(self, <Def>k__BackingField: Assets.Scripts.Models.Towers.Projectiles.ProjectileBehaviorModel, **kwargs):
        super().__init__(self, **kwargs)
		self.<Def>k__BackingField = <Def>k__BackingField


class SetSpriteFromPierce:

    offsets = {'parent': 136, 'spriteGroup': 144, 'expSpriteGroup': 152, 'loopMode': 160, 'expLoopMode': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.SetSpriteFromPierce, spriteGroup: Assets.Scripts.Unity.Towers.SpriteGroup, expSpriteGroup: Assets.Scripts.Unity.Towers.SpriteGroup, loopMode: System.String, expLoopMode: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.spriteGroup = spriteGroup
		self.expSpriteGroup = expSpriteGroup
		self.loopMode = loopMode
		self.expLoopMode = expLoopMode


class Accelerate:

    offsets = {'parent': 136, 'acceleration': 144, 'expAcceleration': 152, 'maxSpeed': 160, 'expMaxSpeed': 168, 'turnRateChange': 176, 'expTurnRateChange': 184, 'maxTurnRate': 192, 'expMaxTurnRate': 200, 'decelerate': 208, 'expDecelerate': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.Accelerate, acceleration: System.Single, expAcceleration: System.String, maxSpeed: System.Single, expMaxSpeed: System.String, turnRateChange: System.Single, expTurnRateChange: System.String, maxTurnRate: System.Single, expMaxTurnRate: System.String, decelerate: System.Boolean, expDecelerate: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.acceleration = acceleration
		self.expAcceleration = expAcceleration
		self.maxSpeed = maxSpeed
		self.expMaxSpeed = expMaxSpeed
		self.turnRateChange = turnRateChange
		self.expTurnRateChange = expTurnRateChange
		self.maxTurnRate = maxTurnRate
		self.expMaxTurnRate = expMaxTurnRate
		self.decelerate = decelerate
		self.expDecelerate = expDecelerate


class AcidPool:

    offsets = {'parent': 136, 'lifespan': 144, 'expLifespan': 152, 'lifespanIfMisses': 160, 'expLifespanIfMisses': 168, 'radiusIfMisses': 176, 'expRadiusIfMisses': 184, 'pierceIfMisses': 192, 'expPierceIfMisses': 200}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.AcidPool, lifespan: System.Single, expLifespan: System.String, lifespanIfMisses: System.Single, expLifespanIfMisses: System.String, radiusIfMisses: System.Single, expRadiusIfMisses: System.String, pierceIfMisses: System.Single, expPierceIfMisses: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.lifespanIfMisses = lifespanIfMisses
		self.expLifespanIfMisses = expLifespanIfMisses
		self.radiusIfMisses = radiusIfMisses
		self.expRadiusIfMisses = expRadiusIfMisses
		self.pierceIfMisses = pierceIfMisses
		self.expPierceIfMisses = expPierceIfMisses


class AddAcidicMixtureToProjectile:

    offsets = {'cap': 136, 'expCap': 144, 'ignoreList': 152, 'expIgnoreList': 160, 'mutationId': 168, 'expMutationId': 176, 'towerBehavior': 184, 'expTowerBehavior': 192, 'display': 200, 'expDisplay': 208, 'weaponBehavior': 216, 'expWeaponBehavior': 224, 'buffLocsName': 232, 'expBuffLocsName': 240, 'buffIconName': 248, 'expBuffIconName': 256}    
    def __init__(self, cap: System.Single, expCap: System.String, ignoreList: System.String, expIgnoreList: System.String, mutationId: System.String, expMutationId: System.String, towerBehavior: Assets.Scripts.Unity.Towers.TowerBehavior, expTowerBehavior: Assets.Scripts.Unity.Towers.TowerBehavior, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, weaponBehavior: Assets.Scripts.Unity.Towers.Weapons.WeaponBehavior, expWeaponBehavior: Assets.Scripts.Unity.Towers.Weapons.WeaponBehavior, buffLocsName: System.String, expBuffLocsName: System.String, buffIconName: System.String, expBuffIconName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.cap = cap
		self.expCap = expCap
		self.ignoreList = ignoreList
		self.expIgnoreList = expIgnoreList
		self.mutationId = mutationId
		self.expMutationId = expMutationId
		self.towerBehavior = towerBehavior
		self.expTowerBehavior = expTowerBehavior
		self.display = display
		self.expDisplay = expDisplay
		self.weaponBehavior = weaponBehavior
		self.expWeaponBehavior = expWeaponBehavior
		self.buffLocsName = buffLocsName
		self.expBuffLocsName = expBuffLocsName
		self.buffIconName = buffIconName
		self.expBuffIconName = expBuffIconName


class AddBehaviorToBloon:

    offsets = {'parent': 136, 'lifespan': 144, 'expLifespan': 152, 'layers': 160, 'expLayers': 168, 'mutationId': 176, 'expMutationId': 184, 'behavior': 192, 'overlays': 200, 'expOverlays': 208, 'bloonFilter': 216, 'expBloonFilter': 224, 'bloonFilters': 232, 'expBloonFilters': 240, 'isUnique': 248, 'expIsUnique': 256, 'lastAppliesFirst': 264, 'expLastAppliesFirst': 272, 'processThisFrame': 280, 'expProcessThisFrame': 288, 'cascadeMutators': 296, 'expCascadeMutators': 304, 'applyOnlyIfDamaged': 312, 'expApplyOnlyIfDamaged': 320, 'stackCount': 328, 'expStackCount': 336}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.AddBehaviorToBloon, lifespan: System.Single, expLifespan: System.String, layers: System.Int32, expLayers: System.String, mutationId: System.String, expMutationId: System.String, behavior: Assets.Scripts.Unity.Bloons.Behavior, overlays: Assets.Scripts.Unity.Bloons.OverlayGroup, expOverlays: Assets.Scripts.Unity.Bloons.OverlayGroup, bloonFilter: Assets.Scripts.Unity.Towers.Filters.Filter, expBloonFilter: Assets.Scripts.Unity.Towers.Filters.Filter, bloonFilters: UnityEngine.GameObject, expBloonFilters: UnityEngine.GameObject, isUnique: System.Boolean, expIsUnique: System.String, lastAppliesFirst: System.Boolean, expLastAppliesFirst: System.String, processThisFrame: System.Boolean, expProcessThisFrame: System.String, cascadeMutators: System.Boolean, expCascadeMutators: System.String, applyOnlyIfDamaged: System.Boolean, expApplyOnlyIfDamaged: System.String, stackCount: System.Int32, expStackCount: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.layers = layers
		self.expLayers = expLayers
		self.mutationId = mutationId
		self.expMutationId = expMutationId
		self.behavior = behavior
		self.overlays = overlays
		self.expOverlays = expOverlays
		self.bloonFilter = bloonFilter
		self.expBloonFilter = expBloonFilter
		self.bloonFilters = bloonFilters
		self.expBloonFilters = expBloonFilters
		self.isUnique = isUnique
		self.expIsUnique = expIsUnique
		self.lastAppliesFirst = lastAppliesFirst
		self.expLastAppliesFirst = expLastAppliesFirst
		self.processThisFrame = processThisFrame
		self.expProcessThisFrame = expProcessThisFrame
		self.cascadeMutators = cascadeMutators
		self.expCascadeMutators = expCascadeMutators
		self.applyOnlyIfDamaged = applyOnlyIfDamaged
		self.expApplyOnlyIfDamaged = expApplyOnlyIfDamaged
		self.stackCount = stackCount
		self.expStackCount = expStackCount


class AddBerserkerBrewToProjectile:

    offsets = {'mutationId': 136, 'expMutationId': 144, 'lifespan': 152, 'expLifespan': 160, 'cap': 168, 'expCap': 176, 'ignoreList': 184, 'expIgnoreList': 192, 'ignoreMutationsByOrder': 200, 'expIgnoreMutationsByOrder': 208, 'weaponBehavior': 216, 'expWeaponBehavior': 224, 'towerBehavior': 232, 'expTowerBehavior': 240, 'rebuffBlockTime': 248, 'expRebuffBlockTime': 256, 'display': 264, 'expDisplay': 272, 'buffLocsName': 280, 'expBuffLocsName': 288, 'buffIconName': 296, 'expBuffIconName': 304, 'mutatorsToRemove': 312, 'expMutatorsToRemove': 320}    
    def __init__(self, mutationId: System.String, expMutationId: System.String, lifespan: System.Single, expLifespan: System.String, cap: System.Single, expCap: System.String, ignoreList: System.String, expIgnoreList: System.String, ignoreMutationsByOrder: System.String, expIgnoreMutationsByOrder: System.String, weaponBehavior: Assets.Scripts.Unity.Towers.Weapons.WeaponBehavior, expWeaponBehavior: Assets.Scripts.Unity.Towers.Weapons.WeaponBehavior, towerBehavior: Assets.Scripts.Unity.Towers.TowerBehavior, expTowerBehavior: Assets.Scripts.Unity.Towers.TowerBehavior, rebuffBlockTime: System.Single, expRebuffBlockTime: System.String, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, buffLocsName: System.String, expBuffLocsName: System.String, buffIconName: System.String, expBuffIconName: System.String, mutatorsToRemove: System.String, expMutatorsToRemove: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.mutationId = mutationId
		self.expMutationId = expMutationId
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.cap = cap
		self.expCap = expCap
		self.ignoreList = ignoreList
		self.expIgnoreList = expIgnoreList
		self.ignoreMutationsByOrder = ignoreMutationsByOrder
		self.expIgnoreMutationsByOrder = expIgnoreMutationsByOrder
		self.weaponBehavior = weaponBehavior
		self.expWeaponBehavior = expWeaponBehavior
		self.towerBehavior = towerBehavior
		self.expTowerBehavior = expTowerBehavior
		self.rebuffBlockTime = rebuffBlockTime
		self.expRebuffBlockTime = expRebuffBlockTime
		self.display = display
		self.expDisplay = expDisplay
		self.buffLocsName = buffLocsName
		self.expBuffLocsName = expBuffLocsName
		self.buffIconName = buffIconName
		self.expBuffIconName = expBuffIconName
		self.mutatorsToRemove = mutatorsToRemove
		self.expMutatorsToRemove = expMutatorsToRemove


class AddBonusDamagePerHitToBloon:

    offsets = {'parent': 136, 'mutationId': 144, 'expMutationId': 152, 'lifespan': 160, 'expLifespan': 168, 'perHitDamageAddition': 176, 'expPerHitDamageAddition': 184, 'layers': 192, 'expLayers': 200, 'isUnique': 208, 'expIsUnique': 216, 'lastAppliesFirst': 224, 'expLastAppliesFirst': 232, 'cascadeMutators': 240, 'expCascadeMutators': 248}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.AddBonusDamagePerHitToBloon, mutationId: System.String, expMutationId: System.String, lifespan: System.Single, expLifespan: System.String, perHitDamageAddition: System.Single, expPerHitDamageAddition: System.String, layers: System.Int32, expLayers: System.String, isUnique: System.Boolean, expIsUnique: System.String, lastAppliesFirst: System.Boolean, expLastAppliesFirst: System.String, cascadeMutators: System.Boolean, expCascadeMutators: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.mutationId = mutationId
		self.expMutationId = expMutationId
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.perHitDamageAddition = perHitDamageAddition
		self.expPerHitDamageAddition = expPerHitDamageAddition
		self.layers = layers
		self.expLayers = expLayers
		self.isUnique = isUnique
		self.expIsUnique = expIsUnique
		self.lastAppliesFirst = lastAppliesFirst
		self.expLastAppliesFirst = expLastAppliesFirst
		self.cascadeMutators = cascadeMutators
		self.expCascadeMutators = expCascadeMutators


class AddTagToBloon:

    offsets = {'parent': 136, 'bloonTag': 144, 'expBloonTag': 152, 'lifespan': 160, 'expLifespan': 168, 'layers': 176, 'expLayers': 184, 'mutationId': 192, 'expMutationId': 200, 'isUnique': 208, 'expIsUnique': 216, 'overlays': 224, 'expOverlays': 232}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.AddTagToBloon, bloonTag: System.String, expBloonTag: System.String, lifespan: System.Single, expLifespan: System.String, layers: System.Int32, expLayers: System.String, mutationId: System.String, expMutationId: System.String, isUnique: System.Boolean, expIsUnique: System.String, overlays: Assets.Scripts.Unity.Bloons.OverlayGroup, expOverlays: Assets.Scripts.Unity.Bloons.OverlayGroup, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.bloonTag = bloonTag
		self.expBloonTag = expBloonTag
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.layers = layers
		self.expLayers = expLayers
		self.mutationId = mutationId
		self.expMutationId = expMutationId
		self.isUnique = isUnique
		self.expIsUnique = expIsUnique
		self.overlays = overlays
		self.expOverlays = expOverlays


class AddbehaviorToWeapon:

    offsets = {'parent': 136, 'lifespan': 144, 'expLifespan': 152, 'mutationId': 160, 'expMutationId': 168, 'behavior': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.AddbehaviorToWeapon, lifespan: System.Single, expLifespan: System.String, mutationId: System.String, expMutationId: System.String, behavior: Assets.Scripts.Unity.Towers.Weapons.WeaponBehavior, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.mutationId = mutationId
		self.expMutationId = expMutationId
		self.behavior = behavior


class AdoraTrackTarget:

    offsets = {'parent': 136, 'rotation': 144, 'expRotation': 152, 'minimumSpeed': 160, 'expMinimumSpeed': 168, 'maximumSpeed': 176, 'expMaximumSpeed': 184, 'acceleration': 192, 'expAcceleration': 200, 'lifespan': 208, 'expLifespan': 216, 'accelerateInAngle': 224, 'expAccelerateInAngle': 232, 'startDeceleratingIfAngleGreaterThan': 240, 'expStartDeceleratingIfAngleGreaterThan': 248}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.AdoraTrackTarget, rotation: System.Single, expRotation: System.String, minimumSpeed: System.Single, expMinimumSpeed: System.String, maximumSpeed: System.Single, expMaximumSpeed: System.String, acceleration: System.Single, expAcceleration: System.String, lifespan: System.Single, expLifespan: System.String, accelerateInAngle: System.Single, expAccelerateInAngle: System.String, startDeceleratingIfAngleGreaterThan: System.Single, expStartDeceleratingIfAngleGreaterThan: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.rotation = rotation
		self.expRotation = expRotation
		self.minimumSpeed = minimumSpeed
		self.expMinimumSpeed = expMinimumSpeed
		self.maximumSpeed = maximumSpeed
		self.expMaximumSpeed = expMaximumSpeed
		self.acceleration = acceleration
		self.expAcceleration = expAcceleration
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.accelerateInAngle = accelerateInAngle
		self.expAccelerateInAngle = expAccelerateInAngle
		self.startDeceleratingIfAngleGreaterThan = startDeceleratingIfAngleGreaterThan
		self.expStartDeceleratingIfAngleGreaterThan = expStartDeceleratingIfAngleGreaterThan


class Age:

    offsets = {'parent': 136, 'lifespan': 144, 'expLifespan': 152, 'rounds': 160, 'expRounds': 168, 'useRoundTime': 176, 'expUseRoundTime': 184}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.Age, lifespan: System.Single, expLifespan: System.String, rounds: System.Int32, expRounds: System.String, useRoundTime: System.Boolean, expUseRoundTime: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.rounds = rounds
		self.expRounds = expRounds
		self.useRoundTime = useRoundTime
		self.expUseRoundTime = expUseRoundTime


class AgeRandom:

    offsets = {'parent': 136, 'minLifespan': 144, 'expMinLifespan': 152, 'maxLifespan': 160, 'expMaxLifespan': 168, 'rounds': 176, 'expRounds': 184, 'useRoundTime': 192, 'expUseRoundTime': 200}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.AgeRandom, minLifespan: System.Single, expMinLifespan: System.String, maxLifespan: System.Single, expMaxLifespan: System.String, rounds: System.Int32, expRounds: System.String, useRoundTime: System.Boolean, expUseRoundTime: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.minLifespan = minLifespan
		self.expMinLifespan = expMinLifespan
		self.maxLifespan = maxLifespan
		self.expMaxLifespan = expMaxLifespan
		self.rounds = rounds
		self.expRounds = expRounds
		self.useRoundTime = useRoundTime
		self.expUseRoundTime = expUseRoundTime


class AnimateOnCollide:

    offsets = {'parent': 136, 'animationState': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.AnimateOnCollide, animationState: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.animationState = animationState


class ArriveAtTarget:

    offsets = {'parent': 136, 'timeToTake': 144, 'expTimeToTake': 152, 'altSpeed': 160, 'expAltSpeed': 168, 'filterCollisionWhileMoving': 176, 'expFilterCollisionWhileMoving': 184, 'expireOnArrival': 192, 'expExpireOnArrival': 200, 'numSamples': 208, 'expNumSamples': 216, 'arrivalCurve': 224, 'expArrivalCurve': 232, 'stopOnTargetReached': 240, 'expStopOnTargetReached': 248}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.ArriveAtTarget, timeToTake: System.Single, expTimeToTake: System.String, altSpeed: System.Single, expAltSpeed: System.String, filterCollisionWhileMoving: System.Boolean, expFilterCollisionWhileMoving: System.String, expireOnArrival: System.Boolean, expExpireOnArrival: System.String, numSamples: System.Int32, expNumSamples: System.String, arrivalCurve: Assets.Scripts.Unity.Map.AnimCurve, expArrivalCurve: Assets.Scripts.Unity.Map.AnimCurve, stopOnTargetReached: System.Boolean, expStopOnTargetReached: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.timeToTake = timeToTake
		self.expTimeToTake = expTimeToTake
		self.altSpeed = altSpeed
		self.expAltSpeed = expAltSpeed
		self.filterCollisionWhileMoving = filterCollisionWhileMoving
		self.expFilterCollisionWhileMoving = expFilterCollisionWhileMoving
		self.expireOnArrival = expireOnArrival
		self.expExpireOnArrival = expExpireOnArrival
		self.numSamples = numSamples
		self.expNumSamples = expNumSamples
		self.arrivalCurve = arrivalCurve
		self.expArrivalCurve = expArrivalCurve
		self.stopOnTargetReached = stopOnTargetReached
		self.expStopOnTargetReached = expStopOnTargetReached


class BigSqueezeFortifiedEffect:

    offsets = {'parent': 136, 'randomRotation': 144, 'expRandomRotation': 152, 'effect': 160, 'expEffect': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.BigSqueezeFortifiedEffect, randomRotation: System.Boolean, expRandomRotation: System.String, effect: Assets.Scripts.Unity.Effects.Effect, expEffect: Assets.Scripts.Unity.Effects.Effect, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.randomRotation = randomRotation
		self.expRandomRotation = expRandomRotation
		self.effect = effect
		self.expEffect = expEffect


class BloonSlap:

    offsets = {'parent': 136, 'valueForNormalBloons': 144, 'expValueForNormalBloons': 152, 'valueForCeramicBloons': 160, 'expValueForCeramicBloons': 168, 'heavyMultiplier': 176, 'expHeavyMultiplier': 184, 'lightMultiplier': 192, 'expLightMultiplier': 200, 'lifespan': 208, 'expLifespan': 216, 'mutationId': 224, 'expMutationId': 232}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.BloonSlap, valueForNormalBloons: System.Int32, expValueForNormalBloons: System.String, valueForCeramicBloons: System.Int32, expValueForCeramicBloons: System.String, heavyMultiplier: System.Int32, expHeavyMultiplier: System.String, lightMultiplier: System.Int32, expLightMultiplier: System.String, lifespan: System.Single, expLifespan: System.String, mutationId: System.String, expMutationId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.valueForNormalBloons = valueForNormalBloons
		self.expValueForNormalBloons = expValueForNormalBloons
		self.valueForCeramicBloons = valueForCeramicBloons
		self.expValueForCeramicBloons = expValueForCeramicBloons
		self.heavyMultiplier = heavyMultiplier
		self.expHeavyMultiplier = expHeavyMultiplier
		self.lightMultiplier = lightMultiplier
		self.expLightMultiplier = expLightMultiplier
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.mutationId = mutationId
		self.expMutationId = expMutationId


class BrickellFreezeOtherMines:

    offsets = {'parent': 136, 'freezeDuration': 144, 'expFreezeDuration': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.BrickellFreezeOtherMines, freezeDuration: System.Single, expFreezeDuration: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.freezeDuration = freezeDuration
		self.expFreezeDuration = expFreezeDuration


class Cash:

    offsets = {'parent': 136, 'minimum': 144, 'expMinimum': 152, 'maximum': 160, 'expMaximum': 168, 'bonusMultiplier': 176, 'expBonusMultiplier': 184, 'salvage': 192, 'expSalvage': 200, 'noTransformCash': 208, 'expNoTransformCash': 216, 'distributeSalvage': 224, 'expDistributeSalvage': 232}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.Cash, minimum: System.Single, expMinimum: System.String, maximum: System.Single, expMaximum: System.String, bonusMultiplier: System.Single, expBonusMultiplier: System.String, salvage: System.Single, expSalvage: System.String, noTransformCash: System.Boolean, expNoTransformCash: System.String, distributeSalvage: System.Boolean, expDistributeSalvage: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.minimum = minimum
		self.expMinimum = expMinimum
		self.maximum = maximum
		self.expMaximum = expMaximum
		self.bonusMultiplier = bonusMultiplier
		self.expBonusMultiplier = expBonusMultiplier
		self.salvage = salvage
		self.expSalvage = expSalvage
		self.noTransformCash = noTransformCash
		self.expNoTransformCash = expNoTransformCash
		self.distributeSalvage = distributeSalvage
		self.expDistributeSalvage = expDistributeSalvage


class ChipMapBasedObject:

    offsets = {'parent': 136, 'chipId': 144, 'expChipId': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.ChipMapBasedObject, chipId: System.String, expChipId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.chipId = chipId
		self.expChipId = expChipId


class ClearHitBloons:

    offsets = {'parent': 136, 'interval': 144, 'expInterval': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.ClearHitBloons, interval: System.Single, expInterval: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.interval = interval
		self.expInterval = expInterval


class ClearHitBloonsWhenNoLongerColliding:

    offsets = {'parent': 136, 'interval': 144, 'expInterval': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.ClearHitBloonsWhenNoLongerColliding, interval: System.Single, expInterval: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.interval = interval
		self.expInterval = expInterval


class Collect:

    offsets = {'parent': 136, 'collectRadius': 144, 'expCollectRadius': 152, 'timeToTake': 160, 'expTimeToTake': 168, 'anchorMinRadius': 176, 'expAnchorMinRadius': 184, 'anchorMaxRadius': 192, 'expAnchorMaxRadius': 200, 'sound': 208, 'expSound': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.Collect, collectRadius: System.Single, expCollectRadius: System.String, timeToTake: System.Single, expTimeToTake: System.String, anchorMinRadius: System.Single, expAnchorMinRadius: System.String, anchorMaxRadius: System.Single, expAnchorMaxRadius: System.String, sound: UnityEngine.AudioSource, expSound: UnityEngine.AudioSource, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.collectRadius = collectRadius
		self.expCollectRadius = expCollectRadius
		self.timeToTake = timeToTake
		self.expTimeToTake = expTimeToTake
		self.anchorMinRadius = anchorMinRadius
		self.expAnchorMinRadius = expAnchorMinRadius
		self.anchorMaxRadius = anchorMaxRadius
		self.expAnchorMaxRadius = expAnchorMaxRadius
		self.sound = sound
		self.expSound = expSound


class CollideExtraPierceReduction:

    offsets = {'parent': 136, 'bloonTag': 144, 'expBloonTag': 152, 'extraAmount': 160, 'expExtraAmount': 168, 'destroyProjectileIfPierceNotEnough': 176, 'expDestroyProjectileIfPierceNotEnough': 184}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.CollideExtraPierceReduction, bloonTag: System.String, expBloonTag: System.String, extraAmount: System.Int32, expExtraAmount: System.String, destroyProjectileIfPierceNotEnough: System.Boolean, expDestroyProjectileIfPierceNotEnough: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.bloonTag = bloonTag
		self.expBloonTag = expBloonTag
		self.extraAmount = extraAmount
		self.expExtraAmount = expExtraAmount
		self.destroyProjectileIfPierceNotEnough = destroyProjectileIfPierceNotEnough
		self.expDestroyProjectileIfPierceNotEnough = expDestroyProjectileIfPierceNotEnough


class CollideOnlyWithTarget:

    offsets = {'parent': 136}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.CollideOnlyWithTarget, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class CreateEffectFromCollisionToCollision:

    offsets = {'parent': 136, 'effect': 144, 'expEffect': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.CreateEffectFromCollisionToCollision, effect: Assets.Scripts.Unity.Effects.Effect, expEffect: Assets.Scripts.Unity.Effects.Effect, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.effect = effect
		self.expEffect = expEffect


class CreateEffectOnExhaustFraction:

    offsets = {'parent': 136, 'lifespan': 144, 'expLifespan': 152, 'expDisplay': 160, 'display': 168, 'expEffect': 176, 'effect': 184, 'fullscreen': 192, 'expFullscreen': 200, 'fraction': 208, 'expFraction': 216, 'durationFraction': 224, 'expDurationFraction': 232, 'randomRotation': 240, 'expRandomRotation': 248}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.CreateEffectOnExhaustFraction, lifespan: System.Single, expLifespan: System.String, expDisplay: UnityEngine.GameObject, display: UnityEngine.GameObject, expEffect: Assets.Scripts.Unity.Effects.Effect, effect: Assets.Scripts.Unity.Effects.Effect, fullscreen: System.Boolean, expFullscreen: System.String, fraction: System.Single, expFraction: System.String, durationFraction: System.Single, expDurationFraction: System.String, randomRotation: System.Boolean, expRandomRotation: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.expDisplay = expDisplay
		self.display = display
		self.expEffect = expEffect
		self.effect = effect
		self.fullscreen = fullscreen
		self.expFullscreen = expFullscreen
		self.fraction = fraction
		self.expFraction = expFraction
		self.durationFraction = durationFraction
		self.expDurationFraction = expDurationFraction
		self.randomRotation = randomRotation
		self.expRandomRotation = expRandomRotation


class CreateEffectOnExhausted:

    offsets = {'parent': 136, 'effect': 144, 'expEffect': 152, 'lifespan': 160, 'expLifespan': 168, 'fullscreen': 176, 'expFullscreen': 184, 'randomRotation': 192, 'expRandomRotation': 200, 'display': 208, 'expDisplay': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.CreateEffectOnExhausted, effect: Assets.Scripts.Unity.Effects.Effect, expEffect: Assets.Scripts.Unity.Effects.Effect, lifespan: System.Single, expLifespan: System.String, fullscreen: System.Boolean, expFullscreen: System.String, randomRotation: System.Boolean, expRandomRotation: System.String, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.effect = effect
		self.expEffect = expEffect
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.fullscreen = fullscreen
		self.expFullscreen = expFullscreen
		self.randomRotation = randomRotation
		self.expRandomRotation = expRandomRotation
		self.display = display
		self.expDisplay = expDisplay


class CreateEffectOnExpire:

    offsets = {'parent': 136, 'lifespan': 144, 'expLifespan': 152, 'display': 160, 'expDisplay': 168, 'fullscreen': 176, 'expFullscreen': 184, 'randomRotation': 192, 'expRandomRotation': 200, 'effect': 208, 'expEffect': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.CreateEffectOnExpire, lifespan: System.Single, expLifespan: System.String, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, fullscreen: System.Boolean, expFullscreen: System.String, randomRotation: System.Boolean, expRandomRotation: System.String, effect: Assets.Scripts.Unity.Effects.Effect, expEffect: Assets.Scripts.Unity.Effects.Effect, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.display = display
		self.expDisplay = expDisplay
		self.fullscreen = fullscreen
		self.expFullscreen = expFullscreen
		self.randomRotation = randomRotation
		self.expRandomRotation = expRandomRotation
		self.effect = effect
		self.expEffect = expEffect


class CreateLightningEffect:

    offsets = {'parent': 136, 'lifespan': 144, 'expLifespan': 152, 'display1Small': 160, 'expDisplay1Small': 168, 'display2Small': 176, 'expDisplay2Small': 184, 'display3Small': 192, 'expDisplay3Small': 200, 'display1Medium': 208, 'expDisplay1Medium': 216, 'display2Medium': 224, 'expDisplay2Medium': 232, 'display3Medium': 240, 'expDisplay3Medium': 248, 'display1Large': 256, 'expDisplay1Large': 264, 'display2Large': 272, 'expDisplay2Large': 280, 'display3Large': 288, 'expDisplay3Large': 296}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.CreateLightningEffect, lifespan: System.Single, expLifespan: System.String, display1Small: UnityEngine.GameObject, expDisplay1Small: UnityEngine.GameObject, display2Small: UnityEngine.GameObject, expDisplay2Small: UnityEngine.GameObject, display3Small: UnityEngine.GameObject, expDisplay3Small: UnityEngine.GameObject, display1Medium: UnityEngine.GameObject, expDisplay1Medium: UnityEngine.GameObject, display2Medium: UnityEngine.GameObject, expDisplay2Medium: UnityEngine.GameObject, display3Medium: UnityEngine.GameObject, expDisplay3Medium: UnityEngine.GameObject, display1Large: UnityEngine.GameObject, expDisplay1Large: UnityEngine.GameObject, display2Large: UnityEngine.GameObject, expDisplay2Large: UnityEngine.GameObject, display3Large: UnityEngine.GameObject, expDisplay3Large: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.display1Small = display1Small
		self.expDisplay1Small = expDisplay1Small
		self.display2Small = display2Small
		self.expDisplay2Small = expDisplay2Small
		self.display3Small = display3Small
		self.expDisplay3Small = expDisplay3Small
		self.display1Medium = display1Medium
		self.expDisplay1Medium = expDisplay1Medium
		self.display2Medium = display2Medium
		self.expDisplay2Medium = expDisplay2Medium
		self.display3Medium = display3Medium
		self.expDisplay3Medium = expDisplay3Medium
		self.display1Large = display1Large
		self.expDisplay1Large = expDisplay1Large
		self.display2Large = display2Large
		self.expDisplay2Large = expDisplay2Large
		self.display3Large = display3Large
		self.expDisplay3Large = expDisplay3Large


class CreateProjectileOnBlockerCollide:

    offsets = {'parent': 136, 'projectile': 144, 'expProjectile': 152, 'emission': 160, 'expEmission': 168, 'display': 176, 'expDisplay': 184, 'displayLifetime': 192, 'expDisplayLifetime': 200}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.CreateProjectileOnBlockerCollide, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, expProjectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, emission: Assets.Scripts.Unity.Towers.Emissions.Emission, expEmission: Assets.Scripts.Unity.Towers.Emissions.Emission, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, displayLifetime: System.Single, expDisplayLifetime: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.projectile = projectile
		self.expProjectile = expProjectile
		self.emission = emission
		self.expEmission = expEmission
		self.display = display
		self.expDisplay = expDisplay
		self.displayLifetime = displayLifetime
		self.expDisplayLifetime = expDisplayLifetime


class CreateProjectileOnContact:

    offsets = {'parent': 136, 'projectile': 144, 'expProjectile': 152, 'emission': 160, 'expEmission': 168, 'passOnCollidedWith': 176, 'expPassOnCollidedWith': 184, 'dontCreateAtBloon': 192, 'expDontCreateAtBloon': 200, 'passOnDirectionToContact': 208, 'expPassOnDirectionToContact': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.CreateProjectileOnContact, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, expProjectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, emission: Assets.Scripts.Unity.Towers.Emissions.Emission, expEmission: Assets.Scripts.Unity.Towers.Emissions.Emission, passOnCollidedWith: System.Boolean, expPassOnCollidedWith: System.String, dontCreateAtBloon: System.Boolean, expDontCreateAtBloon: System.String, passOnDirectionToContact: System.Boolean, expPassOnDirectionToContact: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.projectile = projectile
		self.expProjectile = expProjectile
		self.emission = emission
		self.expEmission = expEmission
		self.passOnCollidedWith = passOnCollidedWith
		self.expPassOnCollidedWith = expPassOnCollidedWith
		self.dontCreateAtBloon = dontCreateAtBloon
		self.expDontCreateAtBloon = expDontCreateAtBloon
		self.passOnDirectionToContact = passOnDirectionToContact
		self.expPassOnDirectionToContact = expPassOnDirectionToContact


class CreateProjectileOnExhaustFraction:

    offsets = {'parent': 136, 'projectile': 144, 'emission': 152, 'fraction': 160, 'expFraction': 168, 'durationFraction': 176, 'expDurationFraction': 184, 'canCreateInBetweenRounds': 192, 'expCanCreateInBetweenRounds': 200}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.CreateProjectileOnExhaustFraction, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, emission: Assets.Scripts.Unity.Towers.Emissions.Emission, fraction: System.Single, expFraction: System.String, durationFraction: System.Single, expDurationFraction: System.String, canCreateInBetweenRounds: System.Boolean, expCanCreateInBetweenRounds: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.projectile = projectile
		self.emission = emission
		self.fraction = fraction
		self.expFraction = expFraction
		self.durationFraction = durationFraction
		self.expDurationFraction = expDurationFraction
		self.canCreateInBetweenRounds = canCreateInBetweenRounds
		self.expCanCreateInBetweenRounds = expCanCreateInBetweenRounds


class CreateProjectileOnExhaustPierce:

    offsets = {'parent': 136, 'projectile': 144, 'emission': 152, 'pierceInterval': 160, 'expPierceInterval': 168, 'count': 176, 'expCount': 184, 'minimumTimeDifference': 192, 'expMinimumTimeDifference': 200, 'destroyProjectile': 208, 'expDestroyProjectile': 216, 'display': 224, 'expDisplay': 232, 'displayLifetime': 240, 'expDisplayLifetime': 248, 'displayFullscreen': 256, 'expDisplayFullscreen': 264}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.CreateProjectileOnExhaustPierce, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, emission: Assets.Scripts.Unity.Towers.Emissions.Emission, pierceInterval: System.Single, expPierceInterval: System.String, count: System.Int32, expCount: System.String, minimumTimeDifference: System.Single, expMinimumTimeDifference: System.String, destroyProjectile: System.String, expDestroyProjectile: System.String, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, displayLifetime: System.Single, expDisplayLifetime: System.String, displayFullscreen: System.Boolean, expDisplayFullscreen: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.projectile = projectile
		self.emission = emission
		self.pierceInterval = pierceInterval
		self.expPierceInterval = expPierceInterval
		self.count = count
		self.expCount = expCount
		self.minimumTimeDifference = minimumTimeDifference
		self.expMinimumTimeDifference = expMinimumTimeDifference
		self.destroyProjectile = destroyProjectile
		self.expDestroyProjectile = expDestroyProjectile
		self.display = display
		self.expDisplay = expDisplay
		self.displayLifetime = displayLifetime
		self.expDisplayLifetime = expDisplayLifetime
		self.displayFullscreen = displayFullscreen
		self.expDisplayFullscreen = expDisplayFullscreen


class CreateProjectileOnExpire:

    offsets = {'parent': 136, 'projectile': 144, 'emission': 152, 'useRotation': 160, 'expUseRotation': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.CreateProjectileOnExpire, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, emission: Assets.Scripts.Unity.Towers.Emissions.Emission, useRotation: System.Boolean, expUseRotation: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.projectile = projectile
		self.emission = emission
		self.useRotation = useRotation
		self.expUseRotation = expUseRotation


class CreateProjectileOnInterval:

    offsets = {'parent': 136, 'projectile': 144, 'expProjectile': 152, 'emission': 160, 'expEmission': 168, 'interval': 176, 'expInterval': 184, 'onlyIfHasTarget': 192, 'expOnlyIfHasTarget': 200, 'range': 208, 'expRange': 216, 'targetType': 224, 'expTargetType': 232}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.CreateProjectileOnInterval, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, expProjectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, emission: Assets.Scripts.Unity.Towers.Emissions.Emission, expEmission: Assets.Scripts.Unity.Towers.Emissions.Emission, interval: System.Single, expInterval: System.String, onlyIfHasTarget: System.Boolean, expOnlyIfHasTarget: System.String, range: System.Single, expRange: System.String, targetType: System.String, expTargetType: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.projectile = projectile
		self.expProjectile = expProjectile
		self.emission = emission
		self.expEmission = expEmission
		self.interval = interval
		self.expInterval = expInterval
		self.onlyIfHasTarget = onlyIfHasTarget
		self.expOnlyIfHasTarget = expOnlyIfHasTarget
		self.range = range
		self.expRange = expRange
		self.targetType = targetType
		self.expTargetType = expTargetType


class CreateRopeEffect:

    offsets = {'parent': 136, 'display': 144, 'expDisplay': 152, 'endDisplay': 160, 'expEndDisplay': 168, 'spriteRadius': 176, 'expSpriteRadius': 184, 'spriteSpacing': 192, 'expSpriteSpacing': 200, 'spriteOffset': 208, 'expSpriteOffset': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.CreateRopeEffect, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, endDisplay: UnityEngine.GameObject, expEndDisplay: UnityEngine.GameObject, spriteRadius: System.Single, expSpriteRadius: System.String, spriteSpacing: System.Single, expSpriteSpacing: System.String, spriteOffset: System.Single, expSpriteOffset: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.display = display
		self.expDisplay = expDisplay
		self.endDisplay = endDisplay
		self.expEndDisplay = expEndDisplay
		self.spriteRadius = spriteRadius
		self.expSpriteRadius = expSpriteRadius
		self.spriteSpacing = spriteSpacing
		self.expSpriteSpacing = expSpriteSpacing
		self.spriteOffset = spriteOffset
		self.expSpriteOffset = expSpriteOffset


class CreateSoundOnDelayedCollision:

    offsets = {'parent': 136, 'delay': 144, 'sound1': 152, 'expSound1': 160, 'sound2': 168, 'expSound2': 176, 'sound3': 184, 'expSound3': 192, 'sound4': 200, 'expSound4': 208}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.CreateProjectileOnContact, delay: System.Single, sound1: UnityEngine.AudioSource, expSound1: UnityEngine.AudioSource, sound2: UnityEngine.AudioSource, expSound2: UnityEngine.AudioSource, sound3: UnityEngine.AudioSource, expSound3: UnityEngine.AudioSource, sound4: UnityEngine.AudioSource, expSound4: UnityEngine.AudioSource, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.delay = delay
		self.sound1 = sound1
		self.expSound1 = expSound1
		self.sound2 = sound2
		self.expSound2 = expSound2
		self.sound3 = sound3
		self.expSound3 = expSound3
		self.sound4 = sound4
		self.expSound4 = expSound4


class CreateSoundOnPickup:

    offsets = {'parent': 136, 'sound': 144, 'expSound': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.CreateSoundOnPickup, sound: UnityEngine.AudioSource, expSound: UnityEngine.AudioSource, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.sound = sound
		self.expSound = expSound


class CreateSoundOnProjectileCollision:

    offsets = {'parent': 136, 'sound1': 144, 'expSound1': 152, 'sound2': 160, 'expSound2': 168, 'sound3': 176, 'expSound3': 184, 'sound4': 192, 'expSound4': 200, 'sound5': 208, 'expSound5': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.CreateProjectileOnContact, sound1: UnityEngine.AudioSource, expSound1: UnityEngine.AudioSource, sound2: UnityEngine.AudioSource, expSound2: UnityEngine.AudioSource, sound3: UnityEngine.AudioSource, expSound3: UnityEngine.AudioSource, sound4: UnityEngine.AudioSource, expSound4: UnityEngine.AudioSource, sound5: UnityEngine.AudioSource, expSound5: UnityEngine.AudioSource, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.sound1 = sound1
		self.expSound1 = expSound1
		self.sound2 = sound2
		self.expSound2 = expSound2
		self.sound3 = sound3
		self.expSound3 = expSound3
		self.sound4 = sound4
		self.expSound4 = expSound4
		self.sound5 = sound5
		self.expSound5 = expSound5


class CreateSoundOnProjectileCreated:

    offsets = {'parent': 128, 'sound1': 136, 'expSound1': 144, 'sound2': 152, 'expSound2': 160, 'sound3': 168, 'expSound3': 176, 'sound4': 184, 'expSound4': 192, 'sound5': 200, 'expSound5': 208, 'type': 216, 'expType': 224}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.CreateSoundOnProjectileCreated, sound1: UnityEngine.AudioSource, expSound1: UnityEngine.AudioSource, sound2: UnityEngine.AudioSource, expSound2: UnityEngine.AudioSource, sound3: UnityEngine.AudioSource, expSound3: UnityEngine.AudioSource, sound4: UnityEngine.AudioSource, expSound4: UnityEngine.AudioSource, sound5: UnityEngine.AudioSource, expSound5: UnityEngine.AudioSource, type: System.String, expType: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.sound1 = sound1
		self.expSound1 = expSound1
		self.sound2 = sound2
		self.expSound2 = expSound2
		self.sound3 = sound3
		self.expSound3 = expSound3
		self.sound4 = sound4
		self.expSound4 = expSound4
		self.sound5 = sound5
		self.expSound5 = expSound5
		self.type = type
		self.expType = expType


class CreateSoundOnProjectileExhaust:

    offsets = {'parent': 136, 'sound1': 144, 'expSound1': 152, 'sound2': 160, 'expSound2': 168, 'sound3': 176, 'expSound3': 184, 'sound4': 192, 'expSound4': 200, 'sound5': 208, 'expSound5': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.CreateSoundOnProjectileExhaust, sound1: UnityEngine.AudioSource, expSound1: UnityEngine.AudioSource, sound2: UnityEngine.AudioSource, expSound2: UnityEngine.AudioSource, sound3: UnityEngine.AudioSource, expSound3: UnityEngine.AudioSource, sound4: UnityEngine.AudioSource, expSound4: UnityEngine.AudioSource, sound5: UnityEngine.AudioSource, expSound5: UnityEngine.AudioSource, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.sound1 = sound1
		self.expSound1 = expSound1
		self.sound2 = sound2
		self.expSound2 = expSound2
		self.sound3 = sound3
		self.expSound3 = expSound3
		self.sound4 = sound4
		self.expSound4 = expSound4
		self.sound5 = sound5
		self.expSound5 = expSound5


class CreateSoundOnProjectileExpire:

    offsets = {'parent': 136, 'sound1': 144, 'expSound1': 152, 'sound2': 160, 'expSound2': 168, 'sound3': 176, 'expSound3': 184, 'sound4': 192, 'expSound4': 200, 'sound5': 208, 'expSound5': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.CreateProjectileOnExpire, sound1: UnityEngine.AudioSource, expSound1: UnityEngine.AudioSource, sound2: UnityEngine.AudioSource, expSound2: UnityEngine.AudioSource, sound3: UnityEngine.AudioSource, expSound3: UnityEngine.AudioSource, sound4: UnityEngine.AudioSource, expSound4: UnityEngine.AudioSource, sound5: UnityEngine.AudioSource, expSound5: UnityEngine.AudioSource, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.sound1 = sound1
		self.expSound1 = expSound1
		self.sound2 = sound2
		self.expSound2 = expSound2
		self.sound3 = sound3
		self.expSound3 = expSound3
		self.sound4 = sound4
		self.expSound4 = expSound4
		self.sound5 = sound5
		self.expSound5 = expSound5


class CreateTower:

    offsets = {'parent': 136, 'tower': 144, 'expTower': 152, 'height': 160, 'expHeight': 168, 'positionAtTarget': 176, 'expPositionAtTarget': 184, 'destroySubTowersOnCreateNewTower': 192, 'expDestroySubTowersOnCreateNewTower': 200, 'useProjectileRotation': 208, 'expUseProjectileRotation': 216, 'useParentTargetPriority': 224, 'expUseParentTargetPriority': 232, 'carryMutatorsFromDestroyedTower': 240, 'expCarryMutatorsFromDestroyedTower': 248}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.CreateTower, tower: Assets.Scripts.Unity.Towers.Tower, expTower: Assets.Scripts.Unity.Towers.Tower, height: System.Single, expHeight: System.String, positionAtTarget: System.Boolean, expPositionAtTarget: System.String, destroySubTowersOnCreateNewTower: System.Boolean, expDestroySubTowersOnCreateNewTower: System.String, useProjectileRotation: System.Boolean, expUseProjectileRotation: System.String, useParentTargetPriority: System.Boolean, expUseParentTargetPriority: System.String, carryMutatorsFromDestroyedTower: System.Boolean, expCarryMutatorsFromDestroyedTower: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.tower = tower
		self.expTower = expTower
		self.height = height
		self.expHeight = expHeight
		self.positionAtTarget = positionAtTarget
		self.expPositionAtTarget = expPositionAtTarget
		self.destroySubTowersOnCreateNewTower = destroySubTowersOnCreateNewTower
		self.expDestroySubTowersOnCreateNewTower = expDestroySubTowersOnCreateNewTower
		self.useProjectileRotation = useProjectileRotation
		self.expUseProjectileRotation = expUseProjectileRotation
		self.useParentTargetPriority = useParentTargetPriority
		self.expUseParentTargetPriority = expUseParentTargetPriority
		self.carryMutatorsFromDestroyedTower = carryMutatorsFromDestroyedTower
		self.expCarryMutatorsFromDestroyedTower = expCarryMutatorsFromDestroyedTower


class CreateTypedTower:

    offsets = {'parent': 136, 'crushingTower': 144, 'expCrushingTower': 152, 'boomTower': 160, 'expBoomTower': 168, 'coldTower': 176, 'expColdTower': 184, 'energyTower': 192, 'expEnergyTower': 200, 'crushingDisplay': 208, 'expCrushingDisplay': 216, 'boomDisplay': 224, 'expBoomDisplay': 232, 'coldDisplay': 240, 'expColdDisplay': 248, 'energyDisplay': 256, 'expEnergyDisplay': 264}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.CreateTypedTower, crushingTower: Assets.Scripts.Unity.Towers.Tower, expCrushingTower: Assets.Scripts.Unity.Towers.Tower, boomTower: Assets.Scripts.Unity.Towers.Tower, expBoomTower: Assets.Scripts.Unity.Towers.Tower, coldTower: Assets.Scripts.Unity.Towers.Tower, expColdTower: Assets.Scripts.Unity.Towers.Tower, energyTower: Assets.Scripts.Unity.Towers.Tower, expEnergyTower: Assets.Scripts.Unity.Towers.Tower, crushingDisplay: UnityEngine.GameObject, expCrushingDisplay: UnityEngine.GameObject, boomDisplay: UnityEngine.GameObject, expBoomDisplay: UnityEngine.GameObject, coldDisplay: UnityEngine.GameObject, expColdDisplay: UnityEngine.GameObject, energyDisplay: UnityEngine.GameObject, expEnergyDisplay: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.crushingTower = crushingTower
		self.expCrushingTower = expCrushingTower
		self.boomTower = boomTower
		self.expBoomTower = expBoomTower
		self.coldTower = coldTower
		self.expColdTower = expColdTower
		self.energyTower = energyTower
		self.expEnergyTower = expEnergyTower
		self.crushingDisplay = crushingDisplay
		self.expCrushingDisplay = expCrushingDisplay
		self.boomDisplay = boomDisplay
		self.expBoomDisplay = expBoomDisplay
		self.coldDisplay = coldDisplay
		self.expColdDisplay = expColdDisplay
		self.energyDisplay = energyDisplay
		self.expEnergyDisplay = expEnergyDisplay


class Damage:

    offsets = {'parent': 136, 'damage': 144, 'expDamage': 152, 'maxDamage': 160, 'expMaxDamage': 168, 'damageType': 176, 'expDamageType': 184, 'distributeToChildren': 192, 'expDistributeToChildren': 200, 'overrideDistributeBlocker': 208, 'expOverrideDistributeBlocker': 216, 'createPopEffect': 224, 'expCreatePopEffect': 232, 'ignoreImmunityForBloonTypes': 240, 'expIgnoreImmunityForBloonTypes': 248}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.Damage, damage: System.Single, expDamage: System.String, maxDamage: System.Single, expMaxDamage: System.String, damageType: System.String, expDamageType: System.String, distributeToChildren: System.String, expDistributeToChildren: System.String, overrideDistributeBlocker: System.String, expOverrideDistributeBlocker: System.String, createPopEffect: System.Boolean, expCreatePopEffect: System.String, ignoreImmunityForBloonTypes: System.String, expIgnoreImmunityForBloonTypes: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.damage = damage
		self.expDamage = expDamage
		self.maxDamage = maxDamage
		self.expMaxDamage = expMaxDamage
		self.damageType = damageType
		self.expDamageType = expDamageType
		self.distributeToChildren = distributeToChildren
		self.expDistributeToChildren = expDistributeToChildren
		self.overrideDistributeBlocker = overrideDistributeBlocker
		self.expOverrideDistributeBlocker = expOverrideDistributeBlocker
		self.createPopEffect = createPopEffect
		self.expCreatePopEffect = expCreatePopEffect
		self.ignoreImmunityForBloonTypes = ignoreImmunityForBloonTypes
		self.expIgnoreImmunityForBloonTypes = expIgnoreImmunityForBloonTypes


class DamageInRingRadius:

    offsets = {'innerRingRadius': 256, 'expInnerRingRadius': 264}    
    def __init__(self, innerRingRadius: System.Single, expInnerRingRadius: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.innerRingRadius = innerRingRadius
		self.expInnerRingRadius = expInnerRingRadius


class DamageModifierForBloonState:

    offsets = {'parent': 136, 'multiplier': 144, 'expMultiplier': 152, 'additive': 160, 'expAdditive': 168, 'bloonStateValue': 176, 'expBloonStateValue': 184, 'mustIncludeAllTags': 192, 'expMustIncludeAllTags': 200, 'applyOverMaxDamage': 208, 'expApplyOverMaxDamage': 216, 'mustBeModified': 224, 'expMustBeModified': 232}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.DamageModifierForBloonState, multiplier: System.Single, expMultiplier: System.String, additive: System.Single, expAdditive: System.String, bloonStateValue: System.String, expBloonStateValue: System.String, mustIncludeAllTags: System.Boolean, expMustIncludeAllTags: System.String, applyOverMaxDamage: System.Boolean, expApplyOverMaxDamage: System.String, mustBeModified: System.Boolean, expMustBeModified: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.multiplier = multiplier
		self.expMultiplier = expMultiplier
		self.additive = additive
		self.expAdditive = expAdditive
		self.bloonStateValue = bloonStateValue
		self.expBloonStateValue = expBloonStateValue
		self.mustIncludeAllTags = mustIncludeAllTags
		self.expMustIncludeAllTags = expMustIncludeAllTags
		self.applyOverMaxDamage = applyOverMaxDamage
		self.expApplyOverMaxDamage = expApplyOverMaxDamage
		self.mustBeModified = mustBeModified
		self.expMustBeModified = expMustBeModified


class DamageModifierForBloonType:

    offsets = {'parent': 136, 'multiplier': 144, 'expMultiplier': 152, 'additive': 160, 'expAdditive': 168, 'includeChildTypes': 176, 'expIncludeChildTypes': 184, 'bloon': 192, 'expBloon': 200}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.DamageModifierForBloonType, multiplier: System.Single, expMultiplier: System.String, additive: System.Single, expAdditive: System.String, includeChildTypes: System.String, expIncludeChildTypes: System.String, bloon: Assets.Scripts.Unity.Bloons.BloonOld, expBloon: Assets.Scripts.Unity.Bloons.BloonOld, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.multiplier = multiplier
		self.expMultiplier = expMultiplier
		self.additive = additive
		self.expAdditive = expAdditive
		self.includeChildTypes = includeChildTypes
		self.expIncludeChildTypes = expIncludeChildTypes
		self.bloon = bloon
		self.expBloon = expBloon


class DamageModifierForModifiers:

    offsets = {'parent': 136, 'multiplier': 144, 'expMultiplier': 152, 'additive': 160, 'expAdditive': 168, 'modifiers': 176, 'expModifiers': 184}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.DamageModifierForModifiers, multiplier: System.Single, expMultiplier: System.String, additive: System.Single, expAdditive: System.String, modifiers: System.String, expModifiers: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.multiplier = multiplier
		self.expMultiplier = expMultiplier
		self.additive = additive
		self.expAdditive = expAdditive
		self.modifiers = modifiers
		self.expModifiers = expModifiers


class DamageModifierForTag:

    offsets = {'parent': 136, 'multiplier': 144, 'expMultiplier': 152, 'additive': 160, 'expAdditive': 168, 'tagValue': 176, 'expTagValue': 184, 'mustIncludeAllTags': 192, 'expMustIncludeAllTags': 200, 'applyOverMaxDamage': 208, 'expApplyOverMaxDamage': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.DamageModifierForTag, multiplier: System.Single, expMultiplier: System.String, additive: System.Single, expAdditive: System.String, tagValue: System.String, expTagValue: System.String, mustIncludeAllTags: System.Boolean, expMustIncludeAllTags: System.String, applyOverMaxDamage: System.Boolean, expApplyOverMaxDamage: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.multiplier = multiplier
		self.expMultiplier = expMultiplier
		self.additive = additive
		self.expAdditive = expAdditive
		self.tagValue = tagValue
		self.expTagValue = expTagValue
		self.mustIncludeAllTags = mustIncludeAllTags
		self.expMustIncludeAllTags = expMustIncludeAllTags
		self.applyOverMaxDamage = applyOverMaxDamage
		self.expApplyOverMaxDamage = expApplyOverMaxDamage


class DamageModifierUnstableConcoction:

    offsets = {'parent': 136}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.DamageModifierForModifiers, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class DamageModifierWrath:

    offsets = {'parent': 136, 'rbeThreshold': 144, 'expRbeThreshold': 152, 'damage': 160, 'expDamage': 168, 'maxDamageBoost': 176, 'expMaxDamageBoost': 184}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.DamageModifierWrath, rbeThreshold: System.Int32, expRbeThreshold: System.String, damage: System.Int32, expDamage: System.String, maxDamageBoost: System.Int32, expMaxDamageBoost: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.rbeThreshold = rbeThreshold
		self.expRbeThreshold = expRbeThreshold
		self.damage = damage
		self.expDamage = expDamage
		self.maxDamageBoost = maxDamageBoost
		self.expMaxDamageBoost = expMaxDamageBoost


class DamagePercentOfMax:

    offsets = {'parent': 136, 'percent': 144, 'expPercent': 152, 'tagValue': 160, 'expTagValue': 168, 'damageBloonsOffscreenOnly': 176, 'expDamageBloonsOffscreenOnly': 184}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.DamagePercentOfMax, percent: System.Single, expPercent: System.String, tagValue: System.String, expTagValue: System.String, damageBloonsOffscreenOnly: System.Boolean, expDamageBloonsOffscreenOnly: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.percent = percent
		self.expPercent = expPercent
		self.tagValue = tagValue
		self.expTagValue = expTagValue
		self.damageBloonsOffscreenOnly = damageBloonsOffscreenOnly
		self.expDamageBloonsOffscreenOnly = expDamageBloonsOffscreenOnly


class DamageUpTagTowers:

    offsets = {'parent': 136, 'increase': 144, 'expIncrease': 152, 'bloonTag': 160, 'expBloonTag': 168, 'lifespan': 176, 'expLifespan': 184, 'useClosest': 192, 'expUseClosest': 200, 'mutatorId': 208, 'expMutatorId': 216, 'priority': 224, 'expPriority': 232, 'useTowerPosition': 240, 'expUseTowerPosition': 248}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.DamageUpTagTowers, increase: System.Int32, expIncrease: System.String, bloonTag: System.String, expBloonTag: System.String, lifespan: System.Single, expLifespan: System.String, useClosest: System.Boolean, expUseClosest: System.String, mutatorId: System.String, expMutatorId: System.String, priority: System.Single, expPriority: System.String, useTowerPosition: System.Boolean, expUseTowerPosition: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.increase = increase
		self.expIncrease = expIncrease
		self.bloonTag = bloonTag
		self.expBloonTag = expBloonTag
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.useClosest = useClosest
		self.expUseClosest = expUseClosest
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId
		self.priority = priority
		self.expPriority = expPriority
		self.useTowerPosition = useTowerPosition
		self.expUseTowerPosition = expUseTowerPosition


class DamageUpTowers:

    offsets = {'parent': 136, 'increase': 144, 'expIncrease': 152, 'lifespan': 160, 'expLifespan': 168, 'useClosest': 176, 'expUseClosest': 184, 'mutatorId': 192, 'expMutatorId': 200, 'priority': 208, 'expPriority': 216, 'useTowerPosition': 224, 'expUseTowerPosition': 232}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.Cash, increase: System.Int32, expIncrease: System.String, lifespan: System.Single, expLifespan: System.String, useClosest: System.Boolean, expUseClosest: System.String, mutatorId: System.String, expMutatorId: System.String, priority: System.Single, expPriority: System.String, useTowerPosition: System.Boolean, expUseTowerPosition: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.increase = increase
		self.expIncrease = expIncrease
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.useClosest = useClosest
		self.expUseClosest = expUseClosest
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId
		self.priority = priority
		self.expPriority = expPriority
		self.useTowerPosition = useTowerPosition
		self.expUseTowerPosition = expUseTowerPosition


class DelayBloonChildrenSpawning:

    offsets = {'parent': 136, 'delaySpawnDuration': 144, 'expDelaySpawnDuration': 152, 'createWindEffectOnChildBloons': 160, 'expCreateWindEffectOnChildBloons': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.DelayBloonChildrenSpawning, delaySpawnDuration: System.Single, expDelaySpawnDuration: System.String, createWindEffectOnChildBloons: System.Boolean, expCreateWindEffectOnChildBloons: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.delaySpawnDuration = delaySpawnDuration
		self.expDelaySpawnDuration = expDelaySpawnDuration
		self.createWindEffectOnChildBloons = createWindEffectOnChildBloons
		self.expCreateWindEffectOnChildBloons = expCreateWindEffectOnChildBloons


class DepletionToCash:

    offsets = {'parent': 136, 'minimum': 144, 'expMinimum': 152, 'maximum': 160, 'expMaximum': 168, 'salvage': 176, 'expSalvage': 184}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.DepletionToCash, minimum: System.Single, expMinimum: System.String, maximum: System.Single, expMaximum: System.String, salvage: System.Single, expSalvage: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.minimum = minimum
		self.expMinimum = expMinimum
		self.maximum = maximum
		self.expMaximum = expMaximum
		self.salvage = salvage
		self.expSalvage = expSalvage


class DestroyIfTargetLost:

    offsets = {'parent': 136}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.DestroyIfTargetLost, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class DestroyProjectileIfTowerDestroyed:

    offsets = {'parent': 136}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.DestroyProjectileIfTowerDestroyed, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class DestroyWhenHitImmune:

    offsets = {'parent': 136, 'getsDestroyed': 144, 'expGetsDestroyed': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.DestroyWhenHitImmune, getsDestroyed: System.Boolean, expGetsDestroyed: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.getsDestroyed = getsDestroyed
		self.expGetsDestroyed = expGetsDestroyed


class DistributeToChildrenBloonModifier:

    offsets = {'parent': 136, 'bloonTags': 144, 'expBloonTags': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.DistributeToChildrenBloonModifier, bloonTags: System.String, expBloonTags: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.bloonTags = bloonTags
		self.expBloonTags = expBloonTags


class DistributeToChildrenSet:

    offsets = {'parent': 136, 'layers': 144, 'expLayers': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.DistributeToChildrenSet, layers: System.Int32, expLayers: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.layers = layers
		self.expLayers = expLayers


class DontDestroyOnContinue:

    offsets = {'parent': 136}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.DontDestroyOnContinue, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class EatBloon:

    offsets = {'parent': 136, 'rbeCapacity': 144, 'expRbeCapacity': 152, 'rbeCashMultiplier': 160, 'expRbeCashMultiplier': 168, 'projectile': 176, 'expProjectile': 184, 'emission': 192, 'expEmission': 200, 'animationStateOpen': 208, 'expAnimationStateOpen': 216, 'animationStateClosed': 224, 'expAnimationStateClosed': 232, 'timeUntilClose': 240, 'expTimeUntilClose': 248, 'effectOnEat': 256, 'expEffectOnEat': 264, 'bloonTrapOpenSound': 272, 'expBloonTrapOpenSound': 280, 'bloonTrapCloseSound': 288, 'expBloonTrapCloseSound': 296}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.EatBloon, rbeCapacity: System.Single, expRbeCapacity: System.String, rbeCashMultiplier: System.Single, expRbeCashMultiplier: System.String, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, expProjectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, emission: Assets.Scripts.Unity.Towers.Emissions.Emission, expEmission: Assets.Scripts.Unity.Towers.Emissions.Emission, animationStateOpen: System.Int32, expAnimationStateOpen: System.String, animationStateClosed: System.Int32, expAnimationStateClosed: System.String, timeUntilClose: System.Single, expTimeUntilClose: System.String, effectOnEat: Assets.Scripts.Unity.Effects.Effect, expEffectOnEat: Assets.Scripts.Unity.Effects.Effect, bloonTrapOpenSound: UnityEngine.AudioSource, expBloonTrapOpenSound: UnityEngine.AudioSource, bloonTrapCloseSound: UnityEngine.AudioSource, expBloonTrapCloseSound: UnityEngine.AudioSource, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.rbeCapacity = rbeCapacity
		self.expRbeCapacity = expRbeCapacity
		self.rbeCashMultiplier = rbeCashMultiplier
		self.expRbeCashMultiplier = expRbeCashMultiplier
		self.projectile = projectile
		self.expProjectile = expProjectile
		self.emission = emission
		self.expEmission = expEmission
		self.animationStateOpen = animationStateOpen
		self.expAnimationStateOpen = expAnimationStateOpen
		self.animationStateClosed = animationStateClosed
		self.expAnimationStateClosed = expAnimationStateClosed
		self.timeUntilClose = timeUntilClose
		self.expTimeUntilClose = expTimeUntilClose
		self.effectOnEat = effectOnEat
		self.expEffectOnEat = expEffectOnEat
		self.bloonTrapOpenSound = bloonTrapOpenSound
		self.expBloonTrapOpenSound = expBloonTrapOpenSound
		self.bloonTrapCloseSound = bloonTrapCloseSound
		self.expBloonTrapCloseSound = expBloonTrapCloseSound


class EmitOnDamage:

    offsets = {'projectile': 136, 'expProjectile': 144, 'emission': 152, 'expEmission': 160}    
    def __init__(self, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, expProjectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, emission: Assets.Scripts.Unity.Towers.Emissions.Emission, expEmission: Assets.Scripts.Unity.Towers.Emissions.Emission, **kwargs):
        super().__init__(self, **kwargs)
		self.projectile = projectile
		self.expProjectile = expProjectile
		self.emission = emission
		self.expEmission = expEmission


class EndOfRoundClearBypass:

    offsets = {'parent': 136, 'gameModes': 144, 'expGameModes': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.EndOfRoundClearBypass, gameModes: System.String, expGameModes: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.gameModes = gameModes
		self.expGameModes = expGameModes


class ExperiencePoints:

    offsets = {'parent': 136, 'amount': 144, 'expAmount': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.ExperiencePoints, amount: System.Single, expAmount: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.amount = amount
		self.expAmount = expAmount


class ExpireProjectileAtScreenEdge:

    offsets = {'parent': 136}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.ExpireProjectileAtScreenEdge, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class FadeProjectile:

    offsets = {'parent': 136, 'startFadingAt': 144, 'expStartFadingAt': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.FadeProjectile, startFadingAt: System.Single, expStartFadingAt: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.startFadingAt = startFadingAt
		self.expStartFadingAt = expStartFadingAt


class FallToGround:

    offsets = {'parent': 136, 'timeToTake': 144, 'expTimeToTake': 152, 'expireOnContact': 160, 'expExpireOnContact': 168, 'groundOffset': 176, 'expGroundOffset': 184}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.FallToGround, timeToTake: System.Single, expTimeToTake: System.String, expireOnContact: System.Boolean, expExpireOnContact: System.String, groundOffset: System.Single, expGroundOffset: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.timeToTake = timeToTake
		self.expTimeToTake = expTimeToTake
		self.expireOnContact = expireOnContact
		self.expExpireOnContact = expExpireOnContact
		self.groundOffset = groundOffset
		self.expGroundOffset = expGroundOffset


class FilterFractionOfBloonType:

    offsets = {'parent': 136, 'fraction': 144, 'expFraction': 152, 'bloon': 160, 'expBloon': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.ProjectileFilter, fraction: System.Single, expFraction: System.String, bloon: Assets.Scripts.Unity.Bloons.BloonOld, expBloon: Assets.Scripts.Unity.Bloons.BloonOld, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.fraction = fraction
		self.expFraction = expFraction
		self.bloon = bloon
		self.expBloon = expBloon


class FollowPathProjectile:

    offsets = {'parent': 136, 'path': 144, 'expPath': 152, 'easePath': 160, 'expEasePath': 168, 'speed': 176, 'expSpeed': 184, 'destroyAtEndOfPath': 192, 'expDestroyAtEndOfPath': 200}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.FollowPathProjectile, path: Assets.Scripts.Unity.Map.PointSource, expPath: Assets.Scripts.Unity.Map.PointSource, easePath: Assets.Scripts.Unity.Map.PointSource, expEasePath: Assets.Scripts.Unity.Map.PointSource, speed: System.Single, expSpeed: System.String, destroyAtEndOfPath: System.String, expDestroyAtEndOfPath: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.path = path
		self.expPath = expPath
		self.easePath = easePath
		self.expEasePath = expEasePath
		self.speed = speed
		self.expSpeed = expSpeed
		self.destroyAtEndOfPath = destroyAtEndOfPath
		self.expDestroyAtEndOfPath = expDestroyAtEndOfPath


class Freeze:

    offsets = {'parent': 136, 'speed': 144, 'expSpeed': 152, 'lifespan': 160, 'expLifespan': 168, 'layers': 176, 'expLayers': 184, 'mutationId': 192, 'expMutationId': 200, 'overlays': 208, 'expOverlays': 216, 'cascadeMutators': 224, 'expCascadeMutators': 232}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.Freeze, speed: System.Single, expSpeed: System.String, lifespan: System.Single, expLifespan: System.String, layers: System.Int32, expLayers: System.String, mutationId: System.String, expMutationId: System.String, overlays: Assets.Scripts.Unity.Bloons.OverlayGroup, expOverlays: Assets.Scripts.Unity.Bloons.OverlayGroup, cascadeMutators: System.Boolean, expCascadeMutators: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.speed = speed
		self.expSpeed = expSpeed
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.layers = layers
		self.expLayers = expLayers
		self.mutationId = mutationId
		self.expMutationId = expMutationId
		self.overlays = overlays
		self.expOverlays = expOverlays
		self.cascadeMutators = cascadeMutators
		self.expCascadeMutators = expCascadeMutators


class FreezeModifierForTags:

    offsets = {'parent': 136, 'multiplier': 144, 'expMultiplier': 152, 'tags': 160, 'expTags': 168, 'freezeId': 176, 'expFreezeId': 184, 'resetToUnmodified': 192, 'expResetToUnmodified': 200, 'preventMutation': 208, 'expPreventMutation': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.FreezeModifierForTags, multiplier: System.Single, expMultiplier: System.String, tags: System.String, expTags: System.String, freezeId: System.String, expFreezeId: System.String, resetToUnmodified: System.Boolean, expResetToUnmodified: System.String, preventMutation: System.Boolean, expPreventMutation: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.multiplier = multiplier
		self.expMultiplier = expMultiplier
		self.tags = tags
		self.expTags = expTags
		self.freezeId = freezeId
		self.expFreezeId = expFreezeId
		self.resetToUnmodified = resetToUnmodified
		self.expResetToUnmodified = expResetToUnmodified
		self.preventMutation = preventMutation
		self.expPreventMutation = expPreventMutation


class GrabBloon:

    offsets = {'parent': 136, 'grabDuration': 144, 'expGrabDuration': 152, 'projectile': 160, 'expProjectile': 168, 'emission': 176, 'expEmission': 184}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.GrabBloon, grabDuration: System.Single, expGrabDuration: System.String, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, expProjectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, emission: Assets.Scripts.Unity.Towers.Emissions.Emission, expEmission: Assets.Scripts.Unity.Towers.Emissions.Emission, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.grabDuration = grabDuration
		self.expGrabDuration = expGrabDuration
		self.projectile = projectile
		self.expProjectile = expProjectile
		self.emission = emission
		self.expEmission = expEmission


class HeatItUpDamageBuff:

    offsets = {'parent': 136, 'lifespan': 144, 'expLifespan': 152, 'mutatorId': 160, 'expMutatorId': 168, 'useTowerPosition': 176, 'expUseTowerPosition': 184, 'buffLocsName': 192, 'expBuffLocsName': 200, 'buffIconName': 208, 'expBuffIconName': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.HeatItUpDamageBuff, lifespan: System.Single, expLifespan: System.String, mutatorId: System.String, expMutatorId: System.String, useTowerPosition: System.Boolean, expUseTowerPosition: System.String, buffLocsName: System.String, expBuffLocsName: System.String, buffIconName: System.String, expBuffIconName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId
		self.useTowerPosition = useTowerPosition
		self.expUseTowerPosition = expUseTowerPosition
		self.buffLocsName = buffLocsName
		self.expBuffLocsName = expBuffLocsName
		self.buffIconName = buffIconName
		self.expBuffIconName = expBuffIconName


class HeightOffsetProjectile:

    offsets = {'parent': 136, 'numSamples': 144, 'expNumSamples': 152, 'heightCurve': 160, 'expHeightCurve': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.HeightOffsetProjectile, numSamples: System.Int32, expNumSamples: System.String, heightCurve: Assets.Scripts.Unity.Map.AnimCurve, expHeightCurve: Assets.Scripts.Unity.Map.AnimCurve, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.numSamples = numSamples
		self.expNumSamples = expNumSamples
		self.heightCurve = heightCurve
		self.expHeightCurve = expHeightCurve


class IgnoreInsufficientPierce:

    offsets = {'parent': 136}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.IgnoreInsufficientPierce, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class IncreaseBloonWorth:

    offsets = {'parent': 136, 'mutatorId': 144, 'expMutatorId': 152, 'cash': 160, 'expCash': 168, 'cashMultiplier': 176, 'expCashMultiplier': 184, 'charges': 192, 'expCharges': 200, 'bloonFilter': 208, 'expBloonFilter': 216, 'overlays': 224, 'expOverlays': 232}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.IncreaseBloonWorth, mutatorId: System.String, expMutatorId: System.String, cash: System.Single, expCash: System.String, cashMultiplier: System.Single, expCashMultiplier: System.String, charges: System.Single, expCharges: System.String, bloonFilter: Assets.Scripts.Unity.Towers.Filters.Filter, expBloonFilter: Assets.Scripts.Unity.Towers.Filters.Filter, overlays: Assets.Scripts.Unity.Bloons.OverlayGroup, expOverlays: Assets.Scripts.Unity.Bloons.OverlayGroup, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId
		self.cash = cash
		self.expCash = expCash
		self.cashMultiplier = cashMultiplier
		self.expCashMultiplier = expCashMultiplier
		self.charges = charges
		self.expCharges = expCharges
		self.bloonFilter = bloonFilter
		self.expBloonFilter = expBloonFilter
		self.overlays = overlays
		self.expOverlays = expOverlays


class IncreaseBloonWorthWithTier:

    offsets = {'parent': 136, 'mutatorId': 144, 'expMutatorId': 152, 'cashPerTier': 160, 'expCashPerTier': 168, 'overlays': 176, 'expOverlays': 184}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.IncreaseBloonWorthWithTier, mutatorId: System.String, expMutatorId: System.String, cashPerTier: System.Single, expCashPerTier: System.String, overlays: Assets.Scripts.Unity.Bloons.OverlayGroup, expOverlays: Assets.Scripts.Unity.Bloons.OverlayGroup, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId
		self.cashPerTier = cashPerTier
		self.expCashPerTier = expCashPerTier
		self.overlays = overlays
		self.expOverlays = expOverlays


class Instant:

    offsets = {'parent': 136, 'destroyIfInvalid': 144, 'expDestroyIfInvalid': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.Instant, destroyIfInvalid: System.Boolean, expDestroyIfInvalid: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.destroyIfInvalid = destroyIfInvalid
		self.expDestroyIfInvalid = expDestroyIfInvalid


class JungleVineEffect:

    offsets = {'parent': 136, 'displayFront': 144, 'expDisplayFront': 152, 'displayBack': 160, 'expDisplayBack': 168, 'sound1': 176, 'expSound1': 184, 'sound2': 192, 'expSound2': 200, 'sound3': 208, 'expSound3': 216, 'sound4': 224, 'expSound4': 232, 'fullscreen': 240, 'expFullscreen': 248, 'destroyAfterPopTime': 256, 'expDestroyAfterPopTime': 264}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.JungleVineEffect, displayFront: UnityEngine.GameObject, expDisplayFront: UnityEngine.GameObject, displayBack: UnityEngine.GameObject, expDisplayBack: UnityEngine.GameObject, sound1: UnityEngine.AudioSource, expSound1: UnityEngine.AudioSource, sound2: UnityEngine.AudioSource, expSound2: UnityEngine.AudioSource, sound3: UnityEngine.AudioSource, expSound3: UnityEngine.AudioSource, sound4: UnityEngine.AudioSource, expSound4: UnityEngine.AudioSource, fullscreen: System.Boolean, expFullscreen: System.String, destroyAfterPopTime: System.Single, expDestroyAfterPopTime: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.displayFront = displayFront
		self.expDisplayFront = expDisplayFront
		self.displayBack = displayBack
		self.expDisplayBack = expDisplayBack
		self.sound1 = sound1
		self.expSound1 = expSound1
		self.sound2 = sound2
		self.expSound2 = expSound2
		self.sound3 = sound3
		self.expSound3 = expSound3
		self.sound4 = sound4
		self.expSound4 = expSound4
		self.fullscreen = fullscreen
		self.expFullscreen = expFullscreen
		self.destroyAfterPopTime = destroyAfterPopTime
		self.expDestroyAfterPopTime = expDestroyAfterPopTime


class KeepInBounds:

    offsets = {'parent': 136}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.KeepInBounds, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class Knockback:

    offsets = {'parent': 136, 'moabMultiplier': 144, 'expMoabMultiplier': 152, 'heavyMultiplier': 160, 'expHeavyMultiplier': 168, 'lightMultiplier': 176, 'expLightMultiplier': 184, 'lifespan': 192, 'expLifespan': 200, 'mutationId': 208, 'expMutationId': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.Knockback, moabMultiplier: System.Single, expMoabMultiplier: System.String, heavyMultiplier: System.Single, expHeavyMultiplier: System.String, lightMultiplier: System.Single, expLightMultiplier: System.String, lifespan: System.Single, expLifespan: System.String, mutationId: System.String, expMutationId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.moabMultiplier = moabMultiplier
		self.expMoabMultiplier = expMoabMultiplier
		self.heavyMultiplier = heavyMultiplier
		self.expHeavyMultiplier = expHeavyMultiplier
		self.lightMultiplier = lightMultiplier
		self.expLightMultiplier = expLightMultiplier
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.mutationId = mutationId
		self.expMutationId = expMutationId


class Lightning:

    offsets = {'parent': 136, 'splits': 144, 'expSplits': 152, 'emission': 160, 'expEmission': 168, 'splitRange': 176, 'expSplitRange': 184, 'delay': 192, 'expDelay': 200}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.Lightning, splits: System.Int32, expSplits: System.String, emission: Assets.Scripts.Unity.Towers.Emissions.Emission, expEmission: Assets.Scripts.Unity.Towers.Emissions.Emission, splitRange: System.Single, expSplitRange: System.String, delay: System.Single, expDelay: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.splits = splits
		self.expSplits = expSplits
		self.emission = emission
		self.expEmission = expEmission
		self.splitRange = splitRange
		self.expSplitRange = expSplitRange
		self.delay = delay
		self.expDelay = expDelay


class LightningSplitOnContact:

    offsets = {'parent': 136, 'targets': 144, 'expTargets': 152, 'projectile': 160, 'expProjectile': 168, 'emission': 176, 'expEmission': 184, 'splitRange': 192, 'expSplitRange': 200, 'delay': 208, 'expDelay': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.LightningSplitOnContact, targets: System.Int32, expTargets: System.String, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, expProjectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, emission: Assets.Scripts.Unity.Towers.Emissions.Emission, expEmission: Assets.Scripts.Unity.Towers.Emissions.Emission, splitRange: System.Single, expSplitRange: System.String, delay: System.Single, expDelay: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.targets = targets
		self.expTargets = expTargets
		self.projectile = projectile
		self.expProjectile = expProjectile
		self.emission = emission
		self.expEmission = expEmission
		self.splitRange = splitRange
		self.expSplitRange = expSplitRange
		self.delay = delay
		self.expDelay = expDelay


class Lives:

    offsets = {'parent': 136, 'minimum': 144, 'expMinimum': 152, 'maximum': 160, 'expMaximum': 168, 'salvage': 176, 'expSalvage': 184}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.Lives, minimum: System.Single, expMinimum: System.String, maximum: System.Single, expMaximum: System.String, salvage: System.Single, expSalvage: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.minimum = minimum
		self.expMinimum = expMinimum
		self.maximum = maximum
		self.expMaximum = expMaximum
		self.salvage = salvage
		self.expSalvage = expSalvage


class MoabTakedown:

    offsets = {'parent': 136, 'speed': 144, 'expSpeed': 152, 'addative': 160, 'expAddative': 168, 'multiplier': 176, 'expMultiplier': 184, 'increaseMoabBloonWorth': 192, 'expIncreaseMoabBloonWorth': 200, 'increaseWorthTextEffect': 208, 'expIncreaseWorthTextEffect': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.TravelStrait, speed: System.Single, expSpeed: System.String, addative: System.Single, expAddative: System.String, multiplier: System.Single, expMultiplier: System.String, increaseMoabBloonWorth: System.Boolean, expIncreaseMoabBloonWorth: System.String, increaseWorthTextEffect: Assets.Scripts.Unity.Bloons.Behaviors.IncreaseWorthTextEffect, expIncreaseWorthTextEffect: Assets.Scripts.Unity.Bloons.Behaviors.IncreaseWorthTextEffect, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.speed = speed
		self.expSpeed = expSpeed
		self.addative = addative
		self.expAddative = expAddative
		self.multiplier = multiplier
		self.expMultiplier = expMultiplier
		self.increaseMoabBloonWorth = increaseMoabBloonWorth
		self.expIncreaseMoabBloonWorth = expIncreaseMoabBloonWorth
		self.increaseWorthTextEffect = increaseWorthTextEffect
		self.expIncreaseWorthTextEffect = expIncreaseWorthTextEffect


class MorphBloon:

    offsets = {'parent': 136, 'bloonId': 144, 'expBloonId': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.MorphBloon, bloonId: System.String, expBloonId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.bloonId = bloonId
		self.expBloonId = expBloonId


class MoveBack:

    offsets = {'parent': 136, 'multiplier': 144, 'expMultiplier': 152, 'lifespan': 160, 'expLifespan': 168, 'layers': 176, 'expLayers': 184, 'mutationId': 192, 'expMutationId': 200}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.MoveBack, multiplier: System.Single, expMultiplier: System.String, lifespan: System.Single, expLifespan: System.String, layers: System.Int32, expLayers: System.String, mutationId: System.String, expMutationId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.multiplier = multiplier
		self.expMultiplier = expMultiplier
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.layers = layers
		self.expLayers = expLayers
		self.mutationId = mutationId
		self.expMutationId = expMutationId


class Pickup:

    offsets = {'parent': 136, 'collectRadius': 144, 'expCollectRadius': 152, 'delay': 160, 'expDelay': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.Pickup, collectRadius: System.Single, expCollectRadius: System.String, delay: System.Single, expDelay: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.collectRadius = collectRadius
		self.expCollectRadius = expCollectRadius
		self.delay = delay
		self.expDelay = expDelay


class PierceUpTowers:

    offsets = {'parent': 136, 'increase': 144, 'expIncrease': 152, 'lifespan': 160, 'expLifespan': 168, 'useClosest': 176, 'expUseClosest': 184, 'mutatorId': 192, 'expMutatorId': 200, 'priority': 208, 'expPriority': 216, 'useTowerPosition': 224, 'expUseTowerPosition': 232, 'displayToAdd': 240, 'expDisplayToAdd': 248}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.PierceUpTowers, increase: System.Single, expIncrease: System.String, lifespan: System.Single, expLifespan: System.String, useClosest: System.Boolean, expUseClosest: System.String, mutatorId: System.String, expMutatorId: System.String, priority: System.Single, expPriority: System.String, useTowerPosition: System.Boolean, expUseTowerPosition: System.String, displayToAdd: UnityEngine.GameObject, expDisplayToAdd: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.increase = increase
		self.expIncrease = expIncrease
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.useClosest = useClosest
		self.expUseClosest = expUseClosest
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId
		self.priority = priority
		self.expPriority = expPriority
		self.useTowerPosition = useTowerPosition
		self.expUseTowerPosition = expUseTowerPosition
		self.displayToAdd = displayToAdd
		self.expDisplayToAdd = expDisplayToAdd


class PowerProjectile:

    offsets = {'parent': 136}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.PowerProjectile, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class ProjectileBlockerCollisionRebound:

    offsets = {'parent': 136, 'clearCollidedWith': 144, 'expClearCollidedWith': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.ProjectileFilter, clearCollidedWith: System.Boolean, expClearCollidedWith: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.clearCollidedWith = clearCollidedWith
		self.expClearCollidedWith = expClearCollidedWith


class ProjectileFilter:

    offsets = {'parent': 136}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.ProjectileFilter, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class ProjectileHeight:

    offsets = {'parent': 136, 'height': 144, 'expHeight': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.ProjectileHeight, height: Assets.Scripts.Unity.Map.PointSource, expHeight: Assets.Scripts.Unity.Map.PointSource, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.height = height
		self.expHeight = expHeight


class ProjectileSetAnimationOnContact:

    offsets = {'parent': 136, 'onContactAnimationId': 144, 'expOnContactAnimationId': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.ProjectileSetAnimationOnContact, onContactAnimationId: System.Int32, expOnContactAnimationId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.onContactAnimationId = onContactAnimationId
		self.expOnContactAnimationId = expOnContactAnimationId


class ProjectileZeroRotation:

    offsets = {'parent': 136}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.RefreshPierce, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class PsiEffect:

    offsets = {'parent': 136, 'overlays': 144, 'expOverlays': 152, 'damagePerTick': 160, 'expDamagePerTick': 168, 'tickRate': 176, 'expTickRate': 184, 'trembleDistanceMin': 192, 'expTrembleDistanceMin': 200, 'trembleDistanceMax': 208, 'expTrembleDistanceMax': 216, 'trembleTimeThresholdMin': 224, 'expTrembleTimeThresholdMin': 232, 'trembleTimeThresholdMax': 240, 'expTrembleTimeThresholdMax': 248, 'trembleSpeed': 256, 'expTrembleSpeed': 264, 'projectileOnBloonDestroy': 272, 'effectOnBloonDestroy': 280, 'expEffectOnBloonDestroy': 288, 'superCeramicPenalty': 296, 'expSuperCeramicPenalty': 304, 'maxDuration': 312, 'expMaxDuration': 320, 'emissionOnBloonDestroy': 328, 'createSoundOnBloonDegrade': 336, 'expCreateSoundOnBloonDegrade': 344}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.PsiEffect, overlays: Assets.Scripts.Unity.Bloons.OverlayGroup, expOverlays: Assets.Scripts.Unity.Bloons.OverlayGroup, damagePerTick: System.Int32, expDamagePerTick: System.String, tickRate: System.Single, expTickRate: System.String, trembleDistanceMin: System.Single, expTrembleDistanceMin: System.String, trembleDistanceMax: System.Single, expTrembleDistanceMax: System.String, trembleTimeThresholdMin: System.Single, expTrembleTimeThresholdMin: System.String, trembleTimeThresholdMax: System.Single, expTrembleTimeThresholdMax: System.String, trembleSpeed: System.Single, expTrembleSpeed: System.String, projectileOnBloonDestroy: Assets.Scripts.Unity.Towers.Projectiles.Projectile, effectOnBloonDestroy: Assets.Scripts.Unity.Effects.Effect, expEffectOnBloonDestroy: Assets.Scripts.Unity.Effects.Effect, superCeramicPenalty: System.Int32, expSuperCeramicPenalty: System.String, maxDuration: System.Single, expMaxDuration: System.String, emissionOnBloonDestroy: Assets.Scripts.Unity.Towers.Emissions.Emission, createSoundOnBloonDegrade: Assets.Scripts.Unity.Bloons.Behaviors.CreateSoundOnBloonDegrade, expCreateSoundOnBloonDegrade: Assets.Scripts.Unity.Bloons.Behaviors.CreateSoundOnBloonDegrade, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.overlays = overlays
		self.expOverlays = expOverlays
		self.damagePerTick = damagePerTick
		self.expDamagePerTick = expDamagePerTick
		self.tickRate = tickRate
		self.expTickRate = expTickRate
		self.trembleDistanceMin = trembleDistanceMin
		self.expTrembleDistanceMin = expTrembleDistanceMin
		self.trembleDistanceMax = trembleDistanceMax
		self.expTrembleDistanceMax = expTrembleDistanceMax
		self.trembleTimeThresholdMin = trembleTimeThresholdMin
		self.expTrembleTimeThresholdMin = expTrembleTimeThresholdMin
		self.trembleTimeThresholdMax = trembleTimeThresholdMax
		self.expTrembleTimeThresholdMax = expTrembleTimeThresholdMax
		self.trembleSpeed = trembleSpeed
		self.expTrembleSpeed = expTrembleSpeed
		self.projectileOnBloonDestroy = projectileOnBloonDestroy
		self.effectOnBloonDestroy = effectOnBloonDestroy
		self.expEffectOnBloonDestroy = expEffectOnBloonDestroy
		self.superCeramicPenalty = superCeramicPenalty
		self.expSuperCeramicPenalty = expSuperCeramicPenalty
		self.maxDuration = maxDuration
		self.expMaxDuration = expMaxDuration
		self.emissionOnBloonDestroy = emissionOnBloonDestroy
		self.createSoundOnBloonDegrade = createSoundOnBloonDegrade
		self.expCreateSoundOnBloonDegrade = expCreateSoundOnBloonDegrade


class PsiPsionicScream:

    offsets = {'parent': 136, 'psiEffect': 144, 'expPsiEffect': 152, 'distractionOverlays': 160, 'expDistractionOverlays': 168, 'psiEffectChance': 176, 'expPsiEffectChance': 184, 'distractDistanceMin': 192, 'expDistractDistanceMin': 200, 'distractDistanceMax': 208, 'expDistractDistanceMax': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.PsiPsionicScream, psiEffect: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.PsiEffect, expPsiEffect: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.PsiEffect, distractionOverlays: Assets.Scripts.Unity.Bloons.OverlayGroup, expDistractionOverlays: Assets.Scripts.Unity.Bloons.OverlayGroup, psiEffectChance: System.Single, expPsiEffectChance: System.String, distractDistanceMin: System.Single, expDistractDistanceMin: System.String, distractDistanceMax: System.Single, expDistractDistanceMax: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.psiEffect = psiEffect
		self.expPsiEffect = expPsiEffect
		self.distractionOverlays = distractionOverlays
		self.expDistractionOverlays = expDistractionOverlays
		self.psiEffectChance = psiEffectChance
		self.expPsiEffectChance = expPsiEffectChance
		self.distractDistanceMin = distractDistanceMin
		self.expDistractDistanceMin = expDistractDistanceMin
		self.distractDistanceMax = distractDistanceMax
		self.expDistractDistanceMax = expDistractDistanceMax


class PushBack:

    offsets = {'parent': 136, 'pushAmount': 144, 'expPushAmount': 152, 'tagValue': 160, 'expTagValue': 168, 'multiplierBFB': 176, 'expMultiplierBFB': 184, 'multiplierDDT': 192, 'expMultiplierDDT': 200, 'multiplierZOMG': 208, 'expMultiplierZOMG': 216, 'multiplierBAD': 224, 'expMultiplierBAD': 232}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.PushBack, pushAmount: System.Single, expPushAmount: System.String, tagValue: System.String, expTagValue: System.String, multiplierBFB: System.Single, expMultiplierBFB: System.String, multiplierDDT: System.Single, expMultiplierDDT: System.String, multiplierZOMG: System.Single, expMultiplierZOMG: System.String, multiplierBAD: System.Single, expMultiplierBAD: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.pushAmount = pushAmount
		self.expPushAmount = expPushAmount
		self.tagValue = tagValue
		self.expTagValue = expTagValue
		self.multiplierBFB = multiplierBFB
		self.expMultiplierBFB = expMultiplierBFB
		self.multiplierDDT = multiplierDDT
		self.expMultiplierDDT = expMultiplierDDT
		self.multiplierZOMG = multiplierZOMG
		self.expMultiplierZOMG = expMultiplierZOMG
		self.multiplierBAD = multiplierBAD
		self.expMultiplierBAD = expMultiplierBAD


class RandomDisplay:

    offsets = {'parent': 136, 'applyRandomRotation': 144, 'expApplyRandomRotation': 152, 'display1': 160, 'expDisplay1': 168, 'display2': 176, 'expDisplay2': 184, 'display3': 192, 'expDisplay3': 200, 'display4': 208, 'expDisplay4': 216, 'display5': 224, 'expDisplay5': 232}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.RandomDisplay, applyRandomRotation: System.Boolean, expApplyRandomRotation: System.String, display1: UnityEngine.GameObject, expDisplay1: UnityEngine.GameObject, display2: UnityEngine.GameObject, expDisplay2: UnityEngine.GameObject, display3: UnityEngine.GameObject, expDisplay3: UnityEngine.GameObject, display4: UnityEngine.GameObject, expDisplay4: UnityEngine.GameObject, display5: UnityEngine.GameObject, expDisplay5: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.applyRandomRotation = applyRandomRotation
		self.expApplyRandomRotation = expApplyRandomRotation
		self.display1 = display1
		self.expDisplay1 = expDisplay1
		self.display2 = display2
		self.expDisplay2 = expDisplay2
		self.display3 = display3
		self.expDisplay3 = expDisplay3
		self.display4 = display4
		self.expDisplay4 = expDisplay4
		self.display5 = display5
		self.expDisplay5 = expDisplay5


class RandomRangeTravelStraight:

    offsets = {'parent': 136, 'minRange': 144, 'expMinRange': 152, 'maxRange': 160, 'expMaxRange': 168, 'speed': 176, 'expSpeed': 184}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.RandomRangeTravelStraight, minRange: System.Single, expMinRange: System.String, maxRange: System.Single, expMaxRange: System.String, speed: System.Single, expSpeed: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.minRange = minRange
		self.expMinRange = expMinRange
		self.maxRange = maxRange
		self.expMaxRange = expMaxRange
		self.speed = speed
		self.expSpeed = expSpeed


class RangeUpTowers:

    offsets = {'parent': 136, 'increase': 144, 'expIncrease': 152, 'lifespan': 160, 'expLifespan': 168, 'isUnique': 176, 'expIsUnique': 184, 'useClosest': 192, 'expUseClosest': 200, 'mutatorId': 208, 'expMutatorId': 216, 'priority': 224, 'expPriority': 232}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.RangeUpTowers, increase: System.Single, expIncrease: System.String, lifespan: System.Single, expLifespan: System.String, isUnique: System.Boolean, expIsUnique: System.String, useClosest: System.Boolean, expUseClosest: System.String, mutatorId: System.String, expMutatorId: System.String, priority: System.Single, expPriority: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.increase = increase
		self.expIncrease = expIncrease
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.isUnique = isUnique
		self.expIsUnique = expIsUnique
		self.useClosest = useClosest
		self.expUseClosest = expUseClosest
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId
		self.priority = priority
		self.expPriority = expPriority


class RefreshMutatorsOnBloon:

    offsets = {'parent': 136, 'mutatorId': 144, 'expMutatorId': 152, 'mutatorKey': 160, 'expMutatorKey': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.RefreshMutatorsOnBloon, mutatorId: System.String, expMutatorId: System.String, mutatorKey: System.String, expMutatorKey: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId
		self.mutatorKey = mutatorKey
		self.expMutatorKey = expMutatorKey


class RefreshPierce:

    offsets = {'parent': 136, 'refreshInterval': 144, 'expRefreshInterval': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.RefreshPierce, refreshInterval: System.Single, expRefreshInterval: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.refreshInterval = refreshInterval
		self.expRefreshInterval = expRefreshInterval


class RemoveBloonModifiers:

    offsets = {'parent': 136, 'cleanseRegen': 144, 'expCleanseRegen': 152, 'cleanseCamo': 160, 'expCleanseCamo': 168, 'cleanseLead': 176, 'expCleanseLead': 184, 'cleanseFortified': 192, 'expCleanseFortified': 200, 'cleanseOnlyIfDamaged': 208, 'expCleanseOnlyIfDamaged': 216, 'bloonTagExclude': 224, 'expBloonTagExclude': 232}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.RemoveBloonModifiers, cleanseRegen: System.Boolean, expCleanseRegen: System.String, cleanseCamo: System.Boolean, expCleanseCamo: System.String, cleanseLead: System.Boolean, expCleanseLead: System.String, cleanseFortified: System.Boolean, expCleanseFortified: System.String, cleanseOnlyIfDamaged: System.Boolean, expCleanseOnlyIfDamaged: System.String, bloonTagExclude: System.String, expBloonTagExclude: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.cleanseRegen = cleanseRegen
		self.expCleanseRegen = expCleanseRegen
		self.cleanseCamo = cleanseCamo
		self.expCleanseCamo = expCleanseCamo
		self.cleanseLead = cleanseLead
		self.expCleanseLead = expCleanseLead
		self.cleanseFortified = cleanseFortified
		self.expCleanseFortified = expCleanseFortified
		self.cleanseOnlyIfDamaged = cleanseOnlyIfDamaged
		self.expCleanseOnlyIfDamaged = expCleanseOnlyIfDamaged
		self.bloonTagExclude = bloonTagExclude
		self.expBloonTagExclude = expBloonTagExclude


class RemoveDamageTypeModifier:

    offsets = {'parent': 136, 'type': 144, 'expType': 152, 'lifespan': 160, 'expLifespan': 168, 'layers': 176, 'expLayers': 184, 'mutationId': 192, 'expMutationId': 200}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.RemoveDamageTypeModifier, type: System.String, expType: System.String, lifespan: System.Single, expLifespan: System.String, layers: System.Int32, expLayers: System.String, mutationId: System.String, expMutationId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.type = type
		self.expType = expType
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.layers = layers
		self.expLayers = expLayers
		self.mutationId = mutationId
		self.expMutationId = expMutationId


class RemoveMutatorsFromBloon:

    offsets = {'parent': 136, 'key': 144, 'expKey': 152, 'collisionPass': 160, 'expCollisionPass': 168, 'mutatorIds': 176, 'expMutatorIds': 184}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.AddBehaviorToBloon, key: System.String, expKey: System.String, collisionPass: System.Int32, expCollisionPass: System.String, mutatorIds: System.String, expMutatorIds: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.key = key
		self.expKey = expKey
		self.collisionPass = collisionPass
		self.expCollisionPass = expCollisionPass
		self.mutatorIds = mutatorIds
		self.expMutatorIds = expMutatorIds


class RetargetOnContact:

    offsets = {'parent': 136, 'distance': 144, 'expDistance': 152, 'maxBounces': 160, 'expMaxBounces': 168, 'targetType': 176, 'expTargetType': 184, 'delay': 192, 'expDelay': 200, 'expireIfNoTargetFound': 208, 'expExpireIfNoTargetFound': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.RetargetOnContact, distance: System.Single, expDistance: System.String, maxBounces: System.Int32, expMaxBounces: System.String, targetType: System.String, expTargetType: System.String, delay: System.Single, expDelay: System.String, expireIfNoTargetFound: System.Boolean, expExpireIfNoTargetFound: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.distance = distance
		self.expDistance = expDistance
		self.maxBounces = maxBounces
		self.expMaxBounces = expMaxBounces
		self.targetType = targetType
		self.expTargetType = expTargetType
		self.delay = delay
		self.expDelay = expDelay
		self.expireIfNoTargetFound = expireIfNoTargetFound
		self.expExpireIfNoTargetFound = expExpireIfNoTargetFound


class RetargetOnContactDelay:

    offsets = {'parent': 136, 'distance': 144, 'expDistance': 152, 'maxBounces': 160, 'expMaxBounces': 168, 'delay': 176, 'expDelay': 184, 'onlyIfFirstBloonDestroyed': 192, 'expOnlyIfFirstBloonDestroyed': 200, 'display': 208, 'expDisplay': 216, 'displayLifetime': 224, 'expDisplayLifetime': 232, 'displayLengthScale': 240, 'expDisplayLengthScale': 248}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.RetargetOnContactDelay, distance: System.Single, expDistance: System.String, maxBounces: System.Int32, expMaxBounces: System.String, delay: System.Single, expDelay: System.String, onlyIfFirstBloonDestroyed: System.Boolean, expOnlyIfFirstBloonDestroyed: System.String, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, displayLifetime: System.Single, expDisplayLifetime: System.String, displayLengthScale: System.Single, expDisplayLengthScale: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.distance = distance
		self.expDistance = expDistance
		self.maxBounces = maxBounces
		self.expMaxBounces = expMaxBounces
		self.delay = delay
		self.expDelay = expDelay
		self.onlyIfFirstBloonDestroyed = onlyIfFirstBloonDestroyed
		self.expOnlyIfFirstBloonDestroyed = expOnlyIfFirstBloonDestroyed
		self.display = display
		self.expDisplay = expDisplay
		self.displayLifetime = displayLifetime
		self.expDisplayLifetime = expDisplayLifetime
		self.displayLengthScale = displayLengthScale
		self.expDisplayLengthScale = expDisplayLengthScale


class Rotate:

    offsets = {'parent': 136, 'angle': 144, 'expAngle': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.Rotate, angle: System.Single, expAngle: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.angle = angle
		self.expAngle = expAngle


class SaudaAfflictionDamageModifier:

    offsets = {'parent': 136, 'lv7Tags': 144, 'expLv7Tags': 152, 'lv7NonMoabBonus': 160, 'expLv7NonMoabBonus': 168, 'lv7MoabBonus': 176, 'expLv7MoabBonus': 184, 'lv11ExcludeTags': 192, 'expLv11ExcludeTags': 200, 'lv11NonMoabBonus': 208, 'expLv11NonMoabBonus': 216, 'lv11MoabBonus': 224, 'expLv11MoabBonus': 232, 'lv19BloonTags': 240, 'expLv19BloonTags': 248, 'lv19NonMoabBonus': 256, 'expLv19NonMoabBonus': 264, 'lv19MoabBonus': 272, 'expLv19MoabBonus': 280}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.SaudaAfflictionDamageModifier, lv7Tags: System.String, expLv7Tags: System.String, lv7NonMoabBonus: System.Single, expLv7NonMoabBonus: System.String, lv7MoabBonus: System.Single, expLv7MoabBonus: System.String, lv11ExcludeTags: System.String, expLv11ExcludeTags: System.String, lv11NonMoabBonus: System.Single, expLv11NonMoabBonus: System.String, lv11MoabBonus: System.Single, expLv11MoabBonus: System.String, lv19BloonTags: System.String, expLv19BloonTags: System.String, lv19NonMoabBonus: System.Single, expLv19NonMoabBonus: System.String, lv19MoabBonus: System.Single, expLv19MoabBonus: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lv7Tags = lv7Tags
		self.expLv7Tags = expLv7Tags
		self.lv7NonMoabBonus = lv7NonMoabBonus
		self.expLv7NonMoabBonus = expLv7NonMoabBonus
		self.lv7MoabBonus = lv7MoabBonus
		self.expLv7MoabBonus = expLv7MoabBonus
		self.lv11ExcludeTags = lv11ExcludeTags
		self.expLv11ExcludeTags = expLv11ExcludeTags
		self.lv11NonMoabBonus = lv11NonMoabBonus
		self.expLv11NonMoabBonus = expLv11NonMoabBonus
		self.lv11MoabBonus = lv11MoabBonus
		self.expLv11MoabBonus = expLv11MoabBonus
		self.lv19BloonTags = lv19BloonTags
		self.expLv19BloonTags = expLv19BloonTags
		self.lv19NonMoabBonus = lv19NonMoabBonus
		self.expLv19NonMoabBonus = expLv19NonMoabBonus
		self.lv19MoabBonus = lv19MoabBonus
		self.expLv19MoabBonus = expLv19MoabBonus


class ScaleProjectile:

    offsets = {'parent': 136, 'numSamples': 144, 'expNumSamples': 152, 'scaleCurve': 160, 'expScaleCurve': 168, 'scale': 176, 'expScale': 184}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.ScaleProjectile, numSamples: System.Int32, expNumSamples: System.String, scaleCurve: Assets.Scripts.Unity.Map.AnimCurve, expScaleCurve: Assets.Scripts.Unity.Map.AnimCurve, scale: Assets.Scripts.Unity.Map.PointSource, expScale: Assets.Scripts.Unity.Map.PointSource, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.numSamples = numSamples
		self.expNumSamples = expNumSamples
		self.scaleCurve = scaleCurve
		self.expScaleCurve = expScaleCurve
		self.scale = scale
		self.expScale = expScale


class Slow:

    offsets = {'parent': 136, 'multiplier': 144, 'expMultiplier': 152, 'lifespan': 160, 'expLifespan': 168, 'layers': 176, 'expLayers': 184, 'mutationId': 192, 'expMutationId': 200, 'mutationFilter': 208, 'expMutationFilter': 216, 'overlays': 224, 'expOverlays': 232, 'runtimeOverlays': 240, 'expRuntimeOverlays': 248, 'isUnique': 256, 'expIsUnique': 264, 'dontRefreshDuration': 272, 'expDontRefreshDuration': 280, 'createEffectIfSuccessfullyAffected': 288, 'expCreateEffectIfSuccessfullyAffected': 296, 'cascadeMutators': 304, 'expCascadeMutators': 312, 'removeMutatorIfNotMatching': 320, 'expRemoveMutatorIfNotMatching': 328, 'glueLevelOverride': 336, 'expGlueLevelOverride': 344}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.Slow, multiplier: System.Single, expMultiplier: System.String, lifespan: System.Single, expLifespan: System.String, layers: System.Int32, expLayers: System.String, mutationId: System.String, expMutationId: System.String, mutationFilter: System.String, expMutationFilter: System.String, overlays: Assets.Scripts.Unity.Bloons.OverlayGroup, expOverlays: Assets.Scripts.Unity.Bloons.OverlayGroup, runtimeOverlays: Assets.Scripts.Unity.Bloons.OverlayGroupRuntime, expRuntimeOverlays: Assets.Scripts.Unity.Bloons.OverlayGroupRuntime, isUnique: System.Boolean, expIsUnique: System.String, dontRefreshDuration: System.Boolean, expDontRefreshDuration: System.String, createEffectIfSuccessfullyAffected: Assets.Scripts.Unity.Effects.Effect, expCreateEffectIfSuccessfullyAffected: Assets.Scripts.Unity.Effects.Effect, cascadeMutators: System.Boolean, expCascadeMutators: System.String, removeMutatorIfNotMatching: System.Boolean, expRemoveMutatorIfNotMatching: System.String, glueLevelOverride: System.Int32, expGlueLevelOverride: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.multiplier = multiplier
		self.expMultiplier = expMultiplier
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.layers = layers
		self.expLayers = expLayers
		self.mutationId = mutationId
		self.expMutationId = expMutationId
		self.mutationFilter = mutationFilter
		self.expMutationFilter = expMutationFilter
		self.overlays = overlays
		self.expOverlays = expOverlays
		self.runtimeOverlays = runtimeOverlays
		self.expRuntimeOverlays = expRuntimeOverlays
		self.isUnique = isUnique
		self.expIsUnique = expIsUnique
		self.dontRefreshDuration = dontRefreshDuration
		self.expDontRefreshDuration = expDontRefreshDuration
		self.createEffectIfSuccessfullyAffected = createEffectIfSuccessfullyAffected
		self.expCreateEffectIfSuccessfullyAffected = expCreateEffectIfSuccessfullyAffected
		self.cascadeMutators = cascadeMutators
		self.expCascadeMutators = expCascadeMutators
		self.removeMutatorIfNotMatching = removeMutatorIfNotMatching
		self.expRemoveMutatorIfNotMatching = expRemoveMutatorIfNotMatching
		self.glueLevelOverride = glueLevelOverride
		self.expGlueLevelOverride = expGlueLevelOverride


class SlowForBloon:

    offsets = {'bloonId': 352, 'expBloonId': 360, 'bloonTag': 368, 'expBloonTag': 376, 'excluding': 384, 'expExcluding': 392}    
    def __init__(self, bloonId: System.String, expBloonId: System.String, bloonTag: System.String, expBloonTag: System.String, excluding: System.Boolean, expExcluding: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonId = bloonId
		self.expBloonId = expBloonId
		self.bloonTag = bloonTag
		self.expBloonTag = expBloonTag
		self.excluding = excluding
		self.expExcluding = expExcluding


class SlowMaimMoab:

    offsets = {'parent': 136, 'moabDuration': 144, 'expMoabDuration': 152, 'bfbDuration': 160, 'expBfbDuration': 168, 'zomgDuration': 176, 'expZomgDuration': 184, 'ddtDuration': 192, 'expDdtDuration': 200, 'badDuration': 208, 'expBadDuration': 216, 'multiplier': 224, 'expMultiplier': 232, 'bloonPerHitDamageAddition': 240, 'expBloonPerHitDamageAddition': 248, 'overlays': 256, 'expOverlays': 264}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.SlowMaimMoab, moabDuration: System.Single, expMoabDuration: System.String, bfbDuration: System.Single, expBfbDuration: System.String, zomgDuration: System.Single, expZomgDuration: System.String, ddtDuration: System.Single, expDdtDuration: System.String, badDuration: System.Single, expBadDuration: System.String, multiplier: System.Single, expMultiplier: System.String, bloonPerHitDamageAddition: System.Single, expBloonPerHitDamageAddition: System.String, overlays: Assets.Scripts.Unity.Bloons.OverlayGroup, expOverlays: Assets.Scripts.Unity.Bloons.OverlayGroup, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.moabDuration = moabDuration
		self.expMoabDuration = expMoabDuration
		self.bfbDuration = bfbDuration
		self.expBfbDuration = expBfbDuration
		self.zomgDuration = zomgDuration
		self.expZomgDuration = expZomgDuration
		self.ddtDuration = ddtDuration
		self.expDdtDuration = expDdtDuration
		self.badDuration = badDuration
		self.expBadDuration = expBadDuration
		self.multiplier = multiplier
		self.expMultiplier = expMultiplier
		self.bloonPerHitDamageAddition = bloonPerHitDamageAddition
		self.expBloonPerHitDamageAddition = expBloonPerHitDamageAddition
		self.overlays = overlays
		self.expOverlays = expOverlays


class SlowMinusAbilityDuration:

    offsets = {'abilityId': 352, 'expAbilityId': 360}    
    def __init__(self, abilityId: System.String, expAbilityId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.abilityId = abilityId
		self.expAbilityId = expAbilityId


class SlowModifierForTag:

    offsets = {'parent': 136, 'multiplier': 144, 'expMultiplier': 152, 'tagValue': 160, 'expTagValue': 168, 'slowId': 176, 'expSlowId': 184, 'resetToUnmodified': 192, 'expResetToUnmodified': 200, 'preventMutation': 208, 'expPreventMutation': 216, 'lifespanOverride': 224, 'expLifespanOverride': 232}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.SlowModifierForTag, multiplier: System.Single, expMultiplier: System.String, tagValue: System.String, expTagValue: System.String, slowId: System.String, expSlowId: System.String, resetToUnmodified: System.Boolean, expResetToUnmodified: System.String, preventMutation: System.Boolean, expPreventMutation: System.String, lifespanOverride: System.Single, expLifespanOverride: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.multiplier = multiplier
		self.expMultiplier = expMultiplier
		self.tagValue = tagValue
		self.expTagValue = expTagValue
		self.slowId = slowId
		self.expSlowId = expSlowId
		self.resetToUnmodified = resetToUnmodified
		self.expResetToUnmodified = expResetToUnmodified
		self.preventMutation = preventMutation
		self.expPreventMutation = expPreventMutation
		self.lifespanOverride = lifespanOverride
		self.expLifespanOverride = expLifespanOverride


class SlowOnPop:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SpeedUpTowers:

    offsets = {'parent': 136, 'increase': 144, 'expIncrease': 152, 'lifespan': 160, 'expLifespan': 168, 'isUnique': 176, 'expIsUnique': 184, 'useClosest': 192, 'expUseClosest': 200, 'mutatorId': 208, 'expMutatorId': 216, 'priority': 224, 'expPriority': 232}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.SpeedUpTowers, increase: System.Single, expIncrease: System.String, lifespan: System.Single, expLifespan: System.String, isUnique: System.Boolean, expIsUnique: System.String, useClosest: System.Boolean, expUseClosest: System.String, mutatorId: System.String, expMutatorId: System.String, priority: System.Single, expPriority: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.increase = increase
		self.expIncrease = expIncrease
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.isUnique = isUnique
		self.expIsUnique = expIsUnique
		self.useClosest = useClosest
		self.expUseClosest = expUseClosest
		self.mutatorId = mutatorId
		self.expMutatorId = expMutatorId
		self.priority = priority
		self.expPriority = expPriority


class StripChildren:

    offsets = {'parent': 136, 'overlays': 144, 'expOverlays': 152, 'overlayLayer': 160, 'expOverlayLayer': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.StripChildren, overlays: Assets.Scripts.Unity.Bloons.OverlayGroup, expOverlays: Assets.Scripts.Unity.Bloons.OverlayGroup, overlayLayer: System.Int32, expOverlayLayer: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.overlays = overlays
		self.expOverlays = expOverlays
		self.overlayLayer = overlayLayer
		self.expOverlayLayer = expOverlayLayer


class TrackTarget:

    offsets = {'parent': 136, 'distance': 144, 'expDistance': 152, 'trackNewTargets': 160, 'expTrackNewTargets': 168, 'constantlyAquireNewTarget': 176, 'expConstantlyAquireNewTarget': 184, 'maxSeekAngle': 192, 'expMaxSeekAngle': 200, 'ignoreSeekAngle': 208, 'expIgnoreSeekAngle': 216, 'turnRate': 224, 'expTurnRate': 232, 'overrideRotation': 240, 'expOverrideRotation': 248, 'useLifetimeAsDistance': 256, 'expUseLifetimeAsDistance': 264}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.TrackTarget, distance: System.Single, expDistance: System.String, trackNewTargets: System.Boolean, expTrackNewTargets: System.String, constantlyAquireNewTarget: System.Boolean, expConstantlyAquireNewTarget: System.String, maxSeekAngle: System.Single, expMaxSeekAngle: System.String, ignoreSeekAngle: System.Boolean, expIgnoreSeekAngle: System.String, turnRate: System.Single, expTurnRate: System.String, overrideRotation: System.Boolean, expOverrideRotation: System.String, useLifetimeAsDistance: System.Boolean, expUseLifetimeAsDistance: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.distance = distance
		self.expDistance = expDistance
		self.trackNewTargets = trackNewTargets
		self.expTrackNewTargets = expTrackNewTargets
		self.constantlyAquireNewTarget = constantlyAquireNewTarget
		self.expConstantlyAquireNewTarget = expConstantlyAquireNewTarget
		self.maxSeekAngle = maxSeekAngle
		self.expMaxSeekAngle = expMaxSeekAngle
		self.ignoreSeekAngle = ignoreSeekAngle
		self.expIgnoreSeekAngle = expIgnoreSeekAngle
		self.turnRate = turnRate
		self.expTurnRate = expTurnRate
		self.overrideRotation = overrideRotation
		self.expOverrideRotation = expOverrideRotation
		self.useLifetimeAsDistance = useLifetimeAsDistance
		self.expUseLifetimeAsDistance = expUseLifetimeAsDistance


class TrackTargetSharedRange:

    offsets = {'sharedRangeEnabled': 136, 'expSharedRangeEnabled': 144, 'turnRate': 152, 'expTurnRate': 160, 'reaquireTargetDelay': 168, 'expReaquireTargetDelay': 176}    
    def __init__(self, sharedRangeEnabled: System.Boolean, expSharedRangeEnabled: System.String, turnRate: System.Single, expTurnRate: System.String, reaquireTargetDelay: System.Single, expReaquireTargetDelay: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.sharedRangeEnabled = sharedRangeEnabled
		self.expSharedRangeEnabled = expSharedRangeEnabled
		self.turnRate = turnRate
		self.expTurnRate = expTurnRate
		self.reaquireTargetDelay = reaquireTargetDelay
		self.expReaquireTargetDelay = expReaquireTargetDelay


class TrackTargetWithinTime:

    offsets = {'time': 272, 'expTime': 280}    
    def __init__(self, time: System.Single, expTime: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.time = time
		self.expTime = expTime


class TravelAlongPath:

    offsets = {'parent': 136, 'range': 144, 'expRange': 152, 'speed': 160, 'expSpeed': 168, 'reverse': 176, 'expReverse': 184, 'disableRotateWithPathDirection': 192, 'expDisableRotateWithPathDirection': 200, 'rotationLerp': 208, 'expRotationLerp': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.TravelAlongPath, range: System.Single, expRange: System.String, speed: System.Single, expSpeed: System.String, reverse: System.Boolean, expReverse: System.String, disableRotateWithPathDirection: System.Boolean, expDisableRotateWithPathDirection: System.String, rotationLerp: System.Single, expRotationLerp: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.range = range
		self.expRange = expRange
		self.speed = speed
		self.expSpeed = expSpeed
		self.reverse = reverse
		self.expReverse = expReverse
		self.disableRotateWithPathDirection = disableRotateWithPathDirection
		self.expDisableRotateWithPathDirection = expDisableRotateWithPathDirection
		self.rotationLerp = rotationLerp
		self.expRotationLerp = expRotationLerp


class TravelCurvy:

    offsets = {'turnRate': 176, 'expTurnRate': 184, 'maxTurnAngle': 192, 'expMaxTurnAngle': 200}    
    def __init__(self, turnRate: System.Single, expTurnRate: System.String, maxTurnAngle: System.Single, expMaxTurnAngle: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.turnRate = turnRate
		self.expTurnRate = expTurnRate
		self.maxTurnAngle = maxTurnAngle
		self.expMaxTurnAngle = expMaxTurnAngle


class TravelStraightSlowdown:

    offsets = {'slowdownSpeed': 176, 'expSlowdownSpeed': 184, 'minSpeed': 192, 'expMinSpeed': 200, 'canReducePierce': 208, 'expCanReducePierce': 216, 'startingPierce': 224, 'expStartingPierce': 232, 'endPierce': 240, 'expEndPierce': 248}    
    def __init__(self, slowdownSpeed: System.Single, expSlowdownSpeed: System.String, minSpeed: System.Single, expMinSpeed: System.String, canReducePierce: System.Boolean, expCanReducePierce: System.String, startingPierce: System.Int32, expStartingPierce: System.String, endPierce: System.Int32, expEndPierce: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.slowdownSpeed = slowdownSpeed
		self.expSlowdownSpeed = expSlowdownSpeed
		self.minSpeed = minSpeed
		self.expMinSpeed = expMinSpeed
		self.canReducePierce = canReducePierce
		self.expCanReducePierce = expCanReducePierce
		self.startingPierce = startingPierce
		self.expStartingPierce = expStartingPierce
		self.endPierce = endPierce
		self.expEndPierce = expEndPierce


class TravelStrait:

    offsets = {'parent': 136, 'range': 144, 'expRange': 152, 'speed': 160, 'expSpeed': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.TravelStrait, range: System.Single, expRange: System.String, speed: System.Single, expSpeed: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.range = range
		self.expRange = expRange
		self.speed = speed
		self.expSpeed = expSpeed


class TravelTowardsEmitTower:

    offsets = {'parent': 136, 'lockRotation': 144, 'expLockRotation': 152, 'speed': 160, 'expSpeed': 168, 'range': 176, 'expRange': 184, 'delayedActivation': 192, 'expDelayedActivation': 200}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.TravelStrait, lockRotation: System.Boolean, expLockRotation: System.String, speed: System.Single, expSpeed: System.String, range: System.Single, expRange: System.String, delayedActivation: System.Boolean, expDelayedActivation: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lockRotation = lockRotation
		self.expLockRotation = expLockRotation
		self.speed = speed
		self.expSpeed = expSpeed
		self.range = range
		self.expRange = expRange
		self.delayedActivation = delayedActivation
		self.expDelayedActivation = expDelayedActivation


class WallOfTrees:

    offsets = {'parent': 136, 'rbeCapacity': 144, 'expRbeCapacity': 152, 'rbeCashMultiplier': 160, 'expRbeCashMultiplier': 168, 'projectile': 176, 'expProjectile': 184, 'emission': 192, 'expEmission': 200, 'animationState': 208, 'expAnimationState': 216, 'onlyDamageLastBloon': 224, 'expOnlyDamageLastBloon': 232}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.WallOfTrees, rbeCapacity: System.Single, expRbeCapacity: System.String, rbeCashMultiplier: System.Single, expRbeCashMultiplier: System.String, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, expProjectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, emission: Assets.Scripts.Unity.Towers.Emissions.Emission, expEmission: Assets.Scripts.Unity.Towers.Emissions.Emission, animationState: System.Int32, expAnimationState: System.String, onlyDamageLastBloon: System.Boolean, expOnlyDamageLastBloon: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.rbeCapacity = rbeCapacity
		self.expRbeCapacity = expRbeCapacity
		self.rbeCashMultiplier = rbeCashMultiplier
		self.expRbeCashMultiplier = expRbeCashMultiplier
		self.projectile = projectile
		self.expProjectile = expProjectile
		self.emission = emission
		self.expEmission = expEmission
		self.animationState = animationState
		self.expAnimationState = expAnimationState
		self.onlyDamageLastBloon = onlyDamageLastBloon
		self.expOnlyDamageLastBloon = expOnlyDamageLastBloon


class Wind:

    offsets = {'parent': 136, 'distanceMin': 144, 'expDistanceMin': 152, 'distanceMax': 160, 'expDistanceMax': 168, 'chance': 176, 'expChance': 184, 'affectMoab': 192, 'expAffectMoab': 200, 'overlays': 208, 'expOverlays': 216}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Projectiles.Behaviors.Wind, distanceMin: System.Single, expDistanceMin: System.String, distanceMax: System.Single, expDistanceMax: System.String, chance: System.Single, expChance: System.String, affectMoab: System.Boolean, expAffectMoab: System.String, overlays: Assets.Scripts.Unity.Bloons.OverlayGroup, expOverlays: Assets.Scripts.Unity.Bloons.OverlayGroup, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.distanceMin = distanceMin
		self.expDistanceMin = expDistanceMin
		self.distanceMax = distanceMax
		self.expDistanceMax = expDistanceMax
		self.chance = chance
		self.expChance = expChance
		self.affectMoab = affectMoab
		self.expAffectMoab = expAffectMoab
		self.overlays = overlays
		self.expOverlays = expOverlays


class PropBehavior:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class FilterInBaseTowerId:

    offsets = {'parent': 128, 'baseId': 136, 'expBaseId': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.TowerFilters.FilterInBaseTowerId, baseId: System.String, expBaseId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.baseId = baseId
		self.expBaseId = expBaseId


class FilterSet:

    offsets = {'parent': 128, 'towerSets': 136, 'expTowerSets': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.TowerFilters.FilterSet, towerSets: System.String, expTowerSets: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.towerSets = towerSets
		self.expTowerSets = expTowerSets


class FilterTowerByPlaceableArea:

    offsets = {'parent': 128, 'placeableArea': 136, 'expPlaceableArea': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.TowerFilters.FilterTowerByPlaceableArea, placeableArea: System.String, expPlaceableArea: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.placeableArea = placeableArea
		self.expPlaceableArea = expPlaceableArea


class TowerFilter:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BloonUpgrade:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BloonUpgradePath:

    offsets = {'bloon': 48, 'upgrade': 56}    
    def __init__(self, bloon: Assets.Scripts.Unity.Bloons.Bloon, upgrade: Assets.Scripts.Unity.Towers.Upgrades.BloonUpgrade, **kwargs):
        super().__init__(self, **kwargs)
		self.bloon = bloon
		self.upgrade = upgrade


class Upgrade:

    offsets = {'path': 120, 'tier': 124, 'cost': 128, 'xpCost': 132, 'locked': 136, 'confirmation': 144, 'icon': 152, 'localizedNameOverride': 160, 'isParagon': 168, 'def': 176, 'parentProxy': 184}    
    def __init__(self, path: System.Int32, tier: System.Int32, cost: System.Int32, xpCost: System.Int32, locked: System.Int32, confirmation: System.String, icon: UnityEngine.GameObject, localizedNameOverride: System.String, isParagon: System.String, def: Assets.Scripts.Models.Towers.Upgrades.UpgradeModel, parentProxy: Assets.Scripts.Unity.Towers.Tower, **kwargs):
        super().__init__(self, **kwargs)
		self.path = path
		self.tier = tier
		self.cost = cost
		self.xpCost = xpCost
		self.locked = locked
		self.confirmation = confirmation
		self.icon = icon
		self.localizedNameOverride = localizedNameOverride
		self.isParagon = isParagon
		self.def = def
		self.parentProxy = parentProxy


class UpgradePath:

    offsets = {'tower': 48, 'upgrade': 56}    
    def __init__(self, tower: Assets.Scripts.Unity.Towers.Tower, upgrade: Assets.Scripts.Unity.Towers.Upgrades.Upgrade, **kwargs):
        super().__init__(self, **kwargs)
		self.tower = tower
		self.upgrade = upgrade


class Weapon:

    offsets = {'parent': 128, 'animationState': 136, 'expAnimationState': 144, 'animationOffset': 152, 'expAnimationOffset': 160, 'rate': 168, 'expRate': 176, 'fireWithoutTarget': 184, 'expFireWithoutTarget': 192, 'fireBetweenRounds': 200, 'expFireBetweenRounds': 208, 'emission': 216, 'expEmission': 224, 'useAttackPosition': 232, 'expUseAttackPosition': 240, 'startInCooldown': 248, 'expStartInCooldown': 256, 'customStartCooldown': 264, 'expCustomStartCooldown': 272, 'animateOnMainAttack': 280, 'expAnimateOnMainAttack': 288, 'throwMarker': 296}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Weapon, animationState: System.Int32, expAnimationState: System.String, animationOffset: System.Single, expAnimationOffset: System.String, rate: System.Single, expRate: System.String, fireWithoutTarget: System.String, expFireWithoutTarget: System.String, fireBetweenRounds: System.String, expFireBetweenRounds: System.String, emission: Assets.Scripts.Unity.Towers.Emissions.Emission, expEmission: Assets.Scripts.Unity.Towers.Emissions.Emission, useAttackPosition: System.Boolean, expUseAttackPosition: System.String, startInCooldown: System.Boolean, expStartInCooldown: System.String, customStartCooldown: System.Single, expCustomStartCooldown: System.String, animateOnMainAttack: System.Boolean, expAnimateOnMainAttack: System.String, throwMarker: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.animationState = animationState
		self.expAnimationState = expAnimationState
		self.animationOffset = animationOffset
		self.expAnimationOffset = expAnimationOffset
		self.rate = rate
		self.expRate = expRate
		self.fireWithoutTarget = fireWithoutTarget
		self.expFireWithoutTarget = expFireWithoutTarget
		self.fireBetweenRounds = fireBetweenRounds
		self.expFireBetweenRounds = expFireBetweenRounds
		self.emission = emission
		self.expEmission = expEmission
		self.useAttackPosition = useAttackPosition
		self.expUseAttackPosition = expUseAttackPosition
		self.startInCooldown = startInCooldown
		self.expStartInCooldown = expStartInCooldown
		self.customStartCooldown = customStartCooldown
		self.expCustomStartCooldown = expCustomStartCooldown
		self.animateOnMainAttack = animateOnMainAttack
		self.expAnimateOnMainAttack = expAnimateOnMainAttack
		self.throwMarker = throwMarker


class WeaponBehavior:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AcidicMixture:

    offsets = {'parent': 128, 'primaryBehavior': 136, 'expPrimaryBehavior': 144, 'secondaryBehavior': 152, 'expSecondaryBehavior': 160, 'tertiaryBehavior': 168, 'expTertiaryBehavior': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.AcidicMixture, primaryBehavior: Assets.Scripts.Unity.Towers.Projectiles.ProjectileBehavior, expPrimaryBehavior: Assets.Scripts.Unity.Towers.Projectiles.ProjectileBehavior, secondaryBehavior: Assets.Scripts.Unity.Towers.Projectiles.ProjectileBehavior, expSecondaryBehavior: Assets.Scripts.Unity.Towers.Projectiles.ProjectileBehavior, tertiaryBehavior: Assets.Scripts.Unity.Towers.Projectiles.ProjectileBehavior, expTertiaryBehavior: Assets.Scripts.Unity.Towers.Projectiles.ProjectileBehavior, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.primaryBehavior = primaryBehavior
		self.expPrimaryBehavior = expPrimaryBehavior
		self.secondaryBehavior = secondaryBehavior
		self.expSecondaryBehavior = expSecondaryBehavior
		self.tertiaryBehavior = tertiaryBehavior
		self.expTertiaryBehavior = expTertiaryBehavior


class AlternateAnimation:

    offsets = {'parent': 128, 'states': 136, 'expStates': 144, 'originState': 152, 'expOriginState': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.AlternateAnimation, states: System.Int32, expStates: System.String, originState: System.Int32, expOriginState: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.states = states
		self.expStates = expStates
		self.originState = originState
		self.expOriginState = expOriginState


class AlternateProjectile:

    offsets = {'parent': 128, 'projectile': 136, 'expProjectile': 144, 'alternateEmission': 152, 'expAlternateEmission': 160, 'interval': 168, 'expInterval': 176, 'alternateAnimation': 184, 'expAlternateAnimation': 192}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.AlternateProjectile, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, expProjectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, alternateEmission: Assets.Scripts.Unity.Towers.Emissions.Emission, expAlternateEmission: Assets.Scripts.Unity.Towers.Emissions.Emission, interval: System.Int32, expInterval: System.String, alternateAnimation: System.Int32, expAlternateAnimation: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.projectile = projectile
		self.expProjectile = expProjectile
		self.alternateEmission = alternateEmission
		self.expAlternateEmission = expAlternateEmission
		self.interval = interval
		self.expInterval = expInterval
		self.alternateAnimation = alternateAnimation
		self.expAlternateAnimation = expAlternateAnimation


class AlternatingEjectEffect:

    offsets = {'secondDisplay': 264, 'expSecondDisplay': 272, 'secondEffect': 280, 'expSecondEffect': 288, 'secondEffectLifespan': 296, 'expSecondEffectLifespan': 304}    
    def __init__(self, secondDisplay: UnityEngine.GameObject, expSecondDisplay: UnityEngine.GameObject, secondEffect: Assets.Scripts.Unity.Effects.Effect, expSecondEffect: Assets.Scripts.Unity.Effects.Effect, secondEffectLifespan: System.Single, expSecondEffectLifespan: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.secondDisplay = secondDisplay
		self.expSecondDisplay = expSecondDisplay
		self.secondEffect = secondEffect
		self.expSecondEffect = expSecondEffect
		self.secondEffectLifespan = secondEffectLifespan
		self.expSecondEffectLifespan = expSecondEffectLifespan


class AngleToMapCenter:

    offsets = {'parent': 128, 'range': 136, 'expRange': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.AngleToMapCenter, range: System.Single, expRange: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.range = range
		self.expRange = expRange


class AnimateAirUnitOnFire:

    offsets = {'parent': 128, 'animationState': 136, 'expAnimationState': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.AnimateAirUnitOnFire, animationState: System.Int32, expAnimationState: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.animationState = animationState
		self.expAnimationState = expAnimationState


class AnimationStateOverride:

    offsets = {'parent': 128, 'stateFrom': 136, 'expStateFrom': 144, 'stateTo': 152, 'expStateTo': 160, 'overrideWith': 168, 'expOverrideWith': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.AnimationStateOverride, stateFrom: System.Int32, expStateFrom: System.String, stateTo: System.Int32, expStateTo: System.String, overrideWith: System.Int32, expOverrideWith: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.stateFrom = stateFrom
		self.expStateFrom = expStateFrom
		self.stateTo = stateTo
		self.expStateTo = expStateTo
		self.overrideWith = overrideWith
		self.expOverrideWith = expOverrideWith


class BerserkerBrew:

    offsets = {'parent': 128, 'damageUp': 136, 'expDamageUp': 144, 'pierceUp': 152, 'expPierceUp': 160, 'rateUp': 168, 'expRateUp': 176, 'rangeUp': 184, 'expRangeUp': 192}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.BerserkerBrew, damageUp: System.Single, expDamageUp: System.String, pierceUp: System.Single, expPierceUp: System.String, rateUp: System.Single, expRateUp: System.String, rangeUp: System.Single, expRangeUp: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.damageUp = damageUp
		self.expDamageUp = expDamageUp
		self.pierceUp = pierceUp
		self.expPierceUp = expPierceUp
		self.rateUp = rateUp
		self.expRateUp = expRateUp
		self.rangeUp = rangeUp
		self.expRangeUp = expRangeUp


class BonusProjectileAfterInterval:

    offsets = {'parent': 128, 'interval': 136, 'expInterval': 144, 'projectile': 152, 'emission': 160, 'useTowerPosition': 168, 'expUseTowerPosition': 176, 'cooldown': 184, 'expCooldown': 192}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.BonusProjectileAfterInterval, interval: System.Int32, expInterval: System.String, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, emission: Assets.Scripts.Unity.Towers.Emissions.Emission, useTowerPosition: System.Boolean, expUseTowerPosition: System.String, cooldown: System.Single, expCooldown: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.interval = interval
		self.expInterval = expInterval
		self.projectile = projectile
		self.emission = emission
		self.useTowerPosition = useTowerPosition
		self.expUseTowerPosition = expUseTowerPosition
		self.cooldown = cooldown
		self.expCooldown = expCooldown


class CheckAdoraCanFire:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CheckAirUnitOverTrack:

    offsets = {'parent': 128, 'futureTime': 136, 'expFutureTime': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.CheckAirUnitOverTrack, futureTime: System.Single, expFutureTime: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.futureTime = futureTime
		self.expFutureTime = expFutureTime


class CheckAmmoBelt:

    offsets = {'parent': 128, 'fireRate': 136, 'expFireRate': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.CheckAmmoBelt, fireRate: System.Single, expFireRate: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.fireRate = fireRate
		self.expFireRate = expFireRate


class CheckTempleCanFire:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ClearProjectileHitList:

    offsets = {'parent': 128, 'rate': 136, 'expRate': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.ClearProjectileHitList, rate: System.Single, expRate: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.rate = rate
		self.expRate = expRate


class CreateEffectFollowProjectile:

    offsets = {'parent': 136, 'effect': 144, 'expEffect': 152, 'offset': 160, 'expOffset': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.CreateEffectFollowProjectile, effect: Assets.Scripts.Unity.Effects.Effect, expEffect: Assets.Scripts.Unity.Effects.Effect, offset: System.String, expOffset: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.effect = effect
		self.expEffect = expEffect
		self.offset = offset
		self.expOffset = expOffset


class CreateEffectOnContact:

    offsets = {'parent': 136, 'effect': 144, 'expEffect': 152}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.CreateEffectOnContact, effect: Assets.Scripts.Unity.Effects.Effect, expEffect: Assets.Scripts.Unity.Effects.Effect, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.effect = effect
		self.expEffect = expEffect


class CreateEffectProjectileAfterTime:

    offsets = {'parent': 136, 'effect': 144, 'expEffect': 152, 'time': 160, 'expTime': 168}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.CreateEffectProjectileAfterTime, effect: Assets.Scripts.Unity.Effects.Effect, expEffect: Assets.Scripts.Unity.Effects.Effect, time: System.Single, expTime: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.effect = effect
		self.expEffect = expEffect
		self.time = time
		self.expTime = expTime


class CreateTextEffect:

    offsets = {'parent': 136, 'lifespan': 144, 'expLifespan': 152, 'useTowerPosition': 160, 'expUseTowerPosition': 168, 'display': 176, 'expDisplay': 184}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.CreateTextEffect, lifespan: System.Single, expLifespan: System.String, useTowerPosition: System.Boolean, expUseTowerPosition: System.String, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.useTowerPosition = useTowerPosition
		self.expUseTowerPosition = expUseTowerPosition
		self.display = display
		self.expDisplay = expDisplay


class CreateTypedTowerCurrentIndex:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.CreateTypedTowerCurrentIndex, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class CritMultiplier:

    offsets = {'parent': 128, 'damage': 136, 'expDamage': 144, 'spacingLower': 152, 'expSpacingLower': 160, 'spacingUpper': 168, 'expSpacingUpper': 176, 'distributeToChildren': 184, 'expDistributeToChildren': 192, 'display': 200, 'expDisplay': 208}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.CritMultiplier, damage: System.Single, expDamage: System.String, spacingLower: System.Single, expSpacingLower: System.String, spacingUpper: System.Single, expSpacingUpper: System.String, distributeToChildren: System.String, expDistributeToChildren: System.String, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.damage = damage
		self.expDamage = expDamage
		self.spacingLower = spacingLower
		self.expSpacingLower = expSpacingLower
		self.spacingUpper = spacingUpper
		self.expSpacingUpper = expSpacingUpper
		self.distributeToChildren = distributeToChildren
		self.expDistributeToChildren = expDistributeToChildren
		self.display = display
		self.expDisplay = expDisplay


class CycleAnimation:

    offsets = {'parent': 128, 'minAnimationState': 136, 'expMinAnimationState': 144, 'maxAnimationState': 152, 'expMaxAnimationState': 160, 'loopMode': 168, 'expLoopMode': 176, 'randomize': 184, 'expRandomize': 192}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.CycleAnimation, minAnimationState: System.Int32, expMinAnimationState: System.String, maxAnimationState: System.Int32, expMaxAnimationState: System.String, loopMode: System.String, expLoopMode: System.String, randomize: System.Boolean, expRandomize: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.minAnimationState = minAnimationState
		self.expMinAnimationState = expMinAnimationState
		self.maxAnimationState = maxAnimationState
		self.expMaxAnimationState = expMaxAnimationState
		self.loopMode = loopMode
		self.expLoopMode = expLoopMode
		self.randomize = randomize
		self.expRandomize = expRandomize


class DamageBasedAttackSpeed:

    offsets = {'parent': 136, 'damageThreshold': 144, 'expDamageThreshold': 152, 'maxTimeWithoutDamage': 160, 'expMaxTimeWithoutDamage': 168, 'increasePerThreshold': 176, 'expIncreasePerThreshold': 184, 'maxStacks': 192, 'expMaxStacks': 200}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.DamageBasedAttackSpeed, damageThreshold: System.Single, expDamageThreshold: System.String, maxTimeWithoutDamage: System.Single, expMaxTimeWithoutDamage: System.String, increasePerThreshold: System.Single, expIncreasePerThreshold: System.String, maxStacks: System.Int32, expMaxStacks: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.damageThreshold = damageThreshold
		self.expDamageThreshold = expDamageThreshold
		self.maxTimeWithoutDamage = maxTimeWithoutDamage
		self.expMaxTimeWithoutDamage = expMaxTimeWithoutDamage
		self.increasePerThreshold = increasePerThreshold
		self.expIncreasePerThreshold = expIncreasePerThreshold
		self.maxStacks = maxStacks
		self.expMaxStacks = expMaxStacks


class EjectAnimation:

    offsets = {'parent': 128, 'animationState': 136, 'expAnimationState': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.EjectAnimation, animationState: System.Int32, expAnimationState: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.animationState = animationState
		self.expAnimationState = expAnimationState


class EjectEffect:

    offsets = {'parent': 128, 'display': 136, 'expDisplay': 144, 'effect': 152, 'expEffect': 160, 'lifespan': 168, 'expLifespan': 176, 'fullscreen': 184, 'expFullscreen': 192, 'rotateToWeapon': 200, 'expRotateToWeapon': 208, 'useEjectPoint': 216, 'expUseEjectPoint': 224, 'useEmittedFrom': 232, 'expUseEmittedFrom': 240, 'useMainAttackRotation': 248, 'expUseMainAttackRotation': 256}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.EjectEffect, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, effect: Assets.Scripts.Unity.Effects.Effect, expEffect: Assets.Scripts.Unity.Effects.Effect, lifespan: System.Single, expLifespan: System.String, fullscreen: System.Boolean, expFullscreen: System.String, rotateToWeapon: System.Boolean, expRotateToWeapon: System.String, useEjectPoint: System.Boolean, expUseEjectPoint: System.String, useEmittedFrom: System.Boolean, expUseEmittedFrom: System.String, useMainAttackRotation: System.Boolean, expUseMainAttackRotation: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.display = display
		self.expDisplay = expDisplay
		self.effect = effect
		self.expEffect = expEffect
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.fullscreen = fullscreen
		self.expFullscreen = expFullscreen
		self.rotateToWeapon = rotateToWeapon
		self.expRotateToWeapon = expRotateToWeapon
		self.useEjectPoint = useEjectPoint
		self.expUseEjectPoint = expUseEjectPoint
		self.useEmittedFrom = useEmittedFrom
		self.expUseEmittedFrom = expUseEmittedFrom
		self.useMainAttackRotation = useMainAttackRotation
		self.expUseMainAttackRotation = expUseMainAttackRotation


class EjectEffectWithOffsets:

    offsets = {'parent': 128, 'display': 136, 'expDisplay': 144, 'effect': 152, 'expEffect': 160, 'rotateToWeapon': 168, 'expRotateToWeapon': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.EjectEffectWithOffsets, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, effect: Assets.Scripts.Unity.Effects.Effect, expEffect: Assets.Scripts.Unity.Effects.Effect, rotateToWeapon: System.Boolean, expRotateToWeapon: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.display = display
		self.expDisplay = expDisplay
		self.effect = effect
		self.expEffect = expEffect
		self.rotateToWeapon = rotateToWeapon
		self.expRotateToWeapon = expRotateToWeapon


class EjectMultipleTestEffect:

    offsets = {'parent': 128, 'display': 136, 'expDisplay': 144, 'lifespan': 152, 'expLifespan': 160, 'count': 168, 'expCount': 176, 'fullscreen': 184, 'expFullscreen': 192, 'rotateToWeapon': 200, 'expRotateToWeapon': 208}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.EjectMultipleTestEffect, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, lifespan: System.Single, expLifespan: System.String, count: System.Single, expCount: System.String, fullscreen: System.Boolean, expFullscreen: System.String, rotateToWeapon: System.Boolean, expRotateToWeapon: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.display = display
		self.expDisplay = expDisplay
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.count = count
		self.expCount = expCount
		self.fullscreen = fullscreen
		self.expFullscreen = expFullscreen
		self.rotateToWeapon = rotateToWeapon
		self.expRotateToWeapon = expRotateToWeapon


class EmissionArcRotationOffDisplayDirection:

    offsets = {'parent': 128, 'offsetAngle': 136, 'expOffsetAngle': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.EmissionArcRotationOffDisplayDirection, offsetAngle: System.Int32, expOffsetAngle: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.offsetAngle = offsetAngle
		self.expOffsetAngle = expOffsetAngle


class EmissionArcRotationOffTowerDirection:

    offsets = {'parent': 128, 'offsetAngle': 136, 'expOffsetAngle': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.EmissionArcRotationOffTowerDirection, offsetAngle: System.Int32, expOffsetAngle: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.offsetAngle = offsetAngle
		self.expOffsetAngle = expOffsetAngle


class EmissionCamoIfTargetIsCamo:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.EmissionCamoIfTargetIsCamo, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class EmissionMaxProjectileRadius:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.EmissionMaxProjectileRadius, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class EmissionRotationOffAlternateDisplay:

    offsets = {'parent': 128, 'offsetAngle': 136, 'expOffsetAngle': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.EmissionRotationOffAlternateDisplay, offsetAngle: System.Int32, expOffsetAngle: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.offsetAngle = offsetAngle
		self.expOffsetAngle = expOffsetAngle


class EmissionRotationOffBloonDirection:

    offsets = {'parent': 128, 'useAirUnitPosition': 136, 'expUseAirUnitPosition': 144, 'dontSetAfterEmit': 152, 'expDontSetAfterEmit': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.EmissionRotationOffBloonDirection, useAirUnitPosition: System.Boolean, expUseAirUnitPosition: System.String, dontSetAfterEmit: System.Boolean, expDontSetAfterEmit: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.useAirUnitPosition = useAirUnitPosition
		self.expUseAirUnitPosition = expUseAirUnitPosition
		self.dontSetAfterEmit = dontSetAfterEmit
		self.expDontSetAfterEmit = expDontSetAfterEmit


class EmissionRotationOffDisplay:

    offsets = {'parent': 128, 'offsetAngle': 136, 'expOffsetAngle': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.EmissionRotationOffDisplay, offsetAngle: System.Int32, expOffsetAngle: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.offsetAngle = offsetAngle
		self.expOffsetAngle = expOffsetAngle


class EmissionRotationOffDisplayOnEmit:

    offsets = {'parent': 128, 'offsetAngle': 136, 'expOffsetAngle': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.EmissionRotationOffDisplayOnEmit, offsetAngle: System.Int32, expOffsetAngle: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.offsetAngle = offsetAngle
		self.expOffsetAngle = expOffsetAngle


class EmissionRotationOffProjectileDirection:

    offsets = {'parent': 128, 'startingOffset': 136, 'expStartingOffset': 144, 'angleInBetween': 152, 'expAngleInBetween': 160, 'alwaysCentre': 168, 'expAlwaysCentre': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.EmissionRotationOffProjectileDirection, startingOffset: System.Single, expStartingOffset: System.String, angleInBetween: System.Single, expAngleInBetween: System.String, alwaysCentre: System.Boolean, expAlwaysCentre: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.startingOffset = startingOffset
		self.expStartingOffset = expStartingOffset
		self.angleInBetween = angleInBetween
		self.expAngleInBetween = expAngleInBetween
		self.alwaysCentre = alwaysCentre
		self.expAlwaysCentre = expAlwaysCentre


class EmissionRotationOffTowerDirection:

    offsets = {'parent': 128, 'offsetAngle': 136, 'expOffsetAngle': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.EmissionRotationOffTowerDirection, offsetAngle: System.Int32, expOffsetAngle: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.offsetAngle = offsetAngle
		self.expOffsetAngle = expOffsetAngle


class EmissionRotationOffset:

    offsets = {'parent': 128, 'offsetAngle': 136, 'expOffsetAngle': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.EmissionRotationOffset, offsetAngle: System.Int32, expOffsetAngle: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.offsetAngle = offsetAngle
		self.expOffsetAngle = expOffsetAngle


class EmissionRotationZero:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.EmissionRotationZero, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class EmissionsPerRound:

    offsets = {'parent': 128, 'count': 136, 'expCount': 144, 'allowSpawnOnInitialise': 152, 'expAllowSpawnOnInitialise': 160, 'ignoreInSandbox': 168, 'expIgnoreInSandbox': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.EmissionsPerRound, count: System.Single, expCount: System.String, allowSpawnOnInitialise: System.Boolean, expAllowSpawnOnInitialise: System.String, ignoreInSandbox: System.Boolean, expIgnoreInSandbox: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.count = count
		self.expCount = expCount
		self.allowSpawnOnInitialise = allowSpawnOnInitialise
		self.expAllowSpawnOnInitialise = expAllowSpawnOnInitialise
		self.ignoreInSandbox = ignoreInSandbox
		self.expIgnoreInSandbox = expIgnoreInSandbox


class FilterTargetAngleFilter:

    offsets = {'parent': 128, 'fieldOfView': 136, 'expFieldOfView': 144, 'baseTowerRotationOffset': 152, 'expBaseTowerRotationOffset': 160, 'shareFilterTargets': 168, 'expShareFilterTargets': 176, 'minTimeBetweenFilterTargets': 184, 'expMinTimeBetweenFilterTargets': 192}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.FilterTargetAngleFilter, fieldOfView: System.Single, expFieldOfView: System.String, baseTowerRotationOffset: System.Single, expBaseTowerRotationOffset: System.String, shareFilterTargets: System.Boolean, expShareFilterTargets: System.String, minTimeBetweenFilterTargets: System.Single, expMinTimeBetweenFilterTargets: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.fieldOfView = fieldOfView
		self.expFieldOfView = expFieldOfView
		self.baseTowerRotationOffset = baseTowerRotationOffset
		self.expBaseTowerRotationOffset = expBaseTowerRotationOffset
		self.shareFilterTargets = shareFilterTargets
		self.expShareFilterTargets = expShareFilterTargets
		self.minTimeBetweenFilterTargets = minTimeBetweenFilterTargets
		self.expMinTimeBetweenFilterTargets = expMinTimeBetweenFilterTargets


class FireAlternateWeapon:

    offsets = {'parent': 128, 'weaponId': 136, 'expWeaponId': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.FireAlternateWeapon, weaponId: System.Int32, expWeaponId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.weaponId = weaponId
		self.expWeaponId = expWeaponId


class FireFromAirUnit:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.FireFromAirUnit, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class FireWhenAlternateWeaponIsReady:

    offsets = {'parent': 128, 'weaponId': 136, 'expWeaponId': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.FireWhenAlternateWeaponIsReady, weaponId: System.Int32, expWeaponId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.weaponId = weaponId
		self.expWeaponId = expWeaponId


class FlagshipAttackSpeedIncrease:

    offsets = {'parent': 184, 'damageIncrease': 192, 'expDamageIncrease': 200}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.FlagshipAttackSpeedIncrease, damageIncrease: System.Single, expDamageIncrease: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.damageIncrease = damageIncrease
		self.expDamageIncrease = expDamageIncrease


class FlipFollowPath:

    offsets = {'parent': 128, 'flipTowerDisplayX': 136, 'expFlipTowerDisplayX': 144, 'flipTowerDisplayY': 152, 'expFlipTowerDisplayY': 160, 'effectOnFlip': 168, 'expEffectOnFlip': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.FlipFollowPath, flipTowerDisplayX: System.Boolean, expFlipTowerDisplayX: System.String, flipTowerDisplayY: System.Boolean, expFlipTowerDisplayY: System.String, effectOnFlip: Assets.Scripts.Unity.Effects.Effect, expEffectOnFlip: Assets.Scripts.Unity.Effects.Effect, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.flipTowerDisplayX = flipTowerDisplayX
		self.expFlipTowerDisplayX = expFlipTowerDisplayX
		self.flipTowerDisplayY = flipTowerDisplayY
		self.expFlipTowerDisplayY = expFlipTowerDisplayY
		self.effectOnFlip = effectOnFlip
		self.expEffectOnFlip = expEffectOnFlip


class IgnoreThrowMarker:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.IgnoreThrowMarker, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class JungleVineLimitProjectile:

    offsets = {'parent': 128, 'limit': 136, 'expLimit': 144, 'delay': 152, 'expDelay': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.JungleVineLimitProjectile, limit: System.Int32, expLimit: System.String, delay: System.Single, expDelay: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.limit = limit
		self.expLimit = expLimit
		self.delay = delay
		self.expDelay = expDelay


class LeakDangerAttackSpeed:

    offsets = {'parent': 128, 'maxRateIncreasePercent': 136, 'expMaxRateIncreasePercent': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.LeakDangerAttackSpeed, maxRateIncreasePercent: System.Single, expMaxRateIncreasePercent: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.maxRateIncreasePercent = maxRateIncreasePercent
		self.expMaxRateIncreasePercent = expMaxRateIncreasePercent


class LifeBasedAttackSpeed:

    offsets = {'parent': 128, 'ratePerLife': 136, 'expRatePerLife': 144, 'lifeCap': 152, 'expLifeCap': 160, 'baseRateIncrease': 168, 'expBaseRateIncrease': 176, 'saveId': 184, 'expSaveId': 192}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.LifeBasedAttackSpeed, ratePerLife: System.Single, expRatePerLife: System.String, lifeCap: System.Int32, expLifeCap: System.String, baseRateIncrease: System.Single, expBaseRateIncrease: System.String, saveId: System.String, expSaveId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.ratePerLife = ratePerLife
		self.expRatePerLife = expRatePerLife
		self.lifeCap = lifeCap
		self.expLifeCap = expLifeCap
		self.baseRateIncrease = baseRateIncrease
		self.expBaseRateIncrease = expBaseRateIncrease
		self.saveId = saveId
		self.expSaveId = expSaveId


class LimitProjectile:

    offsets = {'parent': 128, 'projectile': 136, 'expProjectile': 144, 'limit': 152, 'expLimit': 160, 'delay': 168, 'expDelay': 176, 'limitByDestroyedPriorProjectile': 184, 'expLimitByDestroyedPriorProjectile': 192, 'globalForPlayer': 200, 'expGlobalForPlayer': 208}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.LimitProjectile, projectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, expProjectile: Assets.Scripts.Unity.Towers.Projectiles.Projectile, limit: System.Int32, expLimit: System.String, delay: System.Single, expDelay: System.String, limitByDestroyedPriorProjectile: System.Boolean, expLimitByDestroyedPriorProjectile: System.String, globalForPlayer: System.Boolean, expGlobalForPlayer: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.projectile = projectile
		self.expProjectile = expProjectile
		self.limit = limit
		self.expLimit = expLimit
		self.delay = delay
		self.expDelay = expDelay
		self.limitByDestroyedPriorProjectile = limitByDestroyedPriorProjectile
		self.expLimitByDestroyedPriorProjectile = expLimitByDestroyedPriorProjectile
		self.globalForPlayer = globalForPlayer
		self.expGlobalForPlayer = expGlobalForPlayer


class LineEffect:

    offsets = {'parent': 128, 'lineDisplay': 136, 'expLineDisplay': 144, 'effectAtEnd': 152, 'expEffectAtEnd': 160, 'effectAtStart': 168, 'expEffectAtStart': 176, 'isLineDisplayEndless': 184, 'expIsLineDisplayEndless': 192, 'useDisplayLengthSpeed': 200, 'expUseDisplayLengthSpeed': 208, 'displayLengthSpeed': 216, 'expDisplayLengthSpeed': 224, 'useWeaponEjectForDisplay': 232, 'expUseWeaponEjectForDisplay': 240, 'useRotateToPointer': 248, 'expUseRotateToPointer': 256, 'ignoreBlockers': 264, 'expIgnoreBlockers': 272, 'useLineProjectileEmissionShowEffect': 280, 'expUseLineProjectileEmissionShowEffect': 288}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.LineEffect, lineDisplay: UnityEngine.GameObject, expLineDisplay: UnityEngine.GameObject, effectAtEnd: Assets.Scripts.Unity.Effects.Effect, expEffectAtEnd: Assets.Scripts.Unity.Effects.Effect, effectAtStart: Assets.Scripts.Unity.Effects.Effect, expEffectAtStart: Assets.Scripts.Unity.Effects.Effect, isLineDisplayEndless: System.Boolean, expIsLineDisplayEndless: System.String, useDisplayLengthSpeed: System.Boolean, expUseDisplayLengthSpeed: System.String, displayLengthSpeed: System.Single, expDisplayLengthSpeed: System.String, useWeaponEjectForDisplay: System.Boolean, expUseWeaponEjectForDisplay: System.String, useRotateToPointer: System.Boolean, expUseRotateToPointer: System.String, ignoreBlockers: System.Boolean, expIgnoreBlockers: System.String, useLineProjectileEmissionShowEffect: System.Boolean, expUseLineProjectileEmissionShowEffect: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lineDisplay = lineDisplay
		self.expLineDisplay = expLineDisplay
		self.effectAtEnd = effectAtEnd
		self.expEffectAtEnd = expEffectAtEnd
		self.effectAtStart = effectAtStart
		self.expEffectAtStart = expEffectAtStart
		self.isLineDisplayEndless = isLineDisplayEndless
		self.expIsLineDisplayEndless = expIsLineDisplayEndless
		self.useDisplayLengthSpeed = useDisplayLengthSpeed
		self.expUseDisplayLengthSpeed = expUseDisplayLengthSpeed
		self.displayLengthSpeed = displayLengthSpeed
		self.expDisplayLengthSpeed = expDisplayLengthSpeed
		self.useWeaponEjectForDisplay = useWeaponEjectForDisplay
		self.expUseWeaponEjectForDisplay = expUseWeaponEjectForDisplay
		self.useRotateToPointer = useRotateToPointer
		self.expUseRotateToPointer = expUseRotateToPointer
		self.ignoreBlockers = ignoreBlockers
		self.expIgnoreBlockers = expIgnoreBlockers
		self.useLineProjectileEmissionShowEffect = useLineProjectileEmissionShowEffect
		self.expUseLineProjectileEmissionShowEffect = expUseLineProjectileEmissionShowEffect


class NecroEmissionFilter:

    offsets = {'parent': 128, 'expIsPriceOfDakrnessEmission': 136, 'isPriceOfDakrnessEmission': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.NecroEmissionFilter, expIsPriceOfDakrnessEmission: System.String, isPriceOfDakrnessEmission: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.expIsPriceOfDakrnessEmission = expIsPriceOfDakrnessEmission
		self.isPriceOfDakrnessEmission = isPriceOfDakrnessEmission


class Offset:

    offsets = {'parent': 128, 'range': 136, 'expRange': 144, 'angleOffset': 152, 'expAngleOffset': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.Offset, range: System.Single, expRange: System.String, angleOffset: System.Single, expAngleOffset: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.range = range
		self.expRange = expRange
		self.angleOffset = angleOffset
		self.expAngleOffset = expAngleOffset


class PsiLimitProjectile:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.PsiLimitProjectile, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class RandomAngleOffset:

    offsets = {'parent': 128, 'minOffset': 136, 'expMinOffset': 144, 'maxOffset': 152, 'expMaxOffset': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.RandomAngleOffset, minOffset: System.Int32, expMinOffset: System.String, maxOffset: System.Int32, expMaxOffset: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.minOffset = minOffset
		self.expMinOffset = expMinOffset
		self.maxOffset = maxOffset
		self.expMaxOffset = expMaxOffset


class RandomRate:

    offsets = {'parent': 128, 'rateOffset': 136, 'expRateOffset': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.RandomRate, rateOffset: System.Single, expRateOffset: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.rateOffset = rateOffset
		self.expRateOffset = expRateOffset


class RandomRotationWeaponBehavior:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.RandomRotationWeaponBehavior, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class RandomSpeedOffset:

    offsets = {'parent': 128, 'minOffset': 136, 'expMinOffset': 144, 'maxOffset': 152, 'expMaxOffset': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.RandomSpeedOffset, minOffset: System.Int32, expMinOffset: System.String, maxOffset: System.Int32, expMaxOffset: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.minOffset = minOffset
		self.expMinOffset = expMinOffset
		self.maxOffset = maxOffset
		self.expMaxOffset = expMaxOffset


class RateBasedAnimationOffset:

    offsets = {'parent': 128, 'baseRate': 136, 'expBaseRate': 144, 'offset': 152, 'expOffset': 160}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.RateBasedAnimationOffset, baseRate: System.Single, expBaseRate: System.String, offset: System.Single, expOffset: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.baseRate = baseRate
		self.expBaseRate = expBaseRate
		self.offset = offset
		self.expOffset = expOffset


class ResetAgeOnContact:

    offsets = {'parent': 136}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.ResetAgeOnContact, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class ResetRateOnInitialise:

    offsets = {'weapon': 128, 'expWeapon': 136}    
    def __init__(self, weapon: Assets.Scripts.Unity.Towers.Weapons.Weapon, expWeapon: Assets.Scripts.Unity.Towers.Weapons.Weapon, **kwargs):
        super().__init__(self, **kwargs)
		self.weapon = weapon
		self.expWeapon = expWeapon


class SetTriggerOnAirUnitFire:

    offsets = {'parent': 128, 'triggerState': 136, 'expTriggerState': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.SetTriggerOnAirUnitFire, triggerState: System.Int32, expTriggerState: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.triggerState = triggerState
		self.expTriggerState = expTriggerState


class ShowTextOnHit:

    offsets = {'parent': 136, 'lifespan': 144, 'expLifespan': 152, 'useTowerPosition': 160, 'expUseTowerPosition': 168, 'text': 176, 'expText': 184, 'display': 192, 'expDisplay': 200}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.ShowTextOnHit, lifespan: System.Single, expLifespan: System.String, useTowerPosition: System.Boolean, expUseTowerPosition: System.String, text: System.String, expText: System.String, display: UnityEngine.GameObject, expDisplay: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.lifespan = lifespan
		self.expLifespan = expLifespan
		self.useTowerPosition = useTowerPosition
		self.expUseTowerPosition = expUseTowerPosition
		self.text = text
		self.expText = expText
		self.display = display
		self.expDisplay = expDisplay


class Spin:

    offsets = {'parent': 128, 'rotationPerSecond': 136, 'expRotationPerSecond': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.Spin, rotationPerSecond: System.Single, expRotationPerSecond: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.rotationPerSecond = rotationPerSecond
		self.expRotationPerSecond = expRotationPerSecond


class SubTowerFilter:

    offsets = {'parent': 128, 'baseSubTowerId': 136, 'expBaseSubTowerId': 144, 'maxNumberOfSubTowers': 152, 'expMaxNumberOfSubTowers': 160, 'checkForPreExisting': 168, 'expCheckForPreExisting': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.SubTowerFilter, baseSubTowerId: System.String, expBaseSubTowerId: System.String, maxNumberOfSubTowers: System.Single, expMaxNumberOfSubTowers: System.String, checkForPreExisting: System.Boolean, expCheckForPreExisting: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.baseSubTowerId = baseSubTowerId
		self.expBaseSubTowerId = expBaseSubTowerId
		self.maxNumberOfSubTowers = maxNumberOfSubTowers
		self.expMaxNumberOfSubTowers = expMaxNumberOfSubTowers
		self.checkForPreExisting = checkForPreExisting
		self.expCheckForPreExisting = expCheckForPreExisting


class SwitchAnimStateForBloonType:

    offsets = {'parent': 128, 'nonMoabsAnimId': 136, 'expNonMoabsAnimId': 144, 'moabAnimId': 152, 'expMoabAnimId': 160, 'bfbAnimId': 168, 'expBfbAnimId': 176, 'zomgAnimId': 184, 'expZomgAnimId': 192, 'ddtAnimId': 200, 'expDdtAnimId': 208, 'badAnimId': 216, 'expBadAnimId': 224}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.SwitchAnimStateForBloonType, nonMoabsAnimId: System.Int32, expNonMoabsAnimId: System.String, moabAnimId: System.Int32, expMoabAnimId: System.String, bfbAnimId: System.Int32, expBfbAnimId: System.String, zomgAnimId: System.Int32, expZomgAnimId: System.String, ddtAnimId: System.Int32, expDdtAnimId: System.String, badAnimId: System.Int32, expBadAnimId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.nonMoabsAnimId = nonMoabsAnimId
		self.expNonMoabsAnimId = expNonMoabsAnimId
		self.moabAnimId = moabAnimId
		self.expMoabAnimId = expMoabAnimId
		self.bfbAnimId = bfbAnimId
		self.expBfbAnimId = expBfbAnimId
		self.zomgAnimId = zomgAnimId
		self.expZomgAnimId = expZomgAnimId
		self.ddtAnimId = ddtAnimId
		self.expDdtAnimId = expDdtAnimId
		self.badAnimId = badAnimId
		self.expBadAnimId = expBadAnimId


class SwitchProjectileDisplay:

    offsets = {'parent': 128, 'spriteGroup': 136, 'expSpriteGroup': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.SwitchProjectileDisplay, spriteGroup: Assets.Scripts.Unity.Towers.SpriteGroup, expSpriteGroup: Assets.Scripts.Unity.Towers.SpriteGroup, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.spriteGroup = spriteGroup
		self.expSpriteGroup = expSpriteGroup


class ThrowMarkerOffset:

    offsets = {'offset': 128, 'expOffset': 136}    
    def __init__(self, offset: UnityEngine.GameObject, expOffset: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.offset = offset
		self.expOffset = expOffset


class UseAttackRotation:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.UseAttackRotation, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class UseParentEject:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.UseParentEject, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class WeaponRateMin:

    offsets = {'parent': 128, 'min': 136, 'expMin': 144}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.WeaponRateMin, min: System.Single, expMin: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.min = min
		self.expMin = expMin


class WobbleMeshDisplay:

    offsets = {'parent': 128, 'min': 136, 'expMin': 144, 'max': 152, 'expMax': 160, 'time': 168, 'expTime': 176}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.WobbleMeshDisplay, min: System.Single, expMin: System.String, max: System.Single, expMax: System.String, time: System.Single, expTime: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent
		self.min = min
		self.expMin = expMin
		self.max = max
		self.expMax = expMax
		self.time = time
		self.expTime = expTime


class ZeroRotation:

    offsets = {'parent': 128}    
    def __init__(self, parent: Assets.Scripts.Unity.Towers.Weapons.Behaviors.ZeroRotation, **kwargs):
        super().__init__(self, **kwargs)
		self.parent = parent


class BottomPageSwipe:

    offsets = {'startScrolling': 104, 'trigger': 108, 'targetX': 112, 'triggerY': 116, 'swipeRatio': 120}    
    def __init__(self, startScrolling: System.Boolean, trigger: System.Single, targetX: System.Single, triggerY: System.Single, swipeRatio: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.startScrolling = startScrolling
		self.trigger = trigger
		self.targetX = targetX
		self.triggerY = triggerY
		self.swipeRatio = swipeRatio


class ButtonExtended:

    offsets = {'OnPointerDownEvent': 256, 'OnPointerUpEvent': 264}    
    def __init__(self, OnPointerDownEvent: System.Action<UnityEngine.EventSystems.PointerEventData>, OnPointerUpEvent: System.Action<UnityEngine.EventSystems.PointerEventData>, **kwargs):
        super().__init__(self, **kwargs)
		self.OnPointerDownEvent = OnPointerDownEvent
		self.OnPointerUpEvent = OnPointerUpEvent


class CameraLookup:

    offsets = {'Scene': 24, 'SelectedTowerOuline': 32}    
    def __init__(self, Scene: UnityEngine.Camera, SelectedTowerOuline: UnityEngine.Camera, **kwargs):
        super().__init__(self, **kwargs)
		self.Scene = Scene
		self.SelectedTowerOuline = SelectedTowerOuline


class CommonBackgroundScreen:
	instance: Assets.Scripts.Unity.UI_New.CommonBackgroundScreen
    offsets = {'instance': 0, 'transitionDuration': 24, 'clearObject': 32, 'mainMenuWorldRawImg': 40, 'mainMenuWorldBlurredImg': 48, 'customBackgroundIn': 56, 'customBackgroundOut': 64, 'vignetteMat': 72, 'blurMaterial': 80, 'screens': 88, 'collectionEventThemes': 96, 'blurRadius': 104, 'downSample': 108, 'iteration': 112, 'currShowingBG': 120, 'mainMenuActive': 128, '_camera': 136, 'world': 144, 'mainRTT': 152, 'blurRTT': 160, 'fadeCount': 168, 'customBackgroundInHandle': 176, 'customBackgroundOutHandle': 200, 'menuWithOverriddenBackground': 224}    
    def __init__(self, instance: Assets.Scripts.Unity.UI_New.CommonBackgroundScreen, transitionDuration: System.Single, clearObject: UnityEngine.GameObject, mainMenuWorldRawImg: UnityEngine.UI.RawImage, mainMenuWorldBlurredImg: UnityEngine.UI.RawImage, customBackgroundIn: UnityEngine.UI.RawImage, customBackgroundOut: UnityEngine.UI.RawImage, vignetteMat: UnityEngine.Material, blurMaterial: UnityEngine.Material, screens: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.ScreenBackground>, collectionEventThemes: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.ScreenBackground>, blurRadius: System.Single, downSample: System.Int32, iteration: System.Int32, currShowingBG: System.String, mainMenuActive: System.Boolean, _camera: UnityEngine.Camera, world: UnityEngine.GameObject, mainRTT: UnityEngine.RenderTexture, blurRTT: UnityEngine.RenderTexture, fadeCount: System.Int32, customBackgroundInHandle: UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle<UnityEngine.Texture>, customBackgroundOutHandle: UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle<UnityEngine.Texture>, menuWithOverriddenBackground: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.transitionDuration = transitionDuration
		self.clearObject = clearObject
		self.mainMenuWorldRawImg = mainMenuWorldRawImg
		self.mainMenuWorldBlurredImg = mainMenuWorldBlurredImg
		self.customBackgroundIn = customBackgroundIn
		self.customBackgroundOut = customBackgroundOut
		self.vignetteMat = vignetteMat
		self.blurMaterial = blurMaterial
		self.screens = screens
		self.collectionEventThemes = collectionEventThemes
		self.blurRadius = blurRadius
		self.downSample = downSample
		self.iteration = iteration
		self.currShowingBG = currShowingBG
		self.mainMenuActive = mainMenuActive
		self._camera = _camera
		self.world = world
		self.mainRTT = mainRTT
		self.blurRTT = blurRTT
		self.fadeCount = fadeCount
		self.customBackgroundInHandle = customBackgroundInHandle
		self.customBackgroundOutHandle = customBackgroundOutHandle
		self.menuWithOverriddenBackground = menuWithOverriddenBackground


class CommonForegroundScreen:
	instance: Assets.Scripts.Unity.UI_New.CommonForegroundScreen
    offsets = {'instance': 0, 'animator': 24, 'heading': 32, 'backButton': 40, 'monkeyMoney': 48, 'knownledge': 56, 'changeHeroButton': 64, 'lblHeading': 72, 'buyMoreMonkeyMoneyButton': 80, 'buyKnowledgeButton': 88, 'lblKnowledge': 96, 'loadingImg': 104, 'backEnabled': 112, 'knowledgePoints': 116}    
    def __init__(self, instance: Assets.Scripts.Unity.UI_New.CommonForegroundScreen, animator: UnityEngine.Animator, heading: UnityEngine.GameObject, backButton: UnityEngine.GameObject, monkeyMoney: UnityEngine.GameObject, knownledge: UnityEngine.GameObject, changeHeroButton: UnityEngine.GameObject, lblHeading: TMPro.TextMeshProUGUI, buyMoreMonkeyMoneyButton: UnityEngine.GameObject, buyKnowledgeButton: UnityEngine.GameObject, lblKnowledge: TMPro.TextMeshProUGUI, loadingImg: UnityEngine.UI.Image, backEnabled: System.Boolean, knowledgePoints: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.animator = animator
		self.heading = heading
		self.backButton = backButton
		self.monkeyMoney = monkeyMoney
		self.knownledge = knownledge
		self.changeHeroButton = changeHeroButton
		self.lblHeading = lblHeading
		self.buyMoreMonkeyMoneyButton = buyMoreMonkeyMoneyButton
		self.buyKnowledgeButton = buyKnowledgeButton
		self.lblKnowledge = lblKnowledge
		self.loadingImg = loadingImg
		self.backEnabled = backEnabled
		self.knowledgePoints = knowledgePoints


class CommonPanel:

    offsets = {'locHeading': 24, 'showMonkeyMoney': 32, 'showBuyMonkeyMoney': 33, 'showKnowledge': 34, 'showBuyKnowledge': 35, 'showBackButton': 36, 'showChangeHeroButton': 37}    
    def __init__(self, locHeading: System.String, showMonkeyMoney: System.Boolean, showBuyMonkeyMoney: System.Boolean, showKnowledge: System.Boolean, showBuyKnowledge: System.Boolean, showBackButton: System.Boolean, showChangeHeroButton: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.locHeading = locHeading
		self.showMonkeyMoney = showMonkeyMoney
		self.showBuyMonkeyMoney = showBuyMonkeyMoney
		self.showKnowledge = showKnowledge
		self.showBuyKnowledge = showBuyKnowledge
		self.showBackButton = showBackButton
		self.showChangeHeroButton = showChangeHeroButton


class CoopGameType:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class DebugBloonCountItem:

    offsets = {'bloonCountText': 24, 'bloonImage': 32}    
    def __init__(self, bloonCountText: TMPro.TextMeshProUGUI, bloonImage: UnityEngine.UI.Image, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonCountText = bloonCountText
		self.bloonImage = bloonImage


class DebugMenus:
	instance: Assets.Scripts.Unity.UI_New.DebugMenus
    offsets = {'instance': 0, 'stepControls': 24, 'stats': 32, 'debugPerfmanceStats': 40, 'towerOutputDetails': 48, 'bloonCount': 56, 'debugText': 64}    
    def __init__(self, instance: Assets.Scripts.Unity.UI_New.DebugMenus, stepControls: UnityEngine.GameObject, stats: UnityEngine.GameObject, debugPerfmanceStats: UnityEngine.GameObject, towerOutputDetails: UnityEngine.GameObject, bloonCount: UnityEngine.GameObject, debugText: TMPro.TextMeshProUGUI, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.stepControls = stepControls
		self.stats = stats
		self.debugPerfmanceStats = debugPerfmanceStats
		self.towerOutputDetails = towerOutputDetails
		self.bloonCount = bloonCount
		self.debugText = debugText


class HoverableInfoPopup:

    offsets = {'displayablePopup': 24, 'popupMessage': 32, 'isHovering': 40, 'hoverTimer': 44}    
    def __init__(self, displayablePopup: UnityEngine.GameObject, popupMessage: TMPro.TMP_Text, isHovering: System.Boolean, hoverTimer: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.displayablePopup = displayablePopup
		self.popupMessage = popupMessage
		self.isHovering = isHovering
		self.hoverTimer = hoverTimer


class InGameObjects:
	instance: Assets.Scripts.Unity.UI_New.InGameObjects
    offsets = {'instance': 0, 'powerIcon': 24, 'powerIconImg': 32}    
    def __init__(self, instance: Assets.Scripts.Unity.UI_New.InGameObjects, powerIcon: UnityEngine.GameObject, powerIconImg: UnityEngine.UI.Image, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.powerIcon = powerIcon
		self.powerIconImg = powerIconImg


class LoadMapType:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class MainHudLeftAlign:
	instance: Assets.Scripts.Unity.UI_New.MainHudLeftAlign
    offsets = {'instance': 0, 'panel': 24, 'statsMenuAnimator': 32, 'healthButton': 40, 'cashButton': 48, 'thriveGlow': 56}    
    def __init__(self, instance: Assets.Scripts.Unity.UI_New.MainHudLeftAlign, panel: UnityEngine.GameObject, statsMenuAnimator: UnityEngine.Animator, healthButton: Assets.Scripts.Unity.UI_New.ButtonExtended, cashButton: Assets.Scripts.Unity.UI_New.ButtonExtended, thriveGlow: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.panel = panel
		self.statsMenuAnimator = statsMenuAnimator
		self.healthButton = healthButton
		self.cashButton = cashButton
		self.thriveGlow = thriveGlow


class MainHudRightAlign:
	instance: Assets.Scripts.Unity.UI_New.MainHudRightAlign
    offsets = {'instance': 0, 'panel': 24, 'roundPanelAnimator': 32, 'roundButton': 40, 'racePrefab': 48, 'raceParent': 56}    
    def __init__(self, instance: Assets.Scripts.Unity.UI_New.MainHudRightAlign, panel: UnityEngine.GameObject, roundPanelAnimator: UnityEngine.Animator, roundButton: Assets.Scripts.Unity.UI_New.ButtonExtended, racePrefab: Assets.Scripts.Utils.PrefabReference, raceParent: UnityEngine.Transform, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.panel = panel
		self.roundPanelAnimator = roundPanelAnimator
		self.roundButton = roundButton
		self.racePrefab = racePrefab
		self.raceParent = raceParent


class PauseButton:
	instance: Assets.Scripts.Unity.UI_New.PauseButton
    offsets = {'instance': 0, 'panel': 24, 'button': 32}    
    def __init__(self, instance: Assets.Scripts.Unity.UI_New.PauseButton, panel: UnityEngine.GameObject, button: Assets.Scripts.Unity.UI_New.ButtonExtended, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.panel = panel
		self.button = button


class ScreenBackground:

    offsets = {'screenName': 16, 'useOwnOrNoBackground': 24, 'bgTextureRef': 32, 'tilesPerHeight': 40, 'vignetteMul': 44}    
    def __init__(self, screenName: System.String, useOwnOrNoBackground: System.Boolean, bgTextureRef: Assets.Scripts.Utils.TextureReference, tilesPerHeight: System.Single, vignetteMul: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.screenName = screenName
		self.useOwnOrNoBackground = useOwnOrNoBackground
		self.bgTextureRef = bgTextureRef
		self.tilesPerHeight = tilesPerHeight
		self.vignetteMul = vignetteMul


class ScreenRatio:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class SocialShareImage:

    offsets = {'copyPasteImg': 24, 'iosShareImg': 32, 'androidShareImg': 40}    
    def __init__(self, copyPasteImg: UnityEngine.UI.Image, iosShareImg: UnityEngine.UI.Image, androidShareImg: UnityEngine.UI.Image, **kwargs):
        super().__init__(self, **kwargs)
		self.copyPasteImg = copyPasteImg
		self.iosShareImg = iosShareImg
		self.androidShareImg = androidShareImg


class ToggleExtended:

    offsets = {'OnPointerDownEvent': 288, 'OnPointerUpEvent': 296}    
    def __init__(self, OnPointerDownEvent: System.Action<UnityEngine.EventSystems.PointerEventData>, OnPointerUpEvent: System.Action<UnityEngine.EventSystems.PointerEventData>, **kwargs):
        super().__init__(self, **kwargs)
		self.OnPointerDownEvent = OnPointerDownEvent
		self.OnPointerUpEvent = OnPointerUpEvent


class UI:
	instance: Assets.Scripts.Unity.UI_New.UI
    offsets = {'instance': 0, '_ratio': 8, 'mapLoader': 24, 'canvasTransform': 32, 'inGameData': 40}    
    def __init__(self, instance: Assets.Scripts.Unity.UI_New.UI, _ratio: Assets.Scripts.Unity.UI_New.ScreenRatio, mapLoader: Assets.Scripts.Unity.Map.MapLoader, canvasTransform: UnityEngine.RectTransform, inGameData: Assets.Scripts.Utils.Helpers.InGameData, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self._ratio = _ratio
		self.mapLoader = mapLoader
		self.canvasTransform = canvasTransform
		self.inGameData = inGameData


class AchievementPanel:

    offsets = {'achievement': 24, 'titleText': 32, 'descriptionText': 40, 'progressText': 48, 'progressImage': 56, 'icon': 64, 'subscript': 72, 'lootPanel': 80, 'inProgressGroup': 88, 'claimGroup': 96, 'claimedGroup': 104, 'rewardsGroup': 112, 'panelBg': 120, 'rewardBg': 128, 'inProgressTheme': 136, 'claimTheme': 144, 'claimedTheme': 152, 'collectSound': 160}    
    def __init__(self, achievement: Assets.Scripts.Unity.Achievements.ActiveAchievement, titleText: TMPro.TMP_Text, descriptionText: TMPro.TMP_Text, progressText: TMPro.TMP_Text, progressImage: UnityEngine.UI.Image, icon: UnityEngine.UI.Image, subscript: TMPro.TMP_Text, lootPanel: Assets.Scripts.Unity.UI_New.Store.LootPanel, inProgressGroup: UnityEngine.Transform, claimGroup: UnityEngine.Transform, claimedGroup: UnityEngine.Transform, rewardsGroup: UnityEngine.Transform, panelBg: UnityEngine.UI.Image, rewardBg: UnityEngine.UI.Image, inProgressTheme: Assets.Scripts.Unity.UI_New.Achievements.AchievementTheme, claimTheme: Assets.Scripts.Unity.UI_New.Achievements.AchievementTheme, claimedTheme: Assets.Scripts.Unity.UI_New.Achievements.AchievementTheme, collectSound: UnityEngine.AudioClip, **kwargs):
        super().__init__(self, **kwargs)
		self.achievement = achievement
		self.titleText = titleText
		self.descriptionText = descriptionText
		self.progressText = progressText
		self.progressImage = progressImage
		self.icon = icon
		self.subscript = subscript
		self.lootPanel = lootPanel
		self.inProgressGroup = inProgressGroup
		self.claimGroup = claimGroup
		self.claimedGroup = claimedGroup
		self.rewardsGroup = rewardsGroup
		self.panelBg = panelBg
		self.rewardBg = rewardBg
		self.inProgressTheme = inProgressTheme
		self.claimTheme = claimTheme
		self.claimedTheme = claimedTheme
		self.collectSound = collectSound


class AchievementTheme:

    offsets = {'panelBgSprite': 16, 'rewardBgSprite': 24, 'descriptionTextColor': 32}    
    def __init__(self, panelBgSprite: Assets.Scripts.Utils.SpriteReference, rewardBgSprite: Assets.Scripts.Utils.SpriteReference, descriptionTextColor: UnityEngine.Color, **kwargs):
        super().__init__(self, **kwargs)
		self.panelBgSprite = panelBgSprite
		self.rewardBgSprite = rewardBgSprite
		self.descriptionTextColor = descriptionTextColor


class AchievementsScreen:

    offsets = {'achievementPanelPrefab': 56, 'container': 64, 'searchField': 72, 'searchPlaceholder': 80, 'btnGooglePlay': 88, 'contentSizeFitter': 96, 'achievementPanels': 104, 'loadingToken': 112, 'achievementLoadingTask': 120, 'isClosed': 128}    
    def __init__(self, achievementPanelPrefab: Assets.Scripts.Unity.UI_New.Achievements.AchievementPanel, container: UnityEngine.RectTransform, searchField: TMPro.TMP_InputField, searchPlaceholder: TMPro.TMP_Text, btnGooglePlay: UnityEngine.UI.Button, contentSizeFitter: UnityEngine.UI.ContentSizeFitter, achievementPanels: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Achievements.AchievementPanel>, loadingToken: System.Threading.CancellationTokenSource, achievementLoadingTask: System.Threading.Tasks.Task, isClosed: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.achievementPanelPrefab = achievementPanelPrefab
		self.container = container
		self.searchField = searchField
		self.searchPlaceholder = searchPlaceholder
		self.btnGooglePlay = btnGooglePlay
		self.contentSizeFitter = contentSizeFitter
		self.achievementPanels = achievementPanels
		self.loadingToken = loadingToken
		self.achievementLoadingTask = achievementLoadingTask
		self.isClosed = isClosed


class ExtensionUtils:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CalloutData:

    offsets = {'callout': 16, 'data': 24, 'weight': 32, 'isPairedCallout': 36, 'isHighPairedCallout': 37, 'pairedCallout': 40}    
    def __init__(self, callout: Assets.Scripts.Unity.UI_New.Callouts.PlayerCalloutTypes, data: System.Double, weight: System.Single, isPairedCallout: System.Boolean, isHighPairedCallout: System.Boolean, pairedCallout: Assets.Scripts.Unity.UI_New.Callouts.PlayerCalloutTypes, **kwargs):
        super().__init__(self, **kwargs)
		self.callout = callout
		self.data = data
		self.weight = weight
		self.isPairedCallout = isPairedCallout
		self.isHighPairedCallout = isHighPairedCallout
		self.pairedCallout = pairedCallout


class CalloutManager:

    offsets = {'listCalloutTypes': 16, 'singlePlayerCalloutTypes': 24, 'coopGame': 32, 'playerCallouts': 40, 'seededRandom': 48}    
    def __init__(self, listCalloutTypes: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Callouts.CalloutTypes.CalloutType>, singlePlayerCalloutTypes: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Callouts.CalloutTypes.CalloutType>, coopGame: Assets.Scripts.Unity.Network.Btd6CoopGame, playerCallouts: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Unity.UI_New.Callouts.CalloutPlayerData>, seededRandom: System.Random, **kwargs):
        super().__init__(self, **kwargs)
		self.listCalloutTypes = listCalloutTypes
		self.singlePlayerCalloutTypes = singlePlayerCalloutTypes
		self.coopGame = coopGame
		self.playerCallouts = playerCallouts
		self.seededRandom = seededRandom


class CalloutPlayerData:

    offsets = {'playerData': 16, 'assignedCallout': 24, 'assignedLowCallout': 32, 'callouts': 40, 'calloutsLow': 48}    
    def __init__(self, playerData: Assets.Scripts.Unity.Bridge.AnalyticsGameSessionInfo, assignedCallout: Assets.Scripts.Unity.UI_New.Callouts.CalloutData, assignedLowCallout: Assets.Scripts.Unity.UI_New.Callouts.CalloutData, callouts: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Callouts.CalloutData>, calloutsLow: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Callouts.CalloutData>, **kwargs):
        super().__init__(self, **kwargs)
		self.playerData = playerData
		self.assignedCallout = assignedCallout
		self.assignedLowCallout = assignedLowCallout
		self.callouts = callouts
		self.calloutsLow = calloutsLow


class CalloutUiData:

    offsets = {'sprite': 24, 'headerLoc': 32, 'subTextLoc': 40, 'calloutId': 48}    
    def __init__(self, sprite: UnityEngine.Sprite, headerLoc: System.String, subTextLoc: System.String, calloutId: Assets.Scripts.Unity.UI_New.Callouts.PlayerCalloutTypes, **kwargs):
        super().__init__(self, **kwargs)
		self.sprite = sprite
		self.headerLoc = headerLoc
		self.subTextLoc = subTextLoc
		self.calloutId = calloutId


class PlayerCalloutTypes:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class PlayerData:

    offsets = {'playerInfo': 16, 'value': 24}    
    def __init__(self, playerInfo: Assets.Scripts.Unity.Bridge.AnalyticsGameSessionInfo, value: System.Double, **kwargs):
        super().__init__(self, **kwargs)
		self.playerInfo = playerInfo
		self.value = value


class CalloutPairs:

    offsets = {'weightCalloutLow': 64, 'lowMinValue': 72, 'calloutLow': 80}    
    def __init__(self, weightCalloutLow: System.Single, lowMinValue: System.Double, calloutLow: Assets.Scripts.Unity.UI_New.Callouts.PlayerCalloutTypes, **kwargs):
        super().__init__(self, **kwargs)
		self.weightCalloutLow = weightCalloutLow
		self.lowMinValue = lowMinValue
		self.calloutLow = calloutLow


class CalloutType:

    offsets = {'weight': 16, 'exclusionRange': 24, 'minThresholdValue': 32, 'difficultiesAwardedIn': 40, 'playersSortedData': 48, 'callout': 56}    
    def __init__(self, weight: System.Single, exclusionRange: System.Double, minThresholdValue: System.Double, difficultiesAwardedIn: System.Collections.Generic.List<System.String>, playersSortedData: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Callouts.PlayerData>, callout: Assets.Scripts.Unity.UI_New.Callouts.PlayerCalloutTypes, **kwargs):
        super().__init__(self, **kwargs)
		self.weight = weight
		self.exclusionRange = exclusionRange
		self.minThresholdValue = minThresholdValue
		self.difficultiesAwardedIn = difficultiesAwardedIn
		self.playersSortedData = playersSortedData
		self.callout = callout


class CalloutEcoEarned:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CalloutMoabsKilled:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CalloutPopCount:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CalloutTowersPlaced:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CalloutActivator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CalloutBfbBrawler:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CalloutDdtDestroyer:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CalloutFiredUp:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CalloutFumigator:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CalloutHeadDetective:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CalloutInstaWinner:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CalloutMetalMuncher:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CalloutMostGenerous:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CalloutPoweredUp:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CalloutZomgZapper:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AdvSearchTimeSpan:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class AdvancedSearchPanelValues:

    offsets = {'last24HoursTog': 16, 'lastWeekTog': 17, 'lastMonthTog': 18, 'allTimeTog': 19, 'includeOldVersionsTog': 20, 'hideCompletedTog': 21, 'minRoundsSlider': 24, 'maxRoundsSlider': 28}    
    def __init__(self, last24HoursTog: System.Boolean, lastWeekTog: System.Boolean, lastMonthTog: System.Boolean, allTimeTog: System.Boolean, includeOldVersionsTog: System.Boolean, hideCompletedTog: System.Boolean, minRoundsSlider: System.Single, maxRoundsSlider: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.last24HoursTog = last24HoursTog
		self.lastWeekTog = lastWeekTog
		self.lastMonthTog = lastMonthTog
		self.allTimeTog = allTimeTog
		self.includeOldVersionsTog = includeOldVersionsTog
		self.hideCompletedTog = hideCompletedTog
		self.minRoundsSlider = minRoundsSlider
		self.maxRoundsSlider = maxRoundsSlider


class ChallengeBrowserDescriptionValidator:

    offsets = {'inputField': 24}    
    def __init__(self, inputField: NK_TextMeshProInputField, **kwargs):
        super().__init__(self, **kwargs)
		self.inputField = inputField


class ChallengeBrowserDisplayInfo:

    offsets = {'query': 16, '<Options>k__BackingField': 24, '<Hint>k__BackingField': 32, '<Page>k__BackingField': 40, '<TotalPages>k__BackingField': 44, '<MaxPagesToDisplay>k__BackingField': 48, '<SelectionType>k__BackingField': 52, '<WinRateDisplayType>k__BackingField': 56, '<ChallengeIds>k__BackingField': 64, '<AdvancedSearchPanelValues>k__BackingField': 72, '<PanelsPerPage>k__BackingField': 80}    
    def __init__(self, query: Assets.Scripts.Unity.UI_New.ChallengeEditor.ChallengeBrowserQuery, <Options>k__BackingField: Assets.Scripts.Unity.Utils.ElasticSearch.ElasticQueryOptions, <Hint>k__BackingField: System.String, <Page>k__BackingField: System.Int32, <TotalPages>k__BackingField: System.Int32, <MaxPagesToDisplay>k__BackingField: System.Int32, <SelectionType>k__BackingField: Assets.Scripts.Unity.UI_New.ChallengeEditor.SelectionType, <WinRateDisplayType>k__BackingField: Assets.Scripts.Unity.UI_New.ChallengeEditor.WinRateDisplayType, <ChallengeIds>k__BackingField: System.Collections.Generic.IEnumerable<System.String>, <AdvancedSearchPanelValues>k__BackingField: Assets.Scripts.Unity.UI_New.ChallengeEditor.AdvancedSearchPanelValues, <PanelsPerPage>k__BackingField: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.query = query
		self.<Options>k__BackingField = <Options>k__BackingField
		self.<Hint>k__BackingField = <Hint>k__BackingField
		self.<Page>k__BackingField = <Page>k__BackingField
		self.<TotalPages>k__BackingField = <TotalPages>k__BackingField
		self.<MaxPagesToDisplay>k__BackingField = <MaxPagesToDisplay>k__BackingField
		self.<SelectionType>k__BackingField = <SelectionType>k__BackingField
		self.<WinRateDisplayType>k__BackingField = <WinRateDisplayType>k__BackingField
		self.<ChallengeIds>k__BackingField = <ChallengeIds>k__BackingField
		self.<AdvancedSearchPanelValues>k__BackingField = <AdvancedSearchPanelValues>k__BackingField
		self.<PanelsPerPage>k__BackingField = <PanelsPerPage>k__BackingField


class ChallengeBrowserLoader:

    offsets = {'challengeBrowser': 16, 'loadingToken': 24, 'searchToken': 32, 'loadingTask': 40, 'searchTask': 48, '<DisplayInfo>k__BackingField': 56, 'lastLoadTime': 64, 'lastSearchTime': 72, '_mapIds': 80}    
    def __init__(self, challengeBrowser: Assets.Scripts.Unity.UI_New.ChallengeEditor.ContentBrowser, loadingToken: System.Threading.CancellationTokenSource, searchToken: System.Threading.CancellationTokenSource, loadingTask: System.Threading.Tasks.Task, searchTask: System.Threading.Tasks.Task, <DisplayInfo>k__BackingField: Assets.Scripts.Unity.UI_New.ChallengeEditor.ChallengeBrowserDisplayInfo, lastLoadTime: System.DateTime, lastSearchTime: System.DateTime, _mapIds: System.Collections.Generic.IEnumerable<System.String>, **kwargs):
        super().__init__(self, **kwargs)
		self.challengeBrowser = challengeBrowser
		self.loadingToken = loadingToken
		self.searchToken = searchToken
		self.loadingTask = loadingTask
		self.searchTask = searchTask
		self.<DisplayInfo>k__BackingField = <DisplayInfo>k__BackingField
		self.lastLoadTime = lastLoadTime
		self.lastSearchTime = lastSearchTime
		self._mapIds = _mapIds


class ChallengeBrowserPanelPlayButton:

    offsets = {'playBtn': 24, 'replayBtn': 32, 'continueBtn': 40, 'loadingImg': 48, 'OnClick': 56}    
    def __init__(self, playBtn: UnityEngine.UI.Button, replayBtn: UnityEngine.UI.Button, continueBtn: UnityEngine.UI.Button, loadingImg: UnityEngine.UI.Image, OnClick: UnityEngine.Events.UnityAction, **kwargs):
        super().__init__(self, **kwargs)
		self.playBtn = playBtn
		self.replayBtn = replayBtn
		self.continueBtn = continueBtn
		self.loadingImg = loadingImg
		self.OnClick = OnClick


class ChallengeBrowserQuery:

    offsets = {'<ContentType>k__BackingField': 24}    
    def __init__(self, <ContentType>k__BackingField: Assets.Scripts.Unity.UI_New.ChallengeEditor.ContentType, **kwargs):
        super().__init__(self, **kwargs)
		self.<ContentType>k__BackingField = <ContentType>k__BackingField


class ChallengeBrowserSearchPanel:

    offsets = {'clickOutsidePanelCloserBtn': 24, 'includeOldVersionsTog': 32, 'last24HoursTog': 40, 'lastWeekTog': 48, 'lastMonthTog': 56, 'allTimeTog': 64, 'hideCompletedTog': 72, 'minRoundsTitle': 80, 'minRoundsSlider': 88, 'minRoundsLeftBtn': 96, 'minRoundsRightBtn': 104, 'maxRoundsTitle': 112, 'maxRoundsSlider': 120, 'maxRoundsLeftBtn': 128, 'maxRoundsRightBtn': 136, 'OnApplySearchOptions': 144, 'requiresRefresh': 152, 'isInitialized': 153}    
    def __init__(self, clickOutsidePanelCloserBtn: UnityEngine.UI.Button, includeOldVersionsTog: UnityEngine.UI.Toggle, last24HoursTog: UnityEngine.UI.Toggle, lastWeekTog: UnityEngine.UI.Toggle, lastMonthTog: UnityEngine.UI.Toggle, allTimeTog: UnityEngine.UI.Toggle, hideCompletedTog: UnityEngine.UI.Toggle, minRoundsTitle: NK_TextMeshProUGUI, minRoundsSlider: UnityEngine.UI.Slider, minRoundsLeftBtn: UnityEngine.UI.Button, minRoundsRightBtn: UnityEngine.UI.Button, maxRoundsTitle: NK_TextMeshProUGUI, maxRoundsSlider: UnityEngine.UI.Slider, maxRoundsLeftBtn: UnityEngine.UI.Button, maxRoundsRightBtn: UnityEngine.UI.Button, OnApplySearchOptions: System.Action, requiresRefresh: System.Boolean, isInitialized: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.clickOutsidePanelCloserBtn = clickOutsidePanelCloserBtn
		self.includeOldVersionsTog = includeOldVersionsTog
		self.last24HoursTog = last24HoursTog
		self.lastWeekTog = lastWeekTog
		self.lastMonthTog = lastMonthTog
		self.allTimeTog = allTimeTog
		self.hideCompletedTog = hideCompletedTog
		self.minRoundsTitle = minRoundsTitle
		self.minRoundsSlider = minRoundsSlider
		self.minRoundsLeftBtn = minRoundsLeftBtn
		self.minRoundsRightBtn = minRoundsRightBtn
		self.maxRoundsTitle = maxRoundsTitle
		self.maxRoundsSlider = maxRoundsSlider
		self.maxRoundsLeftBtn = maxRoundsLeftBtn
		self.maxRoundsRightBtn = maxRoundsRightBtn
		self.OnApplySearchOptions = OnApplySearchOptions
		self.requiresRefresh = requiresRefresh
		self.isInitialized = isInitialized


class ChallengeBrowserTitleValidator:

    offsets = {'inputField': 24}    
    def __init__(self, inputField: NK_TextMeshProInputField, **kwargs):
        super().__init__(self, **kwargs)
		self.inputField = inputField


class ChallengeBrowserTrendingQuery:

    offsets = {'trending': 32}    
    def __init__(self, trending: Assets.Scripts.Unity.UI_New.ChallengeEditor.ChallengeBrowserTrendingQuery.Trending, **kwargs):
        super().__init__(self, **kwargs)
		self.trending = trending


class ChallengeEditor:

    offsets = {'mapBtn': 56, 'mapImage': 64, 'grayscaleMaterial': 72, 'mapName': 80, 'mapSelectObject': 88, 'mapSelectScrollRect': 96, 'mapDisplayPrefab': 104, 'mapDisplayParent': 112, 'mapDisplayBeginner': 120, 'mapDisplayInter': 128, 'mapDisplayAdvanced': 136, 'mapDisplayExpert': 144, 'mapBGBackBtn': 152, 'mapDisplayDebugShowHidden': 160, 'mapScrollSpeedAdjuster': 168, 'mapSelectInit': 172, 'chalName': 176, 'difficulty': 184, 'mode': 192, 'cash': 200, 'coopAreaLeft': 208, 'coopAreaRight': 216, 'coopArea2P': 224, 'coopArea4P': 232, 'coopAreas2P': 240, 'coopAreas4P': 248, 'towerBtn': 264, 'towerRestrictionBtn': 272, 'towerRestrictionBackBtn': 280, 'towerRestrictionMenu': 288, 'towerDisplayPrefab': 296, 'selectedHeroDisplayPrefab': 304, 'towerContainer': 312, 'maxTowerTxt': 320, 'maxTowersObject': 328, 'towerSelectObject': 336, 'towerSelectInit': 344, 'maxTowers': 352, 'excludedTowers': 360, 'includedTowers': 368, 'excludedTowerSlots': 376, 'includedTowerSlots': 384, 'towerSelectBGBackBtn': 392, 'bloonSpeed': 400, 'bloonSpeedTxt': 408, 'bloonSpeedLeftBtn': 416, 'bloonSpeedRightBtn': 424, 'bloonSpeedDefaultBtn': 432, 'bloonSpeedDefNotch': 440, 'moabSpeed': 448, 'moabSpeedTxt': 456, 'moabSpeedLeftBtn': 464, 'moabSpeedRightBtn': 472, 'moabSpeedDefaultBtn': 480, 'moabSpeedDefNotch': 488, 'ceramicHealth': 496, 'ceramicHealthTxt': 504, 'ceramicHealthLeftBtn': 512, 'ceramicHealthRightBtn': 520, 'ceramicHealthDefaultBtn': 528, 'ceramicHealthDefNotch': 536, 'moabHealth': 544, 'moabHealthTxt': 552, 'moabHealthLeftBtn': 560, 'moabHealthRightBtn': 568, 'moabHealthDefaultBtn': 576, 'moabHealthDefNotch': 584, 'regrowSpeed': 592, 'regrowSpeedTxt': 600, 'regrowSpeedLeftBtn': 608, 'regrowSpeedRightBtn': 616, 'regrowSpeedDefaultBtn': 624, 'regrowSpeedDefNotch': 632, 'lives': 640, 'maxLives': 648, 'round': 656, 'endRound': 664, 'mkToggle': 672, 'sellingToggle': 680, 'powersToggle': 688, 'continuesToggle': 696, 'allCamoToggle': 704, 'allRegenToggle': 712, 'disableDoubleCashToggle': 720, 'clearBtn': 728, 'randomBtn': 736, 'undoBtn': 744, 'debugMenu': 752, 'importTxt': 760, 'importBtn': 768, 'exportBtn': 776, 'importTxtRoundSet': 784, 'importBtnRoundSet': 792, 'instaRewardToggle': 800, 'displayExcludedTowersToggle': 808, 'rewards': 816, 'dcm': 824, 'originalDcm': 832, 'modes': 840, 'modesLocs': 848, 'difficulties': 856, 'difficultiesLocs': 864, 'restric': 872, 'rng': 880, 'targetMap': 888, 'beginnerMap': 896, 'interMap': 904, 'advancedMap': 912, 'expertMap': 920, 'scrollMofo': 928, 'allTowerDisplays': 936}    
    def __init__(self, mapBtn: UnityEngine.UI.Button, mapImage: UnityEngine.UI.Image, grayscaleMaterial: UnityEngine.Material, mapName: TMPro.TMP_Text, mapSelectObject: UnityEngine.GameObject, mapSelectScrollRect: UnityEngine.UI.ScrollRect, mapDisplayPrefab: UnityEngine.GameObject, mapDisplayParent: UnityEngine.Transform, mapDisplayBeginner: UnityEngine.UI.Toggle, mapDisplayInter: UnityEngine.UI.Toggle, mapDisplayAdvanced: UnityEngine.UI.Toggle, mapDisplayExpert: UnityEngine.UI.Toggle, mapBGBackBtn: UnityEngine.UI.Button, mapDisplayDebugShowHidden: UnityEngine.UI.Toggle, mapScrollSpeedAdjuster: System.Single, mapSelectInit: System.Boolean, chalName: NK_TextMeshProInputField, difficulty: TMPro.TMP_Dropdown, mode: TMPro.TMP_Dropdown, cash: TMPro.TMP_InputField, coopAreaLeft: UnityEngine.UI.Button, coopAreaRight: UnityEngine.UI.Button, coopArea2P: UnityEngine.GameObject, coopArea4P: UnityEngine.GameObject, coopAreas2P: System.Collections.Generic.List<UnityEngine.GameObject>, coopAreas4P: System.Collections.Generic.List<UnityEngine.GameObject>, towerBtn: UnityEngine.UI.Button, towerRestrictionBtn: UnityEngine.UI.Button, towerRestrictionBackBtn: UnityEngine.UI.Button, towerRestrictionMenu: UnityEngine.GameObject, towerDisplayPrefab: UnityEngine.GameObject, selectedHeroDisplayPrefab: UnityEngine.GameObject, towerContainer: UnityEngine.Transform, maxTowerTxt: TMPro.TMP_Text, maxTowersObject: UnityEngine.GameObject, towerSelectObject: UnityEngine.GameObject, towerSelectInit: System.Boolean, maxTowers: TMPro.TMP_InputField, excludedTowers: UnityEngine.Transform, includedTowers: UnityEngine.Transform, excludedTowerSlots: UnityEngine.Transform, includedTowerSlots: UnityEngine.Transform, towerSelectBGBackBtn: UnityEngine.UI.Button, bloonSpeed: UnityEngine.UI.Slider, bloonSpeedTxt: TMPro.TMP_Text, bloonSpeedLeftBtn: UnityEngine.UI.Button, bloonSpeedRightBtn: UnityEngine.UI.Button, bloonSpeedDefaultBtn: UnityEngine.UI.Button, bloonSpeedDefNotch: UnityEngine.GameObject, moabSpeed: UnityEngine.UI.Slider, moabSpeedTxt: TMPro.TMP_Text, moabSpeedLeftBtn: UnityEngine.UI.Button, moabSpeedRightBtn: UnityEngine.UI.Button, moabSpeedDefaultBtn: UnityEngine.UI.Button, moabSpeedDefNotch: UnityEngine.GameObject, ceramicHealth: UnityEngine.UI.Slider, ceramicHealthTxt: TMPro.TMP_Text, ceramicHealthLeftBtn: UnityEngine.UI.Button, ceramicHealthRightBtn: UnityEngine.UI.Button, ceramicHealthDefaultBtn: UnityEngine.UI.Button, ceramicHealthDefNotch: UnityEngine.GameObject, moabHealth: UnityEngine.UI.Slider, moabHealthTxt: TMPro.TMP_Text, moabHealthLeftBtn: UnityEngine.UI.Button, moabHealthRightBtn: UnityEngine.UI.Button, moabHealthDefaultBtn: UnityEngine.UI.Button, moabHealthDefNotch: UnityEngine.GameObject, regrowSpeed: UnityEngine.UI.Slider, regrowSpeedTxt: TMPro.TMP_Text, regrowSpeedLeftBtn: UnityEngine.UI.Button, regrowSpeedRightBtn: UnityEngine.UI.Button, regrowSpeedDefaultBtn: UnityEngine.UI.Button, regrowSpeedDefNotch: UnityEngine.GameObject, lives: TMPro.TMP_InputField, maxLives: TMPro.TMP_InputField, round: TMPro.TMP_InputField, endRound: TMPro.TMP_InputField, mkToggle: UnityEngine.UI.Toggle, sellingToggle: UnityEngine.UI.Toggle, powersToggle: UnityEngine.UI.Toggle, continuesToggle: UnityEngine.UI.Toggle, allCamoToggle: UnityEngine.UI.Toggle, allRegenToggle: UnityEngine.UI.Toggle, disableDoubleCashToggle: UnityEngine.UI.Toggle, clearBtn: UnityEngine.UI.Button, randomBtn: UnityEngine.UI.Button, undoBtn: UnityEngine.UI.Button, debugMenu: UnityEngine.GameObject, importTxt: TMPro.TMP_InputField, importBtn: UnityEngine.UI.Button, exportBtn: UnityEngine.UI.Button, importTxtRoundSet: TMPro.TMP_InputField, importBtnRoundSet: UnityEngine.UI.Button, instaRewardToggle: UnityEngine.UI.Toggle, displayExcludedTowersToggle: UnityEngine.UI.Toggle, rewards: UnityEngine.UI.InputField, dcm: Assets.Scripts.Models.ServerEvents.DailyChallengeModel, originalDcm: Assets.Scripts.Models.ServerEvents.DailyChallengeModel, modes: System.Collections.Generic.List<System.String>, modesLocs: System.Collections.Generic.List<System.String>, difficulties: System.Collections.Generic.List<System.String>, difficultiesLocs: System.Collections.Generic.List<System.String>, restric: Assets.Scripts.Models.ServerEvents.Restrictions, rng: Assets.Scripts.Models.ServerEvents.RandomGenerator, targetMap: UnityEngine.RectTransform, beginnerMap: UnityEngine.RectTransform, interMap: UnityEngine.RectTransform, advancedMap: UnityEngine.RectTransform, expertMap: UnityEngine.RectTransform, scrollMofo: System.Boolean, allTowerDisplays: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.DailyChallenge.DCModTowerDisplay>, **kwargs):
        super().__init__(self, **kwargs)
		self.mapBtn = mapBtn
		self.mapImage = mapImage
		self.grayscaleMaterial = grayscaleMaterial
		self.mapName = mapName
		self.mapSelectObject = mapSelectObject
		self.mapSelectScrollRect = mapSelectScrollRect
		self.mapDisplayPrefab = mapDisplayPrefab
		self.mapDisplayParent = mapDisplayParent
		self.mapDisplayBeginner = mapDisplayBeginner
		self.mapDisplayInter = mapDisplayInter
		self.mapDisplayAdvanced = mapDisplayAdvanced
		self.mapDisplayExpert = mapDisplayExpert
		self.mapBGBackBtn = mapBGBackBtn
		self.mapDisplayDebugShowHidden = mapDisplayDebugShowHidden
		self.mapScrollSpeedAdjuster = mapScrollSpeedAdjuster
		self.mapSelectInit = mapSelectInit
		self.chalName = chalName
		self.difficulty = difficulty
		self.mode = mode
		self.cash = cash
		self.coopAreaLeft = coopAreaLeft
		self.coopAreaRight = coopAreaRight
		self.coopArea2P = coopArea2P
		self.coopArea4P = coopArea4P
		self.coopAreas2P = coopAreas2P
		self.coopAreas4P = coopAreas4P
		self.towerBtn = towerBtn
		self.towerRestrictionBtn = towerRestrictionBtn
		self.towerRestrictionBackBtn = towerRestrictionBackBtn
		self.towerRestrictionMenu = towerRestrictionMenu
		self.towerDisplayPrefab = towerDisplayPrefab
		self.selectedHeroDisplayPrefab = selectedHeroDisplayPrefab
		self.towerContainer = towerContainer
		self.maxTowerTxt = maxTowerTxt
		self.maxTowersObject = maxTowersObject
		self.towerSelectObject = towerSelectObject
		self.towerSelectInit = towerSelectInit
		self.maxTowers = maxTowers
		self.excludedTowers = excludedTowers
		self.includedTowers = includedTowers
		self.excludedTowerSlots = excludedTowerSlots
		self.includedTowerSlots = includedTowerSlots
		self.towerSelectBGBackBtn = towerSelectBGBackBtn
		self.bloonSpeed = bloonSpeed
		self.bloonSpeedTxt = bloonSpeedTxt
		self.bloonSpeedLeftBtn = bloonSpeedLeftBtn
		self.bloonSpeedRightBtn = bloonSpeedRightBtn
		self.bloonSpeedDefaultBtn = bloonSpeedDefaultBtn
		self.bloonSpeedDefNotch = bloonSpeedDefNotch
		self.moabSpeed = moabSpeed
		self.moabSpeedTxt = moabSpeedTxt
		self.moabSpeedLeftBtn = moabSpeedLeftBtn
		self.moabSpeedRightBtn = moabSpeedRightBtn
		self.moabSpeedDefaultBtn = moabSpeedDefaultBtn
		self.moabSpeedDefNotch = moabSpeedDefNotch
		self.ceramicHealth = ceramicHealth
		self.ceramicHealthTxt = ceramicHealthTxt
		self.ceramicHealthLeftBtn = ceramicHealthLeftBtn
		self.ceramicHealthRightBtn = ceramicHealthRightBtn
		self.ceramicHealthDefaultBtn = ceramicHealthDefaultBtn
		self.ceramicHealthDefNotch = ceramicHealthDefNotch
		self.moabHealth = moabHealth
		self.moabHealthTxt = moabHealthTxt
		self.moabHealthLeftBtn = moabHealthLeftBtn
		self.moabHealthRightBtn = moabHealthRightBtn
		self.moabHealthDefaultBtn = moabHealthDefaultBtn
		self.moabHealthDefNotch = moabHealthDefNotch
		self.regrowSpeed = regrowSpeed
		self.regrowSpeedTxt = regrowSpeedTxt
		self.regrowSpeedLeftBtn = regrowSpeedLeftBtn
		self.regrowSpeedRightBtn = regrowSpeedRightBtn
		self.regrowSpeedDefaultBtn = regrowSpeedDefaultBtn
		self.regrowSpeedDefNotch = regrowSpeedDefNotch
		self.lives = lives
		self.maxLives = maxLives
		self.round = round
		self.endRound = endRound
		self.mkToggle = mkToggle
		self.sellingToggle = sellingToggle
		self.powersToggle = powersToggle
		self.continuesToggle = continuesToggle
		self.allCamoToggle = allCamoToggle
		self.allRegenToggle = allRegenToggle
		self.disableDoubleCashToggle = disableDoubleCashToggle
		self.clearBtn = clearBtn
		self.randomBtn = randomBtn
		self.undoBtn = undoBtn
		self.debugMenu = debugMenu
		self.importTxt = importTxt
		self.importBtn = importBtn
		self.exportBtn = exportBtn
		self.importTxtRoundSet = importTxtRoundSet
		self.importBtnRoundSet = importBtnRoundSet
		self.instaRewardToggle = instaRewardToggle
		self.displayExcludedTowersToggle = displayExcludedTowersToggle
		self.rewards = rewards
		self.dcm = dcm
		self.originalDcm = originalDcm
		self.modes = modes
		self.modesLocs = modesLocs
		self.difficulties = difficulties
		self.difficultiesLocs = difficultiesLocs
		self.restric = restric
		self.rng = rng
		self.targetMap = targetMap
		self.beginnerMap = beginnerMap
		self.interMap = interMap
		self.advancedMap = advancedMap
		self.expertMap = expertMap
		self.scrollMofo = scrollMofo
		self.allTowerDisplays = allTowerDisplays


class ChallengeEditorPlay:

    offsets = {'screenTitleTxt': 56, 'mapName': 64, 'difficulty': 72, 'continueBtn': 80, 'playBtn': 88, 'mapImage': 96, 'difficultyImage': 104, 'towerDisplayPrefab': 120, 'selectedHeroDisplayPrefab': 128, 'towerContainer': 136, 'towerScrollRect': 144, 'lockedMessagePanel': 152, 'monkeysAvaliableTxt': 160, 'monkeysExcludedTxtColor': 168, 'maxTowerObject': 184, 'maxTowerTxt': 192, 'modifierContent': 200, 'modifierPrefab': 208, 'modTheme': 216, 'modifierInfo': 224, 'createModeObj': 232, 'modChalBtn': 240, 'playModeObj': 248, 'oldChallengeBg': 256, 'authorInfo': 264, 'versionTxt': 272, 'likeTgl': 280, 'likeTglEnabledBg': 288, 'likeBtnAnimator': 296, 'ratingCountTxt': 304, 'winPercTxt': 312, 'winPercTgl': 320, 'winPercHoverableZone': 328, 'favouriteTgl': 336, 'playCodeTxt': 344, 'playSocialShareBtn': 352, 'playCopyCodeTick': 360, 'shareBtn': 368, 'shareLockedMessagePanel': 376, 'DEBUGIgnoreCompletionCheck': 384, 'shareLocked': 392, 'shareTimerPanelObj': 400, 'shareTimerTxt': 408, 'shareLockedPopupDescTxt': 416, 'sharedObj': 424, 'sharedChalCode': 432, 'createSocialShareBtn': 440, 'createCopyCodeTick': 448, 'sharingLoadingSpinner': 456, 'playerChallenge': 464, 'dcm': 472, 'locked': 480, 'savedData': 488, 'creationMode': 496, 'modDownStartTime': 500, 'modPopupDelay': 504, 'setScrollPosition': 508, 'playDownStartTime': 512, 'playPopupDelay': 516, 'challengeStatsPanel': 520, 'challengeStatsBtn': 528, 'isRaceToggle': 536, 'inGameData': 544, 'isClosed': 688, 'isLoaded': 689, 'sharingInProgress': 690}    
    def __init__(self, screenTitleTxt: TMPro.TMP_Text, mapName: TMPro.TMP_Text, difficulty: TMPro.TMP_Text, continueBtn: UnityEngine.UI.Button, playBtn: Assets.Scripts.Unity.UI_New.ButtonExtended, mapImage: UnityEngine.UI.Image, difficultyImage: UnityEngine.UI.Image, towerDisplayPrefab: UnityEngine.GameObject, selectedHeroDisplayPrefab: UnityEngine.GameObject, towerContainer: UnityEngine.Transform, towerScrollRect: UnityEngine.UI.ScrollRect, lockedMessagePanel: UnityEngine.GameObject, monkeysAvaliableTxt: TMPro.TMP_Text, monkeysExcludedTxtColor: UnityEngine.Color, maxTowerObject: UnityEngine.GameObject, maxTowerTxt: TMPro.TMP_Text, modifierContent: UnityEngine.Transform, modifierPrefab: UnityEngine.GameObject, modTheme: Assets.Scripts.Unity.UI_New.Store.ModIconTheme, modifierInfo: UnityEngine.GameObject, createModeObj: UnityEngine.GameObject, modChalBtn: UnityEngine.UI.Button, playModeObj: UnityEngine.GameObject, oldChallengeBg: UnityEngine.GameObject, authorInfo: Assets.Scripts.Unity.UI_New.ChallengeEditor.ChallengeStatPlayerInfo, versionTxt: TMPro.TMP_Text, likeTgl: UnityEngine.UI.Toggle, likeTglEnabledBg: UnityEngine.GameObject, likeBtnAnimator: CustomScaleAnimator, ratingCountTxt: TMPro.TMP_Text, winPercTxt: TMPro.TMP_Text, winPercTgl: UnityEngine.UI.Toggle, winPercHoverableZone: Assets.Scripts.Unity.UI_New.HoverableInfoPopup, favouriteTgl: UnityEngine.UI.Toggle, playCodeTxt: TMPro.TMP_Text, playSocialShareBtn: UnityEngine.UI.Button, playCopyCodeTick: UnityEngine.GameObject, shareBtn: Assets.Scripts.Unity.UI_New.ButtonExtended, shareLockedMessagePanel: UnityEngine.GameObject, DEBUGIgnoreCompletionCheck: UnityEngine.UI.Toggle, shareLocked: System.Boolean, shareTimerPanelObj: UnityEngine.GameObject, shareTimerTxt: TMPro.TMP_Text, shareLockedPopupDescTxt: TMPro.TMP_Text, sharedObj: UnityEngine.GameObject, sharedChalCode: TMPro.TMP_Text, createSocialShareBtn: UnityEngine.UI.Button, createCopyCodeTick: UnityEngine.GameObject, sharingLoadingSpinner: UnityEngine.GameObject, playerChallenge: Assets.Scripts.Unity.UI_New.ChallengeEditor.PlayerChallenge, dcm: Assets.Scripts.Models.ServerEvents.DailyChallengeModel, locked: System.Boolean, savedData: Assets.Scripts.Models.Profile.MapSaveDataModel, creationMode: System.Boolean, modDownStartTime: System.Single, modPopupDelay: System.Single, setScrollPosition: System.Int32, playDownStartTime: System.Single, playPopupDelay: System.Single, challengeStatsPanel: Assets.Scripts.Unity.UI_New.ChallengeEditor.ChallengeStatsPanel, challengeStatsBtn: UnityEngine.UI.Button, isRaceToggle: UnityEngine.UI.Toggle, inGameData: Assets.Scripts.Utils.Helpers.InGameData, isClosed: System.Boolean, isLoaded: System.Boolean, sharingInProgress: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.screenTitleTxt = screenTitleTxt
		self.mapName = mapName
		self.difficulty = difficulty
		self.continueBtn = continueBtn
		self.playBtn = playBtn
		self.mapImage = mapImage
		self.difficultyImage = difficultyImage
		self.towerDisplayPrefab = towerDisplayPrefab
		self.selectedHeroDisplayPrefab = selectedHeroDisplayPrefab
		self.towerContainer = towerContainer
		self.towerScrollRect = towerScrollRect
		self.lockedMessagePanel = lockedMessagePanel
		self.monkeysAvaliableTxt = monkeysAvaliableTxt
		self.monkeysExcludedTxtColor = monkeysExcludedTxtColor
		self.maxTowerObject = maxTowerObject
		self.maxTowerTxt = maxTowerTxt
		self.modifierContent = modifierContent
		self.modifierPrefab = modifierPrefab
		self.modTheme = modTheme
		self.modifierInfo = modifierInfo
		self.createModeObj = createModeObj
		self.modChalBtn = modChalBtn
		self.playModeObj = playModeObj
		self.oldChallengeBg = oldChallengeBg
		self.authorInfo = authorInfo
		self.versionTxt = versionTxt
		self.likeTgl = likeTgl
		self.likeTglEnabledBg = likeTglEnabledBg
		self.likeBtnAnimator = likeBtnAnimator
		self.ratingCountTxt = ratingCountTxt
		self.winPercTxt = winPercTxt
		self.winPercTgl = winPercTgl
		self.winPercHoverableZone = winPercHoverableZone
		self.favouriteTgl = favouriteTgl
		self.playCodeTxt = playCodeTxt
		self.playSocialShareBtn = playSocialShareBtn
		self.playCopyCodeTick = playCopyCodeTick
		self.shareBtn = shareBtn
		self.shareLockedMessagePanel = shareLockedMessagePanel
		self.DEBUGIgnoreCompletionCheck = DEBUGIgnoreCompletionCheck
		self.shareLocked = shareLocked
		self.shareTimerPanelObj = shareTimerPanelObj
		self.shareTimerTxt = shareTimerTxt
		self.shareLockedPopupDescTxt = shareLockedPopupDescTxt
		self.sharedObj = sharedObj
		self.sharedChalCode = sharedChalCode
		self.createSocialShareBtn = createSocialShareBtn
		self.createCopyCodeTick = createCopyCodeTick
		self.sharingLoadingSpinner = sharingLoadingSpinner
		self.playerChallenge = playerChallenge
		self.dcm = dcm
		self.locked = locked
		self.savedData = savedData
		self.creationMode = creationMode
		self.modDownStartTime = modDownStartTime
		self.modPopupDelay = modPopupDelay
		self.setScrollPosition = setScrollPosition
		self.playDownStartTime = playDownStartTime
		self.playPopupDelay = playPopupDelay
		self.challengeStatsPanel = challengeStatsPanel
		self.challengeStatsBtn = challengeStatsBtn
		self.isRaceToggle = isRaceToggle
		self.inGameData = inGameData
		self.isClosed = isClosed
		self.isLoaded = isLoaded
		self.sharingInProgress = sharingInProgress


class ChallengeInfoPanel:

    offsets = {'oldChallengeBg': 24, 'likeTglEnabledBg': 32, 'playCopyCodeTick': 40, 'challengeAuthorInfo': 48, 'challengeStatsPanel': 56, 'likeBtnAnimator': 64, 'winPercHoverableZone': 72, 'versionTxt': 80, 'ratingCountTxt': 88, 'winPercTxt': 96, 'likeTgl': 104, 'winPercTgl': 112, 'favouriteTgl': 120, 'playCodeTxt': 128, 'playSocialShareBtn': 136, 'challengeStatsBtn': 144, 'playerChallenge': 152}    
    def __init__(self, oldChallengeBg: UnityEngine.GameObject, likeTglEnabledBg: UnityEngine.GameObject, playCopyCodeTick: UnityEngine.GameObject, challengeAuthorInfo: Assets.Scripts.Unity.UI_New.ChallengeEditor.ChallengeStatPlayerInfo, challengeStatsPanel: Assets.Scripts.Unity.UI_New.ChallengeEditor.ChallengeStatsPanel, likeBtnAnimator: CustomScaleAnimator, winPercHoverableZone: Assets.Scripts.Unity.UI_New.HoverableInfoPopup, versionTxt: TMPro.TMP_Text, ratingCountTxt: TMPro.TMP_Text, winPercTxt: TMPro.TMP_Text, likeTgl: UnityEngine.UI.Toggle, winPercTgl: UnityEngine.UI.Toggle, favouriteTgl: UnityEngine.UI.Toggle, playCodeTxt: TMPro.TMP_Text, playSocialShareBtn: UnityEngine.UI.Button, challengeStatsBtn: UnityEngine.UI.Button, playerChallenge: Assets.Scripts.Unity.UI_New.ChallengeEditor.PlayerChallenge, **kwargs):
        super().__init__(self, **kwargs)
		self.oldChallengeBg = oldChallengeBg
		self.likeTglEnabledBg = likeTglEnabledBg
		self.playCopyCodeTick = playCopyCodeTick
		self.challengeAuthorInfo = challengeAuthorInfo
		self.challengeStatsPanel = challengeStatsPanel
		self.likeBtnAnimator = likeBtnAnimator
		self.winPercHoverableZone = winPercHoverableZone
		self.versionTxt = versionTxt
		self.ratingCountTxt = ratingCountTxt
		self.winPercTxt = winPercTxt
		self.likeTgl = likeTgl
		self.winPercTgl = winPercTgl
		self.favouriteTgl = favouriteTgl
		self.playCodeTxt = playCodeTxt
		self.playSocialShareBtn = playSocialShareBtn
		self.challengeStatsBtn = challengeStatsBtn
		self.playerChallenge = playerChallenge


class ChallengePanel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ChallengeRequestResult:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class ChallengeRulesScreen:

    offsets = {'maxMonkeysTxt': 56, 'startingCashTxt': 64, 'startingLivesTxt': 72, 'startRoundTxt': 80, 'endRoundTxt': 88, 'towerContainer': 96, 'towerPrefab': 104, 'modifierContent': 112, 'gameRuleContent': 120, 'modifierPrefab': 128, 'modTheme': 136, 'dcm': 144, 'towerDisplayList': 152}    
    def __init__(self, maxMonkeysTxt: NK_TextMeshProUGUI, startingCashTxt: NK_TextMeshProUGUI, startingLivesTxt: NK_TextMeshProUGUI, startRoundTxt: NK_TextMeshProUGUI, endRoundTxt: NK_TextMeshProUGUI, towerContainer: UnityEngine.Transform, towerPrefab: UnityEngine.GameObject, modifierContent: UnityEngine.Transform, gameRuleContent: UnityEngine.Transform, modifierPrefab: UnityEngine.GameObject, modTheme: Assets.Scripts.Unity.UI_New.Store.ModIconTheme, dcm: Assets.Scripts.Models.ServerEvents.DailyChallengeModel, towerDisplayList: System.Collections.Generic.List<UnityEngine.GameObject>, **kwargs):
        super().__init__(self, **kwargs)
		self.maxMonkeysTxt = maxMonkeysTxt
		self.startingCashTxt = startingCashTxt
		self.startingLivesTxt = startingLivesTxt
		self.startRoundTxt = startRoundTxt
		self.endRoundTxt = endRoundTxt
		self.towerContainer = towerContainer
		self.towerPrefab = towerPrefab
		self.modifierContent = modifierContent
		self.gameRuleContent = gameRuleContent
		self.modifierPrefab = modifierPrefab
		self.modTheme = modTheme
		self.dcm = dcm
		self.towerDisplayList = towerDisplayList


class ChallengeSearchResult:

    offsets = {'totalItems': 16, 'playerChallengeInfos': 24}    
    def __init__(self, totalItems: System.Int32, playerChallengeInfos: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.ChallengeEditor.PlayerChallengeInfo>, **kwargs):
        super().__init__(self, **kwargs)
		self.totalItems = totalItems
		self.playerChallengeInfos = playerChallengeInfos


class ChallengeStatPlayerInfo:

    offsets = {'avatarFrame': 24, 'avatarFrameOld': 32, 'playerAvatar': 40, 'playerName': 48, 'playerStatsBtn': 56, 'loadingSpinner': 64, 'verifiedPlayerIcon': 72, 'followingPlayerIcon': 80, 'playerBanner': 88, 'playerBannerImage': 96, 'playerStats': 104}    
    def __init__(self, avatarFrame: UnityEngine.UI.Image, avatarFrameOld: UnityEngine.UI.Image, playerAvatar: UnityEngine.UI.Image, playerName: TMPro.TMP_Text, playerStatsBtn: UnityEngine.UI.Button, loadingSpinner: UnityEngine.GameObject, verifiedPlayerIcon: UnityEngine.UI.Image, followingPlayerIcon: UnityEngine.UI.Image, playerBanner: UnityEngine.GameObject, playerBannerImage: UnityEngine.UI.Image, playerStats: Assets.Scripts.Unity.Player.Btd6PlayerStats, **kwargs):
        super().__init__(self, **kwargs)
		self.avatarFrame = avatarFrame
		self.avatarFrameOld = avatarFrameOld
		self.playerAvatar = playerAvatar
		self.playerName = playerName
		self.playerStatsBtn = playerStatsBtn
		self.loadingSpinner = loadingSpinner
		self.verifiedPlayerIcon = verifiedPlayerIcon
		self.followingPlayerIcon = followingPlayerIcon
		self.playerBanner = playerBanner
		self.playerBannerImage = playerBannerImage
		self.playerStats = playerStats


class ChallengeStatView:

    offsets = {'title': 24, 'value': 32}    
    def __init__(self, title: NK_TextMeshProUGUI, value: NK_TextMeshProUGUI, **kwargs):
        super().__init__(self, **kwargs)
		self.title = title
		self.value = value


class ChallengeStatsPanel:

    offsets = {'closeBtn': 24, 'loadingSpinner': 32, 'plays': 40, 'wins': 48, 'fails': 56, 'uniquePlayers': 64, 'victoriousPlayers': 72, 'firstWinningPlayerInfo': 80, 'latestWinningPlayerInfo': 88, 'playerChallenge': 96, '_isLoading': 104}    
    def __init__(self, closeBtn: UnityEngine.UI.Button, loadingSpinner: UnityEngine.UI.Image, plays: Assets.Scripts.Unity.UI_New.ChallengeEditor.ChallengeStatView, wins: Assets.Scripts.Unity.UI_New.ChallengeEditor.ChallengeStatView, fails: Assets.Scripts.Unity.UI_New.ChallengeEditor.ChallengeStatView, uniquePlayers: Assets.Scripts.Unity.UI_New.ChallengeEditor.ChallengeStatView, victoriousPlayers: Assets.Scripts.Unity.UI_New.ChallengeEditor.ChallengeStatView, firstWinningPlayerInfo: Assets.Scripts.Unity.UI_New.ChallengeEditor.ChallengeStatPlayerInfo, latestWinningPlayerInfo: Assets.Scripts.Unity.UI_New.ChallengeEditor.ChallengeStatPlayerInfo, playerChallenge: Assets.Scripts.Unity.UI_New.ChallengeEditor.PlayerChallenge, _isLoading: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.closeBtn = closeBtn
		self.loadingSpinner = loadingSpinner
		self.plays = plays
		self.wins = wins
		self.fails = fails
		self.uniquePlayers = uniquePlayers
		self.victoriousPlayers = victoriousPlayers
		self.firstWinningPlayerInfo = firstWinningPlayerInfo
		self.latestWinningPlayerInfo = latestWinningPlayerInfo
		self.playerChallenge = playerChallenge
		self._isLoading = _isLoading


class ContentBrowser:

    offsets = {'challengeTog': 56, 'odysseyTog': 64, 'flavorDropdown': 72, 'searchField': 80, 'searchPlaceholder': 88, 'continueBtn': 96, 'createBtn': 104, 'createBtnDisabledObj': 112, 'scrollRect': 120, 'contentParent': 128, 'chalPanelTemplate': 136, 'odysseyPanelTemplate': 144, 'searchingImg': 152, 'foundNothingObj': 160, 'requiresInternetObj': 168, 'screenClickBlocker': 176, 'advancedSearchBtn': 184, 'advancedSearchPanel': 192, 'refreshBtn': 200, 'firstPageBtn': 208, 'previousPageBtn': 216, 'currentPageTxt': 224, 'nextPageBtn': 232, 'lastPageBtn': 240, 'panels': 248, 'continueBtnContentId': 256, 'requiresSave': 264, 'loader': 272, '<IsClosed>k__BackingField': 280, 'hasBeenOpened': 281, 'isInBackground': 282, 'isApplicationPaused': 283, 'previousSelection': 284, 'totalPages': 288, 'previousDisplayInfo': 296, 'searchString': 304, 'requiresRefresh': 312}    
    def __init__(self, challengeTog: UnityEngine.UI.Toggle, odysseyTog: UnityEngine.UI.Toggle, flavorDropdown: TMPro.TMP_Dropdown, searchField: NK_TextMeshProInputField, searchPlaceholder: TMPro.TMP_Text, continueBtn: UnityEngine.UI.Button, createBtn: UnityEngine.UI.Button, createBtnDisabledObj: UnityEngine.GameObject, scrollRect: UnityEngine.UI.ScrollRect, contentParent: UnityEngine.Transform, chalPanelTemplate: Assets.Scripts.Unity.UI_New.ChallengeEditor.ChallengePanel, odysseyPanelTemplate: Assets.Scripts.Unity.UI_New.ChallengeEditor.OdysseyPanel, searchingImg: UnityEngine.UI.Image, foundNothingObj: UnityEngine.GameObject, requiresInternetObj: UnityEngine.GameObject, screenClickBlocker: UnityEngine.GameObject, advancedSearchBtn: UnityEngine.UI.Button, advancedSearchPanel: Assets.Scripts.Unity.UI_New.ChallengeEditor.ChallengeBrowserSearchPanel, refreshBtn: UnityEngine.UI.Button, firstPageBtn: UnityEngine.UI.Button, previousPageBtn: UnityEngine.UI.Button, currentPageTxt: TMPro.TMP_Text, nextPageBtn: UnityEngine.UI.Button, lastPageBtn: UnityEngine.UI.Button, panels: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.ChallengeEditor.ContentBrowserPanel>, continueBtnContentId: System.String, requiresSave: System.Boolean, loader: Assets.Scripts.Unity.UI_New.ChallengeEditor.ChallengeBrowserLoader, <IsClosed>k__BackingField: System.Boolean, hasBeenOpened: System.Boolean, isInBackground: System.Boolean, isApplicationPaused: System.Boolean, previousSelection: Assets.Scripts.Unity.UI_New.ChallengeEditor.SelectionType, totalPages: System.Int32, previousDisplayInfo: Assets.Scripts.Unity.UI_New.ChallengeEditor.ChallengeBrowserDisplayInfo, searchString: System.String, requiresRefresh: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.challengeTog = challengeTog
		self.odysseyTog = odysseyTog
		self.flavorDropdown = flavorDropdown
		self.searchField = searchField
		self.searchPlaceholder = searchPlaceholder
		self.continueBtn = continueBtn
		self.createBtn = createBtn
		self.createBtnDisabledObj = createBtnDisabledObj
		self.scrollRect = scrollRect
		self.contentParent = contentParent
		self.chalPanelTemplate = chalPanelTemplate
		self.odysseyPanelTemplate = odysseyPanelTemplate
		self.searchingImg = searchingImg
		self.foundNothingObj = foundNothingObj
		self.requiresInternetObj = requiresInternetObj
		self.screenClickBlocker = screenClickBlocker
		self.advancedSearchBtn = advancedSearchBtn
		self.advancedSearchPanel = advancedSearchPanel
		self.refreshBtn = refreshBtn
		self.firstPageBtn = firstPageBtn
		self.previousPageBtn = previousPageBtn
		self.currentPageTxt = currentPageTxt
		self.nextPageBtn = nextPageBtn
		self.lastPageBtn = lastPageBtn
		self.panels = panels
		self.continueBtnContentId = continueBtnContentId
		self.requiresSave = requiresSave
		self.loader = loader
		self.<IsClosed>k__BackingField = <IsClosed>k__BackingField
		self.hasBeenOpened = hasBeenOpened
		self.isInBackground = isInBackground
		self.isApplicationPaused = isApplicationPaused
		self.previousSelection = previousSelection
		self.totalPages = totalPages
		self.previousDisplayInfo = previousDisplayInfo
		self.searchString = searchString
		self.requiresRefresh = requiresRefresh


class ContentBrowserPanel:

    offsets = {'currVersionObj': 24, 'oldVersionObj': 32, 'mapImg': 40, 'chalNameTxt': 48, 'avatarImg': 56, 'bannerImg': 64, 'verifiedAccountImg': 72, 'followingImg': 80, 'authorNameTxt': 88, 'likeTgl': 96, 'ratingCountTxt': 104, 'winPercTgl': 112, 'winPercTxt': 120, 'favouriteTgl': 128, 'completedImg': 136, 'playBtn': 144, 'deleteBtn': 152, 'playerChallenge': 160, 'challengeBrowser': 168, 'isDeleted': 176, 'LoadingChallengeEvent': 184, 'SaveOnExit': 192}    
    def __init__(self, currVersionObj: UnityEngine.GameObject, oldVersionObj: UnityEngine.GameObject, mapImg: UnityEngine.UI.Image, chalNameTxt: TMPro.TMP_Text, avatarImg: UnityEngine.UI.Image, bannerImg: UnityEngine.UI.Image, verifiedAccountImg: UnityEngine.UI.Image, followingImg: UnityEngine.UI.Image, authorNameTxt: TMPro.TMP_Text, likeTgl: UnityEngine.UI.Toggle, ratingCountTxt: TMPro.TMP_Text, winPercTgl: UnityEngine.UI.Toggle, winPercTxt: TMPro.TMP_Text, favouriteTgl: UnityEngine.UI.Toggle, completedImg: UnityEngine.UI.Image, playBtn: Assets.Scripts.Unity.UI_New.ChallengeEditor.ChallengeBrowserPanelPlayButton, deleteBtn: UnityEngine.UI.Button, playerChallenge: Assets.Scripts.Unity.UI_New.ChallengeEditor.PlayerChallenge, challengeBrowser: Assets.Scripts.Unity.UI_New.ChallengeEditor.ContentBrowser, isDeleted: System.Boolean, LoadingChallengeEvent: System.Action<System.Boolean>, SaveOnExit: System.Action, **kwargs):
        super().__init__(self, **kwargs)
		self.currVersionObj = currVersionObj
		self.oldVersionObj = oldVersionObj
		self.mapImg = mapImg
		self.chalNameTxt = chalNameTxt
		self.avatarImg = avatarImg
		self.bannerImg = bannerImg
		self.verifiedAccountImg = verifiedAccountImg
		self.followingImg = followingImg
		self.authorNameTxt = authorNameTxt
		self.likeTgl = likeTgl
		self.ratingCountTxt = ratingCountTxt
		self.winPercTgl = winPercTgl
		self.winPercTxt = winPercTxt
		self.favouriteTgl = favouriteTgl
		self.completedImg = completedImg
		self.playBtn = playBtn
		self.deleteBtn = deleteBtn
		self.playerChallenge = playerChallenge
		self.challengeBrowser = challengeBrowser
		self.isDeleted = isDeleted
		self.LoadingChallengeEvent = LoadingChallengeEvent
		self.SaveOnExit = SaveOnExit


class ContentType:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class DirtyStatus:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class ExtraSettingsPanel:

    offsets = {'panel': 24, 'toggle': 32, 'animator': 40}    
    def __init__(self, panel: UnityEngine.GameObject, toggle: UnityEngine.UI.Toggle, animator: UnityEngine.Animator, **kwargs):
        super().__init__(self, **kwargs)
		self.panel = panel
		self.toggle = toggle
		self.animator = animator


class ExtraSettingsScreen:

    offsets = {'doubleCash': 56, 'bigBloons': 64, 'smallBloons': 72, 'bigTowers': 80, 'smallTowers': 88}    
    def __init__(self, doubleCash: Assets.Scripts.Unity.UI_New.ChallengeEditor.ExtraSettingsPanel, bigBloons: Assets.Scripts.Unity.UI_New.ChallengeEditor.ExtraSettingsPanel, smallBloons: Assets.Scripts.Unity.UI_New.ChallengeEditor.ExtraSettingsPanel, bigTowers: Assets.Scripts.Unity.UI_New.ChallengeEditor.ExtraSettingsPanel, smallTowers: Assets.Scripts.Unity.UI_New.ChallengeEditor.ExtraSettingsPanel, **kwargs):
        super().__init__(self, **kwargs)
		self.doubleCash = doubleCash
		self.bigBloons = bigBloons
		self.smallBloons = smallBloons
		self.bigTowers = bigTowers
		self.smallTowers = smallTowers


class IContentBrowserData:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class OdysseyPanel:

    offsets = {'hardImg': 200, 'mediumImg': 208, 'easyImg': 216, 'extremeModeObj': 224}    
    def __init__(self, hardImg: UnityEngine.UI.Image, mediumImg: UnityEngine.UI.Image, easyImg: UnityEngine.UI.Image, extremeModeObj: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.hardImg = hardImg
		self.mediumImg = mediumImg
		self.easyImg = easyImg
		self.extremeModeObj = extremeModeObj


class PlayButtonState:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class PlayerChallenge:

    offsets = {'info': 16, 'winRateDisplayType': 24, '<ChallengeData>k__BackingField': 32, '_completionRate': 40, '_winRate': 48}    
    def __init__(self, info: Assets.Scripts.Unity.UI_New.ChallengeEditor.PlayerChallengeInfo, winRateDisplayType: Assets.Scripts.Unity.UI_New.ChallengeEditor.WinRateDisplayType, <ChallengeData>k__BackingField: Assets.Scripts.Unity.UI_New.ChallengeEditor.IContentBrowserData, _completionRate: System.String, _winRate: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.info = info
		self.winRateDisplayType = winRateDisplayType
		self.<ChallengeData>k__BackingField = <ChallengeData>k__BackingField
		self._completionRate = _completionRate
		self._winRate = _winRate


class PlayerChallengeInfo:

    offsets = {'id': 16, 'owner': 24, 'challengeName': 32, 'map': 40, 'gameVersionNumber': 48, 'gameVersion': 56, 'latestVersionBeaten': 64, 'stats': 72, 'pageFile': 80, 'isUnlosable': 81, 'isUnwinable': 82, 'isDeleted': 83, 'properties': 88, 'playerStats': 96, 'isDownloadingPlayerStats': 104, 'contentType': 108, 'odysseyDifficulty': 112}    
    def __init__(self, id: System.String, owner: System.String, challengeName: System.String, map: System.String, gameVersionNumber: System.Int32, gameVersion: System.String, latestVersionBeaten: System.Int32, stats: Assets.Scripts.Unity.UI_New.ChallengeEditor.PlayerChallengeStats, pageFile: System.Boolean, isUnlosable: System.Boolean, isUnwinable: System.Boolean, isDeleted: System.Boolean, properties: Assets.Scripts.Unity.UI_New.ChallengeEditor.PlayerChallengeProperties, playerStats: Assets.Scripts.Unity.Player.Btd6PlayerStats, isDownloadingPlayerStats: System.Boolean, contentType: Assets.Scripts.Unity.UI_New.ChallengeEditor.ContentType, odysseyDifficulty: Assets.Scripts.Models.ServerEvents.OdysseyDifficulty, **kwargs):
        super().__init__(self, **kwargs)
		self.id = id
		self.owner = owner
		self.challengeName = challengeName
		self.map = map
		self.gameVersionNumber = gameVersionNumber
		self.gameVersion = gameVersion
		self.latestVersionBeaten = latestVersionBeaten
		self.stats = stats
		self.pageFile = pageFile
		self.isUnlosable = isUnlosable
		self.isUnwinable = isUnwinable
		self.isDeleted = isDeleted
		self.properties = properties
		self.playerStats = playerStats
		self.isDownloadingPlayerStats = isDownloadingPlayerStats
		self.contentType = contentType
		self.odysseyDifficulty = odysseyDifficulty


class PlayerChallengeInfoExtensions:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PlayerChallengeManager:
	<ChallengeUpvotes>k__BackingField: System.Collections.Generic.Dictionary<System.String,System.Int32>
    offsets = {'<ChallengeUpvotes>k__BackingField': 0, '<DirtyChallengeIds>k__BackingField': 8, 'latestStatsLoad': 16, 'playerChallengeInfoCache': 24, 'OnContentSaveRemoved': 40}    
    def __init__(self, <ChallengeUpvotes>k__BackingField: System.Collections.Generic.Dictionary<System.String,System.Int32>, <DirtyChallengeIds>k__BackingField: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.ChallengeEditor.DirtyStatus>>, latestStatsLoad: System.DateTime, playerChallengeInfoCache: Assets.Scripts.Unity.UI_New.ChallengeEditor.PlayerChallengeManager.PlayerChallengeInfoCache, OnContentSaveRemoved: System.Action, **kwargs):
        super().__init__(self, **kwargs)
		self.<ChallengeUpvotes>k__BackingField = <ChallengeUpvotes>k__BackingField
		self.<DirtyChallengeIds>k__BackingField = <DirtyChallengeIds>k__BackingField
		self.latestStatsLoad = latestStatsLoad
		self.playerChallengeInfoCache = playerChallengeInfoCache
		self.OnContentSaveRemoved = OnContentSaveRemoved


class PlayerChallengeManagerExtensions:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PlayerChallengeProperties:

    offsets = {'startRound': 16, 'endRound': 20, 'isExtreme': 24}    
    def __init__(self, startRound: System.Int32, endRound: System.Int32, isExtreme: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.startRound = startRound
		self.endRound = endRound
		self.isExtreme = isExtreme


class PlayerChallengeStats:

    offsets = {'plays': 16, 'playsUnique': 20, 'wins': 24, 'winsUnique': 28, 'losses': 32, 'lossesUnique': 36, 'upvotes': 40, 'restarts': 44, 'firstWin': 48, 'latestWin': 56}    
    def __init__(self, plays: System.Int32, playsUnique: System.Int32, wins: System.Int32, winsUnique: System.Int32, losses: System.Int32, lossesUnique: System.Int32, upvotes: System.Int32, restarts: System.Int32, firstWin: System.String, latestWin: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.plays = plays
		self.playsUnique = playsUnique
		self.wins = wins
		self.winsUnique = winsUnique
		self.losses = losses
		self.lossesUnique = lossesUnique
		self.upvotes = upvotes
		self.restarts = restarts
		self.firstWin = firstWin
		self.latestWin = latestWin


class PlayerChallengeUpdater:

    offsets = {'challengeId': 16, 'contentType': 24, 'modifiers': 32}    
    def __init__(self, challengeId: System.String, contentType: Assets.Scripts.Unity.UI_New.ChallengeEditor.ContentType, modifiers: System.Collections.Generic.Dictionary<System.String,System.String>, **kwargs):
        super().__init__(self, **kwargs)
		self.challengeId = challengeId
		self.contentType = contentType
		self.modifiers = modifiers


class PlayerChallengeVariables:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PlayerStatsCache:
	processingIds: System.Collections.Generic.List<System.String>
    offsets = {'processingIds': 0, 'playerStatsStorage': 8}    
    def __init__(self, processingIds: System.Collections.Generic.List<System.String>, playerStatsStorage: NinjaKiwi.Common.StorageManager, **kwargs):
        super().__init__(self, **kwargs)
		self.processingIds = processingIds
		self.playerStatsStorage = playerStatsStorage


class RequestResult:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class SelectionType:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class SelectionTypeExtensions:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TowerContainer:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class WinRateDisplayType:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class CoopConfirmFreeplayPanel:

    offsets = {'loadingPanel': 24, 'txtText': 32, 'imgTick': 40, 'imgCross': 48, 'imgLoadingIcon': 56}    
    def __init__(self, loadingPanel: UnityEngine.GameObject, txtText: TMPro.TextMeshProUGUI, imgTick: UnityEngine.UI.Image, imgCross: UnityEngine.UI.Image, imgLoadingIcon: UnityEngine.UI.Image, **kwargs):
        super().__init__(self, **kwargs)
		self.loadingPanel = loadingPanel
		self.txtText = txtText
		self.imgTick = imgTick
		self.imgCross = imgCross
		self.imgLoadingIcon = imgLoadingIcon


class CoopDeepLinkData:

    offsets = {'code': 16, 'inGameData': 24}    
    def __init__(self, code: System.String, inGameData: Assets.Scripts.Utils.Helpers.InGameData, **kwargs):
        super().__init__(self, **kwargs)
		self.code = code
		self.inGameData = inGameData


class CoopDifficuiltyMedalPanel:

    offsets = {'difficuiltyTxt': 24, 'difficuiltyIcon': 32}    
    def __init__(self, difficuiltyTxt: TMPro.TextMeshProUGUI, difficuiltyIcon: UnityEngine.UI.Image, **kwargs):
        super().__init__(self, **kwargs)
		self.difficuiltyTxt = difficuiltyTxt
		self.difficuiltyIcon = difficuiltyIcon


class CoopDifficultySelectScreen:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CoopGameDetails:

    offsets = {'startTime': 16, 'inGameData': 24, 'gameDetails': 168}    
    def __init__(self, startTime: System.DateTime, inGameData: Assets.Scripts.Utils.Helpers.InGameData, gameDetails: NinjaKiwi.LiNK.Lobbies.GameDetails, **kwargs):
        super().__init__(self, **kwargs)
		self.startTime = startTime
		self.inGameData = inGameData
		self.gameDetails = gameDetails


class CoopInGamePlayerPanel:

    offsets = {'container': 24, 'removeButton': 32, 'giveCashButton': 40, 'cashTxt': 48, 'giveCashTxt': 56, 'notificationIcon': 64, 'playerNumberIcon': 72, 'playerNameTxt': 80, 'disconnectedPanel': 88, 'coopActiveDetails': 96, 'muteEmotesButton': 104, 'muteEnabledState': 112, 'muteDisabledState': 120, 'monkeysRemainingObj': 128, 'monkeysRemainingTxt': 136, 'closeButtonTriggered': 144, 'isDisabled': 145, 'playerId': 148, 'value': 152, 'mutePlayer': 160}    
    def __init__(self, container: UnityEngine.GameObject, removeButton: Assets.Scripts.Unity.UI_New.ButtonExtended, giveCashButton: Assets.Scripts.Unity.UI_New.ButtonExtended, cashTxt: TMPro.TextMeshProUGUI, giveCashTxt: TMPro.TextMeshProUGUI, notificationIcon: UnityEngine.UI.Image, playerNumberIcon: UnityEngine.UI.Image, playerNameTxt: TMPro.TextMeshProUGUI, disconnectedPanel: UnityEngine.GameObject, coopActiveDetails: UnityEngine.GameObject, muteEmotesButton: Assets.Scripts.Unity.UI_New.ButtonExtended, muteEnabledState: UnityEngine.GameObject, muteDisabledState: UnityEngine.GameObject, monkeysRemainingObj: UnityEngine.GameObject, monkeysRemainingTxt: TMPro.TextMeshProUGUI, closeButtonTriggered: System.Boolean, isDisabled: System.Boolean, playerId: System.Int32, value: Assets.Scripts.Utils.KonFuze, mutePlayer: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.container = container
		self.removeButton = removeButton
		self.giveCashButton = giveCashButton
		self.cashTxt = cashTxt
		self.giveCashTxt = giveCashTxt
		self.notificationIcon = notificationIcon
		self.playerNumberIcon = playerNumberIcon
		self.playerNameTxt = playerNameTxt
		self.disconnectedPanel = disconnectedPanel
		self.coopActiveDetails = coopActiveDetails
		self.muteEmotesButton = muteEmotesButton
		self.muteEnabledState = muteEnabledState
		self.muteDisabledState = muteDisabledState
		self.monkeysRemainingObj = monkeysRemainingObj
		self.monkeysRemainingTxt = monkeysRemainingTxt
		self.closeButtonTriggered = closeButtonTriggered
		self.isDisabled = isDisabled
		self.playerId = playerId
		self.value = value
		self.mutePlayer = mutePlayer


class CoopJoinMatchScreen:

    offsets = {'inputField': 200, 'txtGameCode': 208, 'lookingForGame': 216, 'btnOk': 224, 'btnCancel': 232, 'btnLocalLobbyRefresh': 240, 'localNetworkPanel': 248, 'localNetworkContentPanel': 256, 'prefabLocalNetworkDetails': 264, 'CancelEvent': 272, 'ignoreNextEnter': 280, 'timeToNextRefresh': 284, 'closed': 288, 'localLobbies': 296}    
    def __init__(self, inputField: TMPro.TMP_InputField, txtGameCode: TMPro.TextMeshProUGUI, lookingForGame: UnityEngine.Animator, btnOk: UnityEngine.UI.Button, btnCancel: UnityEngine.UI.Button, btnLocalLobbyRefresh: UnityEngine.UI.Button, localNetworkPanel: UnityEngine.GameObject, localNetworkContentPanel: UnityEngine.GameObject, prefabLocalNetworkDetails: UnityEngine.GameObject, CancelEvent: System.Action, ignoreNextEnter: System.Boolean, timeToNextRefresh: System.Single, closed: System.Boolean, localLobbies: System.Collections.Generic.List<UnityEngine.GameObject>, **kwargs):
        super().__init__(self, **kwargs)
		self.inputField = inputField
		self.txtGameCode = txtGameCode
		self.lookingForGame = lookingForGame
		self.btnOk = btnOk
		self.btnCancel = btnCancel
		self.btnLocalLobbyRefresh = btnLocalLobbyRefresh
		self.localNetworkPanel = localNetworkPanel
		self.localNetworkContentPanel = localNetworkContentPanel
		self.prefabLocalNetworkDetails = prefabLocalNetworkDetails
		self.CancelEvent = CancelEvent
		self.ignoreNextEnter = ignoreNextEnter
		self.timeToNextRefresh = timeToNextRefresh
		self.closed = closed
		self.localLobbies = localLobbies


class CoopLobbyScreen:

    offsets = {'txtMap': 200, 'txtTrackType': 208, 'txtDifficulty': 216, 'txtGameMode': 224, 'txtTrackTypeInfo': 232, 'txtDifficultyInfo': 240, 'txtGameModeInfo': 248, 'readyButton': 256, 'publicButton': 264, 'loadingWheel': 272, 'copyCodeTick': 280, 'debugReadyPanel': 288, 'loadingWheelTxt': 296, 'txtGameCode': 304, 'shareSocialBtn': 312, 'challengeRulesButton': 320, 'lockedInfoPanel': 328, 'lockedInfoButton': 336, 'lockedInfoCloseButton': 344, 'CancelEvent': 368, 'ReadyEvent': 376, 'Lobby': 384, 'LobbyParameters': 392, 'playersSelectedHeroSkin': 400, 'IsPublic': 408, 'HaveClickedReady': 409, 'AHackerIsPresent': 410, 'canChangeHero': 411}    
    def __init__(self, txtMap: TMPro.TextMeshProUGUI, txtTrackType: TMPro.TextMeshProUGUI, txtDifficulty: TMPro.TextMeshProUGUI, txtGameMode: TMPro.TextMeshProUGUI, txtTrackTypeInfo: TMPro.TextMeshProUGUI, txtDifficultyInfo: TMPro.TextMeshProUGUI, txtGameModeInfo: TMPro.TextMeshProUGUI, readyButton: UnityEngine.GameObject, publicButton: UnityEngine.GameObject, loadingWheel: UnityEngine.GameObject, copyCodeTick: UnityEngine.GameObject, debugReadyPanel: UnityEngine.GameObject, loadingWheelTxt: TMPro.TextMeshProUGUI, txtGameCode: TMPro.TextMeshProUGUI, shareSocialBtn: UnityEngine.UI.Button, challengeRulesButton: UnityEngine.GameObject, lockedInfoPanel: UnityEngine.GameObject, lockedInfoButton: UnityEngine.GameObject, lockedInfoCloseButton: UnityEngine.GameObject, CancelEvent: System.Action, ReadyEvent: System.Action, Lobby: NinjaKiwi.LiNK.Lobbies.LobbyConnection, LobbyParameters: Assets.Scripts.Unity.Network.Btd6LobbyParameters, playersSelectedHeroSkin: System.String, IsPublic: System.Boolean, HaveClickedReady: System.Boolean, AHackerIsPresent: System.Boolean, canChangeHero: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.txtMap = txtMap
		self.txtTrackType = txtTrackType
		self.txtDifficulty = txtDifficulty
		self.txtGameMode = txtGameMode
		self.txtTrackTypeInfo = txtTrackTypeInfo
		self.txtDifficultyInfo = txtDifficultyInfo
		self.txtGameModeInfo = txtGameModeInfo
		self.readyButton = readyButton
		self.publicButton = publicButton
		self.loadingWheel = loadingWheel
		self.copyCodeTick = copyCodeTick
		self.debugReadyPanel = debugReadyPanel
		self.loadingWheelTxt = loadingWheelTxt
		self.txtGameCode = txtGameCode
		self.shareSocialBtn = shareSocialBtn
		self.challengeRulesButton = challengeRulesButton
		self.lockedInfoPanel = lockedInfoPanel
		self.lockedInfoButton = lockedInfoButton
		self.lockedInfoCloseButton = lockedInfoCloseButton
		self.CancelEvent = CancelEvent
		self.ReadyEvent = ReadyEvent
		self.Lobby = Lobby
		self.LobbyParameters = LobbyParameters
		self.playersSelectedHeroSkin = playersSelectedHeroSkin
		self.IsPublic = IsPublic
		self.HaveClickedReady = HaveClickedReady
		self.AHackerIsPresent = AHackerIsPresent
		self.canChangeHero = canChangeHero


class CoopMessageBoardPanel:

    offsets = {'panel': 24, 'text': 32, 'icon': 40}    
    def __init__(self, panel: UnityEngine.GameObject, text: TMPro.TextMeshProUGUI, icon: UnityEngine.UI.Image, **kwargs):
        super().__init__(self, **kwargs)
		self.panel = panel
		self.text = text
		self.icon = icon


class CoopModeSelectScreen:

    offsets = {'coopEasyMedal': 272, 'coopMediumMedal': 280, 'coopHardMedal': 288, 'lookingForGame': 296, 'CancelEvent': 304}    
    def __init__(self, coopEasyMedal: Assets.Scripts.Utils.SpriteReference, coopMediumMedal: Assets.Scripts.Utils.SpriteReference, coopHardMedal: Assets.Scripts.Utils.SpriteReference, lookingForGame: UnityEngine.GameObject, CancelEvent: System.Action, **kwargs):
        super().__init__(self, **kwargs)
		self.coopEasyMedal = coopEasyMedal
		self.coopMediumMedal = coopMediumMedal
		self.coopHardMedal = coopHardMedal
		self.lookingForGame = lookingForGame
		self.CancelEvent = CancelEvent


class CoopNotificationPanel:

    offsets = {'panel': 24}    
    def __init__(self, panel: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.panel = panel


class CoopPlayerPanel:

    offsets = {'txtPlayerName': 24, 'txtLevel': 32, 'rankImg': 40, 'regularRankSpr': 48, 'veteranRankSpr': 56, 'heroIcon': 64, 'bannerObject': 72, 'bannerImage': 80, 'playerPanel': 88, 'loadingPanel': 96, 'hostIndicator': 104, 'txtLoading': 112, 'medalPanel': 120, 'heroChangeIcon': 128}    
    def __init__(self, txtPlayerName: TMPro.TextMeshProUGUI, txtLevel: TMPro.TextMeshProUGUI, rankImg: UnityEngine.UI.Image, regularRankSpr: UnityEngine.Sprite, veteranRankSpr: UnityEngine.Sprite, heroIcon: UnityEngine.UI.Image, bannerObject: UnityEngine.GameObject, bannerImage: UnityEngine.UI.Image, playerPanel: UnityEngine.GameObject, loadingPanel: UnityEngine.GameObject, hostIndicator: UnityEngine.GameObject, txtLoading: TMPro.TextMeshProUGUI, medalPanel: Assets.Scripts.Unity.UI_New.Coop.CoopDifficuiltyMedalPanel, heroChangeIcon: Assets.Scripts.Unity.Display.Animation.PlayableAnimatorSimple, **kwargs):
        super().__init__(self, **kwargs)
		self.txtPlayerName = txtPlayerName
		self.txtLevel = txtLevel
		self.rankImg = rankImg
		self.regularRankSpr = regularRankSpr
		self.veteranRankSpr = veteranRankSpr
		self.heroIcon = heroIcon
		self.bannerObject = bannerObject
		self.bannerImage = bannerImage
		self.playerPanel = playerPanel
		self.loadingPanel = loadingPanel
		self.hostIndicator = hostIndicator
		self.txtLoading = txtLoading
		self.medalPanel = medalPanel
		self.heroChangeIcon = heroChangeIcon


class CoopPlayerPanelFreeplay:

    offsets = {'txtPlayerName': 24, 'txtLevel': 32, 'rankImg': 40, 'regularRankSpr': 48, 'veteranRankSpr': 56, 'heroIcon': 64, 'playerNumber': 72, 'playerPanel': 80, 'disconnectedPanel': 88, 'loadingPanel': 96, 'medalPanel': 104, 'ribbonPanel': 112, 'bannerImage': 120, 'bannerObject': 128}    
    def __init__(self, txtPlayerName: TMPro.TextMeshProUGUI, txtLevel: TMPro.TextMeshProUGUI, rankImg: UnityEngine.UI.Image, regularRankSpr: UnityEngine.Sprite, veteranRankSpr: UnityEngine.Sprite, heroIcon: UnityEngine.UI.Image, playerNumber: UnityEngine.UI.Image, playerPanel: UnityEngine.GameObject, disconnectedPanel: UnityEngine.GameObject, loadingPanel: Assets.Scripts.Unity.UI_New.Coop.CoopConfirmFreeplayPanel, medalPanel: Assets.Scripts.Unity.UI_New.Coop.CoopDifficuiltyMedalPanel, ribbonPanel: Assets.Scripts.Unity.UI_New.Coop.CoopPlayerRibbonPanel, bannerImage: UnityEngine.UI.Image, bannerObject: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.txtPlayerName = txtPlayerName
		self.txtLevel = txtLevel
		self.rankImg = rankImg
		self.regularRankSpr = regularRankSpr
		self.veteranRankSpr = veteranRankSpr
		self.heroIcon = heroIcon
		self.playerNumber = playerNumber
		self.playerPanel = playerPanel
		self.disconnectedPanel = disconnectedPanel
		self.loadingPanel = loadingPanel
		self.medalPanel = medalPanel
		self.ribbonPanel = ribbonPanel
		self.bannerImage = bannerImage
		self.bannerObject = bannerObject


class CoopPlayerRibbonPanel:

    offsets = {'mainInfoTxt': 24, 'subInfoTxt': 32, 'ribbonPanel': 40, 'towerIcon': 48}    
    def __init__(self, mainInfoTxt: TMPro.TextMeshProUGUI, subInfoTxt: TMPro.TextMeshProUGUI, ribbonPanel: UnityEngine.GameObject, towerIcon: UnityEngine.UI.Image, **kwargs):
        super().__init__(self, **kwargs)
		self.mainInfoTxt = mainInfoTxt
		self.subInfoTxt = subInfoTxt
		self.ribbonPanel = ribbonPanel
		self.towerIcon = towerIcon


class CoopPlayerSliderPanel:
	instance: Assets.Scripts.Unity.UI_New.Coop.CoopPlayerSliderPanel
    offsets = {'instance': 0, 'animatorLabel': 8, 'animateIn': 16, 'animateOut': 20, 'container': 24, 'animator': 32, 'requestButton': 40, 'closeMenuButton': 48, 'notificationIcon': 56, 'notificationGlow': 64, 'playerSliderPanel': 80, 'emotesPanel': 88, 'connectivityLowIconSelf': 96, 'connectivityLowIconOtherPlayers': 104, 'moneyReminderIcon': 112, 'cashTransferButton': 120, 'cashTransferPanelActive': 128, 'cashTransferPanelInactive': 136, 'emotesButton': 144, 'emotesPanelActive': 152, 'emotesPanelInactive': 160, 'cashReceivedSound': 168, 'alertSound': 176, '<coopGame>k__BackingField': 184, 'isVisible': 192, 'showingCashTransferPanel': 193, 'moneyTimerCoroutine': 200, 'moneyTimerActive': 208, 'connectivityIconHideTime': 216}    
    def __init__(self, instance: Assets.Scripts.Unity.UI_New.Coop.CoopPlayerSliderPanel, animatorLabel: System.String, animateIn: System.Int32, animateOut: System.Int32, container: UnityEngine.GameObject, animator: UnityEngine.Animator, requestButton: Assets.Scripts.Unity.UI_New.ButtonExtended, closeMenuButton: Assets.Scripts.Unity.UI_New.ButtonExtended, notificationIcon: UnityEngine.UI.Image, notificationGlow: UnityEngine.UI.Image, playerSliderPanel: UnityEngine.GameObject, emotesPanel: UnityEngine.GameObject, connectivityLowIconSelf: UnityEngine.GameObject, connectivityLowIconOtherPlayers: UnityEngine.GameObject, moneyReminderIcon: UnityEngine.GameObject, cashTransferButton: Assets.Scripts.Unity.UI_New.ButtonExtended, cashTransferPanelActive: UnityEngine.GameObject, cashTransferPanelInactive: UnityEngine.GameObject, emotesButton: Assets.Scripts.Unity.UI_New.ButtonExtended, emotesPanelActive: UnityEngine.GameObject, emotesPanelInactive: UnityEngine.GameObject, cashReceivedSound: UnityEngine.AudioClip, alertSound: UnityEngine.AudioClip, <coopGame>k__BackingField: Assets.Scripts.Unity.Network.Btd6CoopGame, isVisible: System.Boolean, showingCashTransferPanel: System.Boolean, moneyTimerCoroutine: UnityEngine.Coroutine, moneyTimerActive: System.Boolean, connectivityIconHideTime: System.DateTime, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.animatorLabel = animatorLabel
		self.animateIn = animateIn
		self.animateOut = animateOut
		self.container = container
		self.animator = animator
		self.requestButton = requestButton
		self.closeMenuButton = closeMenuButton
		self.notificationIcon = notificationIcon
		self.notificationGlow = notificationGlow
		self.playerSliderPanel = playerSliderPanel
		self.emotesPanel = emotesPanel
		self.connectivityLowIconSelf = connectivityLowIconSelf
		self.connectivityLowIconOtherPlayers = connectivityLowIconOtherPlayers
		self.moneyReminderIcon = moneyReminderIcon
		self.cashTransferButton = cashTransferButton
		self.cashTransferPanelActive = cashTransferPanelActive
		self.cashTransferPanelInactive = cashTransferPanelInactive
		self.emotesButton = emotesButton
		self.emotesPanelActive = emotesPanelActive
		self.emotesPanelInactive = emotesPanelInactive
		self.cashReceivedSound = cashReceivedSound
		self.alertSound = alertSound
		self.<coopGame>k__BackingField = <coopGame>k__BackingField
		self.isVisible = isVisible
		self.showingCashTransferPanel = showingCashTransferPanel
		self.moneyTimerCoroutine = moneyTimerCoroutine
		self.moneyTimerActive = moneyTimerActive
		self.connectivityIconHideTime = connectivityIconHideTime


class CoopPlayerStatsPanel:

    offsets = {'calloutBanner': 24, 'playerHeader': 32, 'mainHeaderInfoTxt': 40, 'subHeaderInfoTxt': 48, 'towerIcon': 56, 'disonnectedPanel': 80, 'glowPanel': 88, 'monkeyStarDetailsPanel': 96, 'monkeyStarPopPanel': 104, 'popInfoCountTxt': 112, 'monkeyStarCashPanel': 120, 'cashInfoCountTxt': 128, 'mainInfoTxt': 136, 'towerInfo': 144, 'instaTowerIcon': 152, 'popInfoIcon': 160}    
    def __init__(self, calloutBanner: UnityEngine.GameObject, playerHeader: TMPro.TextMeshProUGUI, mainHeaderInfoTxt: TMPro.TextMeshProUGUI, subHeaderInfoTxt: TMPro.TextMeshProUGUI, towerIcon: UnityEngine.UI.Image, disonnectedPanel: UnityEngine.GameObject, glowPanel: UnityEngine.GameObject, monkeyStarDetailsPanel: UnityEngine.GameObject, monkeyStarPopPanel: UnityEngine.GameObject, popInfoCountTxt: TMPro.TextMeshProUGUI, monkeyStarCashPanel: UnityEngine.GameObject, cashInfoCountTxt: TMPro.TextMeshProUGUI, mainInfoTxt: TMPro.TextMeshProUGUI, towerInfo: TMPro.TextMeshProUGUI, instaTowerIcon: UnityEngine.UI.Image, popInfoIcon: UnityEngine.UI.Image, **kwargs):
        super().__init__(self, **kwargs)
		self.calloutBanner = calloutBanner
		self.playerHeader = playerHeader
		self.mainHeaderInfoTxt = mainHeaderInfoTxt
		self.subHeaderInfoTxt = subHeaderInfoTxt
		self.towerIcon = towerIcon
		self.disonnectedPanel = disonnectedPanel
		self.glowPanel = glowPanel
		self.monkeyStarDetailsPanel = monkeyStarDetailsPanel
		self.monkeyStarPopPanel = monkeyStarPopPanel
		self.popInfoCountTxt = popInfoCountTxt
		self.monkeyStarCashPanel = monkeyStarCashPanel
		self.cashInfoCountTxt = cashInfoCountTxt
		self.mainInfoTxt = mainInfoTxt
		self.towerInfo = towerInfo
		self.instaTowerIcon = instaTowerIcon
		self.popInfoIcon = popInfoIcon


class CoopPlayersSelectScreen:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CoopQuickMatchScreen:

    offsets = {'btnQuickGame': 200, 'objQuickGameLock': 208, 'btnMediumGame': 216, 'objMediumGameLock': 224, 'btnLongGame': 232, 'objLongGameLock': 240, 'objLock': 248, 'txtLock': 256, 'playersTxt': 264, 'trackTxt': 272, 'dificultyTxt': 280, 'modeTxt': 288, 'lookingForGame': 296, 'objGo': 304, 'btnOk': 312, 'btnCancel': 320, 'CancelEvent': 328, 'QuickMatchSelection': 336}    
    def __init__(self, btnQuickGame: UnityEngine.GameObject, objQuickGameLock: UnityEngine.GameObject, btnMediumGame: UnityEngine.GameObject, objMediumGameLock: UnityEngine.GameObject, btnLongGame: UnityEngine.GameObject, objLongGameLock: UnityEngine.GameObject, objLock: UnityEngine.GameObject, txtLock: TMPro.TextMeshProUGUI, playersTxt: TMPro.TextMeshProUGUI, trackTxt: TMPro.TextMeshProUGUI, dificultyTxt: TMPro.TextMeshProUGUI, modeTxt: TMPro.TextMeshProUGUI, lookingForGame: UnityEngine.Animator, objGo: UnityEngine.GameObject, btnOk: UnityEngine.UI.Button, btnCancel: UnityEngine.UI.Button, CancelEvent: System.Action, QuickMatchSelection: Assets.Scripts.Unity.Network.QuickMatch.Bucket, **kwargs):
        super().__init__(self, **kwargs)
		self.btnQuickGame = btnQuickGame
		self.objQuickGameLock = objQuickGameLock
		self.btnMediumGame = btnMediumGame
		self.objMediumGameLock = objMediumGameLock
		self.btnLongGame = btnLongGame
		self.objLongGameLock = objLongGameLock
		self.objLock = objLock
		self.txtLock = txtLock
		self.playersTxt = playersTxt
		self.trackTxt = trackTxt
		self.dificultyTxt = dificultyTxt
		self.modeTxt = modeTxt
		self.lookingForGame = lookingForGame
		self.objGo = objGo
		self.btnOk = btnOk
		self.btnCancel = btnCancel
		self.CancelEvent = CancelEvent
		self.QuickMatchSelection = QuickMatchSelection


class CoopReconnectingPopup:

    offsets = {'homeBtn': 232, 'coopRejoinCompleteCallback': 240, 'coopReturnHomeCallback': 248}    
    def __init__(self, homeBtn: UnityEngine.UI.Button, coopRejoinCompleteCallback: Assets.Scripts.Unity.UI_New.Popups.PopupScreen.ReturnCallback, coopReturnHomeCallback: Assets.Scripts.Unity.UI_New.Popups.PopupScreen.ReturnCallback, **kwargs):
        super().__init__(self, **kwargs)
		self.homeBtn = homeBtn
		self.coopRejoinCompleteCallback = coopRejoinCompleteCallback
		self.coopReturnHomeCallback = coopReturnHomeCallback


class CoopRejoin:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CoopReplayScreen:

    offsets = {'inputField': 200, 'txtGameCode': 208, 'lookingForGame': 216, 'btnOk': 224, 'btnCancel': 232, 'extraData': 240, 'screenCameFrom': 248, 'ignoreNextEnter': 256, 'CancelEvent': 264}    
    def __init__(self, inputField: TMPro.TMP_InputField, txtGameCode: TMPro.TextMeshProUGUI, lookingForGame: UnityEngine.Animator, btnOk: UnityEngine.UI.Button, btnCancel: UnityEngine.UI.Button, extraData: System.Object, screenCameFrom: System.String, ignoreNextEnter: System.Boolean, CancelEvent: System.Action, **kwargs):
        super().__init__(self, **kwargs)
		self.inputField = inputField
		self.txtGameCode = txtGameCode
		self.lookingForGame = lookingForGame
		self.btnOk = btnOk
		self.btnCancel = btnCancel
		self.extraData = extraData
		self.screenCameFrom = screenCameFrom
		self.ignoreNextEnter = ignoreNextEnter
		self.CancelEvent = CancelEvent


class CoopSyncingPopup:

    offsets = {'syncingPopupBackgroundLightBlue': 24, 'syncingPopupBackgroundDarkBlue': 32, 'syncingPopupBackgroundGreen': 40, 'syncingPopupPlayerIcon': 48, 'playerNameTxt': 64, 'syncingPopupTimerTxt': 72, 'syncingPopupMessageTxt': 80}    
    def __init__(self, syncingPopupBackgroundLightBlue: UnityEngine.GameObject, syncingPopupBackgroundDarkBlue: UnityEngine.GameObject, syncingPopupBackgroundGreen: UnityEngine.GameObject, syncingPopupPlayerIcon: UnityEngine.UI.Image, playerNameTxt: TMPro.TextMeshProUGUI, syncingPopupTimerTxt: TMPro.TextMeshProUGUI, syncingPopupMessageTxt: TMPro.TextMeshProUGUI, **kwargs):
        super().__init__(self, **kwargs)
		self.syncingPopupBackgroundLightBlue = syncingPopupBackgroundLightBlue
		self.syncingPopupBackgroundDarkBlue = syncingPopupBackgroundDarkBlue
		self.syncingPopupBackgroundGreen = syncingPopupBackgroundGreen
		self.syncingPopupPlayerIcon = syncingPopupPlayerIcon
		self.playerNameTxt = playerNameTxt
		self.syncingPopupTimerTxt = syncingPopupTimerTxt
		self.syncingPopupMessageTxt = syncingPopupMessageTxt


class CoopVictoryScreen:

    offsets = {'animator': 56, 'titleTxt': 64, 'statsObj': 72, 'freeplayObj': 80, 'rewardsMmImg': 88, 'lootPanel': 96, 'nextButton': 104, 'homeButton': 112, 'freeplayButton': 120, 'victorySound': 144, 'goldenBloonObj': 152, 'goldenBloonPopCountTxt': 160, 'goldenBloonMMEarntTxt': 168, 'monkeyTeamsObj': 176, 'monkeyTeamsIcon': 184, 'monkeyTeamsMMEarntTxt': 192, 'coopCalloutUiData': 200, 'calloutManager': 208, 'animatorState': 216, 'coopGame': 224}    
    def __init__(self, animator: UnityEngine.Animator, titleTxt: TMPro.TextMeshProUGUI, statsObj: UnityEngine.GameObject, freeplayObj: UnityEngine.GameObject, rewardsMmImg: UnityEngine.UI.Image, lootPanel: Assets.Scripts.Unity.UI_New.Store.LootPanel, nextButton: UnityEngine.UI.Button, homeButton: UnityEngine.UI.Button, freeplayButton: UnityEngine.UI.Button, victorySound: UnityEngine.AudioClip, goldenBloonObj: UnityEngine.GameObject, goldenBloonPopCountTxt: TMPro.TextMeshProUGUI, goldenBloonMMEarntTxt: TMPro.TextMeshProUGUI, monkeyTeamsObj: UnityEngine.GameObject, monkeyTeamsIcon: Assets.Scripts.Unity.UI_New.Main.MapSelect.MonkeyTeamsIcon, monkeyTeamsMMEarntTxt: TMPro.TextMeshProUGUI, coopCalloutUiData: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Callouts.CalloutUiData>, calloutManager: Assets.Scripts.Unity.UI_New.Callouts.CalloutManager, animatorState: System.Int32, coopGame: Assets.Scripts.Unity.Network.Btd6CoopGame, **kwargs):
        super().__init__(self, **kwargs)
		self.animator = animator
		self.titleTxt = titleTxt
		self.statsObj = statsObj
		self.freeplayObj = freeplayObj
		self.rewardsMmImg = rewardsMmImg
		self.lootPanel = lootPanel
		self.nextButton = nextButton
		self.homeButton = homeButton
		self.freeplayButton = freeplayButton
		self.victorySound = victorySound
		self.goldenBloonObj = goldenBloonObj
		self.goldenBloonPopCountTxt = goldenBloonPopCountTxt
		self.goldenBloonMMEarntTxt = goldenBloonMMEarntTxt
		self.monkeyTeamsObj = monkeyTeamsObj
		self.monkeyTeamsIcon = monkeyTeamsIcon
		self.monkeyTeamsMMEarntTxt = monkeyTeamsMMEarntTxt
		self.coopCalloutUiData = coopCalloutUiData
		self.calloutManager = calloutManager
		self.animatorState = animatorState
		self.coopGame = coopGame


class EventLeaderboardPlayerPanel:

    offsets = {'rankTxt': 24, 'nameTxt': 32, 'bestTimeTxt': 40, 'medalRankTxt': 48, 'avatarImg': 56, 'avatarBannerImg': 64, 'badgesContainer': 72, 'badgesEvent1': 80, 'badgesEvent2': 88, 'badgesEvent3': 96, 'medalReward': 104, 'playerPanel': 112, 'loadingPlayerPanel': 120, 'goldPlayerBackground': 128, 'backgroundPanel': 136, 'statsButton': 144, 'statsLoadingSpinner': 152, 'StatsClicked': 160, 'isDestroyed': 168}    
    def __init__(self, rankTxt: TMPro.TextMeshProUGUI, nameTxt: TMPro.TextMeshProUGUI, bestTimeTxt: TMPro.TextMeshProUGUI, medalRankTxt: TMPro.TextMeshProUGUI, avatarImg: UnityEngine.UI.Image, avatarBannerImg: UnityEngine.UI.Image, badgesContainer: UnityEngine.GameObject, badgesEvent1: UnityEngine.GameObject, badgesEvent2: UnityEngine.GameObject, badgesEvent3: UnityEngine.GameObject, medalReward: UnityEngine.GameObject, playerPanel: UnityEngine.GameObject, loadingPlayerPanel: UnityEngine.GameObject, goldPlayerBackground: UnityEngine.GameObject, backgroundPanel: UnityEngine.GameObject, statsButton: UnityEngine.UI.Button, statsLoadingSpinner: UnityEngine.GameObject, StatsClicked: System.Action, isDestroyed: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.rankTxt = rankTxt
		self.nameTxt = nameTxt
		self.bestTimeTxt = bestTimeTxt
		self.medalRankTxt = medalRankTxt
		self.avatarImg = avatarImg
		self.avatarBannerImg = avatarBannerImg
		self.badgesContainer = badgesContainer
		self.badgesEvent1 = badgesEvent1
		self.badgesEvent2 = badgesEvent2
		self.badgesEvent3 = badgesEvent3
		self.medalReward = medalReward
		self.playerPanel = playerPanel
		self.loadingPlayerPanel = loadingPlayerPanel
		self.goldPlayerBackground = goldPlayerBackground
		self.backgroundPanel = backgroundPanel
		self.statsButton = statsButton
		self.statsLoadingSpinner = statsLoadingSpinner
		self.StatsClicked = StatsClicked
		self.isDestroyed = isDestroyed


class EventLeaderboardScreen:

    offsets = {'rewardsBtn': 56, 'titlePanel': 64, 'scrollRace': 72, 'scrollMiniRace': 80, 'contentPanel': 88, 'miniContentPanel': 96, 'playerGoldPanel': 104, 'miniPlayerGoldPanel': 112, 'prefabPanel': 120, 'rankTitleTxt': 128, 'playerTitleTxt': 136, 'badgesTitleTxt': 144, 'bestTimeTitleTxt': 152, 'eventTimerObj': 160, 'eventTimerTxt': 168, 'eventTimerCountdownTxt': 176, 'eventTimeImg': 184, 'fullRaceLeaderboardTog': 192, 'miniRaceLeaderboardTog': 200, 'joinMiniRaceInfo': 208, 'noScoresObj': 216, 'playerPanels': 224, 'miniPlayerPanels': 232, 'eventData': 240, 'playerLoggedIn': 248, 'playerHasScore': 249, 'miniPlayerHasScore': 250, 'playerIsInMiniRace': 251, 'placing': 252, 'miniPlacing': 256, 'totalLeadboardCount': 260, 'miniTotalLeadboardCount': 264, 'canceller': 272}    
    def __init__(self, rewardsBtn: UnityEngine.UI.Button, titlePanel: UnityEngine.GameObject, scrollRace: UnityEngine.GameObject, scrollMiniRace: UnityEngine.GameObject, contentPanel: UnityEngine.GameObject, miniContentPanel: UnityEngine.GameObject, playerGoldPanel: UnityEngine.GameObject, miniPlayerGoldPanel: UnityEngine.GameObject, prefabPanel: UnityEngine.GameObject, rankTitleTxt: TMPro.TextMeshProUGUI, playerTitleTxt: TMPro.TextMeshProUGUI, badgesTitleTxt: TMPro.TextMeshProUGUI, bestTimeTitleTxt: TMPro.TextMeshProUGUI, eventTimerObj: UnityEngine.GameObject, eventTimerTxt: TMPro.TextMeshProUGUI, eventTimerCountdownTxt: TMPro.TextMeshProUGUI, eventTimeImg: UnityEngine.UI.Image, fullRaceLeaderboardTog: UnityEngine.UI.Toggle, miniRaceLeaderboardTog: UnityEngine.UI.Toggle, joinMiniRaceInfo: UnityEngine.GameObject, noScoresObj: UnityEngine.GameObject, playerPanels: System.Collections.Generic.List<UnityEngine.GameObject>, miniPlayerPanels: System.Collections.Generic.List<UnityEngine.GameObject>, eventData: Assets.Scripts.Models.ServerEvents.BaseServerEvent, playerLoggedIn: System.Boolean, playerHasScore: System.Boolean, miniPlayerHasScore: System.Boolean, playerIsInMiniRace: System.Boolean, placing: System.Int32, miniPlacing: System.Int32, totalLeadboardCount: System.Int32, miniTotalLeadboardCount: System.Int32, canceller: System.Threading.CancellationTokenSource, **kwargs):
        super().__init__(self, **kwargs)
		self.rewardsBtn = rewardsBtn
		self.titlePanel = titlePanel
		self.scrollRace = scrollRace
		self.scrollMiniRace = scrollMiniRace
		self.contentPanel = contentPanel
		self.miniContentPanel = miniContentPanel
		self.playerGoldPanel = playerGoldPanel
		self.miniPlayerGoldPanel = miniPlayerGoldPanel
		self.prefabPanel = prefabPanel
		self.rankTitleTxt = rankTitleTxt
		self.playerTitleTxt = playerTitleTxt
		self.badgesTitleTxt = badgesTitleTxt
		self.bestTimeTitleTxt = bestTimeTitleTxt
		self.eventTimerObj = eventTimerObj
		self.eventTimerTxt = eventTimerTxt
		self.eventTimerCountdownTxt = eventTimerCountdownTxt
		self.eventTimeImg = eventTimeImg
		self.fullRaceLeaderboardTog = fullRaceLeaderboardTog
		self.miniRaceLeaderboardTog = miniRaceLeaderboardTog
		self.joinMiniRaceInfo = joinMiniRaceInfo
		self.noScoresObj = noScoresObj
		self.playerPanels = playerPanels
		self.miniPlayerPanels = miniPlayerPanels
		self.eventData = eventData
		self.playerLoggedIn = playerLoggedIn
		self.playerHasScore = playerHasScore
		self.miniPlayerHasScore = miniPlayerHasScore
		self.playerIsInMiniRace = playerIsInMiniRace
		self.placing = placing
		self.miniPlacing = miniPlacing
		self.totalLeadboardCount = totalLeadboardCount
		self.miniTotalLeadboardCount = miniTotalLeadboardCount
		self.canceller = canceller


class LocalCoopPanel:

    offsets = {'coopJoinMatchScreen': 24, 'lobbyParamaters': 32, 'lobby': 40, 'txtPlayerName': 48, 'txtMapName': 56, 'txtTrackTypeInfo': 64, 'txtDifficultyInfo': 72, 'txtGameModeInfo': 80, 'mapImg': 88, 'goBtn': 96}    
    def __init__(self, coopJoinMatchScreen: Assets.Scripts.Unity.UI_New.Coop.CoopJoinMatchScreen, lobbyParamaters: Assets.Scripts.Unity.Network.Btd6LobbyParameters, lobby: NinjaKiwi.LiNK.Endpoints.LocalNetworkLobby, txtPlayerName: NK_TextMeshProUGUI, txtMapName: NK_TextMeshProUGUI, txtTrackTypeInfo: NK_TextMeshProUGUI, txtDifficultyInfo: NK_TextMeshProUGUI, txtGameModeInfo: NK_TextMeshProUGUI, mapImg: UnityEngine.UI.Image, goBtn: UnityEngine.UI.Button, **kwargs):
        super().__init__(self, **kwargs)
		self.coopJoinMatchScreen = coopJoinMatchScreen
		self.lobbyParamaters = lobbyParamaters
		self.lobby = lobby
		self.txtPlayerName = txtPlayerName
		self.txtMapName = txtMapName
		self.txtTrackTypeInfo = txtTrackTypeInfo
		self.txtDifficultyInfo = txtDifficultyInfo
		self.txtGameModeInfo = txtGameModeInfo
		self.mapImg = mapImg
		self.goBtn = goBtn


class OdysseyInGameRulesScreen:

    offsets = {'txtDifficultyModes': 56, 'txtMapName': 64, 'txtMapNumber': 72, 'txtStartingCash': 80, 'txtStartRoundDetails': 88, 'clickBlock': 104, 'modifierContent': 112, 'modifierPrefab': 120, 'modTheme': 128, 'initialized': 136, 'odysseyData': 144, 'activeOdyssey': 152, 'mapIndexSelected': 160}    
    def __init__(self, txtDifficultyModes: NK_TextMeshProUGUI, txtMapName: NK_TextMeshProUGUI, txtMapNumber: NK_TextMeshProUGUI, txtStartingCash: NK_TextMeshProUGUI, txtStartRoundDetails: NK_TextMeshProUGUI, clickBlock: Assets.Scripts.Unity.UI_New.ButtonExtended, modifierContent: UnityEngine.Transform, modifierPrefab: UnityEngine.GameObject, modTheme: Assets.Scripts.Unity.UI_New.Store.ModIconTheme, initialized: System.Boolean, odysseyData: Assets.Scripts.Models.ServerEvents.OdysseyData, activeOdyssey: Assets.Scripts.Unity.UI_New.Odyssey.SubScripts.OdysseySaveData.EmbarkedActiveOdyssey, mapIndexSelected: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.txtDifficultyModes = txtDifficultyModes
		self.txtMapName = txtMapName
		self.txtMapNumber = txtMapNumber
		self.txtStartingCash = txtStartingCash
		self.txtStartRoundDetails = txtStartRoundDetails
		self.clickBlock = clickBlock
		self.modifierContent = modifierContent
		self.modifierPrefab = modifierPrefab
		self.modTheme = modTheme
		self.initialized = initialized
		self.odysseyData = odysseyData
		self.activeOdyssey = activeOdyssey
		self.mapIndexSelected = mapIndexSelected


class OdysseyVictoryScreen:

    offsets = {'lootPanel': 56, 'odysseyCompleteBanner': 64, 'odysseyStageCompleteBanner': 72, 'homeBtn': 80, 'continueBtn': 88, 'victorySound': 96, 'clickSound': 104, 'rewardsCollectedObj': 112, 'rewardsPanel': 120, 'titleTextMapComplete': 136}    
    def __init__(self, lootPanel: Assets.Scripts.Unity.UI_New.Store.LootPanel, odysseyCompleteBanner: UnityEngine.GameObject, odysseyStageCompleteBanner: UnityEngine.GameObject, homeBtn: Assets.Scripts.Unity.UI_New.ButtonExtended, continueBtn: Assets.Scripts.Unity.UI_New.ButtonExtended, victorySound: UnityEngine.AudioClip, clickSound: UnityEngine.AudioClip, rewardsCollectedObj: UnityEngine.GameObject, rewardsPanel: UnityEngine.GameObject, titleTextMapComplete: NK_TextMeshProUGUI, **kwargs):
        super().__init__(self, **kwargs)
		self.lootPanel = lootPanel
		self.odysseyCompleteBanner = odysseyCompleteBanner
		self.odysseyStageCompleteBanner = odysseyStageCompleteBanner
		self.homeBtn = homeBtn
		self.continueBtn = continueBtn
		self.victorySound = victorySound
		self.clickSound = clickSound
		self.rewardsCollectedObj = rewardsCollectedObj
		self.rewardsPanel = rewardsPanel
		self.titleTextMapComplete = titleTextMapComplete


class PlaySocialScreen:

    offsets = {'quickGameBtn': 56, 'createGameBtn': 64, 'joinGameBtn': 72, 'coopChallengeBtn': 80, 'contentBrowserPanel': 88, 'viewBrowserBtn': 96, 'editChallengeBtn': 104, 'editOdysseyBtn': 112, 'coopDC': 120}    
    def __init__(self, quickGameBtn: UnityEngine.UI.Button, createGameBtn: UnityEngine.UI.Button, joinGameBtn: UnityEngine.UI.Button, coopChallengeBtn: UnityEngine.UI.Button, contentBrowserPanel: UnityEngine.GameObject, viewBrowserBtn: UnityEngine.UI.Button, editChallengeBtn: UnityEngine.UI.Button, editOdysseyBtn: UnityEngine.UI.Button, coopDC: Assets.Scripts.Models.ServerEvents.DailyChallengeModel, **kwargs):
        super().__init__(self, **kwargs)
		self.quickGameBtn = quickGameBtn
		self.createGameBtn = createGameBtn
		self.joinGameBtn = joinGameBtn
		self.coopChallengeBtn = coopChallengeBtn
		self.contentBrowserPanel = contentBrowserPanel
		self.viewBrowserBtn = viewBrowserBtn
		self.editChallengeBtn = editChallengeBtn
		self.editOdysseyBtn = editOdysseyBtn
		self.coopDC = coopDC


class UiCoopManager:
	instance: Assets.Scripts.Unity.UI_New.Coop.UiCoopManager
    offsets = {'instance': 0, 'emotesManager': 24, 'coopPlayerSliderPanel': 32, 'coopAreaIndicators': 40, 'messageBoardContainer': 48, 'messageBoardPlayerIcon': 56, 'messageBoardTxt': 64, 'prefabCoopCashRecievedDisplay': 72, 'prefabCoopIndicator': 80, 'CoopButton': 88, 'openMenuButton': 96, 'disconnectedSound': 104, 'playerIconFFA': 112, 'simulationInitailised': 128, 'RunOnCoopInitialised': 136, 'coopGame': 144, 'placeTowersHereRoutine': 152}    
    def __init__(self, instance: Assets.Scripts.Unity.UI_New.Coop.UiCoopManager, emotesManager: Assets.Scripts.Unity.UI_New.InGame.EmotesMenu.EmotesManager, coopPlayerSliderPanel: Assets.Scripts.Unity.UI_New.Coop.CoopPlayerSliderPanel, coopAreaIndicators: Assets.Scripts.Unity.UI_New.InGame.CoopAreaIndicators, messageBoardContainer: UnityEngine.GameObject, messageBoardPlayerIcon: UnityEngine.UI.Image, messageBoardTxt: TMPro.TextMeshProUGUI, prefabCoopCashRecievedDisplay: UnityEngine.GameObject, prefabCoopIndicator: UnityEngine.GameObject, CoopButton: UnityEngine.GameObject, openMenuButton: Assets.Scripts.Unity.UI_New.ButtonExtended, disconnectedSound: UnityEngine.AudioClip, playerIconFFA: UnityEngine.Sprite, simulationInitailised: System.Boolean, RunOnCoopInitialised: System.Action, coopGame: Assets.Scripts.Unity.Network.Btd6CoopGame, placeTowersHereRoutine: UnityEngine.Coroutine, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.emotesManager = emotesManager
		self.coopPlayerSliderPanel = coopPlayerSliderPanel
		self.coopAreaIndicators = coopAreaIndicators
		self.messageBoardContainer = messageBoardContainer
		self.messageBoardPlayerIcon = messageBoardPlayerIcon
		self.messageBoardTxt = messageBoardTxt
		self.prefabCoopCashRecievedDisplay = prefabCoopCashRecievedDisplay
		self.prefabCoopIndicator = prefabCoopIndicator
		self.CoopButton = CoopButton
		self.openMenuButton = openMenuButton
		self.disconnectedSound = disconnectedSound
		self.playerIconFFA = playerIconFFA
		self.simulationInitailised = simulationInitailised
		self.RunOnCoopInitialised = RunOnCoopInitialised
		self.coopGame = coopGame
		self.placeTowersHereRoutine = placeTowersHereRoutine


class BossEventScreen:

    offsets = {'worldParent': 56, 'titleAnimator': 64, 'doorAnimator': 72, 'titleParent': 80, 'timeRemainingTxt': 88, 'normalTog': 96, 'normalTogImg': 104, 'eliteTog': 112, 'eliteTogImg': 120, 'eliteLockedPanel': 128, 'eliteUnlockedAnim': 136, 'startBossEventBtn': 144, 'bossInfoOpenBtn': 152, 'playPanel': 160, 'bossInfoPanel': 168, 'bossInfoBackgroundCloseBtn': 176, 'bossInfoNameTxt': 184, 'bossInfoIconImg': 192, 'bossInfoDescTxt': 200, 'bossInfoOkBtn': 208, 'bossInfoAnimator': 216, 'click2Sound': 224, 'bossEvent': 232, 'inGameData': 240, 'normalDcm': 384, 'eliteDcm': 392, 'worldAnimator': 400, 'doorState': 408, 'reOpenPlayPanel': 412}    
    def __init__(self, worldParent: UnityEngine.Transform, titleAnimator: UnityEngine.Animator, doorAnimator: UnityEngine.Animator, titleParent: UnityEngine.Transform, timeRemainingTxt: TMPro.TMP_Text, normalTog: UnityEngine.UI.Toggle, normalTogImg: UnityEngine.UI.Image, eliteTog: Assets.Scripts.Unity.UI_New.ToggleExtended, eliteTogImg: UnityEngine.UI.Image, eliteLockedPanel: UnityEngine.GameObject, eliteUnlockedAnim: UnityEngine.Animator, startBossEventBtn: UnityEngine.UI.Button, bossInfoOpenBtn: UnityEngine.UI.Button, playPanel: Assets.Scripts.Unity.UI_New.DailyChallenge.BossEventScreenPlayPanel, bossInfoPanel: UnityEngine.GameObject, bossInfoBackgroundCloseBtn: UnityEngine.UI.Button, bossInfoNameTxt: TMPro.TMP_Text, bossInfoIconImg: UnityEngine.UI.Image, bossInfoDescTxt: TMPro.TMP_Text, bossInfoOkBtn: UnityEngine.UI.Button, bossInfoAnimator: UnityEngine.Animator, click2Sound: UnityEngine.AudioClip, bossEvent: Assets.Scripts.Models.ServerEvents.BossEvent, inGameData: Assets.Scripts.Utils.Helpers.InGameData, normalDcm: Assets.Scripts.Models.ServerEvents.DailyChallengeModel, eliteDcm: Assets.Scripts.Models.ServerEvents.DailyChallengeModel, worldAnimator: UnityEngine.Animator, doorState: System.Int32, reOpenPlayPanel: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.worldParent = worldParent
		self.titleAnimator = titleAnimator
		self.doorAnimator = doorAnimator
		self.titleParent = titleParent
		self.timeRemainingTxt = timeRemainingTxt
		self.normalTog = normalTog
		self.normalTogImg = normalTogImg
		self.eliteTog = eliteTog
		self.eliteTogImg = eliteTogImg
		self.eliteLockedPanel = eliteLockedPanel
		self.eliteUnlockedAnim = eliteUnlockedAnim
		self.startBossEventBtn = startBossEventBtn
		self.bossInfoOpenBtn = bossInfoOpenBtn
		self.playPanel = playPanel
		self.bossInfoPanel = bossInfoPanel
		self.bossInfoBackgroundCloseBtn = bossInfoBackgroundCloseBtn
		self.bossInfoNameTxt = bossInfoNameTxt
		self.bossInfoIconImg = bossInfoIconImg
		self.bossInfoDescTxt = bossInfoDescTxt
		self.bossInfoOkBtn = bossInfoOkBtn
		self.bossInfoAnimator = bossInfoAnimator
		self.click2Sound = click2Sound
		self.bossEvent = bossEvent
		self.inGameData = inGameData
		self.normalDcm = normalDcm
		self.eliteDcm = eliteDcm
		self.worldAnimator = worldAnimator
		self.doorState = doorState
		self.reOpenPlayPanel = reOpenPlayPanel


class BossEventScreenPlayPanel:

    offsets = {'bossModeNormalImg': 24, 'bossModeEliteImg': 32, 'bossModeNormalObj': 40, 'bossModeEliteObj': 48, 'mapImg': 56, 'mapNameTxt': 64, 'difficultyTxt': 72, 'livesTxt': 80, 'cashTxt': 88, 'playBtn': 104, 'continueBtn': 112, 'backgroundCloseBtn': 120, 'moreRulesBtn': 128, 'animator': 136, 'startGameSound': 144, 'isOpen': 152, 'inGameData': 160, 'dcm': 304}    
    def __init__(self, bossModeNormalImg: UnityEngine.UI.Image, bossModeEliteImg: UnityEngine.UI.Image, bossModeNormalObj: UnityEngine.GameObject, bossModeEliteObj: UnityEngine.GameObject, mapImg: UnityEngine.UI.Image, mapNameTxt: TMPro.TMP_Text, difficultyTxt: TMPro.TMP_Text, livesTxt: TMPro.TMP_Text, cashTxt: TMPro.TMP_Text, playBtn: UnityEngine.UI.Button, continueBtn: UnityEngine.UI.Button, backgroundCloseBtn: UnityEngine.UI.Button, moreRulesBtn: UnityEngine.UI.Button, animator: UnityEngine.Animator, startGameSound: UnityEngine.AudioClip, isOpen: System.Boolean, inGameData: Assets.Scripts.Utils.Helpers.InGameData, dcm: Assets.Scripts.Models.ServerEvents.DailyChallengeModel, **kwargs):
        super().__init__(self, **kwargs)
		self.bossModeNormalImg = bossModeNormalImg
		self.bossModeEliteImg = bossModeEliteImg
		self.bossModeNormalObj = bossModeNormalObj
		self.bossModeEliteObj = bossModeEliteObj
		self.mapImg = mapImg
		self.mapNameTxt = mapNameTxt
		self.difficultyTxt = difficultyTxt
		self.livesTxt = livesTxt
		self.cashTxt = cashTxt
		self.playBtn = playBtn
		self.continueBtn = continueBtn
		self.backgroundCloseBtn = backgroundCloseBtn
		self.moreRulesBtn = moreRulesBtn
		self.animator = animator
		self.startGameSound = startGameSound
		self.isOpen = isOpen
		self.inGameData = inGameData
		self.dcm = dcm


class BossEventScreenTierRewardPanel:

    offsets = {'defaultBg': 24, 'completedBg': 32, 'tierTitleTxt': 40, 'lootPanel': 48}    
    def __init__(self, defaultBg: UnityEngine.GameObject, completedBg: UnityEngine.GameObject, tierTitleTxt: TMPro.TMP_Text, lootPanel: Assets.Scripts.Unity.UI_New.Store.LootPanel, **kwargs):
        super().__init__(self, **kwargs)
		self.defaultBg = defaultBg
		self.completedBg = completedBg
		self.tierTitleTxt = tierTitleTxt
		self.lootPanel = lootPanel


class DCModPowerDisplay:

    offsets = {'plusBtn': 56, 'minusBtn': 64, 'addRemoveBtn': 72, 'powerData': 80}    
    def __init__(self, plusBtn: UnityEngine.UI.Button, minusBtn: UnityEngine.UI.Button, addRemoveBtn: UnityEngine.UI.Button, powerData: Assets.Scripts.Models.ServerEvents.PowerData, **kwargs):
        super().__init__(self, **kwargs)
		self.plusBtn = plusBtn
		self.minusBtn = minusBtn
		self.addRemoveBtn = addRemoveBtn
		self.powerData = powerData


class DCModTowerDisplay:

    offsets = {'plusBtn': 64, 'minusBtn': 72, 'addRemoveBtn': 80, 'towerData': 88}    
    def __init__(self, plusBtn: UnityEngine.UI.Button, minusBtn: UnityEngine.UI.Button, addRemoveBtn: UnityEngine.UI.Button, towerData: Assets.Scripts.Models.ServerEvents.TowerData, **kwargs):
        super().__init__(self, **kwargs)
		self.plusBtn = plusBtn
		self.minusBtn = minusBtn
		self.addRemoveBtn = addRemoveBtn
		self.towerData = towerData


class DCModTowerDisplayRestriction:

    offsets = {'imgLoader': 24, 'towerData': 32, 'text': 40, 'selectedTowerHighlight': 48, 'parentScript': 56}    
    def __init__(self, imgLoader: TowerImageLoader, towerData: Assets.Scripts.Models.ServerEvents.TowerData, text: NK_TextMeshProUGUI, selectedTowerHighlight: UnityEngine.GameObject, parentScript: Assets.Scripts.Unity.UI_New.DailyChallenge.DCModTowerPathRestriction, **kwargs):
        super().__init__(self, **kwargs)
		self.imgLoader = imgLoader
		self.towerData = towerData
		self.text = text
		self.selectedTowerHighlight = selectedTowerHighlight
		self.parentScript = parentScript


class DCModTowerPathRestriction:

    offsets = {'lastValueSlider1': 24, 'lastValueSlider2': 28, 'lastValueSlider3': 32, 'towerName': 40, 'towerUpgrades': 48, 'path1': 56, 'path2': 64, 'path3': 72, 'bckgroundBackBtn': 104, 'applyAllBtn': 112, 'resetAllBtn': 120, 'towersList': 128, 'towerPrefab': 136, 'heroPrefab': 144, 'selectedTower': 152, 'towerContainer': 160}    
    def __init__(self, lastValueSlider1: System.Int32, lastValueSlider2: System.Int32, lastValueSlider3: System.Int32, towerName: NK_TextMeshProUGUI, towerUpgrades: NK_TextMeshProUGUI, path1: UnityEngine.UI.Slider, path2: UnityEngine.UI.Slider, path3: UnityEngine.UI.Slider, bckgroundBackBtn: UnityEngine.UI.Button, applyAllBtn: UnityEngine.UI.Button, resetAllBtn: UnityEngine.UI.Button, towersList: UnityEngine.Transform, towerPrefab: UnityEngine.GameObject, heroPrefab: UnityEngine.GameObject, selectedTower: Assets.Scripts.Unity.UI_New.DailyChallenge.DCModTowerDisplayRestriction, towerContainer: Assets.Scripts.Unity.UI_New.ChallengeEditor.TowerContainer, **kwargs):
        super().__init__(self, **kwargs)
		self.lastValueSlider1 = lastValueSlider1
		self.lastValueSlider2 = lastValueSlider2
		self.lastValueSlider3 = lastValueSlider3
		self.towerName = towerName
		self.towerUpgrades = towerUpgrades
		self.path1 = path1
		self.path2 = path2
		self.path3 = path3
		self.bckgroundBackBtn = bckgroundBackBtn
		self.applyAllBtn = applyAllBtn
		self.resetAllBtn = resetAllBtn
		self.towersList = towersList
		self.towerPrefab = towerPrefab
		self.heroPrefab = heroPrefab
		self.selectedTower = selectedTower
		self.towerContainer = towerContainer


class DCPowerDisplay:

    offsets = {'imgLoader': 24, 'powerCountGO': 32, 'powerCountTxt': 40, 'excludedGO': 48}    
    def __init__(self, imgLoader: PowerImageLoader, powerCountGO: UnityEngine.GameObject, powerCountTxt: TMPro.TMP_Text, excludedGO: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.imgLoader = imgLoader
		self.powerCountGO = powerCountGO
		self.powerCountTxt = powerCountTxt
		self.excludedGO = excludedGO


class DCRestrictionUpgradeDisplay:

    offsets = {'img': 24, 'restrictedIconObj': 32, 'abilityIconObj': 40, 'upgradeName': 48, 'parent': 56, 'abilityIcon': 64, 'slider': 72, 'zeroButton': 80, 'buttonNumber': 88, 'towerData': 96, 'path': 104, 'tier': 108}    
    def __init__(self, img: UnityEngine.UI.Image, restrictedIconObj: UnityEngine.GameObject, abilityIconObj: UnityEngine.GameObject, upgradeName: NK_TextMeshProUGUI, parent: Assets.Scripts.Unity.UI_New.DailyChallenge.DCModTowerPathRestriction, abilityIcon: UnityEngine.GameObject, slider: Assets.Scripts.Unity.Utils.CustomDcSliderWithDeadzone, zeroButton: UnityEngine.UI.Button, buttonNumber: System.Int32, towerData: Assets.Scripts.Models.ServerEvents.TowerData, path: System.Int32, tier: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.img = img
		self.restrictedIconObj = restrictedIconObj
		self.abilityIconObj = abilityIconObj
		self.upgradeName = upgradeName
		self.parent = parent
		self.abilityIcon = abilityIcon
		self.slider = slider
		self.zeroButton = zeroButton
		self.buttonNumber = buttonNumber
		self.towerData = towerData
		self.path = path
		self.tier = tier


class DCTowerDisplay:

    offsets = {'imgLoader': 24, 'towerCountGO': 32, 'towerCountTxt': 40, 'excludedGO': 48, 'excludedTowerPaths': 56}    
    def __init__(self, imgLoader: TowerImageLoader, towerCountGO: UnityEngine.GameObject, towerCountTxt: TMPro.TMP_Text, excludedGO: UnityEngine.GameObject, excludedTowerPaths: NK_TextMeshProUGUI, **kwargs):
        super().__init__(self, **kwargs)
		self.imgLoader = imgLoader
		self.towerCountGO = towerCountGO
		self.towerCountTxt = towerCountTxt
		self.excludedGO = excludedGO
		self.excludedTowerPaths = excludedTowerPaths


class DailyChallengeScreen:

    offsets = {'title': 56, 'titleBannerImg': 64, 'mapName': 80, 'difficulty': 88, 'continueBtn': 96, 'continueTxt': 104, 'playBtn': 112, 'mapImage': 120, 'difficultyImage': 128, 'lootPanel': 136, 'towerDisplayPrefab': 152, 'selectedHeroDisplayPrefab': 160, 'towerContainer': 168, 'towerScrollRect': 176, 'grayscaleMaterial': 184, 'lockedMessagePanel': 192, 'date': 200, 'timeRemaining': 208, 'rewards': 216, 'claimedPanel': 224, 'monkeysAvaliableTxt': 232, 'monkeysExcludedTxtColor': 240, 'maxTowerObject': 256, 'maxTowerTxt': 264, 'modifierContent': 272, 'modifierPrefab': 280, 'modTheme': 288, 'modifierInfo': 296, 'regularButtons': 304, 'coopButtons': 312, 'coopQuickMatchBtn': 320, 'coopCreateMatchBtn': 328, 'coopJoinMatchBtn': 336, 'lookingForGame': 344, 'challengeRulesButton': 352, 'savedData': 360, 'dcm': 368, 'locked': 376, 'modDownStartTime': 380, 'playDownStartTime': 384, 'playPopupDelay': 388, 'modPopupDelay': 392, 'setScrollPosition': 396, 'inGameData': 400, 'isClosed': 544}    
    def __init__(self, title: TMPro.TMP_Text, titleBannerImg: UnityEngine.UI.Image, mapName: TMPro.TMP_Text, difficulty: TMPro.TMP_Text, continueBtn: UnityEngine.UI.Button, continueTxt: TMPro.TMP_Text, playBtn: Assets.Scripts.Unity.UI_New.ButtonExtended, mapImage: UnityEngine.UI.Image, difficultyImage: UnityEngine.UI.Image, lootPanel: Assets.Scripts.Unity.UI_New.Store.LootPanel, towerDisplayPrefab: UnityEngine.GameObject, selectedHeroDisplayPrefab: UnityEngine.GameObject, towerContainer: UnityEngine.Transform, towerScrollRect: UnityEngine.UI.ScrollRect, grayscaleMaterial: UnityEngine.Material, lockedMessagePanel: UnityEngine.GameObject, date: TMPro.TMP_Text, timeRemaining: TMPro.TMP_Text, rewards: TMPro.TMP_Text, claimedPanel: UnityEngine.GameObject, monkeysAvaliableTxt: TMPro.TMP_Text, monkeysExcludedTxtColor: UnityEngine.Color, maxTowerObject: UnityEngine.GameObject, maxTowerTxt: TMPro.TMP_Text, modifierContent: UnityEngine.Transform, modifierPrefab: UnityEngine.GameObject, modTheme: Assets.Scripts.Unity.UI_New.Store.ModIconTheme, modifierInfo: UnityEngine.GameObject, regularButtons: UnityEngine.GameObject, coopButtons: UnityEngine.GameObject, coopQuickMatchBtn: UnityEngine.UI.Button, coopCreateMatchBtn: UnityEngine.UI.Button, coopJoinMatchBtn: UnityEngine.UI.Button, lookingForGame: UnityEngine.Animator, challengeRulesButton: UnityEngine.GameObject, savedData: Assets.Scripts.Models.Profile.MapSaveDataModel, dcm: Assets.Scripts.Models.ServerEvents.DailyChallengeModel, locked: System.Boolean, modDownStartTime: System.Single, playDownStartTime: System.Single, playPopupDelay: System.Single, modPopupDelay: System.Single, setScrollPosition: System.Int32, inGameData: Assets.Scripts.Utils.Helpers.InGameData, isClosed: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.title = title
		self.titleBannerImg = titleBannerImg
		self.mapName = mapName
		self.difficulty = difficulty
		self.continueBtn = continueBtn
		self.continueTxt = continueTxt
		self.playBtn = playBtn
		self.mapImage = mapImage
		self.difficultyImage = difficultyImage
		self.lootPanel = lootPanel
		self.towerDisplayPrefab = towerDisplayPrefab
		self.selectedHeroDisplayPrefab = selectedHeroDisplayPrefab
		self.towerContainer = towerContainer
		self.towerScrollRect = towerScrollRect
		self.grayscaleMaterial = grayscaleMaterial
		self.lockedMessagePanel = lockedMessagePanel
		self.date = date
		self.timeRemaining = timeRemaining
		self.rewards = rewards
		self.claimedPanel = claimedPanel
		self.monkeysAvaliableTxt = monkeysAvaliableTxt
		self.monkeysExcludedTxtColor = monkeysExcludedTxtColor
		self.maxTowerObject = maxTowerObject
		self.maxTowerTxt = maxTowerTxt
		self.modifierContent = modifierContent
		self.modifierPrefab = modifierPrefab
		self.modTheme = modTheme
		self.modifierInfo = modifierInfo
		self.regularButtons = regularButtons
		self.coopButtons = coopButtons
		self.coopQuickMatchBtn = coopQuickMatchBtn
		self.coopCreateMatchBtn = coopCreateMatchBtn
		self.coopJoinMatchBtn = coopJoinMatchBtn
		self.lookingForGame = lookingForGame
		self.challengeRulesButton = challengeRulesButton
		self.savedData = savedData
		self.dcm = dcm
		self.locked = locked
		self.modDownStartTime = modDownStartTime
		self.playDownStartTime = playDownStartTime
		self.playPopupDelay = playPopupDelay
		self.modPopupDelay = modPopupDelay
		self.setScrollPosition = setScrollPosition
		self.inGameData = inGameData
		self.isClosed = isClosed


class RaceEventScreen:

    offsets = {'mapName': 56, 'difficulty': 64, 'playBtn': 72, 'playBtnLockObj': 80, 'playBtnEntryCostObj': 88, 'playBtnEntryCostTxt': 96, 'freeEntryTimerObj': 104, 'freeEntryTimeTxt': 112, 'freeEntriesObj': 120, 'freeEntriesTxt': 128, 'mapImage': 136, 'towerDisplayPrefab': 144, 'selectedHeroDisplayPrefab': 152, 'towerContainer': 160, 'towerScrollRect': 168, 'grayscaleMaterial': 176, 'lockedMessagePanel': 184, 'date': 192, 'timeRemaining': 200, 'monkeysAvaliableTxt': 208, 'monkeysExcludedTxtColor': 216, 'maxTowerObject': 232, 'maxTowerTxt': 240, 'modifierContent': 248, 'modifierPrefab': 256, 'modTheme': 264, 'modifierInfo': 272, 'trophiesTxt': 280, 'leaderboardBtn': 288, 'raceBuyPassesBtn': 296, 'racePassCountObj': 304, 'racePassCountTxt': 312, 'race': 320, 'raceEvent': 328, 'dcm': 336, 'locked': 344, 'playDownStartTime': 348, 'modDownStartTime': 352, 'playPopupDelay': 356, 'modPopupDelay': 360, 'setScrollPosition': 364, 'raceEntryCost': 368, 'isStartingGame': 376, 'startMethod': 380}    
    def __init__(self, mapName: TMPro.TMP_Text, difficulty: TMPro.TMP_Text, playBtn: Assets.Scripts.Unity.UI_New.ButtonExtended, playBtnLockObj: UnityEngine.GameObject, playBtnEntryCostObj: UnityEngine.GameObject, playBtnEntryCostTxt: TMPro.TMP_Text, freeEntryTimerObj: UnityEngine.GameObject, freeEntryTimeTxt: TMPro.TMP_Text, freeEntriesObj: UnityEngine.GameObject, freeEntriesTxt: TMPro.TMP_Text, mapImage: UnityEngine.UI.Image, towerDisplayPrefab: UnityEngine.GameObject, selectedHeroDisplayPrefab: UnityEngine.GameObject, towerContainer: UnityEngine.Transform, towerScrollRect: UnityEngine.UI.ScrollRect, grayscaleMaterial: UnityEngine.Material, lockedMessagePanel: UnityEngine.GameObject, date: TMPro.TMP_Text, timeRemaining: TMPro.TMP_Text, monkeysAvaliableTxt: TMPro.TMP_Text, monkeysExcludedTxtColor: UnityEngine.Color, maxTowerObject: UnityEngine.GameObject, maxTowerTxt: TMPro.TMP_Text, modifierContent: UnityEngine.Transform, modifierPrefab: UnityEngine.GameObject, modTheme: Assets.Scripts.Unity.UI_New.Store.ModIconTheme, modifierInfo: UnityEngine.GameObject, trophiesTxt: TMPro.TMP_Text, leaderboardBtn: UnityEngine.UI.Button, raceBuyPassesBtn: UnityEngine.UI.Button, racePassCountObj: UnityEngine.GameObject, racePassCountTxt: TMPro.TMP_Text, race: Assets.Scripts.Models.ServerEvents.Race, raceEvent: Assets.Scripts.Models.ServerEvents.RaceEvent, dcm: Assets.Scripts.Models.ServerEvents.DailyChallengeModel, locked: System.Boolean, playDownStartTime: System.Single, modDownStartTime: System.Single, playPopupDelay: System.Single, modPopupDelay: System.Single, setScrollPosition: System.Int32, raceEntryCost: Assets.Scripts.Utils.KonFuze, isStartingGame: System.Boolean, startMethod: Assets.Scripts.Unity.Player.Btd6Player.RaceStartMethod, **kwargs):
        super().__init__(self, **kwargs)
		self.mapName = mapName
		self.difficulty = difficulty
		self.playBtn = playBtn
		self.playBtnLockObj = playBtnLockObj
		self.playBtnEntryCostObj = playBtnEntryCostObj
		self.playBtnEntryCostTxt = playBtnEntryCostTxt
		self.freeEntryTimerObj = freeEntryTimerObj
		self.freeEntryTimeTxt = freeEntryTimeTxt
		self.freeEntriesObj = freeEntriesObj
		self.freeEntriesTxt = freeEntriesTxt
		self.mapImage = mapImage
		self.towerDisplayPrefab = towerDisplayPrefab
		self.selectedHeroDisplayPrefab = selectedHeroDisplayPrefab
		self.towerContainer = towerContainer
		self.towerScrollRect = towerScrollRect
		self.grayscaleMaterial = grayscaleMaterial
		self.lockedMessagePanel = lockedMessagePanel
		self.date = date
		self.timeRemaining = timeRemaining
		self.monkeysAvaliableTxt = monkeysAvaliableTxt
		self.monkeysExcludedTxtColor = monkeysExcludedTxtColor
		self.maxTowerObject = maxTowerObject
		self.maxTowerTxt = maxTowerTxt
		self.modifierContent = modifierContent
		self.modifierPrefab = modifierPrefab
		self.modTheme = modTheme
		self.modifierInfo = modifierInfo
		self.trophiesTxt = trophiesTxt
		self.leaderboardBtn = leaderboardBtn
		self.raceBuyPassesBtn = raceBuyPassesBtn
		self.racePassCountObj = racePassCountObj
		self.racePassCountTxt = racePassCountTxt
		self.race = race
		self.raceEvent = raceEvent
		self.dcm = dcm
		self.locked = locked
		self.playDownStartTime = playDownStartTime
		self.modDownStartTime = modDownStartTime
		self.playPopupDelay = playPopupDelay
		self.modPopupDelay = modPopupDelay
		self.setScrollPosition = setScrollPosition
		self.raceEntryCost = raceEntryCost
		self.isStartingGame = isStartingGame
		self.startMethod = startMethod


class BloonCauseDeathDisplay:

    offsets = {'icon': 24, 'damageTxt': 32}    
    def __init__(self, icon: UnityEngine.UI.Image, damageTxt: NK_TextMeshProUGUI, **kwargs):
        super().__init__(self, **kwargs)
		self.icon = icon
		self.damageTxt = damageTxt


class BannerPanel:

    offsets = {'image': 32, 'date': 40, 'button': 48, 'dateContainer': 56, 'model': 64}    
    def __init__(self, image: UnityEngine.UI.Image, date: TMPro.TMP_Text, button: UnityEngine.UI.Button, dateContainer: UnityEngine.GameObject, model: Assets.Scripts.Models.ServerEvents.BannerEvent, **kwargs):
        super().__init__(self, **kwargs)
		self.image = image
		self.date = date
		self.button = button
		self.dateContainer = dateContainer
		self.model = model


class BossEventPanel:

    offsets = {'image': 32, 'date': 40, 'goBtn': 48, 'panelBtn': 56, 'bossEvent': 64}    
    def __init__(self, image: UnityEngine.UI.Image, date: TMPro.TMP_Text, goBtn: UnityEngine.UI.Button, panelBtn: UnityEngine.UI.Button, bossEvent: Assets.Scripts.Models.ServerEvents.BossEvent, **kwargs):
        super().__init__(self, **kwargs)
		self.image = image
		self.date = date
		self.goBtn = goBtn
		self.panelBtn = panelBtn
		self.bossEvent = bossEvent


class ChallengeBrowserPanel:

    offsets = {'image': 32, 'goBtn': 40, 'panelBtn': 48}    
    def __init__(self, image: UnityEngine.UI.Image, goBtn: UnityEngine.UI.Button, panelBtn: UnityEngine.UI.Button, **kwargs):
        super().__init__(self, **kwargs)
		self.image = image
		self.goBtn = goBtn
		self.panelBtn = panelBtn


class CrossPromoPanel:

    offsets = {'image': 32, 'linkUrl': 40}    
    def __init__(self, image: UnityEngine.UI.Image, linkUrl: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.image = image
		self.linkUrl = linkUrl


class DailyChallengePanel:

    offsets = {'title': 32, 'mapName': 40, 'difficulty': 48, 'date': 56, 'titleBannerImg': 64, 'titleBannerIconImg': 80, 'goBtn': 96, 'panelBtn': 104, 'lootPanel': 112, 'claimedPanel': 120, 'showChalIDBtn': 128, 'showChalIDTxt': 136, 'dcm': 144}    
    def __init__(self, title: TMPro.TMP_Text, mapName: TMPro.TMP_Text, difficulty: TMPro.TMP_Text, date: TMPro.TMP_Text, titleBannerImg: UnityEngine.UI.Image, titleBannerIconImg: UnityEngine.UI.Image, goBtn: UnityEngine.UI.Button, panelBtn: UnityEngine.UI.Button, lootPanel: Assets.Scripts.Unity.UI_New.Store.LootPanel, claimedPanel: UnityEngine.GameObject, showChalIDBtn: UnityEngine.UI.Button, showChalIDTxt: UnityEngine.UI.InputField, dcm: Assets.Scripts.Models.ServerEvents.DailyChallengeModel, **kwargs):
        super().__init__(self, **kwargs)
		self.title = title
		self.mapName = mapName
		self.difficulty = difficulty
		self.date = date
		self.titleBannerImg = titleBannerImg
		self.titleBannerIconImg = titleBannerIconImg
		self.goBtn = goBtn
		self.panelBtn = panelBtn
		self.lootPanel = lootPanel
		self.claimedPanel = claimedPanel
		self.showChalIDBtn = showChalIDBtn
		self.showChalIDTxt = showChalIDTxt
		self.dcm = dcm


class GameEventPanel:

    offsets = {'panelPriority': 24, 'panelDestroyed': 28}    
    def __init__(self, panelPriority: System.Int32, panelDestroyed: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.panelPriority = panelPriority
		self.panelDestroyed = panelDestroyed


class GameEventsScreen:

    offsets = {'dailyChallengePrefab': 56, 'storeEventPrefab': 64, 'crossPromoPrefab': 72, 'raceEventPrefab': 80, 'bossEventPrefab': 88, 'odysseyEventPrefab': 96, 'challengeBrowserPrefab': 104, 'bannerPrefab': 112, 'container': 120, 'panels': 128, 'cache': 136, 'saleEvents': 144, 'bannerEvents': 152, 'raceEvent': 160, 'bossEvent': 168, 'odysseyEvent': 176, 'cdc': 184, 'screenDestroyed': 192, 'loadedPanels': 193}    
    def __init__(self, dailyChallengePrefab: Assets.Scripts.Unity.UI_New.GameEvents.DailyChallengePanel, storeEventPrefab: Assets.Scripts.Unity.UI_New.GameEvents.StoreEventPanel, crossPromoPrefab: Assets.Scripts.Unity.UI_New.GameEvents.CrossPromoPanel, raceEventPrefab: Assets.Scripts.Unity.UI_New.GameEvents.RaceEventPanel, bossEventPrefab: Assets.Scripts.Unity.UI_New.GameEvents.BossEventPanel, odysseyEventPrefab: Assets.Scripts.Unity.UI_New.GameEvents.OdysseyEventPanel, challengeBrowserPrefab: Assets.Scripts.Unity.UI_New.GameEvents.ChallengeBrowserPanel, bannerPrefab: Assets.Scripts.Unity.UI_New.GameEvents.BannerPanel, container: UnityEngine.Transform, panels: Assets.Scripts.Utils.SizedList<Assets.Scripts.Unity.UI_New.GameEvents.GameEventPanel>, cache: NinjaKiwi.Players.Caching.TaskCache, saleEvents: System.Collections.Generic.IEnumerable<Assets.Scripts.Models.ServerEvents.IapEvent>, bannerEvents: System.Collections.Generic.IEnumerable<Assets.Scripts.Models.ServerEvents.BannerEvent>, raceEvent: Assets.Scripts.Models.ServerEvents.RaceEvent, bossEvent: Assets.Scripts.Models.ServerEvents.BossEvent, odysseyEvent: Assets.Scripts.Models.ServerEvents.OdysseyEvent, cdc: Assets.Scripts.Models.ServerEvents.DailyChallengeModel, screenDestroyed: System.Boolean, loadedPanels: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.dailyChallengePrefab = dailyChallengePrefab
		self.storeEventPrefab = storeEventPrefab
		self.crossPromoPrefab = crossPromoPrefab
		self.raceEventPrefab = raceEventPrefab
		self.bossEventPrefab = bossEventPrefab
		self.odysseyEventPrefab = odysseyEventPrefab
		self.challengeBrowserPrefab = challengeBrowserPrefab
		self.bannerPrefab = bannerPrefab
		self.container = container
		self.panels = panels
		self.cache = cache
		self.saleEvents = saleEvents
		self.bannerEvents = bannerEvents
		self.raceEvent = raceEvent
		self.bossEvent = bossEvent
		self.odysseyEvent = odysseyEvent
		self.cdc = cdc
		self.screenDestroyed = screenDestroyed
		self.loadedPanels = loadedPanels


class OdysseyEventPanel:

    offsets = {'image': 32, 'date': 40, 'goBtn': 48, 'panelBtn': 56, 'odysseyEvent': 64}    
    def __init__(self, image: UnityEngine.UI.Image, date: TMPro.TMP_Text, goBtn: UnityEngine.UI.Button, panelBtn: UnityEngine.UI.Button, odysseyEvent: Assets.Scripts.Models.ServerEvents.OdysseyEvent, **kwargs):
        super().__init__(self, **kwargs)
		self.image = image
		self.date = date
		self.goBtn = goBtn
		self.panelBtn = panelBtn
		self.odysseyEvent = odysseyEvent


class RaceEventPanel:

    offsets = {'image': 32, 'date': 40, 'goBtn': 48, 'panelBtn': 56, 'raceEvent': 64}    
    def __init__(self, image: UnityEngine.UI.Image, date: TMPro.TMP_Text, goBtn: UnityEngine.UI.Button, panelBtn: UnityEngine.UI.Button, raceEvent: Assets.Scripts.Models.ServerEvents.RaceEvent, **kwargs):
        super().__init__(self, **kwargs)
		self.image = image
		self.date = date
		self.goBtn = goBtn
		self.panelBtn = panelBtn
		self.raceEvent = raceEvent


class StoreEventPanel:

    offsets = {'image': 32, 'date': 40, 'dateContainer': 48, 'model': 56}    
    def __init__(self, image: UnityEngine.UI.Image, date: TMPro.TMP_Text, dateContainer: UnityEngine.GameObject, model: Assets.Scripts.Models.ServerEvents.IapEvent, **kwargs):
        super().__init__(self, **kwargs)
		self.image = image
		self.date = date
		self.dateContainer = dateContainer
		self.model = model


class BossDefeatScreen:

    offsets = {'bossIcon': 56, 'title': 64, 'finalRoundTxt': 72, 'bestRoundTxt': 80, 'bestRoundTxt2': 88, 'bestRoundObj': 96, 'newBestRoundObj': 104, 'homeButton': 112, 'restartButton': 120, 'continueButton': 128, 'continueCostTxt': 136, 'continueDescTxt': 144, 'defeatSound': 152, 'lostToBossTxt': 160, 'continuePrice': 168}    
    def __init__(self, bossIcon: UnityEngine.UI.Image, title: TMPro.TMP_Text, finalRoundTxt: TMPro.TMP_Text, bestRoundTxt: TMPro.TMP_Text, bestRoundTxt2: TMPro.TMP_Text, bestRoundObj: UnityEngine.GameObject, newBestRoundObj: UnityEngine.GameObject, homeButton: UnityEngine.UI.Button, restartButton: UnityEngine.UI.Button, continueButton: UnityEngine.UI.Button, continueCostTxt: TMPro.TMP_Text, continueDescTxt: TMPro.TMP_Text, defeatSound: UnityEngine.AudioClip, lostToBossTxt: TMPro.TMP_Text, continuePrice: Assets.Scripts.Utils.KonFuze, **kwargs):
        super().__init__(self, **kwargs)
		self.bossIcon = bossIcon
		self.title = title
		self.finalRoundTxt = finalRoundTxt
		self.bestRoundTxt = bestRoundTxt
		self.bestRoundTxt2 = bestRoundTxt2
		self.bestRoundObj = bestRoundObj
		self.newBestRoundObj = newBestRoundObj
		self.homeButton = homeButton
		self.restartButton = restartButton
		self.continueButton = continueButton
		self.continueCostTxt = continueCostTxt
		self.continueDescTxt = continueDescTxt
		self.defeatSound = defeatSound
		self.lostToBossTxt = lostToBossTxt
		self.continuePrice = continuePrice


class BossVictoryScreen:

    offsets = {'bossIcon': 56, 'defeatedBossTxt': 64, 'bestTimeTxt': 72, 'bestTimeObj': 80, 'worseTimeObj': 88, 'bestTimeColor': 96, 'worseTimeColor': 112, 'currTimeObj': 128, 'currTimeTxt': 136, 'rewardsObj': 144, 'lootPanel': 152, 'claimedRewardsObj': 160, 'playAgainBtn': 168, 'homeBtn': 176, 'leaderboardBtn': 184, 'victorySound': 192, 'bossEvent': 200, 'inGameData': 208}    
    def __init__(self, bossIcon: UnityEngine.UI.Image, defeatedBossTxt: TMPro.TMP_Text, bestTimeTxt: TMPro.TextMeshProUGUI, bestTimeObj: UnityEngine.GameObject, worseTimeObj: UnityEngine.GameObject, bestTimeColor: UnityEngine.Color, worseTimeColor: UnityEngine.Color, currTimeObj: UnityEngine.GameObject, currTimeTxt: TMPro.TextMeshProUGUI, rewardsObj: UnityEngine.GameObject, lootPanel: Assets.Scripts.Unity.UI_New.Store.LootPanel, claimedRewardsObj: UnityEngine.GameObject, playAgainBtn: UnityEngine.UI.Button, homeBtn: UnityEngine.UI.Button, leaderboardBtn: UnityEngine.UI.Button, victorySound: UnityEngine.AudioClip, bossEvent: Assets.Scripts.Models.ServerEvents.BossEvent, inGameData: Assets.Scripts.Utils.Helpers.InGameData, **kwargs):
        super().__init__(self, **kwargs)
		self.bossIcon = bossIcon
		self.defeatedBossTxt = defeatedBossTxt
		self.bestTimeTxt = bestTimeTxt
		self.bestTimeObj = bestTimeObj
		self.worseTimeObj = worseTimeObj
		self.bestTimeColor = bestTimeColor
		self.worseTimeColor = worseTimeColor
		self.currTimeObj = currTimeObj
		self.currTimeTxt = currTimeTxt
		self.rewardsObj = rewardsObj
		self.lootPanel = lootPanel
		self.claimedRewardsObj = claimedRewardsObj
		self.playAgainBtn = playAgainBtn
		self.homeBtn = homeBtn
		self.leaderboardBtn = leaderboardBtn
		self.victorySound = victorySound
		self.bossEvent = bossEvent
		self.inGameData = inGameData


class CoopDefeatScreen:

    offsets = {'continueCost': 56, 'finalRound': 64, 'homeButton': 72, 'restartButton': 80, 'continueButton': 88, 'defeatSound': 96, 'continuePrice': 104, 'restartInteractableCount': 112, 'coopCalloutUiData': 128, 'calloutManager': 136, 'coopGame': 144, 'animator': 152, 'animatorState': 160, 'title': 168, 'bloonCauseDeathDisplayPrefab': 176, 'bloonCoDContainer': 184, 'bloonCauseDeathDisplayList': 192, 'timer': 200, 'startRestartEnabledTimeLimitCountdown': 208}    
    def __init__(self, continueCost: TMPro.TextMeshProUGUI, finalRound: TMPro.TextMeshProUGUI, homeButton: UnityEngine.UI.Button, restartButton: UnityEngine.UI.Button, continueButton: UnityEngine.UI.Button, defeatSound: UnityEngine.AudioClip, continuePrice: Assets.Scripts.Utils.KonFuze, restartInteractableCount: System.Int32, coopCalloutUiData: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Callouts.CalloutUiData>, calloutManager: Assets.Scripts.Unity.UI_New.Callouts.CalloutManager, coopGame: Assets.Scripts.Unity.Network.Btd6CoopGame, animator: UnityEngine.Animator, animatorState: System.Int32, title: TMPro.TextMeshProUGUI, bloonCauseDeathDisplayPrefab: Assets.Scripts.Unity.UI_New.EndGame.BloonCauseDeathDisplay, bloonCoDContainer: UnityEngine.GameObject, bloonCauseDeathDisplayList: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.EndGame.BloonCauseDeathDisplay>, timer: System.Int32, startRestartEnabledTimeLimitCountdown: UnityEngine.Coroutine, **kwargs):
        super().__init__(self, **kwargs)
		self.continueCost = continueCost
		self.finalRound = finalRound
		self.homeButton = homeButton
		self.restartButton = restartButton
		self.continueButton = continueButton
		self.defeatSound = defeatSound
		self.continuePrice = continuePrice
		self.restartInteractableCount = restartInteractableCount
		self.coopCalloutUiData = coopCalloutUiData
		self.calloutManager = calloutManager
		self.coopGame = coopGame
		self.animator = animator
		self.animatorState = animatorState
		self.title = title
		self.bloonCauseDeathDisplayPrefab = bloonCauseDeathDisplayPrefab
		self.bloonCoDContainer = bloonCoDContainer
		self.bloonCauseDeathDisplayList = bloonCauseDeathDisplayList
		self.timer = timer
		self.startRestartEnabledTimeLimitCountdown = startRestartEnabledTimeLimitCountdown


class DefeatScreen:

    offsets = {'continueCostTxt': 56, 'finalRoundTxt': 64, 'retryMMCost': 72, 'continuePrice': 80, 'homeButton': 88, 'restartButton': 96, 'retryForMMButton': 104, 'continueButton': 112, 'retryLastRoundButton': 120, 'buyRacePassesButton': 128, 'retryMMCostTxt': 136, 'regularObject': 144, 'userChalObject': 152, 'likeTgl': 160, 'likeTglEnabledBg': 168, 'ratingCountTxt': 176, 'favouriteTgl': 184, 'userChalFinalRoundTxt': 192, 'defeatSound': 200, 'bloonCauseDeathDisplayPrefab': 208, 'bloonCoDContainer': 216, 'bloonCauseDeathDisplayList': 224, 'raceEvent': 232, 'calloutUiData': 240, 'calloutManager': 248, 'playerStats': 256, 'animator': 264, 'animatorState': 272, 'title': 280, 'startMethod': 288}    
    def __init__(self, continueCostTxt: TMPro.TMP_Text, finalRoundTxt: TMPro.TMP_Text, retryMMCost: Assets.Scripts.Utils.KonFuze, continuePrice: Assets.Scripts.Utils.KonFuze, homeButton: UnityEngine.UI.Button, restartButton: UnityEngine.UI.Button, retryForMMButton: UnityEngine.UI.Button, continueButton: UnityEngine.UI.Button, retryLastRoundButton: UnityEngine.UI.Button, buyRacePassesButton: UnityEngine.UI.Button, retryMMCostTxt: TMPro.TextMeshProUGUI, regularObject: UnityEngine.GameObject, userChalObject: UnityEngine.GameObject, likeTgl: UnityEngine.UI.Toggle, likeTglEnabledBg: UnityEngine.GameObject, ratingCountTxt: TMPro.TMP_Text, favouriteTgl: UnityEngine.UI.Toggle, userChalFinalRoundTxt: TMPro.TMP_Text, defeatSound: UnityEngine.AudioClip, bloonCauseDeathDisplayPrefab: Assets.Scripts.Unity.UI_New.EndGame.BloonCauseDeathDisplay, bloonCoDContainer: UnityEngine.GameObject, bloonCauseDeathDisplayList: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.EndGame.BloonCauseDeathDisplay>, raceEvent: Assets.Scripts.Models.ServerEvents.RaceEvent, calloutUiData: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Callouts.CalloutUiData>, calloutManager: Assets.Scripts.Unity.UI_New.Callouts.CalloutManager, playerStats: Assets.Scripts.Unity.UI_New.GameOver.SinglePlayerStatsPanel, animator: UnityEngine.Animator, animatorState: System.Int32, title: TMPro.TextMeshProUGUI, startMethod: Assets.Scripts.Unity.Player.Btd6Player.RaceStartMethod, **kwargs):
        super().__init__(self, **kwargs)
		self.continueCostTxt = continueCostTxt
		self.finalRoundTxt = finalRoundTxt
		self.retryMMCost = retryMMCost
		self.continuePrice = continuePrice
		self.homeButton = homeButton
		self.restartButton = restartButton
		self.retryForMMButton = retryForMMButton
		self.continueButton = continueButton
		self.retryLastRoundButton = retryLastRoundButton
		self.buyRacePassesButton = buyRacePassesButton
		self.retryMMCostTxt = retryMMCostTxt
		self.regularObject = regularObject
		self.userChalObject = userChalObject
		self.likeTgl = likeTgl
		self.likeTglEnabledBg = likeTglEnabledBg
		self.ratingCountTxt = ratingCountTxt
		self.favouriteTgl = favouriteTgl
		self.userChalFinalRoundTxt = userChalFinalRoundTxt
		self.defeatSound = defeatSound
		self.bloonCauseDeathDisplayPrefab = bloonCauseDeathDisplayPrefab
		self.bloonCoDContainer = bloonCoDContainer
		self.bloonCauseDeathDisplayList = bloonCauseDeathDisplayList
		self.raceEvent = raceEvent
		self.calloutUiData = calloutUiData
		self.calloutManager = calloutManager
		self.playerStats = playerStats
		self.animator = animator
		self.animatorState = animatorState
		self.title = title
		self.startMethod = startMethod


class RaceVictoryScreen:

    offsets = {'bestTimeTxt': 56, 'rewardsObj': 64, 'bestTimeObj': 72, 'worseTimeObj': 80, 'bestTimeColor': 88, 'worseTimeColor': 104, 'raceTimeObj': 120, 'raceTimeTxt': 128, 'lootPanel': 136, 'retryForMMBtn': 144, 'retryMMCostTxt': 152, 'retryMMCost': 160, 'homeBtn': 168, 'leaderboardBtn': 176, 'raceEvent': 184, 'race': 192, 'victorySound': 200, 'startMethod': 208}    
    def __init__(self, bestTimeTxt: TMPro.TextMeshProUGUI, rewardsObj: UnityEngine.GameObject, bestTimeObj: UnityEngine.GameObject, worseTimeObj: UnityEngine.GameObject, bestTimeColor: UnityEngine.Color, worseTimeColor: UnityEngine.Color, raceTimeObj: UnityEngine.GameObject, raceTimeTxt: TMPro.TextMeshProUGUI, lootPanel: Assets.Scripts.Unity.UI_New.Store.LootPanel, retryForMMBtn: UnityEngine.UI.Button, retryMMCostTxt: TMPro.TextMeshProUGUI, retryMMCost: Assets.Scripts.Utils.KonFuze, homeBtn: UnityEngine.UI.Button, leaderboardBtn: UnityEngine.UI.Button, raceEvent: Assets.Scripts.Models.ServerEvents.RaceEvent, race: Assets.Scripts.Models.ServerEvents.Race, victorySound: UnityEngine.AudioClip, startMethod: Assets.Scripts.Unity.Player.Btd6Player.RaceStartMethod, **kwargs):
        super().__init__(self, **kwargs)
		self.bestTimeTxt = bestTimeTxt
		self.rewardsObj = rewardsObj
		self.bestTimeObj = bestTimeObj
		self.worseTimeObj = worseTimeObj
		self.bestTimeColor = bestTimeColor
		self.worseTimeColor = worseTimeColor
		self.raceTimeObj = raceTimeObj
		self.raceTimeTxt = raceTimeTxt
		self.lootPanel = lootPanel
		self.retryForMMBtn = retryForMMBtn
		self.retryMMCostTxt = retryMMCostTxt
		self.retryMMCost = retryMMCost
		self.homeBtn = homeBtn
		self.leaderboardBtn = leaderboardBtn
		self.raceEvent = raceEvent
		self.race = race
		self.victorySound = victorySound
		self.startMethod = startMethod


class SinglePlayerStatsPanel:

    offsets = {'calloutBanner': 24, 'playerHeader': 32, 'mainHeaderInfoTxt': 40, 'subHeaderInfoTxt': 48, 'towerIcon': 56, 'glowPanel': 80, 'monkeyStarDetailsPanel': 88, 'monkeyStarPopPanel': 96, 'popInfoCountTxt': 104, 'monkeyStarCashPanel': 112, 'cashInfoCountTxt': 120, 'mainInfoTxt': 128, 'towerInfo': 136, 'instaTowerIcon': 144, 'popInfoIcon': 152}    
    def __init__(self, calloutBanner: UnityEngine.GameObject, playerHeader: TMPro.TextMeshProUGUI, mainHeaderInfoTxt: TMPro.TextMeshProUGUI, subHeaderInfoTxt: TMPro.TextMeshProUGUI, towerIcon: UnityEngine.UI.Image, glowPanel: UnityEngine.GameObject, monkeyStarDetailsPanel: UnityEngine.GameObject, monkeyStarPopPanel: UnityEngine.GameObject, popInfoCountTxt: TMPro.TextMeshProUGUI, monkeyStarCashPanel: UnityEngine.GameObject, cashInfoCountTxt: TMPro.TextMeshProUGUI, mainInfoTxt: TMPro.TextMeshProUGUI, towerInfo: TMPro.TextMeshProUGUI, instaTowerIcon: UnityEngine.UI.Image, popInfoIcon: UnityEngine.UI.Image, **kwargs):
        super().__init__(self, **kwargs)
		self.calloutBanner = calloutBanner
		self.playerHeader = playerHeader
		self.mainHeaderInfoTxt = mainHeaderInfoTxt
		self.subHeaderInfoTxt = subHeaderInfoTxt
		self.towerIcon = towerIcon
		self.glowPanel = glowPanel
		self.monkeyStarDetailsPanel = monkeyStarDetailsPanel
		self.monkeyStarPopPanel = monkeyStarPopPanel
		self.popInfoCountTxt = popInfoCountTxt
		self.monkeyStarCashPanel = monkeyStarCashPanel
		self.cashInfoCountTxt = cashInfoCountTxt
		self.mainInfoTxt = mainInfoTxt
		self.towerInfo = towerInfo
		self.instaTowerIcon = instaTowerIcon
		self.popInfoIcon = popInfoIcon


class VictoryScreen:

    offsets = {'animator': 56, 'difficulty': 64, 'homeBtn': 72, 'freePlayBtn': 80, 'completeObject': 88, 'rewardsObject': 96, 'userChalObject': 104, 'likeTgl': 112, 'likeTglEnabledBg': 120, 'ratingCountTxt': 128, 'favouriteTgl': 136, 'lootPanel': 144, 'victorySound': 152, 'playerStats': 160, 'goldenBloonObj': 168, 'goldenBloonPopCountTxt': 176, 'goldenBloonMMEarntTxt': 184, 'monkeyTeamsObj': 192, 'monkeyTeamsIcon': 200, 'monkeyTeamsMMEarntTxt': 208, 'animatorState': 216, 'calloutUiData': 224, 'calloutManager': 232}    
    def __init__(self, animator: UnityEngine.Animator, difficulty: TMPro.TextMeshProUGUI, homeBtn: UnityEngine.UI.Button, freePlayBtn: UnityEngine.UI.Button, completeObject: UnityEngine.GameObject, rewardsObject: UnityEngine.GameObject, userChalObject: UnityEngine.GameObject, likeTgl: UnityEngine.UI.Toggle, likeTglEnabledBg: UnityEngine.GameObject, ratingCountTxt: TMPro.TMP_Text, favouriteTgl: UnityEngine.UI.Toggle, lootPanel: Assets.Scripts.Unity.UI_New.Store.LootPanel, victorySound: UnityEngine.AudioClip, playerStats: Assets.Scripts.Unity.UI_New.GameOver.SinglePlayerStatsPanel, goldenBloonObj: UnityEngine.GameObject, goldenBloonPopCountTxt: TMPro.TextMeshProUGUI, goldenBloonMMEarntTxt: TMPro.TextMeshProUGUI, monkeyTeamsObj: UnityEngine.GameObject, monkeyTeamsIcon: Assets.Scripts.Unity.UI_New.Main.MapSelect.MonkeyTeamsIcon, monkeyTeamsMMEarntTxt: TMPro.TextMeshProUGUI, animatorState: System.Int32, calloutUiData: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Callouts.CalloutUiData>, calloutManager: Assets.Scripts.Unity.UI_New.Callouts.CalloutManager, **kwargs):
        super().__init__(self, **kwargs)
		self.animator = animator
		self.difficulty = difficulty
		self.homeBtn = homeBtn
		self.freePlayBtn = freePlayBtn
		self.completeObject = completeObject
		self.rewardsObject = rewardsObject
		self.userChalObject = userChalObject
		self.likeTgl = likeTgl
		self.likeTglEnabledBg = likeTglEnabledBg
		self.ratingCountTxt = ratingCountTxt
		self.favouriteTgl = favouriteTgl
		self.lootPanel = lootPanel
		self.victorySound = victorySound
		self.playerStats = playerStats
		self.goldenBloonObj = goldenBloonObj
		self.goldenBloonPopCountTxt = goldenBloonPopCountTxt
		self.goldenBloonMMEarntTxt = goldenBloonMMEarntTxt
		self.monkeyTeamsObj = monkeyTeamsObj
		self.monkeyTeamsIcon = monkeyTeamsIcon
		self.monkeyTeamsMMEarntTxt = monkeyTeamsMMEarntTxt
		self.animatorState = animatorState
		self.calloutUiData = calloutUiData
		self.calloutManager = calloutManager


class HeroFontMaterial:

    offsets = {'name': 16, 'heroNameMaterial': 24}    
    def __init__(self, name: System.String, heroNameMaterial: UnityEngine.Material, **kwargs):
        super().__init__(self, **kwargs)
		self.name = name
		self.heroNameMaterial = heroNameMaterial


class HeroInGameScreen:

    offsets = {'heroName': 56, 'heroShortDescription': 64, 'heroDescription': 72, 'heroPortrait': 80, 'upgradePopup': 96, 'xpBar': 104, 'ingameLevel': 112, 'ingameLevelOnBarTxt': 120, 'xpBarImg': 128, 'heroBoosterButton': 136, 'heroBoosterCostTxt': 144, 'heroBoosterCaveatTxt': 152, 'heroId': 176, 'selectedHero': 184, 'heroBoosterMMCost': 192}    
    def __init__(self, heroName: TMPro.TextMeshProUGUI, heroShortDescription: TMPro.TextMeshProUGUI, heroDescription: TMPro.TextMeshProUGUI, heroPortrait: UnityEngine.UI.Image, upgradePopup: UpgradePopup, xpBar: UnityEngine.GameObject, ingameLevel: TMPro.TextMeshProUGUI, ingameLevelOnBarTxt: TMPro.TextMeshProUGUI, xpBarImg: UnityEngine.UI.Image, heroBoosterButton: UnityEngine.UI.Button, heroBoosterCostTxt: TMPro.TextMeshProUGUI, heroBoosterCaveatTxt: TMPro.TextMeshProUGUI, heroId: System.String, selectedHero: Assets.Scripts.Unity.Bridge.TowerToSimulation, heroBoosterMMCost: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.heroName = heroName
		self.heroShortDescription = heroShortDescription
		self.heroDescription = heroDescription
		self.heroPortrait = heroPortrait
		self.upgradePopup = upgradePopup
		self.xpBar = xpBar
		self.ingameLevel = ingameLevel
		self.ingameLevelOnBarTxt = ingameLevelOnBarTxt
		self.xpBarImg = xpBarImg
		self.heroBoosterButton = heroBoosterButton
		self.heroBoosterCostTxt = heroBoosterCostTxt
		self.heroBoosterCaveatTxt = heroBoosterCaveatTxt
		self.heroId = heroId
		self.selectedHero = selectedHero
		self.heroBoosterMMCost = heroBoosterMMCost


class AmbushTechInput:

    offsets = {'data': 32, 'targetImage': 40, 'ability': 48}    
    def __init__(self, data: Assets.Scripts.Models.Towers.AmbushTechCIData, targetImage: Assets.Scripts.Unity.Display.UnityDisplayNode, ability: Assets.Scripts.Unity.Bridge.AbilityToSimulation, **kwargs):
        super().__init__(self, **kwargs)
		self.data = data
		self.targetImage = targetImage
		self.ability = ability


class BloodSacrificeInput:

    offsets = {'ability': 32, 'data': 40, 'targetImages': 48}    
    def __init__(self, ability: Assets.Scripts.Unity.Bridge.AbilityToSimulation, data: Assets.Scripts.Models.Towers.BloodSacrificeCIData, targetImages: System.Collections.Generic.Dictionary<Assets.Scripts.Unity.Bridge.TowerToSimulation,Assets.Scripts.Unity.Display.UnityDisplayNode>, **kwargs):
        super().__init__(self, **kwargs)
		self.ability = ability
		self.data = data
		self.targetImages = targetImages


class BloonCauseOfDefeat:
	totalBloons: System.Int32
    offsets = {'totalBloons': 0, 'finalBloonCount': 4, 'cullTime': 8, 'bloonCoDDataList': 16, 'finalDataList': 24}    
    def __init__(self, totalBloons: System.Int32, finalBloonCount: System.Int32, cullTime: System.Int32, bloonCoDDataList: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.InGame.BloonCoDData>, finalDataList: System.Collections.Generic.Dictionary<System.String,System.Single>, **kwargs):
        super().__init__(self, **kwargs)
		self.totalBloons = totalBloons
		self.finalBloonCount = finalBloonCount
		self.cullTime = cullTime
		self.bloonCoDDataList = bloonCoDDataList
		self.finalDataList = finalDataList


class BloonCoDData:

    offsets = {'id': 16, 'damage': 24, 'time': 28}    
    def __init__(self, id: System.String, damage: System.Single, time: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.id = id
		self.damage = damage
		self.time = time


class BuffIcon:

    offsets = {'activeObj': 24, 'inactiveObj': 32, 'activeIcon': 40, 'inactiveIcon': 48, 'buffMultiplierTxt': 56, 'buffMultiplierMaxReachedTxt': 64, '<Name>k__BackingField': 72, 'isActive': 80}    
    def __init__(self, activeObj: UnityEngine.GameObject, inactiveObj: UnityEngine.GameObject, activeIcon: UnityEngine.UI.Image, inactiveIcon: UnityEngine.UI.Image, buffMultiplierTxt: TMPro.TextMeshProUGUI, buffMultiplierMaxReachedTxt: TMPro.TextMeshProUGUI, <Name>k__BackingField: System.String, isActive: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.activeObj = activeObj
		self.inactiveObj = inactiveObj
		self.activeIcon = activeIcon
		self.inactiveIcon = inactiveIcon
		self.buffMultiplierTxt = buffMultiplierTxt
		self.buffMultiplierMaxReachedTxt = buffMultiplierMaxReachedTxt
		self.<Name>k__BackingField = <Name>k__BackingField
		self.isActive = isActive


class BuffIndicatorUi:
	instance: Assets.Scripts.Unity.UI_New.InGame.BuffIndicatorUi
    offsets = {'instance': 0, 'buffsUi': 24, 'buffPrefab': 32, 'allBuffIcons': 40, 'towers': 48, 'towersInRangeOfPlaceableTower': 56, 'towersToHighlightForPlaceableTower': 64, 'towersBuffingThisTower': 72, 'upperBoundary': 80, 'sideBoundary': 84}    
    def __init__(self, instance: Assets.Scripts.Unity.UI_New.InGame.BuffIndicatorUi, buffsUi: UnityEngine.GameObject, buffPrefab: UnityEngine.GameObject, allBuffIcons: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.InGame.BuffIcon>, towers: System.Collections.Generic.List<Assets.Scripts.Unity.Bridge.TowerToSimulation>, towersInRangeOfPlaceableTower: System.Collections.Generic.List<Assets.Scripts.Unity.Bridge.TowerToSimulation>, towersToHighlightForPlaceableTower: System.Collections.Generic.List<Assets.Scripts.Unity.Bridge.TowerToSimulation>, towersBuffingThisTower: System.Collections.Generic.List<Assets.Scripts.Unity.Bridge.TowerToSimulation>, upperBoundary: System.Single, sideBoundary: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.buffsUi = buffsUi
		self.buffPrefab = buffPrefab
		self.allBuffIcons = allBuffIcons
		self.towers = towers
		self.towersInRangeOfPlaceableTower = towersInRangeOfPlaceableTower
		self.towersToHighlightForPlaceableTower = towersToHighlightForPlaceableTower
		self.towersBuffingThisTower = towersBuffingThisTower
		self.upperBoundary = upperBoundary
		self.sideBoundary = sideBoundary


class CoopAreaIndicators:
	instance: Assets.Scripts.Unity.UI_New.InGame.CoopAreaIndicators
    offsets = {'instance': 0, 'coopMarkers': 24, 'whitelines': 32, '<coopGame>k__BackingField': 40}    
    def __init__(self, instance: Assets.Scripts.Unity.UI_New.InGame.CoopAreaIndicators, coopMarkers: System.Collections.Generic.List<UnityEngine.UI.Image>, whitelines: System.Collections.Generic.List<UnityEngine.UI.Image>, <coopGame>k__BackingField: Assets.Scripts.Unity.Network.Btd6CoopGame, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.coopMarkers = coopMarkers
		self.whitelines = whitelines
		self.<coopGame>k__BackingField = <coopGame>k__BackingField


class CustomInput:

    offsets = {'tower': 16, 'active': 24}    
    def __init__(self, tower: Assets.Scripts.Unity.Bridge.TowerToSimulation, active: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.tower = tower
		self.active = active


class DeployInput:

    offsets = {'ability': 32, 'data': 40, 'enterPlacement': 48}    
    def __init__(self, ability: Assets.Scripts.Unity.Bridge.AbilityToSimulation, data: Assets.Scripts.Models.Towers.DeployCIData, enterPlacement: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.ability = ability
		self.data = data
		self.enterPlacement = enterPlacement


class DoorGunnerInput:

    offsets = {'ability': 32, 'data': 40, 'targetImages': 48}    
    def __init__(self, ability: Assets.Scripts.Unity.Bridge.AbilityToSimulation, data: Assets.Scripts.Models.Towers.DoorGunnerCIData, targetImages: System.Collections.Generic.Dictionary<Assets.Scripts.Unity.Bridge.TowerToSimulation,Assets.Scripts.Unity.Display.UnityDisplayNode>, **kwargs):
        super().__init__(self, **kwargs)
		self.ability = ability
		self.data = data
		self.targetImages = targetImages


class DynamicUiObject:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Hotkeys:

    offsets = {'towerHotkeys': 24, 'spawnBloonHotkeys': 32, 'powerHotkeys': 40, 'abilityHotkeys': 48, 'heroHotkey': 56, 'heroButton': 64, 'upgradePath1Hotkey': 72, 'upgradePath2Hotkey': 80, 'upgradePath3Hotkey': 88, 'changeTargeting': 96, 'reverseChangeTargeting': 104, 'sell': 112, 'playFastForward': 120, 'sendNextRound': 128, 'pause': 136, 'suppressHotkeys': 144, 'isSetup': 145, 'allHotkeys': 152}    
    def __init__(self, towerHotkeys: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.InGame.Hotkeys.TowerHotkeyInfo>, spawnBloonHotkeys: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.InGame.Hotkeys.SpawnBloonHotkeyInfo>, powerHotkeys: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.InGame.Hotkeys.PowerHotkeyInfo>, abilityHotkeys: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.InGame.Hotkeys.AbilityHotkeyInfo>, heroHotkey: System.Tuple<UnityEngine.KeyCode,UnityEngine.KeyCode>, heroButton: Assets.Scripts.Unity.UI_New.InGame.StoreMenu.TowerPurchaseButton, upgradePath1Hotkey: System.Tuple<UnityEngine.KeyCode,UnityEngine.KeyCode>, upgradePath2Hotkey: System.Tuple<UnityEngine.KeyCode,UnityEngine.KeyCode>, upgradePath3Hotkey: System.Tuple<UnityEngine.KeyCode,UnityEngine.KeyCode>, changeTargeting: System.Tuple<UnityEngine.KeyCode,UnityEngine.KeyCode>, reverseChangeTargeting: System.Tuple<UnityEngine.KeyCode,UnityEngine.KeyCode>, sell: System.Tuple<UnityEngine.KeyCode,UnityEngine.KeyCode>, playFastForward: System.Tuple<UnityEngine.KeyCode,UnityEngine.KeyCode>, sendNextRound: System.Tuple<UnityEngine.KeyCode,UnityEngine.KeyCode>, pause: System.Tuple<UnityEngine.KeyCode,UnityEngine.KeyCode>, suppressHotkeys: System.Boolean, isSetup: System.Boolean, allHotkeys: System.Collections.Generic.List<System.Tuple<UnityEngine.KeyCode,UnityEngine.KeyCode>>, **kwargs):
        super().__init__(self, **kwargs)
		self.towerHotkeys = towerHotkeys
		self.spawnBloonHotkeys = spawnBloonHotkeys
		self.powerHotkeys = powerHotkeys
		self.abilityHotkeys = abilityHotkeys
		self.heroHotkey = heroHotkey
		self.heroButton = heroButton
		self.upgradePath1Hotkey = upgradePath1Hotkey
		self.upgradePath2Hotkey = upgradePath2Hotkey
		self.upgradePath3Hotkey = upgradePath3Hotkey
		self.changeTargeting = changeTargeting
		self.reverseChangeTargeting = reverseChangeTargeting
		self.sell = sell
		self.playFastForward = playFastForward
		self.sendNextRound = sendNextRound
		self.pause = pause
		self.suppressHotkeys = suppressHotkeys
		self.isSetup = isSetup
		self.allHotkeys = allHotkeys


class HotkeysData:
	bloonNameByBloonKey: System.Collections.Generic.Dictionary<System.String,System.String>
    offsets = {'bloonNameByBloonKey': 0, 'shortenedKeyStrings': 8, 'dittoKeys': 24, 'dittoKeysReversed': 32, 'monkeys': 16, 'gameplay': 24, 'sandbox': 32}    
    def __init__(self, bloonNameByBloonKey: System.Collections.Generic.Dictionary<System.String,System.String>, shortenedKeyStrings: System.Collections.Generic.Dictionary<UnityEngine.KeyCode,System.String>, dittoKeys: System.Collections.Generic.Dictionary<UnityEngine.KeyCode,UnityEngine.KeyCode>, dittoKeysReversed: System.Collections.Generic.Dictionary<UnityEngine.KeyCode,UnityEngine.KeyCode>, monkeys: System.Collections.Generic.Dictionary<System.String,System.Tuple<UnityEngine.KeyCode,UnityEngine.KeyCode>>, gameplay: System.Collections.Generic.Dictionary<System.String,System.Tuple<UnityEngine.KeyCode,UnityEngine.KeyCode>>, sandbox: System.Collections.Generic.Dictionary<System.String,System.Tuple<UnityEngine.KeyCode,UnityEngine.KeyCode>>, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonNameByBloonKey = bloonNameByBloonKey
		self.shortenedKeyStrings = shortenedKeyStrings
		self.dittoKeys = dittoKeys
		self.dittoKeysReversed = dittoKeysReversed
		self.monkeys = monkeys
		self.gameplay = gameplay
		self.sandbox = sandbox


class InGame:
	instance: Assets.Scripts.Unity.UI_New.InGame.InGame
    offsets = {'instance': 0, 'savePath': 8, 'sceneCamera': 24, 'autoPlay': 32, 'blockAutoPlay': 33, 'hotkeys': 40, 'lockTowerPurchases': 48, 'lockHeroPurchases': 49, 'lockTowerUpgrades': 50, 'disableHomeButton': 51, 'gRay': 56, 'pe': 64, 'raycastResults': 72, 'fullScreenRect': 80, 'uiRect': 88, 'mapRect': 96, 'bloonMenu': 104, 'inputManager': 112, 'scene': 120, 'sceneSelectionExclusionList': 128, 'sceneMarker': 136, 'inGameListeners': 144, 'roundHintTxt': 152, 'roundHintAnimator': 160, 'roundHintButton': 168, 'roundHintAutoHideTime': 176, 'roundHintTimer': 180, 'bridge': 184, 'initialised': 192, 'matchStarted': 193, 'matchWon': 194, 'matchLost': 195, 'waitingForVictoryScreen': 196, 'popupShowing': 197, 'lastSetHealth': 200, 'lastSetCash': 204, 'lastSetRound': 208, 'monkeyTeamsViolated': 212, 'completedMonkeyTeams': 213, 'coopGame': 216, 'mapSaveFile': 224, 'selectedNamedMonkeyKey': 232, 'debugTowerGroupPlacer': 240, 'coopRejoinPopup': 248, 'OnCoopReconnectCompleted': 256, 'inGameData': 264, 'OnUpdate': 408, 'causeOfDefeat': 416, 'inGameMenuDefs': 424, 'currentRoundId': 432, 'forcePlayerSaveEndOfRound': 436, 'hasSentEndGameAnalytics': 437, 'quitting': 438, '<GameId>k__BackingField': 440, 'stepTarget': 444, 'stoppedClockForMenuOpen': 448, 'firstTimeBloonTagLocs': 456, 'goldenBloonsPopped': 464, 'goldenBloonMMEarnt': 468}    
    def __init__(self, instance: Assets.Scripts.Unity.UI_New.InGame.InGame, savePath: System.String, sceneCamera: UnityEngine.Camera, autoPlay: System.Boolean, blockAutoPlay: System.Boolean, hotkeys: Assets.Scripts.Unity.UI_New.InGame.Hotkeys, lockTowerPurchases: System.Boolean, lockHeroPurchases: System.Boolean, lockTowerUpgrades: System.Boolean, disableHomeButton: System.Boolean, gRay: UnityEngine.UI.GraphicRaycaster, pe: UnityEngine.EventSystems.PointerEventData, raycastResults: System.Collections.Generic.List<UnityEngine.EventSystems.RaycastResult>, fullScreenRect: UnityEngine.RectTransform, uiRect: UnityEngine.RectTransform, mapRect: UnityEngine.RectTransform, bloonMenu: Assets.Scripts.Unity.UI_New.InGame.BloonMenu.BloonMenu, inputManager: Assets.Scripts.Unity.UI_New.InGame.InputManager, scene: UnityEngine.UI.Extensions.NonDrawingGraphic, sceneSelectionExclusionList: System.Collections.Generic.List<UnityEngine.GameObject>, sceneMarker: UnityEngine.RectTransform, inGameListeners: Assets.Scripts.Unity.UI_New.InGame.InGameListeners, roundHintTxt: TMPro.TextMeshProUGUI, roundHintAnimator: UnityEngine.Animator, roundHintButton: UnityEngine.UI.Button, roundHintAutoHideTime: System.Single, roundHintTimer: System.Single, bridge: Assets.Scripts.Unity.Bridge.UnityToSimulation, initialised: System.Boolean, matchStarted: System.Boolean, matchWon: System.Boolean, matchLost: System.Boolean, waitingForVictoryScreen: System.Boolean, popupShowing: System.Boolean, lastSetHealth: System.Int32, lastSetCash: System.Int32, lastSetRound: System.Int32, monkeyTeamsViolated: System.Boolean, completedMonkeyTeams: System.Boolean, coopGame: Assets.Scripts.Unity.Network.Btd6CoopGame, mapSaveFile: NinjaKiwi.Players.Files.File<Assets.Scripts.Models.Profile.MapSaveDataModel>, selectedNamedMonkeyKey: System.String, debugTowerGroupPlacer: Assets.Scripts.Unity.DebugTowerGroupPlacer, coopRejoinPopup: Assets.Scripts.Unity.UI_New.Popups.Popup, OnCoopReconnectCompleted: System.Action, inGameData: Assets.Scripts.Utils.Helpers.InGameData, OnUpdate: Assets.Scripts.Unity.UI_New.InGame.InGame.UpdateUi, causeOfDefeat: Assets.Scripts.Unity.UI_New.InGame.BloonCauseOfDefeat, inGameMenuDefs: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.InGame.InGame.InGameMenuDef>, currentRoundId: System.Int32, forcePlayerSaveEndOfRound: System.Boolean, hasSentEndGameAnalytics: System.Boolean, quitting: System.Boolean, <GameId>k__BackingField: System.Int32, stepTarget: System.Single, stoppedClockForMenuOpen: System.Boolean, firstTimeBloonTagLocs: System.Collections.Generic.Dictionary<System.String,System.Tuple<System.String,System.Int32>>, goldenBloonsPopped: System.Int32, goldenBloonMMEarnt: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.savePath = savePath
		self.sceneCamera = sceneCamera
		self.autoPlay = autoPlay
		self.blockAutoPlay = blockAutoPlay
		self.hotkeys = hotkeys
		self.lockTowerPurchases = lockTowerPurchases
		self.lockHeroPurchases = lockHeroPurchases
		self.lockTowerUpgrades = lockTowerUpgrades
		self.disableHomeButton = disableHomeButton
		self.gRay = gRay
		self.pe = pe
		self.raycastResults = raycastResults
		self.fullScreenRect = fullScreenRect
		self.uiRect = uiRect
		self.mapRect = mapRect
		self.bloonMenu = bloonMenu
		self.inputManager = inputManager
		self.scene = scene
		self.sceneSelectionExclusionList = sceneSelectionExclusionList
		self.sceneMarker = sceneMarker
		self.inGameListeners = inGameListeners
		self.roundHintTxt = roundHintTxt
		self.roundHintAnimator = roundHintAnimator
		self.roundHintButton = roundHintButton
		self.roundHintAutoHideTime = roundHintAutoHideTime
		self.roundHintTimer = roundHintTimer
		self.bridge = bridge
		self.initialised = initialised
		self.matchStarted = matchStarted
		self.matchWon = matchWon
		self.matchLost = matchLost
		self.waitingForVictoryScreen = waitingForVictoryScreen
		self.popupShowing = popupShowing
		self.lastSetHealth = lastSetHealth
		self.lastSetCash = lastSetCash
		self.lastSetRound = lastSetRound
		self.monkeyTeamsViolated = monkeyTeamsViolated
		self.completedMonkeyTeams = completedMonkeyTeams
		self.coopGame = coopGame
		self.mapSaveFile = mapSaveFile
		self.selectedNamedMonkeyKey = selectedNamedMonkeyKey
		self.debugTowerGroupPlacer = debugTowerGroupPlacer
		self.coopRejoinPopup = coopRejoinPopup
		self.OnCoopReconnectCompleted = OnCoopReconnectCompleted
		self.inGameData = inGameData
		self.OnUpdate = OnUpdate
		self.causeOfDefeat = causeOfDefeat
		self.inGameMenuDefs = inGameMenuDefs
		self.currentRoundId = currentRoundId
		self.forcePlayerSaveEndOfRound = forcePlayerSaveEndOfRound
		self.hasSentEndGameAnalytics = hasSentEndGameAnalytics
		self.quitting = quitting
		self.<GameId>k__BackingField = <GameId>k__BackingField
		self.stepTarget = stepTarget
		self.stoppedClockForMenuOpen = stoppedClockForMenuOpen
		self.firstTimeBloonTagLocs = firstTimeBloonTagLocs
		self.goldenBloonsPopped = goldenBloonsPopped
		self.goldenBloonMMEarnt = goldenBloonMMEarnt


class InGameBehavior:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class InGameListeners:
	instance: Assets.Scripts.Unity.UI_New.InGame.InGameListeners
    offsets = {'instance': 0, 'UpgradeScreenOnPurchasedUpgrade': 16, 'InGameOnLoseLevel': 24, 'InGameOnTutorialRoundEnd': 32}    
    def __init__(self, instance: Assets.Scripts.Unity.UI_New.InGame.InGameListeners, UpgradeScreenOnPurchasedUpgrade: Assets.Scripts.Unity.UI_New.InGame.InGameListeners.UpgradeScreenPurchasedUpgradeDelegate, InGameOnLoseLevel: Assets.Scripts.Unity.UI_New.InGame.InGameListeners.InGameOnLoseLevelDelegate, InGameOnTutorialRoundEnd: Assets.Scripts.Unity.UI_New.InGame.InGameListeners.InGameTutorialRoundEnd, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.UpgradeScreenOnPurchasedUpgrade = UpgradeScreenOnPurchasedUpgrade
		self.InGameOnLoseLevel = InGameOnLoseLevel
		self.InGameOnTutorialRoundEnd = InGameOnTutorialRoundEnd


class InputManager:

    offsets = {'ig': 16, 'towerButton': 24, 'towerModel': 32, 'powerButton': 40, 'powerModel': 48, 'instaButton': 56, 'instaModel': 64, 'customInput': 72, 'inTowerMode': 80, 'inPowerMode': 81, 'inInstaMode': 82, 'inCustomMode': 83, 'placementModel': 88, 'placementTowerId': 96, 'placementGraphics': 104, 'placementMeshes': 112, 'PlacementModeSuccessCallback': 120, 'inPlacementMode': 128, 'cursorInWorld': 129, 'cursorDown': 130, 'ignoreFirstUp': 131, 'wasCursorInWorld': 132, 'cursorPositionWorld': 136, 'cursorPositionWorldLast': 144, 'towerPositionWorld': 152, 'placementRestrictions': 160, 'cursorMode': 168, 'selectionGrace': 172, 'downSelection': 176, 'wasDownOnScene': 184, 'downOnSelectionTimer': 188, 'downOnSelectionTriggered': 192, 'OnSceneHit': 200, 'OnEnterTowerPlacementMode': 208, 'OnExitTowerPlacementMode': 216, 'OnHideShowPlacementBlockingUI': 224, 'OnHelperMessageChanged': 232, 'OnSelectionChanged': 240, 'hovered': 248, 'ignoreNudgeOnFirstTouch': 256, 'customInputSelectedTower': 264, 'hidPowers': 272, 'selected': 280}    
    def __init__(self, ig: Assets.Scripts.Unity.UI_New.InGame.InGame, towerButton: Assets.Scripts.Unity.UI_New.InGame.StoreMenu.TowerPurchaseButton, towerModel: Assets.Scripts.Models.Towers.TowerModel, powerButton: Assets.Scripts.Unity.UI_New.InGame.RightMenu.Powers.PowerButton, powerModel: Assets.Scripts.Models.Powers.PowerModel, instaButton: Assets.Scripts.Unity.UI_New.InGame.RightMenu.Powers.StandardInstaTowerButton, instaModel: Assets.Scripts.Models.Towers.TowerModel, customInput: Assets.Scripts.Unity.UI_New.InGame.CustomInput, inTowerMode: System.Boolean, inPowerMode: System.Boolean, inInstaMode: System.Boolean, inCustomMode: System.Boolean, placementModel: Assets.Scripts.Models.Towers.TowerModel, placementTowerId: System.Int32, placementGraphics: System.Collections.Generic.List<Assets.Scripts.Unity.Display.UnityDisplayNode>, placementMeshes: System.Collections.Generic.List<Assets.Scripts.Simulation.Display.Mesh>, PlacementModeSuccessCallback: Assets.Scripts.Unity.UI_New.InGame.InputManager.PositionDelegate, inPlacementMode: System.Boolean, cursorInWorld: System.Boolean, cursorDown: System.Boolean, ignoreFirstUp: System.Boolean, wasCursorInWorld: System.Boolean, cursorPositionWorld: UnityEngine.Vector2, cursorPositionWorldLast: UnityEngine.Vector2, towerPositionWorld: UnityEngine.Vector2, placementRestrictions: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.InGame.PlacementRestriction>, cursorMode: Assets.Scripts.Unity.UI_New.InGame.InputManager.CursorMode, selectionGrace: System.Single, downSelection: Assets.Scripts.Unity.Bridge.Selectable, wasDownOnScene: System.Boolean, downOnSelectionTimer: System.Single, downOnSelectionTriggered: System.Boolean, OnSceneHit: System.Action, OnEnterTowerPlacementMode: System.Action, OnExitTowerPlacementMode: System.Action, OnHideShowPlacementBlockingUI: Assets.Scripts.Unity.UI_New.InGame.InputManager.BoolDelegate, OnHelperMessageChanged: Assets.Scripts.Unity.UI_New.InGame.InputManager.StringDelegate, OnSelectionChanged: Assets.Scripts.Unity.UI_New.InGame.InputManager.SelectedDelegate, hovered: Assets.Scripts.Unity.Bridge.Selectable, ignoreNudgeOnFirstTouch: System.Boolean, customInputSelectedTower: Assets.Scripts.Unity.Bridge.TowerToSimulation, hidPowers: System.Boolean, selected: Assets.Scripts.Unity.Bridge.Selectable, **kwargs):
        super().__init__(self, **kwargs)
		self.ig = ig
		self.towerButton = towerButton
		self.towerModel = towerModel
		self.powerButton = powerButton
		self.powerModel = powerModel
		self.instaButton = instaButton
		self.instaModel = instaModel
		self.customInput = customInput
		self.inTowerMode = inTowerMode
		self.inPowerMode = inPowerMode
		self.inInstaMode = inInstaMode
		self.inCustomMode = inCustomMode
		self.placementModel = placementModel
		self.placementTowerId = placementTowerId
		self.placementGraphics = placementGraphics
		self.placementMeshes = placementMeshes
		self.PlacementModeSuccessCallback = PlacementModeSuccessCallback
		self.inPlacementMode = inPlacementMode
		self.cursorInWorld = cursorInWorld
		self.cursorDown = cursorDown
		self.ignoreFirstUp = ignoreFirstUp
		self.wasCursorInWorld = wasCursorInWorld
		self.cursorPositionWorld = cursorPositionWorld
		self.cursorPositionWorldLast = cursorPositionWorldLast
		self.towerPositionWorld = towerPositionWorld
		self.placementRestrictions = placementRestrictions
		self.cursorMode = cursorMode
		self.selectionGrace = selectionGrace
		self.downSelection = downSelection
		self.wasDownOnScene = wasDownOnScene
		self.downOnSelectionTimer = downOnSelectionTimer
		self.downOnSelectionTriggered = downOnSelectionTriggered
		self.OnSceneHit = OnSceneHit
		self.OnEnterTowerPlacementMode = OnEnterTowerPlacementMode
		self.OnExitTowerPlacementMode = OnExitTowerPlacementMode
		self.OnHideShowPlacementBlockingUI = OnHideShowPlacementBlockingUI
		self.OnHelperMessageChanged = OnHelperMessageChanged
		self.OnSelectionChanged = OnSelectionChanged
		self.hovered = hovered
		self.ignoreNudgeOnFirstTouch = ignoreNudgeOnFirstTouch
		self.customInputSelectedTower = customInputSelectedTower
		self.hidPowers = hidPowers
		self.selected = selected


class OverclockInput:

    offsets = {'ability': 32, 'data': 40, 'targetImages': 48}    
    def __init__(self, ability: Assets.Scripts.Unity.Bridge.AbilityToSimulation, data: Assets.Scripts.Models.Towers.OverclockCIData, targetImages: System.Collections.Generic.Dictionary<Assets.Scripts.Unity.Bridge.TowerToSimulation,Assets.Scripts.Unity.Display.UnityDisplayNode>, **kwargs):
        super().__init__(self, **kwargs)
		self.ability = ability
		self.data = data
		self.targetImages = targetImages


class PlacementRestriction:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RadiusPlacementRestriction:

    offsets = {'center': 16, 'radius': 24}    
    def __init__(self, center: UnityEngine.Vector2, radius: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.center = center
		self.radius = radius


class RedeployInput:

    offsets = {'ability': 32, 'data': 40, 'targetImages': 48, 'selectedTower': 56, 'distToInitiatePlacement': 64, 'enterPlacmentMode': 68, 'cursorDownLoc': 72}    
    def __init__(self, ability: Assets.Scripts.Unity.Bridge.AbilityToSimulation, data: Assets.Scripts.Models.Towers.RedeployCIData, targetImages: System.Collections.Generic.Dictionary<Assets.Scripts.Unity.Bridge.TowerToSimulation,Assets.Scripts.Unity.Display.UnityDisplayNode>, selectedTower: Assets.Scripts.Unity.Bridge.TowerToSimulation, distToInitiatePlacement: System.Single, enterPlacmentMode: System.Boolean, cursorDownLoc: UnityEngine.Vector2, **kwargs):
        super().__init__(self, **kwargs)
		self.ability = ability
		self.data = data
		self.targetImages = targetImages
		self.selectedTower = selectedTower
		self.distToInitiatePlacement = distToInitiatePlacement
		self.enterPlacmentMode = enterPlacmentMode
		self.cursorDownLoc = cursorDownLoc


class RepositionTowerInput:

    offsets = {'ability': 32, 'data': 40, 'targetImage': 48, 'enterPlacement': 56, 'instaExit': 57}    
    def __init__(self, ability: Assets.Scripts.Unity.Bridge.AbilityToSimulation, data: Assets.Scripts.Models.Towers.RepositionTowerCIData, targetImage: Assets.Scripts.Unity.Display.UnityDisplayNode, enterPlacement: System.Boolean, instaExit: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.ability = ability
		self.data = data
		self.targetImage = targetImage
		self.enterPlacement = enterPlacement
		self.instaExit = instaExit


class SelectMultiPointInput:

    offsets = {'type': 32, 'cii': 48, 'selectPoints': 56, 'targetImages': 64, 'pointIndex': 72}    
    def __init__(self, type: Assets.Scripts.Models.Towers.TargetType, cii: Assets.Scripts.Models.Towers.SelectTargetCIData, selectPoints: System.Collections.Generic.List<UnityEngine.Vector2>, targetImages: System.Collections.Generic.List<Assets.Scripts.Unity.Display.UnityDisplayNode>, pointIndex: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.type = type
		self.cii = cii
		self.selectPoints = selectPoints
		self.targetImages = targetImages
		self.pointIndex = pointIndex


class SelectPointInput:

    offsets = {'type': 32, 'cii': 48, 'targetImage': 56, 'previousTargetImage': 64}    
    def __init__(self, type: Assets.Scripts.Models.Towers.TargetType, cii: Assets.Scripts.Models.Towers.SelectTargetCIData, targetImage: Assets.Scripts.Unity.Display.UnityDisplayNode, previousTargetImage: Assets.Scripts.Unity.Display.UnityDisplayNode, **kwargs):
        super().__init__(self, **kwargs)
		self.type = type
		self.cii = cii
		self.targetImage = targetImage
		self.previousTargetImage = previousTargetImage


class StatBar:
	OnBuildText: System.Func<System.String>
    offsets = {'OnBuildText': 0, 'text': 24, 'updateCount': 32, 'lastUpdateTime': 36}    
    def __init__(self, OnBuildText: System.Func<System.String>, text: TMPro.TextMeshProUGUI, updateCount: System.Single, lastUpdateTime: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.OnBuildText = OnBuildText
		self.text = text
		self.updateCount = updateCount
		self.lastUpdateTime = lastUpdateTime


class TechBotInput:

    offsets = {'ability': 32, 'data': 40, 'targetImages': 48}    
    def __init__(self, ability: Assets.Scripts.Unity.Bridge.AbilityToSimulation, data: Assets.Scripts.Models.Towers.TechBotCIData, targetImages: System.Collections.Generic.Dictionary<Assets.Scripts.Unity.Bridge.TowerToSimulation,Assets.Scripts.Unity.Display.UnityDisplayNode>, **kwargs):
        super().__init__(self, **kwargs)
		self.ability = ability
		self.data = data
		self.targetImages = targetImages


class AbilityMenu:
	instance: Assets.Scripts.Unity.UI_New.InGame.AbilitiesMenu.AbilityMenu
    offsets = {'instance': 0, 'visibleStateLabel': 24, 'SideLabel': 32, 'panelAnimator': 40, 'abilityGroupAnimator': 48, 'buttonAnimator': 56, 'rowAnimator': 64, 'abilityShifterAnimator': 72, 'row': 80, 'abilitiesPerRow': 88, 'buttonPrefab': 96, 'pooledButtons': 104, 'activeButtons': 112, 'abilityOrderByName': 120, 'rowIndex': 128, 'showing': 132, 'hideExternal': 133, 'abilityCount': 136}    
    def __init__(self, instance: Assets.Scripts.Unity.UI_New.InGame.AbilitiesMenu.AbilityMenu, visibleStateLabel: System.String, SideLabel: System.String, panelAnimator: UnityEngine.Animator, abilityGroupAnimator: UnityEngine.Animator, buttonAnimator: UnityEngine.Animator, rowAnimator: UnityEngine.Animator, abilityShifterAnimator: UnityEngine.Animator, row: UnityEngine.Transform, abilitiesPerRow: System.Int32, buttonPrefab: UnityEngine.GameObject, pooledButtons: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.InGame.TowerSelectionMenu.StackedAbilityButton>, activeButtons: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.InGame.TowerSelectionMenu.StackedAbilityButton>, abilityOrderByName: System.Collections.Generic.Dictionary<System.String,System.Int32>, rowIndex: System.Int32, showing: System.Boolean, hideExternal: System.Boolean, abilityCount: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.visibleStateLabel = visibleStateLabel
		self.SideLabel = SideLabel
		self.panelAnimator = panelAnimator
		self.abilityGroupAnimator = abilityGroupAnimator
		self.buttonAnimator = buttonAnimator
		self.rowAnimator = rowAnimator
		self.abilityShifterAnimator = abilityShifterAnimator
		self.row = row
		self.abilitiesPerRow = abilitiesPerRow
		self.buttonPrefab = buttonPrefab
		self.pooledButtons = pooledButtons
		self.activeButtons = activeButtons
		self.abilityOrderByName = abilityOrderByName
		self.rowIndex = rowIndex
		self.showing = showing
		self.hideExternal = hideExternal
		self.abilityCount = abilityCount


class GoFastForwardToggle:

    offsets = {'fastForwardOnImage': 24, 'fastForwardOffImage': 32, 'goImage': 40}    
    def __init__(self, fastForwardOnImage: UnityEngine.GameObject, fastForwardOffImage: UnityEngine.GameObject, goImage: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.fastForwardOnImage = fastForwardOnImage
		self.fastForwardOffImage = fastForwardOffImage
		self.goImage = goImage


class BloonMenu:

    offsets = {'instance': 24, 'spawnBloonButtonPrefab': 32, 'bloonButtonContainer': 40, 'destroyBloonsButton': 48, 'destroyTowersButton': 56, 'bloonCount': 64, 'bloonRate': 72, 'roundDetails': 80, 'camo': 88, 'regen': 89, 'fortified': 90, 'buttonDelay': 92, 'showing': 96, 'animator': 104, 'visibleStateLabel': 112, 'sort': 120, 'integerToSet': 124, 'bloonButtons': 128, 'btnDestroyBloons': 136, 'btnDestroyMonkeys': 144, 'btnResetAbilityCooldowns': 152, 'btnResetDamage': 160, 'btnPlaceCrosspaths': 168, 'clickSound': 176, 'hideExternal': 184, 'showInternal': 185}    
    def __init__(self, instance: Assets.Scripts.Unity.UI_New.InGame.BloonMenu.BloonMenu, spawnBloonButtonPrefab: UnityEngine.GameObject, bloonButtonContainer: UnityEngine.GameObject, destroyBloonsButton: UnityEngine.GameObject, destroyTowersButton: UnityEngine.GameObject, bloonCount: TMPro.TMP_InputField, bloonRate: TMPro.TMP_InputField, roundDetails: TMPro.TMP_InputField, camo: System.Boolean, regen: System.Boolean, fortified: System.Boolean, buttonDelay: System.Single, showing: System.Boolean, animator: UnityEngine.Animator, visibleStateLabel: System.String, sort: System.Boolean, integerToSet: System.Int32, bloonButtons: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.InGame.BloonMenu.SpawnBloonButton>, btnDestroyBloons: Assets.Scripts.Unity.UI_New.ButtonExtended, btnDestroyMonkeys: Assets.Scripts.Unity.UI_New.ButtonExtended, btnResetAbilityCooldowns: Assets.Scripts.Unity.UI_New.ButtonExtended, btnResetDamage: Assets.Scripts.Unity.UI_New.ButtonExtended, btnPlaceCrosspaths: Assets.Scripts.Unity.UI_New.ButtonExtended, clickSound: UnityEngine.AudioClip, hideExternal: System.Boolean, showInternal: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.spawnBloonButtonPrefab = spawnBloonButtonPrefab
		self.bloonButtonContainer = bloonButtonContainer
		self.destroyBloonsButton = destroyBloonsButton
		self.destroyTowersButton = destroyTowersButton
		self.bloonCount = bloonCount
		self.bloonRate = bloonRate
		self.roundDetails = roundDetails
		self.camo = camo
		self.regen = regen
		self.fortified = fortified
		self.buttonDelay = buttonDelay
		self.showing = showing
		self.animator = animator
		self.visibleStateLabel = visibleStateLabel
		self.sort = sort
		self.integerToSet = integerToSet
		self.bloonButtons = bloonButtons
		self.btnDestroyBloons = btnDestroyBloons
		self.btnDestroyMonkeys = btnDestroyMonkeys
		self.btnResetAbilityCooldowns = btnResetAbilityCooldowns
		self.btnResetDamage = btnResetDamage
		self.btnPlaceCrosspaths = btnPlaceCrosspaths
		self.clickSound = clickSound
		self.hideExternal = hideExternal
		self.showInternal = showInternal


class BloonMenuToggle:

    offsets = {'bloonsButtonAnimator': 24, 'visibleStateLabel': 32}    
    def __init__(self, bloonsButtonAnimator: UnityEngine.Animator, visibleStateLabel: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.bloonsButtonAnimator = bloonsButtonAnimator
		self.visibleStateLabel = visibleStateLabel


class SpawnBloonButton:
	emissionIndexOffset: System.Int32
    offsets = {'emissionIndexOffset': 0, 'model': 24, 'count': 32, 'rate': 40, 'round': 48, 'iconSet': 56, 'bloonIcon': 64, 'button': 72}    
    def __init__(self, emissionIndexOffset: System.Int32, model: Assets.Scripts.Models.Bloons.BloonModel, count: TMPro.TMP_InputField, rate: TMPro.TMP_InputField, round: TMPro.TMP_InputField, iconSet: System.Boolean, bloonIcon: UnityEngine.UI.Image, button: UnityEngine.UI.Button, **kwargs):
        super().__init__(self, **kwargs)
		self.emissionIndexOffset = emissionIndexOffset
		self.model = model
		self.count = count
		self.rate = rate
		self.round = round
		self.iconSet = iconSet
		self.bloonIcon = bloonIcon
		self.button = button


class BossTierRewardScreen:

    offsets = {'lootPanel': 56, 'playOnBtn': 64, 'titleTxt': 72}    
    def __init__(self, lootPanel: Assets.Scripts.Unity.UI_New.Store.LootPanel, playOnBtn: UnityEngine.UI.Button, titleTxt: TMPro.TMP_Text, **kwargs):
        super().__init__(self, **kwargs)
		self.lootPanel = lootPanel
		self.playOnBtn = playOnBtn
		self.titleTxt = titleTxt


class EmotesManager:
	instance: Assets.Scripts.Unity.UI_New.InGame.EmotesMenu.EmotesManager
    offsets = {'instance': 0, 'emotesPanel': 24, 'emotesGridLayout': 48, '<coopGame>k__BackingField': 56, 'emoteGODict': 64}    
    def __init__(self, instance: Assets.Scripts.Unity.UI_New.InGame.EmotesMenu.EmotesManager, emotesPanel: UnityEngine.GameObject, emotesGridLayout: UnityEngine.UI.GridLayoutGroup, <coopGame>k__BackingField: Assets.Scripts.Unity.Network.Btd6CoopGame, emoteGODict: System.Collections.Generic.Dictionary<System.String,UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle<UnityEngine.GameObject>>, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.emotesPanel = emotesPanel
		self.emotesGridLayout = emotesGridLayout
		self.<coopGame>k__BackingField = <coopGame>k__BackingField
		self.emoteGODict = emoteGODict


class EmoteHeroData:

    offsets = {'heroImg': 24}    
    def __init__(self, heroImg: UnityEngine.UI.Image, **kwargs):
        super().__init__(self, **kwargs)
		self.heroImg = heroImg


class EmotePlayerUi:

    offsets = {'emotePosition': 24, 'worldEmoteLayer': 32, 'worldPos': 40, 'showingEmote': 52, 'forceClearEmotesQueue': 53}    
    def __init__(self, emotePosition: UnityEngine.GameObject, worldEmoteLayer: UnityEngine.Transform, worldPos: UnityEngine.Vector3, showingEmote: System.Boolean, forceClearEmotesQueue: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.emotePosition = emotePosition
		self.worldEmoteLayer = worldEmoteLayer
		self.worldPos = worldPos
		self.showingEmote = showingEmote
		self.forceClearEmotesQueue = forceClearEmotesQueue


class BossUI:
	instance: Assets.Scripts.Unity.UI_New.InGame.Races.BossUI
    offsets = {'instance': 0, 'hideShowAnimator': 24, 'bossTimerObj': 32, 'bossTimerTxt': 40, 'bossObj': 48, 'bossImg': 56, 'starColorOn': 72, 'starColorOff': 88, 'hpBarImg': 104, 'skullParent': 112, 'skullPrefab': 120, 'bossHealthTxt': 128, 'noBossObj': 136, 'arriveBossImg': 144, 'bossArrivalTxt': 152, 'skullData': 160, 'showingBossUI': 168}    
    def __init__(self, instance: Assets.Scripts.Unity.UI_New.InGame.Races.BossUI, hideShowAnimator: UnityEngine.Animator, bossTimerObj: UnityEngine.GameObject, bossTimerTxt: TMPro.TMP_Text, bossObj: UnityEngine.GameObject, bossImg: UnityEngine.UI.Image, starColorOn: UnityEngine.Color, starColorOff: UnityEngine.Color, hpBarImg: UnityEngine.UI.Image, skullParent: UnityEngine.Transform, skullPrefab: UnityEngine.GameObject, bossHealthTxt: TMPro.TMP_Text, noBossObj: UnityEngine.GameObject, arriveBossImg: UnityEngine.UI.Image, bossArrivalTxt: TMPro.TMP_Text, skullData: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.InGame.Races.BossUI.SkullData>, showingBossUI: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.hideShowAnimator = hideShowAnimator
		self.bossTimerObj = bossTimerObj
		self.bossTimerTxt = bossTimerTxt
		self.bossObj = bossObj
		self.bossImg = bossImg
		self.starColorOn = starColorOn
		self.starColorOff = starColorOff
		self.hpBarImg = hpBarImg
		self.skullParent = skullParent
		self.skullPrefab = skullPrefab
		self.bossHealthTxt = bossHealthTxt
		self.noBossObj = noBossObj
		self.arriveBossImg = arriveBossImg
		self.bossArrivalTxt = bossArrivalTxt
		self.skullData = skullData
		self.showingBossUI = showingBossUI


class RaceUI:
	instance: Assets.Scripts.Unity.UI_New.InGame.Races.RaceUI
    offsets = {'instance': 0, 'raceTimer': 24, 'raceTimerTxt': 32, 'sendRoundFlagObj': 40, 'sendRoundFlagAnim': 48, 'ghostTimeTxt': 56, 'ghostTimeAnimator': 64, 'raceStartSound': 72, 'colourRed': 80, 'colourGreen': 88, 'red': 96, 'green': 112}    
    def __init__(self, instance: Assets.Scripts.Unity.UI_New.InGame.Races.RaceUI, raceTimer: UnityEngine.GameObject, raceTimerTxt: TMPro.TMP_Text, sendRoundFlagObj: UnityEngine.GameObject, sendRoundFlagAnim: UnityEngine.Animator, ghostTimeTxt: TMPro.TMP_Text, ghostTimeAnimator: UnityEngine.Animator, raceStartSound: UnityEngine.AudioClip, colourRed: System.String, colourGreen: System.String, red: UnityEngine.Color, green: UnityEngine.Color, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.raceTimer = raceTimer
		self.raceTimerTxt = raceTimerTxt
		self.sendRoundFlagObj = sendRoundFlagObj
		self.sendRoundFlagAnim = sendRoundFlagAnim
		self.ghostTimeTxt = ghostTimeTxt
		self.ghostTimeAnimator = ghostTimeAnimator
		self.raceStartSound = raceStartSound
		self.colourRed = colourRed
		self.colourGreen = colourGreen
		self.red = red
		self.green = green


class RemovableButton:

    offsets = {'visibleStateLabel': 24, 'closedStateName': 32, 'cost': 40, 'animator': 48, 'confirmButton': 56, 'rectTransform': 64, 'handler': 72, 'interactable': 80}    
    def __init__(self, visibleStateLabel: System.String, closedStateName: System.String, cost: TMPro.TextMeshProUGUI, animator: UnityEngine.Animator, confirmButton: UnityEngine.UI.Button, rectTransform: UnityEngine.RectTransform, handler: Assets.Scripts.Unity.UI_New.InGame.Removables.RemovableHandler, interactable: Assets.Scripts.Unity.Bridge.MapInteractable, **kwargs):
        super().__init__(self, **kwargs)
		self.visibleStateLabel = visibleStateLabel
		self.closedStateName = closedStateName
		self.cost = cost
		self.animator = animator
		self.confirmButton = confirmButton
		self.rectTransform = rectTransform
		self.handler = handler
		self.interactable = interactable


class RemovableHandler:
	instance: Assets.Scripts.Unity.UI_New.InGame.Removables.RemovableHandler
    offsets = {'instance': 0, 'removablePrefab': 24, 'backgroundPrefab': 32, 'background': 40, 'removableBtn': 48, 'buttons': 56}    
    def __init__(self, instance: Assets.Scripts.Unity.UI_New.InGame.Removables.RemovableHandler, removablePrefab: UnityEngine.GameObject, backgroundPrefab: UnityEngine.GameObject, background: UnityEngine.GameObject, removableBtn: Assets.Scripts.Unity.UI_New.InGame.Removables.RemovableButton, buttons: System.Collections.Generic.List<UnityEngine.GameObject>, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.removablePrefab = removablePrefab
		self.backgroundPrefab = backgroundPrefab
		self.background = background
		self.removableBtn = removableBtn
		self.buttons = buttons


class RightMenu:
	instance: Assets.Scripts.Unity.UI_New.InGame.RightMenu.RightMenu
    offsets = {'instance': 0, 'confirmPlacementBtn': 24, 'cancelPlacementBtn': 32, 'clickSound': 40, 'visibleStateLabel': 48, 'disableStateLabel': 56}    
    def __init__(self, instance: Assets.Scripts.Unity.UI_New.InGame.RightMenu.RightMenu, confirmPlacementBtn: Assets.Scripts.Unity.UI_New.InGame.StoreMenu.ConfirmPurchaseButton, cancelPlacementBtn: Assets.Scripts.Unity.UI_New.InGame.StoreMenu.CancelPurchaseButton, clickSound: UnityEngine.AudioClip, visibleStateLabel: System.String, disableStateLabel: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.confirmPlacementBtn = confirmPlacementBtn
		self.cancelPlacementBtn = cancelPlacementBtn
		self.clickSound = clickSound
		self.visibleStateLabel = visibleStateLabel
		self.disableStateLabel = disableStateLabel


class ShopMenu:
	instance: Assets.Scripts.Unity.UI_New.InGame.RightMenu.ShopMenu
    offsets = {'instance': 0, 'towerButtons': 24, 'towerButtonPrefab': 32, 'scrollRect': 40, 'powersButton': 48, 'bloonsButton': 56, 'goButton': 64, 'goButtonPulse': 72, 'sendRound': 80, 'upgradesButton': 88, 'clickSound': 96, 'click3Sound': 104, 'shopOrientation': 112, 'activeTowerButtons': 120, 'lockToTower': 128, 'resetButtonPositions': 129, 'initialised': 130, 'goButtonBtn': 136, 'monkeyTeamsBreakPrefab': 144, 'playBtnDisabled': 152, 'rebuildTowerSet': 153, 'disallowSelectingDifferentTowers': 154, 'selectedButton': 160, 'showingMonkeyTeams': 176}    
    def __init__(self, instance: Assets.Scripts.Unity.UI_New.InGame.RightMenu.ShopMenu, towerButtons: UnityEngine.GameObject, towerButtonPrefab: UnityEngine.GameObject, scrollRect: Assets.Scripts.Unity.Utils.ScrollRectWithDragCancel, powersButton: UnityEngine.GameObject, bloonsButton: UnityEngine.GameObject, goButton: UnityEngine.GameObject, goButtonPulse: UnityEngine.GameObject, sendRound: UnityEngine.GameObject, upgradesButton: UnityEngine.GameObject, clickSound: UnityEngine.AudioClip, click3Sound: UnityEngine.AudioClip, shopOrientation: Assets.Scripts.Unity.UI_New.Utils.UIOrientation, activeTowerButtons: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.InGame.StoreMenu.TowerPurchaseButton>, lockToTower: System.Boolean, resetButtonPositions: System.Boolean, initialised: System.Boolean, goButtonBtn: UnityEngine.UI.Button, monkeyTeamsBreakPrefab: UnityEngine.Animator, playBtnDisabled: System.Boolean, rebuildTowerSet: System.Boolean, disallowSelectingDifferentTowers: System.Boolean, selectedButton: Assets.Scripts.Unity.UI_New.InGame.StoreMenu.TowerPurchaseButton, showingMonkeyTeams: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.towerButtons = towerButtons
		self.towerButtonPrefab = towerButtonPrefab
		self.scrollRect = scrollRect
		self.powersButton = powersButton
		self.bloonsButton = bloonsButton
		self.goButton = goButton
		self.goButtonPulse = goButtonPulse
		self.sendRound = sendRound
		self.upgradesButton = upgradesButton
		self.clickSound = clickSound
		self.click3Sound = click3Sound
		self.shopOrientation = shopOrientation
		self.activeTowerButtons = activeTowerButtons
		self.lockToTower = lockToTower
		self.resetButtonPositions = resetButtonPositions
		self.initialised = initialised
		self.goButtonBtn = goButtonBtn
		self.monkeyTeamsBreakPrefab = monkeyTeamsBreakPrefab
		self.playBtnDisabled = playBtnDisabled
		self.rebuildTowerSet = rebuildTowerSet
		self.disallowSelectingDifferentTowers = disallowSelectingDifferentTowers
		self.selectedButton = selectedButton
		self.showingMonkeyTeams = showingMonkeyTeams


class InstaTowerGroupMenu:
	instance: Assets.Scripts.Unity.UI_New.InGame.RightMenu.Powers.InstaTowerGroupMenu
    offsets = {'instance': 0, 'instaTowerGroupButtons': 24, 'instaTowerGroupButtonPrefab': 32, 'toggleGroup': 40, 'allButtons': 48, 'selectedInstaTowerGroupButton': 56, 'player': 64, 'needsToCreateBtns': 72}    
    def __init__(self, instance: Assets.Scripts.Unity.UI_New.InGame.RightMenu.Powers.InstaTowerGroupMenu, instaTowerGroupButtons: UnityEngine.GameObject, instaTowerGroupButtonPrefab: UnityEngine.GameObject, toggleGroup: UnityEngine.UI.ToggleGroup, allButtons: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.InGame.RightMenu.Powers.StandardInstaTowerGroupButton>, selectedInstaTowerGroupButton: Assets.Scripts.Unity.UI_New.InGame.RightMenu.Powers.StandardInstaTowerGroupButton, player: Assets.Scripts.Unity.Player.Btd6Player, needsToCreateBtns: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.instaTowerGroupButtons = instaTowerGroupButtons
		self.instaTowerGroupButtonPrefab = instaTowerGroupButtonPrefab
		self.toggleGroup = toggleGroup
		self.allButtons = allButtons
		self.selectedInstaTowerGroupButton = selectedInstaTowerGroupButton
		self.player = player
		self.needsToCreateBtns = needsToCreateBtns


class InstaTowersMenu:
	instaTowersInstance: Assets.Scripts.Unity.UI_New.InGame.RightMenu.Powers.InstaTowersMenu
    offsets = {'instaTowersInstance': 0, 'powerButtons': 24, 'unusedButtons': 32, 'powerButtonPrefab': 40, 'swipe': 48, 'visibleStateLabel': 56, 'useLeftSide': 64, 'animator': 72, 'baseTowerModel': 80, 'updateGridLayoutt': 88, 'rebuildTowerSet': 89, 'powerUseButtons': 96, 'showing': 104}    
    def __init__(self, instaTowersInstance: Assets.Scripts.Unity.UI_New.InGame.RightMenu.Powers.InstaTowersMenu, powerButtons: UnityEngine.GameObject, unusedButtons: UnityEngine.GameObject, powerButtonPrefab: UnityEngine.GameObject, swipe: UnityEngine.UI.ScrollRect, visibleStateLabel: System.String, useLeftSide: System.Boolean, animator: UnityEngine.Animator, baseTowerModel: Assets.Scripts.Models.Towers.TowerModel, updateGridLayoutt: System.Boolean, rebuildTowerSet: System.Boolean, powerUseButtons: System.Collections.Generic.List<UnityEngine.GameObject>, showing: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.instaTowersInstance = instaTowersInstance
		self.powerButtons = powerButtons
		self.unusedButtons = unusedButtons
		self.powerButtonPrefab = powerButtonPrefab
		self.swipe = swipe
		self.visibleStateLabel = visibleStateLabel
		self.useLeftSide = useLeftSide
		self.animator = animator
		self.baseTowerModel = baseTowerModel
		self.updateGridLayoutt = updateGridLayoutt
		self.rebuildTowerSet = rebuildTowerSet
		self.powerUseButtons = powerUseButtons
		self.showing = showing


class PowerButton:

    offsets = {'powerModel': 24, 'selectionTimer': 32, 'selectionTimerMax': 36, 'isInsta': 40, 'doubleClick': 41, 'doubleClickTimer': 44}    
    def __init__(self, powerModel: Assets.Scripts.Models.Powers.PowerModel, selectionTimer: System.Single, selectionTimerMax: System.Single, isInsta: System.Boolean, doubleClick: System.Boolean, doubleClickTimer: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.powerModel = powerModel
		self.selectionTimer = selectionTimer
		self.selectionTimerMax = selectionTimerMax
		self.isInsta = isInsta
		self.doubleClick = doubleClick
		self.doubleClickTimer = doubleClickTimer


class PowersMenu:
	instance: Assets.Scripts.Unity.UI_New.InGame.RightMenu.Powers.PowersMenu
    offsets = {'instance': 0, 'powerButtons': 24, 'unusedButtons': 32, 'powerButtonPrefab': 40, 'scrollRect': 48, 'getMorePowersLarge': 56, 'showInstaMonkeysButton': 64, 'instaMonkeysText': 72, 'powersMenuRect': 80, 'instaTowerMenu': 88, 'resetButtonPositions': 96, 'open': 97, 'scrollingToInstaMonkeys': 98, 'scrollToInstasNormalizedPosition': 100, 'visibleStateLabel': 104, 'panelAnimator': 112, 'useLeftSide': 120, 'powerUseButtons': 128, 'selectedButton': 136}    
    def __init__(self, instance: Assets.Scripts.Unity.UI_New.InGame.RightMenu.Powers.PowersMenu, powerButtons: UnityEngine.GameObject, unusedButtons: UnityEngine.GameObject, powerButtonPrefab: UnityEngine.GameObject, scrollRect: Assets.Scripts.Unity.Utils.ScrollRectWithDragCancel, getMorePowersLarge: UnityEngine.UI.Button, showInstaMonkeysButton: UnityEngine.GameObject, instaMonkeysText: TMPro.TextMeshProUGUI, powersMenuRect: UnityEngine.RectTransform, instaTowerMenu: Assets.Scripts.Unity.UI_New.InGame.RightMenu.Powers.InstaTowersMenu, resetButtonPositions: System.Boolean, open: System.Boolean, scrollingToInstaMonkeys: System.Boolean, scrollToInstasNormalizedPosition: System.Single, visibleStateLabel: System.String, panelAnimator: UnityEngine.Animator, useLeftSide: System.Boolean, powerUseButtons: System.Collections.Generic.List<UnityEngine.GameObject>, selectedButton: Assets.Scripts.Unity.UI_New.InGame.RightMenu.Powers.PowerButton, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.powerButtons = powerButtons
		self.unusedButtons = unusedButtons
		self.powerButtonPrefab = powerButtonPrefab
		self.scrollRect = scrollRect
		self.getMorePowersLarge = getMorePowersLarge
		self.showInstaMonkeysButton = showInstaMonkeysButton
		self.instaMonkeysText = instaMonkeysText
		self.powersMenuRect = powersMenuRect
		self.instaTowerMenu = instaTowerMenu
		self.resetButtonPositions = resetButtonPositions
		self.open = open
		self.scrollingToInstaMonkeys = scrollingToInstaMonkeys
		self.scrollToInstasNormalizedPosition = scrollToInstasNormalizedPosition
		self.visibleStateLabel = visibleStateLabel
		self.panelAnimator = panelAnimator
		self.useLeftSide = useLeftSide
		self.powerUseButtons = powerUseButtons
		self.selectedButton = selectedButton


class StandardInstaTowerButton:

    offsets = {'tiers': 112, 'locked': 120, 'instaTowerModel': 128}    
    def __init__(self, tiers: TMPro.TextMeshProUGUI, locked: System.Boolean, instaTowerModel: Assets.Scripts.Models.Towers.TowerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.tiers = tiers
		self.locked = locked
		self.instaTowerModel = instaTowerModel


class StandardInstaTowerGroupButton:

    offsets = {'baseTowerModel': 24, 'icon': 32, 'lockedColor': 40, 'lockedTextColor': 56, 'powerCountText': 72, 'bg': 80}    
    def __init__(self, baseTowerModel: Assets.Scripts.Models.Towers.TowerModel, icon: UnityEngine.UI.Image, lockedColor: UnityEngine.Color, lockedTextColor: UnityEngine.Color, powerCountText: TMPro.TextMeshProUGUI, bg: UnityEngine.UI.Image, **kwargs):
        super().__init__(self, **kwargs)
		self.baseTowerModel = baseTowerModel
		self.icon = icon
		self.lockedColor = lockedColor
		self.lockedTextColor = lockedTextColor
		self.powerCountText = powerCountText
		self.bg = bg


class StandardPowerButton:

    offsets = {'icon': 48, 'lockedColor': 56, 'lockedTextColor': 72, 'powerCountIcon': 88, 'powerCountText': 96, 'selectedHighlight': 104}    
    def __init__(self, icon: UnityEngine.UI.Image, lockedColor: UnityEngine.Color, lockedTextColor: UnityEngine.Color, powerCountIcon: UnityEngine.GameObject, powerCountText: TMPro.TextMeshProUGUI, selectedHighlight: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.icon = icon
		self.lockedColor = lockedColor
		self.lockedTextColor = lockedTextColor
		self.powerCountIcon = powerCountIcon
		self.powerCountText = powerCountText
		self.selectedHighlight = selectedHighlight


class CashDisplay:

    offsets = {'text': 24}    
    def __init__(self, text: TMPro.TextMeshProUGUI, **kwargs):
        super().__init__(self, **kwargs)
		self.text = text


class GameMessageManager:

    offsets = {'showingMessage': 32}    
    def __init__(self, showingMessage: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.showingMessage = showingMessage


class HealthDisplay:

    offsets = {'text': 24, 'cachedHealth': 32}    
    def __init__(self, text: TMPro.TextMeshProUGUI, cachedHealth: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.text = text
		self.cachedHealth = cachedHealth


class HelperMessage:

    offsets = {'triggerLabel': 32, 'animator': 40, 'message': 48, 'clearAt': 56}    
    def __init__(self, triggerLabel: System.String, animator: UnityEngine.Animator, message: TMPro.TextMeshProUGUI, clearAt: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.triggerLabel = triggerLabel
		self.animator = animator
		self.message = message
		self.clearAt = clearAt


class LoanDisplay:

    offsets = {'text': 24}    
    def __init__(self, text: TMPro.TextMeshProUGUI, **kwargs):
        super().__init__(self, **kwargs)
		self.text = text


class MaxMonkeysHelperMessage:

    offsets = {'triggerLabel': 32, 'animator': 40, 'message': 48, 'clearAt': 56, 'showingMessageText': 60}    
    def __init__(self, triggerLabel: System.String, animator: UnityEngine.Animator, message: TMPro.TextMeshProUGUI, clearAt: System.Single, showingMessageText: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.triggerLabel = triggerLabel
		self.animator = animator
		self.message = message
		self.clearAt = clearAt
		self.showingMessageText = showingMessageText


class MessagerObject:

    offsets = {'manager': 24}    
    def __init__(self, manager: Assets.Scripts.Unity.UI_New.InGame.Stats.GameMessageManager, **kwargs):
        super().__init__(self, **kwargs)
		self.manager = manager


class MonkeyMoney:

    offsets = {'text': 24, 'debugBtn': 32, 'debugObj': 40, 'input': 48}    
    def __init__(self, text: TMPro.TextMeshProUGUI, debugBtn: UnityEngine.UI.Button, debugObj: UnityEngine.GameObject, input: TMPro.TMP_InputField, **kwargs):
        super().__init__(self, **kwargs)
		self.text = text
		self.debugBtn = debugBtn
		self.debugObj = debugObj
		self.input = input


class NetworkDisplay:

    offsets = {'text': 24, 'updateSpan': 32}    
    def __init__(self, text: TMPro.TextMeshProUGUI, updateSpan: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.text = text
		self.updateSpan = updateSpan


class RoundDisplay:

    offsets = {'text': 24, 'cachedRoundDisp': 32}    
    def __init__(self, text: TMPro.TextMeshProUGUI, cachedRoundDisp: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.text = text
		self.cachedRoundDisp = cachedRoundDisp


class SelectedTowerDisplay:

    offsets = {'text': 24, 'prevTowerName': 32, 'visibleStateLabel': 40, 'animator': 48}    
    def __init__(self, text: TMPro.TextMeshProUGUI, prevTowerName: System.String, visibleStateLabel: System.String, animator: UnityEngine.Animator, **kwargs):
        super().__init__(self, **kwargs)
		self.text = text
		self.prevTowerName = prevTowerName
		self.visibleStateLabel = visibleStateLabel
		self.animator = animator


class ShieldDisplay:

    offsets = {'text': 24, 'animator': 32, 'showingShield': 40, 'cachedShield': 44}    
    def __init__(self, text: TMPro.TextMeshProUGUI, animator: UnityEngine.Animator, showingShield: System.Boolean, cachedShield: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.text = text
		self.animator = animator
		self.showingShield = showingShield
		self.cachedShield = cachedShield


class CancelPurchaseButton:

    offsets = {'visibleStateLabel': 24, 'animator': 32}    
    def __init__(self, visibleStateLabel: System.String, animator: UnityEngine.Animator, **kwargs):
        super().__init__(self, **kwargs)
		self.visibleStateLabel = visibleStateLabel
		self.animator = animator


class ConfirmPurchaseButton:

    offsets = {'visibleStateLabel': 24, 'animator': 32}    
    def __init__(self, visibleStateLabel: System.String, animator: UnityEngine.Animator, **kwargs):
        super().__init__(self, **kwargs)
		self.visibleStateLabel = visibleStateLabel
		self.animator = animator


class PageSwipe:

    offsets = {'pageSwipeDelegate': 24, 'layoutGroup': 32, 'rect': 40, 'lerpSpeed': 48, 'locked': 52, 'pointerDown': 53, 'checkSwipe': 54, 'prevPointerPos': 56, 'startPos': 72, 'targetPos': 84, 'lerpDelta': 96}    
    def __init__(self, pageSwipeDelegate: Assets.Scripts.Unity.UI_New.InGame.StoreMenu.PageSwipe.OnPageSwipe, layoutGroup: UnityEngine.UI.GridLayoutGroup, rect: UnityEngine.RectTransform, lerpSpeed: System.Single, locked: System.Boolean, pointerDown: System.Boolean, checkSwipe: System.Boolean, prevPointerPos: UnityEngine.Vector2, startPos: UnityEngine.Vector3, targetPos: UnityEngine.Vector3, lerpDelta: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.pageSwipeDelegate = pageSwipeDelegate
		self.layoutGroup = layoutGroup
		self.rect = rect
		self.lerpSpeed = lerpSpeed
		self.locked = locked
		self.pointerDown = pointerDown
		self.checkSwipe = checkSwipe
		self.prevPointerPos = prevPointerPos
		self.startPos = startPos
		self.targetPos = targetPos
		self.lerpDelta = lerpDelta


class SidePageSwipe:

    offsets = {'orientation': 104, 'startScrolling': 108, 'target': 112, 'triggerA': 116, 'triggerB': 120, 'swipeRatio': 124}    
    def __init__(self, orientation: Assets.Scripts.Unity.UI_New.Utils.UIOrientation, startScrolling: System.Boolean, target: System.Single, triggerA: System.Single, triggerB: System.Single, swipeRatio: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.orientation = orientation
		self.startScrolling = startScrolling
		self.target = target
		self.triggerA = triggerA
		self.triggerB = triggerB
		self.swipeRatio = swipeRatio


class StandardTowerPurchaseButton:

    offsets = {'icon': 128, 'upgradeAailableIcon': 136, 'notEnoughCashTextColor': 144, 'towerCountIcon': 160, 'towerCountText': 168, 'towerCostText': 176, 'unlockAnimator': 184, 'primarySprite': 192, 'militarySprite': 200, 'magicSprite': 208, 'supportSprite': 216, 'heroSprite': 224, 'grayscaleMaterial': 232, 'lockedIcon': 240, 'highlight': 248, 'monkeyTeamsBgSprite': 256, 'monkeyTeamsTopSprite': 264, 'monkeyTeamsTopImg': 272, 'bg': 280, 'locked': 288}    
    def __init__(self, icon: UnityEngine.UI.Image, upgradeAailableIcon: UnityEngine.UI.Image, notEnoughCashTextColor: UnityEngine.Color, towerCountIcon: UnityEngine.GameObject, towerCountText: TMPro.TextMeshProUGUI, towerCostText: TMPro.TextMeshProUGUI, unlockAnimator: UnityEngine.Animator, primarySprite: Assets.Scripts.Utils.SpriteReference, militarySprite: Assets.Scripts.Utils.SpriteReference, magicSprite: Assets.Scripts.Utils.SpriteReference, supportSprite: Assets.Scripts.Utils.SpriteReference, heroSprite: Assets.Scripts.Utils.SpriteReference, grayscaleMaterial: UnityEngine.Material, lockedIcon: UnityEngine.GameObject, highlight: UnityEngine.GameObject, monkeyTeamsBgSprite: Assets.Scripts.Utils.SpriteReference, monkeyTeamsTopSprite: Assets.Scripts.Utils.SpriteReference, monkeyTeamsTopImg: UnityEngine.UI.Image, bg: UnityEngine.UI.Image, locked: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.icon = icon
		self.upgradeAailableIcon = upgradeAailableIcon
		self.notEnoughCashTextColor = notEnoughCashTextColor
		self.towerCountIcon = towerCountIcon
		self.towerCountText = towerCountText
		self.towerCostText = towerCostText
		self.unlockAnimator = unlockAnimator
		self.primarySprite = primarySprite
		self.militarySprite = militarySprite
		self.magicSprite = magicSprite
		self.supportSprite = supportSprite
		self.heroSprite = heroSprite
		self.grayscaleMaterial = grayscaleMaterial
		self.lockedIcon = lockedIcon
		self.highlight = highlight
		self.monkeyTeamsBgSprite = monkeyTeamsBgSprite
		self.monkeyTeamsTopSprite = monkeyTeamsTopSprite
		self.monkeyTeamsTopImg = monkeyTeamsTopImg
		self.bg = bg
		self.locked = locked


class TowerPurchaseButton:

    offsets = {'cost': 24, 'towerMetaData': 32, 'orientation': 40, 'initialised': 44, 'buttonIndex': 72, 'selectionTimer': 76, 'selectionTimerMax': 80, 'hero': 84, 'showTowerCount': 85, 'updateIcon': 86, 'cashChanged': 87, 'costChanged': 88, 'xpChanged': 89, 'upgradesChanged': 90, 'unlocksChanged': 91, 'towerCountsChanged': 92, 'buttonDisabled': 93, 'shopMenu': 96, 'baseTowerModel': 104, 'doubleClick': 112, 'doubleClickTimer': 116, 'towerBeingDragged': 120}    
    def __init__(self, cost: System.Single, towerMetaData: System.String, orientation: Assets.Scripts.Unity.UI_New.Utils.UIOrientation, initialised: System.Boolean, buttonIndex: System.Int32, selectionTimer: System.Single, selectionTimerMax: System.Single, hero: System.Boolean, showTowerCount: System.Boolean, updateIcon: System.Boolean, cashChanged: System.Boolean, costChanged: System.Boolean, xpChanged: System.Boolean, upgradesChanged: System.Boolean, unlocksChanged: System.Boolean, towerCountsChanged: System.Boolean, buttonDisabled: System.Boolean, shopMenu: Assets.Scripts.Unity.UI_New.InGame.RightMenu.ShopMenu, baseTowerModel: Assets.Scripts.Models.Towers.TowerModel, doubleClick: System.Boolean, doubleClickTimer: System.Single, towerBeingDragged: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.cost = cost
		self.towerMetaData = towerMetaData
		self.orientation = orientation
		self.initialised = initialised
		self.buttonIndex = buttonIndex
		self.selectionTimer = selectionTimer
		self.selectionTimerMax = selectionTimerMax
		self.hero = hero
		self.showTowerCount = showTowerCount
		self.updateIcon = updateIcon
		self.cashChanged = cashChanged
		self.costChanged = costChanged
		self.xpChanged = xpChanged
		self.upgradesChanged = upgradesChanged
		self.unlocksChanged = unlocksChanged
		self.towerCountsChanged = towerCountsChanged
		self.buttonDisabled = buttonDisabled
		self.shopMenu = shopMenu
		self.baseTowerModel = baseTowerModel
		self.doubleClick = doubleClick
		self.doubleClickTimer = doubleClickTimer
		self.towerBeingDragged = towerBeingDragged


class TowerPurchaseLockState:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class AbilityButton:

    offsets = {'infoTitle': 24, 'infoDescription': 32, 'infoPanel': 40, 'button': 48, 'cooldownFade': 56, 'icon': 64, 'disabledImage': 72, 'activeEffect': 80, 'ability': 88, '<currentAbilityIcon>k__BackingField': 96}    
    def __init__(self, infoTitle: TMPro.TextMeshProUGUI, infoDescription: TMPro.TextMeshProUGUI, infoPanel: UnityEngine.GameObject, button: UnityEngine.UI.Button, cooldownFade: UnityEngine.UI.Image, icon: UnityEngine.UI.Image, disabledImage: UnityEngine.UI.Image, activeEffect: UnityEngine.GameObject, ability: Assets.Scripts.Unity.Bridge.AbilityToSimulation, <currentAbilityIcon>k__BackingField: Assets.Scripts.Utils.SpriteReference, **kwargs):
        super().__init__(self, **kwargs)
		self.infoTitle = infoTitle
		self.infoDescription = infoDescription
		self.infoPanel = infoPanel
		self.button = button
		self.cooldownFade = cooldownFade
		self.icon = icon
		self.disabledImage = disabledImage
		self.activeEffect = activeEffect
		self.ability = ability
		self.<currentAbilityIcon>k__BackingField = <currentAbilityIcon>k__BackingField


class CurrentUpgrade:

    offsets = {'notUpgraded': 24, 'label': 32, 'cost': 40, 'icon': 48, 'backgroundActive': 56, 'backgroundInactive': 64, 'wobbleAnimation': 72, 'background': 80, 'current': 88, 'title': 96, 'desc': 104, 'row': 112, 'hoverPopupDelay': 116, 'hovering': 120, 'hoverTimer': 124}    
    def __init__(self, notUpgraded: UnityEngine.GameObject, label: TMPro.TextMeshProUGUI, cost: TMPro.TextMeshProUGUI, icon: UnityEngine.UI.Image, backgroundActive: Assets.Scripts.Utils.SpriteReference, backgroundInactive: Assets.Scripts.Utils.SpriteReference, wobbleAnimation: UnityEngine.Animator, background: UnityEngine.UI.Image, current: Assets.Scripts.Models.Towers.Upgrades.UpgradeModel, title: System.String, desc: System.String, row: System.Int32, hoverPopupDelay: System.Single, hovering: System.Boolean, hoverTimer: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.notUpgraded = notUpgraded
		self.label = label
		self.cost = cost
		self.icon = icon
		self.backgroundActive = backgroundActive
		self.backgroundInactive = backgroundInactive
		self.wobbleAnimation = wobbleAnimation
		self.background = background
		self.current = current
		self.title = title
		self.desc = desc
		self.row = row
		self.hoverPopupDelay = hoverPopupDelay
		self.hovering = hovering
		self.hoverTimer = hoverTimer


class InstaTowerSelectionMenu:
	instance: Assets.Scripts.Unity.UI_New.InGame.TowerSelectionMenu.InstaTowerSelectionMenu
    offsets = {'instance': 0, 'visibleStateLabel': 24, 'openTest': 32, 'animator': 40, 'roundMenuAnimator': 56}    
    def __init__(self, instance: Assets.Scripts.Unity.UI_New.InGame.TowerSelectionMenu.InstaTowerSelectionMenu, visibleStateLabel: System.String, openTest: System.Boolean, animator: UnityEngine.Animator, roundMenuAnimator: UnityEngine.Animator, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.visibleStateLabel = visibleStateLabel
		self.openTest = openTest
		self.animator = animator
		self.roundMenuAnimator = roundMenuAnimator


class StackedAbilityButton:

    offsets = {'abilityCount': 104, 'abilityCountContainer': 112, 'abilities': 120, 'currentAbility': 128}    
    def __init__(self, abilityCount: TMPro.TextMeshProUGUI, abilityCountContainer: UnityEngine.GameObject, abilities: System.Collections.Generic.List<Assets.Scripts.Unity.Bridge.AbilityToSimulation>, currentAbility: Assets.Scripts.Unity.Bridge.AbilityToSimulation, **kwargs):
        super().__init__(self, **kwargs)
		self.abilityCount = abilityCount
		self.abilityCountContainer = abilityCountContainer
		self.abilities = abilities
		self.currentAbility = currentAbility


class TierObject:

    offsets = {'restrictedImage': 24, 'onImage': 32, 'offImage': 40}    
    def __init__(self, restrictedImage: UnityEngine.UI.Image, onImage: UnityEngine.UI.Image, offImage: UnityEngine.UI.Image, **kwargs):
        super().__init__(self, **kwargs)
		self.restrictedImage = restrictedImage
		self.onImage = onImage
		self.offImage = offImage


class TowerSelectionMenu:
	instance: Assets.Scripts.Unity.UI_New.InGame.TowerSelectionMenu.TowerSelectionMenu
    offsets = {'instance': 0, 'visibleStateLabel': 24, 'sellText': 32, 'heroDetails': 40, 'towerDetails': 48, 'paragonDetails': 56, 'animator': 64, 'sellButton': 80, 'rightMenu': 88, 'CurrentHeroLevelTitle': 96, 'CurrentHeroLevelDescription': 104, 'CurrentHeroLevel': 112, 'NextHeroLevelTitle': 120, 'NextHeroLevelDescription': 128, 'UnlockNextHeroCost': 136, 'unlockNextHeroLevelBtn': 144, 'HeroXpBar': 152, 'paragonTitle': 176, 'paragonDescription': 184, 'paragonDegree': 192, 'paragonIcon': 200, 'scalar': 208, 'bottomScaleAmount': 216, 'selectedTower': 232, 'unsellableTowers': 240, 'returnSound': 248, 'themeManager': 256, 'heroBoosterButton': 264, 'heroBoosterButtonText': 272, 'duplicateButton': 280, 'duplicateCircleButton': 288, 'placeCrosspathsButton': 296, 'paragonButton': 304, 'forceParagonButton': 312, 'fromLevel': 320}    
    def __init__(self, instance: Assets.Scripts.Unity.UI_New.InGame.TowerSelectionMenu.TowerSelectionMenu, visibleStateLabel: System.String, sellText: TMPro.TextMeshProUGUI, heroDetails: UnityEngine.GameObject, towerDetails: UnityEngine.GameObject, paragonDetails: UnityEngine.GameObject, animator: UnityEngine.Animator, sellButton: UnityEngine.GameObject, rightMenu: Assets.Scripts.Unity.UI_New.InGame.RightMenu.RightMenu, CurrentHeroLevelTitle: TMPro.TextMeshProUGUI, CurrentHeroLevelDescription: TMPro.TextMeshProUGUI, CurrentHeroLevel: TMPro.TextMeshProUGUI, NextHeroLevelTitle: TMPro.TextMeshProUGUI, NextHeroLevelDescription: TMPro.TextMeshProUGUI, UnlockNextHeroCost: TMPro.TextMeshProUGUI, unlockNextHeroLevelBtn: UnityEngine.UI.Button, HeroXpBar: UnityEngine.UI.Image, paragonTitle: TMPro.TextMeshProUGUI, paragonDescription: TMPro.TextMeshProUGUI, paragonDegree: TMPro.TextMeshProUGUI, paragonIcon: UnityEngine.UI.Image, scalar: UnityEngine.RectTransform, bottomScaleAmount: System.Single, selectedTower: Assets.Scripts.Unity.Bridge.TowerToSimulation, unsellableTowers: System.Collections.Generic.List<System.Int32>, returnSound: UnityEngine.AudioClip, themeManager: Assets.Scripts.Unity.UI_New.InGame.TowerSelectionMenu.TowerSelectionMenuThemeManager, heroBoosterButton: UnityEngine.UI.Button, heroBoosterButtonText: TMPro.TextMeshProUGUI, duplicateButton: UnityEngine.UI.Button, duplicateCircleButton: UnityEngine.UI.Button, placeCrosspathsButton: UnityEngine.UI.Button, paragonButton: UnityEngine.UI.Button, forceParagonButton: UnityEngine.UI.Button, fromLevel: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.visibleStateLabel = visibleStateLabel
		self.sellText = sellText
		self.heroDetails = heroDetails
		self.towerDetails = towerDetails
		self.paragonDetails = paragonDetails
		self.animator = animator
		self.sellButton = sellButton
		self.rightMenu = rightMenu
		self.CurrentHeroLevelTitle = CurrentHeroLevelTitle
		self.CurrentHeroLevelDescription = CurrentHeroLevelDescription
		self.CurrentHeroLevel = CurrentHeroLevel
		self.NextHeroLevelTitle = NextHeroLevelTitle
		self.NextHeroLevelDescription = NextHeroLevelDescription
		self.UnlockNextHeroCost = UnlockNextHeroCost
		self.unlockNextHeroLevelBtn = unlockNextHeroLevelBtn
		self.HeroXpBar = HeroXpBar
		self.paragonTitle = paragonTitle
		self.paragonDescription = paragonDescription
		self.paragonDegree = paragonDegree
		self.paragonIcon = paragonIcon
		self.scalar = scalar
		self.bottomScaleAmount = bottomScaleAmount
		self.selectedTower = selectedTower
		self.unsellableTowers = unsellableTowers
		self.returnSound = returnSound
		self.themeManager = themeManager
		self.heroBoosterButton = heroBoosterButton
		self.heroBoosterButtonText = heroBoosterButtonText
		self.duplicateButton = duplicateButton
		self.duplicateCircleButton = duplicateCircleButton
		self.placeCrosspathsButton = placeCrosspathsButton
		self.paragonButton = paragonButton
		self.forceParagonButton = forceParagonButton
		self.fromLevel = fromLevel


class TowerSelectionMenuThemeManager:

    offsets = {'themeReferencesByThemeId': 24, 'towerSelectionMenu': 32, 'themes': 40, 'currentTheme': 48, 'themeUpdateCoroutine': 56, 'loadHandle': 64}    
    def __init__(self, themeReferencesByThemeId: Assets.Scripts.Unity.UI_New.InGame.TowerSelectionMenu.TowerSelectionMenuThemeManager.ThemeDictionary, towerSelectionMenu: Assets.Scripts.Unity.UI_New.InGame.TowerSelectionMenu.TowerSelectionMenu, themes: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.InGame.TowerSelectionMenu.TowerSelectionMenuThemes.BaseTSMTheme>, currentTheme: Assets.Scripts.Unity.UI_New.InGame.TowerSelectionMenu.TowerSelectionMenuThemes.BaseTSMTheme, themeUpdateCoroutine: UnityEngine.Coroutine, loadHandle: UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle<UnityEngine.GameObject>, **kwargs):
        super().__init__(self, **kwargs)
		self.themeReferencesByThemeId = themeReferencesByThemeId
		self.towerSelectionMenu = towerSelectionMenu
		self.themes = themes
		self.currentTheme = currentTheme
		self.themeUpdateCoroutine = themeUpdateCoroutine
		self.loadHandle = loadHandle


class UpgradeButton:
	upgradeCashOffset: System.Single
    offsets = {'upgradeCashOffset': 0, 'label': 24, 'cost': 32, 'labelParagon': 40, 'costParagon': 48, 'costActiveColor': 56, 'costInactiveColor': 72, 'lockedText': 88, 'icon': 96, 'purchaseArrowGlow': 104, 'tts': 112, 'backgroundActive': 120, 'backgroundInactive': 128, 'backgroundParagon': 136, 'upgrade': 144, 'background': 152, 'restrictedIcon': 160, 'lockedIcon': 168, 'upgradableIcon': 176, 'upgradeAvailableColor': 184, 'upgradeUnavailableColor': 200, 'purchasableColor': 216, 'nonPurchasableColor': 232, 'lockedMaterial': 248, 'unlockedMaterial': 256, 'wobbleAnimation': 264, 'monkeyVillageRequirement': 272, 'monkeyVillageRequirementText': 280, 'row': 288, 'upgradeCost': 292, 'upgradeStatus': 296, 'title': 304, 'desc': 312, 'hoverPopupDelay': 320, 'hovering': 324, 'hoverTimer': 328}    
    def __init__(self, upgradeCashOffset: System.Single, label: TMPro.TextMeshProUGUI, cost: TMPro.TextMeshProUGUI, labelParagon: TMPro.TextMeshProUGUI, costParagon: TMPro.TextMeshProUGUI, costActiveColor: UnityEngine.Color, costInactiveColor: UnityEngine.Color, lockedText: TMPro.TextMeshProUGUI, icon: UnityEngine.UI.Image, purchaseArrowGlow: UnityEngine.GameObject, tts: Assets.Scripts.Unity.Bridge.TowerToSimulation, backgroundActive: Assets.Scripts.Utils.SpriteReference, backgroundInactive: Assets.Scripts.Utils.SpriteReference, backgroundParagon: Assets.Scripts.Utils.SpriteReference, upgrade: Assets.Scripts.Models.Towers.Upgrades.UpgradeModel, background: UnityEngine.UI.Image, restrictedIcon: UnityEngine.UI.Image, lockedIcon: UnityEngine.UI.Image, upgradableIcon: UnityEngine.UI.Image, upgradeAvailableColor: UnityEngine.Color, upgradeUnavailableColor: UnityEngine.Color, purchasableColor: UnityEngine.Color, nonPurchasableColor: UnityEngine.Color, lockedMaterial: UnityEngine.Material, unlockedMaterial: UnityEngine.Material, wobbleAnimation: UnityEngine.Animator, monkeyVillageRequirement: UnityEngine.GameObject, monkeyVillageRequirementText: TMPro.TextMeshProUGUI, row: System.Int32, upgradeCost: System.Single, upgradeStatus: Assets.Scripts.Unity.UI_New.InGame.TowerSelectionMenu.UpgradeButton.UpgradeStatus, title: System.String, desc: System.String, hoverPopupDelay: System.Single, hovering: System.Boolean, hoverTimer: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.upgradeCashOffset = upgradeCashOffset
		self.label = label
		self.cost = cost
		self.labelParagon = labelParagon
		self.costParagon = costParagon
		self.costActiveColor = costActiveColor
		self.costInactiveColor = costInactiveColor
		self.lockedText = lockedText
		self.icon = icon
		self.purchaseArrowGlow = purchaseArrowGlow
		self.tts = tts
		self.backgroundActive = backgroundActive
		self.backgroundInactive = backgroundInactive
		self.backgroundParagon = backgroundParagon
		self.upgrade = upgrade
		self.background = background
		self.restrictedIcon = restrictedIcon
		self.lockedIcon = lockedIcon
		self.upgradableIcon = upgradableIcon
		self.upgradeAvailableColor = upgradeAvailableColor
		self.upgradeUnavailableColor = upgradeUnavailableColor
		self.purchasableColor = purchasableColor
		self.nonPurchasableColor = nonPurchasableColor
		self.lockedMaterial = lockedMaterial
		self.unlockedMaterial = unlockedMaterial
		self.wobbleAnimation = wobbleAnimation
		self.monkeyVillageRequirement = monkeyVillageRequirement
		self.monkeyVillageRequirementText = monkeyVillageRequirementText
		self.row = row
		self.upgradeCost = upgradeCost
		self.upgradeStatus = upgradeStatus
		self.title = title
		self.desc = desc
		self.hoverPopupDelay = hoverPopupDelay
		self.hovering = hovering
		self.hoverTimer = hoverTimer


class UpgradeInfoPopup:

    offsets = {'titleTxt': 24, 'decriptionTxt': 32, 'animator': 40, 'openedRight': 48, 'showing': 49, 'upgradeObj': 56, 'forCurrent': 64}    
    def __init__(self, titleTxt: TMPro.TextMeshProUGUI, decriptionTxt: TMPro.TextMeshProUGUI, animator: UnityEngine.Animator, openedRight: System.Boolean, showing: System.Boolean, upgradeObj: Assets.Scripts.Unity.UI_New.InGame.TowerSelectionMenu.UpgradeObject, forCurrent: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.titleTxt = titleTxt
		self.decriptionTxt = decriptionTxt
		self.animator = animator
		self.openedRight = openedRight
		self.showing = showing
		self.upgradeObj = upgradeObj
		self.forCurrent = forCurrent


class UpgradeObject:

    offsets = {'buttonID': 24, 'upgradeButton': 32, 'currentUpgrade': 40, 'locked': 56, 'restricted': 64, 'towerSelectionMenu': 72, 'tts': 80, 'path': 88, 'tier': 92}    
    def __init__(self, buttonID: System.Int32, upgradeButton: Assets.Scripts.Unity.UI_New.InGame.TowerSelectionMenu.UpgradeButton, currentUpgrade: Assets.Scripts.Unity.UI_New.InGame.TowerSelectionMenu.CurrentUpgrade, locked: UnityEngine.GameObject, restricted: UnityEngine.GameObject, towerSelectionMenu: Assets.Scripts.Unity.UI_New.InGame.TowerSelectionMenu.TowerSelectionMenu, tts: Assets.Scripts.Unity.Bridge.TowerToSimulation, path: System.Int32, tier: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.buttonID = buttonID
		self.upgradeButton = upgradeButton
		self.currentUpgrade = currentUpgrade
		self.locked = locked
		self.restricted = restricted
		self.towerSelectionMenu = towerSelectionMenu
		self.tts = tts
		self.path = path
		self.tier = tier


class BaseTSMTheme:

    offsets = {'infoButton': 24, 'themeId': 32}    
    def __init__(self, infoButton: UnityEngine.GameObject, themeId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.infoButton = infoButton
		self.themeId = themeId


class TSMButton:

    offsets = {'buttonId': 24, 'canInvokeCustomInput': 32, 'customInputId': 40, 'sound': 48, 'ignoreOwnerCheck': 56, 'button': 64}    
    def __init__(self, buttonId: System.String, canInvokeCustomInput: System.Boolean, customInputId: System.String, sound: UnityEngine.AudioClip, ignoreOwnerCheck: System.Boolean, button: UnityEngine.UI.Button, **kwargs):
        super().__init__(self, **kwargs)
		self.buttonId = buttonId
		self.canInvokeCustomInput = canInvokeCustomInput
		self.customInputId = customInputId
		self.sound = sound
		self.ignoreOwnerCheck = ignoreOwnerCheck
		self.button = button


class TSMThemeAmbidextrousRangs:

    offsets = {'leftHandButton': 184, 'rightHandButton': 192, 'isMonkeyPortraitFlipped': 200}    
    def __init__(self, leftHandButton: Assets.Scripts.Unity.UI_New.InGame.TowerSelectionMenu.TowerSelectionMenuThemes.TSMButton, rightHandButton: Assets.Scripts.Unity.UI_New.InGame.TowerSelectionMenu.TowerSelectionMenuThemes.TSMButton, isMonkeyPortraitFlipped: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.leftHandButton = leftHandButton
		self.rightHandButton = rightHandButton
		self.isMonkeyPortraitFlipped = isMonkeyPortraitFlipped


class TSMThemeBananaFarm:

    offsets = {'collectButton': 184, 'collectAllButton': 192, 'depositButton': 200, 'collectObject': 208, 'collectAllObject': 216, 'depositObject': 224, 'collectAmount': 232, 'collectAllAmount': 240, 'depositAmount': 248, 'debtObject': 256, 'debtText': 264, 'info': 272}    
    def __init__(self, collectButton: Assets.Scripts.Unity.UI_New.InGame.TowerSelectionMenu.TowerSelectionMenuThemes.TSMButton, collectAllButton: Assets.Scripts.Unity.UI_New.InGame.TowerSelectionMenu.TowerSelectionMenuThemes.TSMButton, depositButton: Assets.Scripts.Unity.UI_New.InGame.TowerSelectionMenu.TowerSelectionMenuThemes.TSMButton, collectObject: UnityEngine.GameObject, collectAllObject: UnityEngine.GameObject, depositObject: UnityEngine.GameObject, collectAmount: NK_TextMeshProUGUI, collectAllAmount: NK_TextMeshProUGUI, depositAmount: NK_TextMeshProUGUI, debtObject: UnityEngine.GameObject, debtText: NK_TextMeshProUGUI, info: Assets.Scripts.Models.TowerSelectionMenuTheme.TSMInfoModel, **kwargs):
        super().__init__(self, **kwargs)
		self.collectButton = collectButton
		self.collectAllButton = collectAllButton
		self.depositButton = depositButton
		self.collectObject = collectObject
		self.collectAllObject = collectAllObject
		self.depositObject = depositObject
		self.collectAmount = collectAmount
		self.collectAllAmount = collectAllAmount
		self.depositAmount = depositAmount
		self.debtObject = debtObject
		self.debtText = debtText
		self.info = info


class TSMThemeDefault:

    offsets = {'towerName': 40, 'popCountText': 48, 'cashCountText': 56, 'targetTypeText': 64, 'towerMonkeyImage': 72, 'towerBackgroundImage': 80, 'primarySprite': 88, 'militarySprite': 96, 'magicSprite': 104, 'supportSprite': 112, 'heroSprite': 120, 'paragonSprite': 128, 'targetTypeBackwardsButton': 136, 'targetTypeForwardsButton': 144, 'namedMonkeyInput': 152, 'namedMonkeyButton': 160, 'currentTowerMonkeyImage': 176}    
    def __init__(self, towerName: NK_TextMeshProUGUI, popCountText: NK_TextMeshProUGUI, cashCountText: NK_TextMeshProUGUI, targetTypeText: NK_TextMeshProUGUI, towerMonkeyImage: UnityEngine.UI.Image, towerBackgroundImage: UnityEngine.UI.Image, primarySprite: Assets.Scripts.Utils.SpriteReference, militarySprite: Assets.Scripts.Utils.SpriteReference, magicSprite: Assets.Scripts.Utils.SpriteReference, supportSprite: Assets.Scripts.Utils.SpriteReference, heroSprite: Assets.Scripts.Utils.SpriteReference, paragonSprite: Assets.Scripts.Utils.SpriteReference, targetTypeBackwardsButton: Assets.Scripts.Unity.UI_New.InGame.TowerSelectionMenu.TowerSelectionMenuThemes.TSMButton, targetTypeForwardsButton: Assets.Scripts.Unity.UI_New.InGame.TowerSelectionMenu.TowerSelectionMenuThemes.TSMButton, namedMonkeyInput: UnityEngine.GameObject, namedMonkeyButton: Assets.Scripts.Unity.UI_New.InGame.TowerSelectionMenu.TowerSelectionMenuThemes.TSMButton, currentTowerMonkeyImage: Assets.Scripts.Utils.SpriteReference, **kwargs):
        super().__init__(self, **kwargs)
		self.towerName = towerName
		self.popCountText = popCountText
		self.cashCountText = cashCountText
		self.targetTypeText = targetTypeText
		self.towerMonkeyImage = towerMonkeyImage
		self.towerBackgroundImage = towerBackgroundImage
		self.primarySprite = primarySprite
		self.militarySprite = militarySprite
		self.magicSprite = magicSprite
		self.supportSprite = supportSprite
		self.heroSprite = heroSprite
		self.paragonSprite = paragonSprite
		self.targetTypeBackwardsButton = targetTypeBackwardsButton
		self.targetTypeForwardsButton = targetTypeForwardsButton
		self.namedMonkeyInput = namedMonkeyInput
		self.namedMonkeyButton = namedMonkeyButton
		self.currentTowerMonkeyImage = currentTowerMonkeyImage


class TSMThemeEnergisingTotem:

    offsets = {'rechargeButton': 184, 'rechargeCostText': 192, 'info': 200}    
    def __init__(self, rechargeButton: Assets.Scripts.Unity.UI_New.InGame.TowerSelectionMenu.TowerSelectionMenuThemes.TSMButton, rechargeCostText: NK_TextMeshProUGUI, info: Assets.Scripts.Models.TowerSelectionMenuTheme.TSMInfoModel, **kwargs):
        super().__init__(self, **kwargs)
		self.rechargeButton = rechargeButton
		self.rechargeCostText = rechargeCostText
		self.info = info


class TSMThemeRoboMonkey:

    offsets = {'targetTypeLeftTxt': 184, 'targetLeftPrevBtn': 192, 'targetLeftNextBtn': 200, 'targetRightPrevBtn': 208, 'targetRightNextBtn': 216, 'targetBtnSound': 224, 'selectedTower': 232}    
    def __init__(self, targetTypeLeftTxt: NK_TextMeshProUGUI, targetLeftPrevBtn: UnityEngine.UI.Button, targetLeftNextBtn: UnityEngine.UI.Button, targetRightPrevBtn: UnityEngine.UI.Button, targetRightNextBtn: UnityEngine.UI.Button, targetBtnSound: UnityEngine.AudioClip, selectedTower: Assets.Scripts.Unity.Bridge.TowerToSimulation, **kwargs):
        super().__init__(self, **kwargs)
		self.targetTypeLeftTxt = targetTypeLeftTxt
		self.targetLeftPrevBtn = targetLeftPrevBtn
		self.targetLeftNextBtn = targetLeftNextBtn
		self.targetRightPrevBtn = targetRightPrevBtn
		self.targetRightNextBtn = targetRightNextBtn
		self.targetBtnSound = targetBtnSound
		self.selectedTower = selectedTower


class TSMThemeUnpoppedArmy:

    offsets = {'necroCount': 184}    
    def __init__(self, necroCount: NK_TextMeshProUGUI, **kwargs):
        super().__init__(self, **kwargs)
		self.necroCount = necroCount


class TSMThemeWithActionButton:

    offsets = {'actionButton': 192, 'info': 200, 'showOnlyIfTargetTypeActionable': 208}    
    def __init__(self, actionButton: Assets.Scripts.Unity.UI_New.InGame.TowerSelectionMenu.TowerSelectionMenuThemes.TSMButton, info: Assets.Scripts.Models.TowerSelectionMenuTheme.TSMInfoModel, showOnlyIfTargetTypeActionable: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.actionButton = actionButton
		self.info = info
		self.showOnlyIfTargetTypeActionable = showOnlyIfTargetTypeActionable


class HeroSkinPurchaseDetails:

    offsets = {'menuAnimator': 56, 'titleName': 64, 'heroDescription': 72, 'titleBanner': 80, 'portraitMain': 88, 'portraitLvl3': 96, 'portraitLvl10': 104, 'portraitLvl20': 112, 'txtLvl3': 120, 'txtLvl10': 128, 'txtLvl20': 136, 'btnBuy': 144, 'txtCost': 152, 'txtUnlockFor': 160, 'skinModel': 176}    
    def __init__(self, menuAnimator: UnityEngine.Animator, titleName: TMPro.TextMeshProUGUI, heroDescription: TMPro.TextMeshProUGUI, titleBanner: UnityEngine.UI.Image, portraitMain: UnityEngine.UI.Image, portraitLvl3: UnityEngine.UI.Image, portraitLvl10: UnityEngine.UI.Image, portraitLvl20: UnityEngine.UI.Image, txtLvl3: TMPro.TextMeshProUGUI, txtLvl10: TMPro.TextMeshProUGUI, txtLvl20: TMPro.TextMeshProUGUI, btnBuy: UnityEngine.UI.Button, txtCost: TMPro.TextMeshProUGUI, txtUnlockFor: TMPro.TextMeshProUGUI, skinModel: Assets.Scripts.Models.Skins.HeroSkinModel, **kwargs):
        super().__init__(self, **kwargs)
		self.menuAnimator = menuAnimator
		self.titleName = titleName
		self.heroDescription = heroDescription
		self.titleBanner = titleBanner
		self.portraitMain = portraitMain
		self.portraitLvl3 = portraitLvl3
		self.portraitLvl10 = portraitLvl10
		self.portraitLvl20 = portraitLvl20
		self.txtLvl3 = txtLvl3
		self.txtLvl10 = txtLvl10
		self.txtLvl20 = txtLvl20
		self.btnBuy = btnBuy
		self.txtCost = txtCost
		self.txtUnlockFor = txtUnlockFor
		self.skinModel = skinModel


class HeroTextMaterials:

    offsets = {'name': 16, 'headerColour': 24, 'headerTxtMaterial': 40, 'material': 48}    
    def __init__(self, name: System.String, headerColour: UnityEngine.Color, headerTxtMaterial: UnityEngine.Material, material: UnityEngine.Material, **kwargs):
        super().__init__(self, **kwargs)
		self.name = name
		self.headerColour = headerColour
		self.headerTxtMaterial = headerTxtMaterial
		self.material = material


class KnowledgeHelper:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class KnowledgeMain:
	disabledToggleValue: System.Boolean
    offsets = {'disabledToggleValue': 0, 'primaryCompletedTxt': 56, 'militaryCompletedTxt': 64, 'magicCompletedTxt': 72, 'supportCompletedTxt': 80, 'heroesCompletedTxt': 88, 'powersCompletedTxt': 96, 'enableMonkeyKnowledge': 104, 'startEarningHint': 112, 'levelBanner': 120, 'disableMKGameObject': 128, 'disableToggleAnim': 136, 'disableToggle': 144, 'disableTxt': 152, 'respecGameObject': 160, 'respecBtn': 168, 'respecCostTxt': 176}    
    def __init__(self, disabledToggleValue: System.Boolean, primaryCompletedTxt: TMPro.TextMeshProUGUI, militaryCompletedTxt: TMPro.TextMeshProUGUI, magicCompletedTxt: TMPro.TextMeshProUGUI, supportCompletedTxt: TMPro.TextMeshProUGUI, heroesCompletedTxt: TMPro.TextMeshProUGUI, powersCompletedTxt: TMPro.TextMeshProUGUI, enableMonkeyKnowledge: TMPro.TextMeshProUGUI, startEarningHint: TMPro.TextMeshProUGUI, levelBanner: UnityEngine.GameObject, disableMKGameObject: UnityEngine.GameObject, disableToggleAnim: UnityEngine.Animator, disableToggle: UnityEngine.UI.Toggle, disableTxt: TMPro.TextMeshProUGUI, respecGameObject: UnityEngine.GameObject, respecBtn: UnityEngine.UI.Button, respecCostTxt: TMPro.TextMeshProUGUI, **kwargs):
        super().__init__(self, **kwargs)
		self.disabledToggleValue = disabledToggleValue
		self.primaryCompletedTxt = primaryCompletedTxt
		self.militaryCompletedTxt = militaryCompletedTxt
		self.magicCompletedTxt = magicCompletedTxt
		self.supportCompletedTxt = supportCompletedTxt
		self.heroesCompletedTxt = heroesCompletedTxt
		self.powersCompletedTxt = powersCompletedTxt
		self.enableMonkeyKnowledge = enableMonkeyKnowledge
		self.startEarningHint = startEarningHint
		self.levelBanner = levelBanner
		self.disableMKGameObject = disableMKGameObject
		self.disableToggleAnim = disableToggleAnim
		self.disableToggle = disableToggle
		self.disableTxt = disableTxt
		self.respecGameObject = respecGameObject
		self.respecBtn = respecBtn
		self.respecCostTxt = respecCostTxt


class KnowledgeSkillBtn:

    offsets = {'selectedEffect': 24, 'availableEffect': 32, 'icon': 40, 'purchasedMaterial': 48, 'lockedMaterial': 56, 'button': 64, 'lockedArrowColor': 72, 'purchasedArrowColor': 88, 'animateArrowsLength': 104, 'arrows': 112, 'knowledgeID': 120, 'knowledgeSet': 128, 'tierInvestmentRequired': 136, 'currState': 140, 'selected': 144, 'animateArrowsTimer': 148, 'ClickedEvent': 152}    
    def __init__(self, selectedEffect: UnityEngine.GameObject, availableEffect: UnityEngine.GameObject, icon: UnityEngine.UI.Image, purchasedMaterial: UnityEngine.Material, lockedMaterial: UnityEngine.Material, button: UnityEngine.UI.Button, lockedArrowColor: UnityEngine.Color, purchasedArrowColor: UnityEngine.Color, animateArrowsLength: System.Single, arrows: System.Collections.Generic.List<UnityEngine.UI.Image>, knowledgeID: System.String, knowledgeSet: System.String, tierInvestmentRequired: System.Int32, currState: Assets.Scripts.Unity.UI_New.Knowledge.KnowlegdeSkillBtnState, selected: System.Boolean, animateArrowsTimer: System.Single, ClickedEvent: Assets.Scripts.Unity.UI_New.Knowledge.KnowledgeSkillBtn.ClickedEventHandler, **kwargs):
        super().__init__(self, **kwargs)
		self.selectedEffect = selectedEffect
		self.availableEffect = availableEffect
		self.icon = icon
		self.purchasedMaterial = purchasedMaterial
		self.lockedMaterial = lockedMaterial
		self.button = button
		self.lockedArrowColor = lockedArrowColor
		self.purchasedArrowColor = purchasedArrowColor
		self.animateArrowsLength = animateArrowsLength
		self.arrows = arrows
		self.knowledgeID = knowledgeID
		self.knowledgeSet = knowledgeSet
		self.tierInvestmentRequired = tierInvestmentRequired
		self.currState = currState
		self.selected = selected
		self.animateArrowsTimer = animateArrowsTimer
		self.ClickedEvent = ClickedEvent


class KnowledgeSkillTree:

    offsets = {'knowledgeSkillBtnPrefab': 56, 'knowledgeSetTxt': 64, 'allPages': 72, 'pageWidth': 80, 'pageTurnTime': 84, 'pageLeftBtn': 88, 'pageRightBtn': 96, 'gestureSetting': 104, 'selectedPanelAnimator': 112, 'selectedPanelIcon': 120, 'selectedPanelTitleTxt': 128, 'selectedPanelDescTxt': 136, 'selectedPanelPrereqTxt': 144, 'selectedPanelAddPointsBtn': 152, 'selectedPanelMMObj': 160, 'selectedPanelMMTxt': 168, 'scrollRects': 176, 'scrollers': 184, 'selectedPanelIconHeight': 192, 'selectedPanelAnimTime': 196, 'debugTurnOnBtn': 200, 'debugAddPointBtn': 208, 'debugRemovePointBtn': 216, 'debugForceAddSkillPointBtn': 224, 'debugRemoveSkillPointBtn': 232, 'debugAddAllBtn': 240, 'debugRemoveAllBtn': 248, 'debugAddSetBtn': 256, 'debugRemoveSetBtn': 264, 'activateSound': 272, 'click3Sound': 280, 'return1Sound': 288, 'initialized': 296, 'allSkillBtns': 304, 'currSelectedBtn': 312, 'currPage': 320, 'numPages': 324, 'pageStartPos': 328, 'pagePos': 332, 'pageTimer': 336, 'pageTurned': 340, 'touch': 344, 'swipeCoroutine': 352, 'setTitles': 360, 'selPanelAnimTimer': 368, 'startVerticalPos': 372, 'desiredVerticalPos': 376, 'wasAVerticalAnim': 380}    
    def __init__(self, knowledgeSkillBtnPrefab: UnityEngine.GameObject, knowledgeSetTxt: TMPro.TextMeshProUGUI, allPages: System.Collections.Generic.List<UnityEngine.RectTransform>, pageWidth: System.Single, pageTurnTime: System.Single, pageLeftBtn: UnityEngine.UI.Button, pageRightBtn: UnityEngine.UI.Button, gestureSetting: Assets.Scripts.Unity.UI_New.Utils.TouchGesture.GestureSettings, selectedPanelAnimator: UnityEngine.Animator, selectedPanelIcon: UnityEngine.UI.Image, selectedPanelTitleTxt: TMPro.TextMeshProUGUI, selectedPanelDescTxt: TMPro.TextMeshProUGUI, selectedPanelPrereqTxt: TMPro.TextMeshProUGUI, selectedPanelAddPointsBtn: UnityEngine.UI.Button, selectedPanelMMObj: UnityEngine.GameObject, selectedPanelMMTxt: TMPro.TextMeshProUGUI, scrollRects: System.Collections.Generic.List<UnityEngine.UI.ScrollRect>, scrollers: System.Collections.Generic.List<UnityEngine.GameObject>, selectedPanelIconHeight: System.Single, selectedPanelAnimTime: System.Single, debugTurnOnBtn: UnityEngine.UI.Button, debugAddPointBtn: UnityEngine.UI.Button, debugRemovePointBtn: UnityEngine.UI.Button, debugForceAddSkillPointBtn: UnityEngine.UI.Button, debugRemoveSkillPointBtn: UnityEngine.UI.Button, debugAddAllBtn: UnityEngine.UI.Button, debugRemoveAllBtn: UnityEngine.UI.Button, debugAddSetBtn: UnityEngine.UI.Button, debugRemoveSetBtn: UnityEngine.UI.Button, activateSound: UnityEngine.AudioClip, click3Sound: UnityEngine.AudioClip, return1Sound: UnityEngine.AudioClip, initialized: System.Boolean, allSkillBtns: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Knowledge.KnowledgeSkillBtn>, currSelectedBtn: Assets.Scripts.Unity.UI_New.Knowledge.KnowledgeSkillBtn, currPage: System.Int32, numPages: System.Int32, pageStartPos: System.Single, pagePos: System.Single, pageTimer: System.Single, pageTurned: System.Boolean, touch: Assets.Scripts.Unity.UI_New.Utils.TouchGesture, swipeCoroutine: System.Collections.IEnumerator, setTitles: System.Collections.Generic.List<System.String>, selPanelAnimTimer: System.Single, startVerticalPos: System.Single, desiredVerticalPos: System.Single, wasAVerticalAnim: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.knowledgeSkillBtnPrefab = knowledgeSkillBtnPrefab
		self.knowledgeSetTxt = knowledgeSetTxt
		self.allPages = allPages
		self.pageWidth = pageWidth
		self.pageTurnTime = pageTurnTime
		self.pageLeftBtn = pageLeftBtn
		self.pageRightBtn = pageRightBtn
		self.gestureSetting = gestureSetting
		self.selectedPanelAnimator = selectedPanelAnimator
		self.selectedPanelIcon = selectedPanelIcon
		self.selectedPanelTitleTxt = selectedPanelTitleTxt
		self.selectedPanelDescTxt = selectedPanelDescTxt
		self.selectedPanelPrereqTxt = selectedPanelPrereqTxt
		self.selectedPanelAddPointsBtn = selectedPanelAddPointsBtn
		self.selectedPanelMMObj = selectedPanelMMObj
		self.selectedPanelMMTxt = selectedPanelMMTxt
		self.scrollRects = scrollRects
		self.scrollers = scrollers
		self.selectedPanelIconHeight = selectedPanelIconHeight
		self.selectedPanelAnimTime = selectedPanelAnimTime
		self.debugTurnOnBtn = debugTurnOnBtn
		self.debugAddPointBtn = debugAddPointBtn
		self.debugRemovePointBtn = debugRemovePointBtn
		self.debugForceAddSkillPointBtn = debugForceAddSkillPointBtn
		self.debugRemoveSkillPointBtn = debugRemoveSkillPointBtn
		self.debugAddAllBtn = debugAddAllBtn
		self.debugRemoveAllBtn = debugRemoveAllBtn
		self.debugAddSetBtn = debugAddSetBtn
		self.debugRemoveSetBtn = debugRemoveSetBtn
		self.activateSound = activateSound
		self.click3Sound = click3Sound
		self.return1Sound = return1Sound
		self.initialized = initialized
		self.allSkillBtns = allSkillBtns
		self.currSelectedBtn = currSelectedBtn
		self.currPage = currPage
		self.numPages = numPages
		self.pageStartPos = pageStartPos
		self.pagePos = pagePos
		self.pageTimer = pageTimer
		self.pageTurned = pageTurned
		self.touch = touch
		self.swipeCoroutine = swipeCoroutine
		self.setTitles = setTitles
		self.selPanelAnimTimer = selPanelAnimTimer
		self.startVerticalPos = startVerticalPos
		self.desiredVerticalPos = desiredVerticalPos
		self.wasAVerticalAnim = wasAVerticalAnim


class KnowlegdeSkillBtnState:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class LevelUpKnowledgeScreen:

    offsets = {'knowledgeCount': 56}    
    def __init__(self, knowledgeCount: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.knowledgeCount = knowledgeCount


class LevelUpMonkeyMoneyScreen:

    offsets = {'monkeyMoney': 56}    
    def __init__(self, monkeyMoney: TMPro.TextMeshProUGUI, **kwargs):
        super().__init__(self, **kwargs)
		self.monkeyMoney = monkeyMoney


class LevelUpScreen:

    offsets = {'nextLevelNumber': 56, 'rankImg': 64, 'veteranRankSprite': 72, 'playerLevelUpSound': 80, 'DEBUGSetXpToLevelBtn': 88}    
    def __init__(self, nextLevelNumber: TMPro.TextMeshProUGUI, rankImg: UnityEngine.UI.Image, veteranRankSprite: UnityEngine.Sprite, playerLevelUpSound: UnityEngine.AudioClip, DEBUGSetXpToLevelBtn: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.nextLevelNumber = nextLevelNumber
		self.rankImg = rankImg
		self.veteranRankSprite = veteranRankSprite
		self.playerLevelUpSound = playerLevelUpSound
		self.DEBUGSetXpToLevelBtn = DEBUGSetXpToLevelBtn


class TowerUnlockScreen:

    offsets = {'title': 64, 'towerName': 72, 'towerInfo': 80, 'towerUnlockDelay': 88, 'towerUnlocked': 92, 'selectedButton': 96, 'metaData': 104}    
    def __init__(self, title: TMPro.TextMeshProUGUI, towerName: TMPro.TextMeshProUGUI, towerInfo: TMPro.TextMeshProUGUI, towerUnlockDelay: System.Single, towerUnlocked: System.Boolean, selectedButton: Assets.Scripts.Unity.UI_New.LevelUp.UnlockTowerButton, metaData: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.title = title
		self.towerName = towerName
		self.towerInfo = towerInfo
		self.towerUnlockDelay = towerUnlockDelay
		self.towerUnlocked = towerUnlocked
		self.selectedButton = selectedButton
		self.metaData = metaData


class UnlockTowerButton:

    offsets = {'towerImage': 24, 'selectedEffect': 32, 'animator': 40, 'towerId': 48, 'towerSelectedCallback': 56, 'button': 64}    
    def __init__(self, towerImage: UnityEngine.UI.Image, selectedEffect: UnityEngine.GameObject, animator: UnityEngine.Animator, towerId: System.String, towerSelectedCallback: Assets.Scripts.Unity.UI_New.LevelUp.TowerUnlockScreen.ReturnCallback, button: UnityEngine.UI.Button, **kwargs):
        super().__init__(self, **kwargs)
		self.towerImage = towerImage
		self.selectedEffect = selectedEffect
		self.animator = animator
		self.towerId = towerId
		self.towerSelectedCallback = towerSelectedCallback
		self.button = button


class MainMenu:
	showLoginPopupDelay: System.Single
    offsets = {'showLoginPopupDelay': 0, '<HasBeenLoaded>k__BackingField': 4, 'requiresPopupQueue': 5, 'hasSeenModderWarning': 6, 'monkeysBtn': 56, 'heroesBtn': 64, 'playBtn': 72, 'coopBtn': 80, 'powersBtn': 88, 'knowledgeBtn': 96, 'settingsBtn': 104, 'achievementsBtn': 112, 'storeBtn': 120, 'trophyStoreBtn': 128, 'exitBtn': 136, 'heroButtonHeroImg': 144, 'settingsBtnNotify': 152, 'discordDebugBtn': 160}    
    def __init__(self, showLoginPopupDelay: System.Single, <HasBeenLoaded>k__BackingField: System.Boolean, requiresPopupQueue: System.Boolean, hasSeenModderWarning: System.Boolean, monkeysBtn: UnityEngine.UI.Button, heroesBtn: UnityEngine.UI.Button, playBtn: UnityEngine.UI.Button, coopBtn: UnityEngine.UI.Button, powersBtn: UnityEngine.UI.Button, knowledgeBtn: UnityEngine.UI.Button, settingsBtn: UnityEngine.UI.Button, achievementsBtn: UnityEngine.UI.Button, storeBtn: UnityEngine.UI.Button, trophyStoreBtn: UnityEngine.UI.Button, exitBtn: UnityEngine.UI.Button, heroButtonHeroImg: UnityEngine.UI.Image, settingsBtnNotify: UnityEngine.GameObject, discordDebugBtn: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.showLoginPopupDelay = showLoginPopupDelay
		self.<HasBeenLoaded>k__BackingField = <HasBeenLoaded>k__BackingField
		self.requiresPopupQueue = requiresPopupQueue
		self.hasSeenModderWarning = hasSeenModderWarning
		self.monkeysBtn = monkeysBtn
		self.heroesBtn = heroesBtn
		self.playBtn = playBtn
		self.coopBtn = coopBtn
		self.powersBtn = powersBtn
		self.knowledgeBtn = knowledgeBtn
		self.settingsBtn = settingsBtn
		self.achievementsBtn = achievementsBtn
		self.storeBtn = storeBtn
		self.trophyStoreBtn = trophyStoreBtn
		self.exitBtn = exitBtn
		self.heroButtonHeroImg = heroButtonHeroImg
		self.settingsBtnNotify = settingsBtnNotify
		self.discordDebugBtn = discordDebugBtn


class DailyRewardItem:

    offsets = {'date': 24, 'active': 32, 'container': 40, 'dailyRewardsScreen': 48, 'loot': 56, 'tickAnimator': 64}    
    def __init__(self, date: TMPro.TMP_Text, active: UnityEngine.GameObject, container: UnityEngine.Transform, dailyRewardsScreen: Assets.Scripts.Unity.UI_New.Main.DailyRewards.DailyRewardsScreen, loot: Assets.Scripts.Models.Store.Loot.BaseLoot, tickAnimator: UnityEngine.Animator, **kwargs):
        super().__init__(self, **kwargs)
		self.date = date
		self.active = active
		self.container = container
		self.dailyRewardsScreen = dailyRewardsScreen
		self.loot = loot
		self.tickAnimator = tickAnimator


class DailyRewardsScreen:

    offsets = {'todayItemPrefab': 56, 'itemPrefab': 64, 'lootContainer': 72, 'rewardInfo': 80}    
    def __init__(self, todayItemPrefab: Assets.Scripts.Unity.UI_New.Main.DailyRewards.DailyRewardItem, itemPrefab: Assets.Scripts.Unity.UI_New.Main.DailyRewards.DailyRewardItem, lootContainer: UnityEngine.Transform, rewardInfo: TMPro.TMP_Text, **kwargs):
        super().__init__(self, **kwargs)
		self.todayItemPrefab = todayItemPrefab
		self.itemPrefab = itemPrefab
		self.lootContainer = lootContainer
		self.rewardInfo = rewardInfo


class TowerGiftBoxScreen:

    offsets = {'towerImage': 56, 'countText': 64, 'descriptionText': 72, 'countImage': 80, 'descriptionLocsKey': 88, 'debugForceUnlockButton': 96, 'debugResetButton': 104}    
    def __init__(self, towerImage: UnityEngine.UI.Image, countText: TMPro.TextMeshProUGUI, descriptionText: TMPro.TextMeshProUGUI, countImage: UnityEngine.UI.Image, descriptionLocsKey: System.String, debugForceUnlockButton: UnityEngine.UI.Button, debugResetButton: UnityEngine.UI.Button, **kwargs):
        super().__init__(self, **kwargs)
		self.towerImage = towerImage
		self.countText = countText
		self.descriptionText = descriptionText
		self.countImage = countImage
		self.descriptionLocsKey = descriptionLocsKey
		self.debugForceUnlockButton = debugForceUnlockButton
		self.debugResetButton = debugResetButton


class MainMenuDebugPanel:

    offsets = {'showMeBtn': 24, 'changeTimeDaysInput': 32, 'changeTimeHoursInput': 40, 'changeTimeMinsInput': 48, 'changeTimeSecsInput': 56, 'changeTimeAdd': 64, 'changeTimeRemove': 72, 'changeTimeAddDay': 80, 'changeTimeAddHour': 88, 'changeTimeAddMin': 96, 'changeTimeAddSec': 104, 'debugTimeOffsetTxt': 112, 'onlineTimeTxt': 120, 'offlineTimeTxt': 128, 'setTimeToNowBtn': 136, 'clearOfflineTime': 144, 'resetGiftbox': 152, 'resetDailyChest': 160, 'triggerRankUp': 168, 'playerLevelInput': 176, 'setPlayerLevel': 184, 'playerVeteranLevelInput': 192, 'setPlayerVeteranLevel': 200, 'playerXPInput': 208, 'setPlayerXP': 216, 'paidUserLocalInput': 224, 'paidUserLocalSetBtn': 232, 'paidUserServerInput': 240, 'paidUserServerSetBtn': 248, 'forceException1': 256, 'forceException2': 264, 'forceException3': 272, 'forceException4': 280, 'deviceOSInfo': 288, 'deviceOSVersionInfo': 296, 'deviceModelInfo': 304, 'gameModelHash': 312, 'assetScale': 320, 'renderQuality': 328, 'testRaceRewardScreen': 336, 'testVetPopupBtn': 344, 'toggleLocsDebug': 352, 'locDebugEnabled': 360, 'locDebugDisabled': 368}    
    def __init__(self, showMeBtn: UnityEngine.UI.Button, changeTimeDaysInput: UnityEngine.UI.InputField, changeTimeHoursInput: UnityEngine.UI.InputField, changeTimeMinsInput: UnityEngine.UI.InputField, changeTimeSecsInput: UnityEngine.UI.InputField, changeTimeAdd: UnityEngine.UI.Button, changeTimeRemove: UnityEngine.UI.Button, changeTimeAddDay: UnityEngine.UI.Button, changeTimeAddHour: UnityEngine.UI.Button, changeTimeAddMin: UnityEngine.UI.Button, changeTimeAddSec: UnityEngine.UI.Button, debugTimeOffsetTxt: UnityEngine.UI.Text, onlineTimeTxt: UnityEngine.UI.Text, offlineTimeTxt: UnityEngine.UI.Text, setTimeToNowBtn: UnityEngine.UI.Button, clearOfflineTime: UnityEngine.UI.Button, resetGiftbox: UnityEngine.UI.Button, resetDailyChest: UnityEngine.UI.Button, triggerRankUp: UnityEngine.UI.Button, playerLevelInput: UnityEngine.UI.InputField, setPlayerLevel: UnityEngine.UI.Button, playerVeteranLevelInput: UnityEngine.UI.InputField, setPlayerVeteranLevel: UnityEngine.UI.Button, playerXPInput: UnityEngine.UI.InputField, setPlayerXP: UnityEngine.UI.Button, paidUserLocalInput: UnityEngine.UI.InputField, paidUserLocalSetBtn: UnityEngine.UI.Button, paidUserServerInput: UnityEngine.UI.InputField, paidUserServerSetBtn: UnityEngine.UI.Button, forceException1: UnityEngine.UI.Button, forceException2: UnityEngine.UI.Button, forceException3: UnityEngine.UI.Button, forceException4: UnityEngine.UI.Button, deviceOSInfo: UnityEngine.UI.Text, deviceOSVersionInfo: UnityEngine.UI.Text, deviceModelInfo: UnityEngine.UI.Text, gameModelHash: UnityEngine.UI.Text, assetScale: UnityEngine.UI.Text, renderQuality: UnityEngine.UI.Text, testRaceRewardScreen: UnityEngine.UI.Button, testVetPopupBtn: UnityEngine.UI.Button, toggleLocsDebug: UnityEngine.UI.Toggle, locDebugEnabled: UnityEngine.UI.Image, locDebugDisabled: UnityEngine.UI.Image, **kwargs):
        super().__init__(self, **kwargs)
		self.showMeBtn = showMeBtn
		self.changeTimeDaysInput = changeTimeDaysInput
		self.changeTimeHoursInput = changeTimeHoursInput
		self.changeTimeMinsInput = changeTimeMinsInput
		self.changeTimeSecsInput = changeTimeSecsInput
		self.changeTimeAdd = changeTimeAdd
		self.changeTimeRemove = changeTimeRemove
		self.changeTimeAddDay = changeTimeAddDay
		self.changeTimeAddHour = changeTimeAddHour
		self.changeTimeAddMin = changeTimeAddMin
		self.changeTimeAddSec = changeTimeAddSec
		self.debugTimeOffsetTxt = debugTimeOffsetTxt
		self.onlineTimeTxt = onlineTimeTxt
		self.offlineTimeTxt = offlineTimeTxt
		self.setTimeToNowBtn = setTimeToNowBtn
		self.clearOfflineTime = clearOfflineTime
		self.resetGiftbox = resetGiftbox
		self.resetDailyChest = resetDailyChest
		self.triggerRankUp = triggerRankUp
		self.playerLevelInput = playerLevelInput
		self.setPlayerLevel = setPlayerLevel
		self.playerVeteranLevelInput = playerVeteranLevelInput
		self.setPlayerVeteranLevel = setPlayerVeteranLevel
		self.playerXPInput = playerXPInput
		self.setPlayerXP = setPlayerXP
		self.paidUserLocalInput = paidUserLocalInput
		self.paidUserLocalSetBtn = paidUserLocalSetBtn
		self.paidUserServerInput = paidUserServerInput
		self.paidUserServerSetBtn = paidUserServerSetBtn
		self.forceException1 = forceException1
		self.forceException2 = forceException2
		self.forceException3 = forceException3
		self.forceException4 = forceException4
		self.deviceOSInfo = deviceOSInfo
		self.deviceOSVersionInfo = deviceOSVersionInfo
		self.deviceModelInfo = deviceModelInfo
		self.gameModelHash = gameModelHash
		self.assetScale = assetScale
		self.renderQuality = renderQuality
		self.testRaceRewardScreen = testRaceRewardScreen
		self.testVetPopupBtn = testVetPopupBtn
		self.toggleLocsDebug = toggleLocsDebug
		self.locDebugEnabled = locDebugEnabled
		self.locDebugDisabled = locDebugDisabled


class MainMenuDiscordDebugPanel:

    offsets = {'showMeBtn': 24, 'jsonInput': 32, 'activityFromJsonBtn': 40, 'clearActivityBtn': 48}    
    def __init__(self, showMeBtn: UnityEngine.UI.Button, jsonInput: UnityEngine.UI.InputField, activityFromJsonBtn: UnityEngine.UI.Button, clearActivityBtn: UnityEngine.UI.Button, **kwargs):
        super().__init__(self, **kwargs)
		self.showMeBtn = showMeBtn
		self.jsonInput = jsonInput
		self.activityFromJsonBtn = activityFromJsonBtn
		self.clearActivityBtn = clearActivityBtn


class DifficultySelectScreen:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MainMenuEventPanel:

    offsets = {'iconContainer': 24, 'racePrefab': 32, 'odysseyPrefab': 40, 'raceObj': 56, 'raceEvent': 64, 'odysseyObj': 72, 'odysseyEvent': 80, 'bossObj': 88, 'bossEvent': 96, 'collectionEventObject': 104, 'collectionEvent': 112}    
    def __init__(self, iconContainer: UnityEngine.Transform, racePrefab: UnityEngine.GameObject, odysseyPrefab: UnityEngine.GameObject, raceObj: UnityEngine.GameObject, raceEvent: Assets.Scripts.Models.ServerEvents.RaceEvent, odysseyObj: UnityEngine.GameObject, odysseyEvent: Assets.Scripts.Models.ServerEvents.OdysseyEvent, bossObj: UnityEngine.GameObject, bossEvent: Assets.Scripts.Models.ServerEvents.BossEvent, collectionEventObject: UnityEngine.GameObject, collectionEvent: Assets.Scripts.Models.ServerEvents.CollectablesEvent, **kwargs):
        super().__init__(self, **kwargs)
		self.iconContainer = iconContainer
		self.racePrefab = racePrefab
		self.odysseyPrefab = odysseyPrefab
		self.raceObj = raceObj
		self.raceEvent = raceEvent
		self.odysseyObj = odysseyObj
		self.odysseyEvent = odysseyEvent
		self.bossObj = bossObj
		self.bossEvent = bossEvent
		self.collectionEventObject = collectionEventObject
		self.collectionEvent = collectionEvent


class FacebookFriendPanel:

    offsets = {'rank': 24, 'difficulty': 32, 'bestRound': 40, 'icon': 48, 'dataBound': 56, 'loadingSprite': 64, 'username': 72, 'score': 80, 'thisMapName': 88, 'difficultySpritesAsset': 96, 'isDestroyed': 104}    
    def __init__(self, rank: System.Int32, difficulty: UnityEngine.UI.Image, bestRound: TMPro.TMP_Text, icon: UnityEngine.UI.RawImage, dataBound: System.Boolean, loadingSprite: UnityEngine.Texture, username: TMPro.TMP_Text, score: Assets.Scripts.Utils.TopScore, thisMapName: System.String, difficultySpritesAsset: DifficultySpritesAsset, isDestroyed: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.rank = rank
		self.difficulty = difficulty
		self.bestRound = bestRound
		self.icon = icon
		self.dataBound = dataBound
		self.loadingSprite = loadingSprite
		self.username = username
		self.score = score
		self.thisMapName = thisMapName
		self.difficultySpritesAsset = difficultySpritesAsset
		self.isDestroyed = isDestroyed


class FacebookFriendsPanel:

    offsets = {'friendPanels': 24, 'isDestroyed': 32}    
    def __init__(self, friendPanels: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Main.Facebook.FacebookFriendPanel>, isDestroyed: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.friendPanels = friendPanels
		self.isDestroyed = isDestroyed


class FacebookLoginButton:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CommonForegroundScreenHeroButton:

    offsets = {'icon': 24, 'cachedIcon': 32}    
    def __init__(self, icon: UnityEngine.UI.Image, cachedIcon: Assets.Scripts.Utils.SpriteReference, **kwargs):
        super().__init__(self, **kwargs)
		self.icon = icon
		self.cachedIcon = cachedIcon


class HeroAbilityPanel:

    offsets = {'icon': 24, 'text': 32, 'popupCountdown': 40, 'pressedStartTime': 44, 'detailsMessage': 48, 'OnShowDescription': 56, 'OnHideDescription': 64}    
    def __init__(self, icon: UnityEngine.UI.Image, text: TMPro.TMP_Text, popupCountdown: System.Single, pressedStartTime: System.Single, detailsMessage: System.String, OnShowDescription: System.Action<System.String,UnityEngine.Vector2>, OnHideDescription: System.Action, **kwargs):
        super().__init__(self, **kwargs)
		self.icon = icon
		self.text = text
		self.popupCountdown = popupCountdown
		self.pressedStartTime = pressedStartTime
		self.detailsMessage = detailsMessage
		self.OnShowDescription = OnShowDescription
		self.OnHideDescription = OnHideDescription


class HeroButton:

    offsets = {'heroImage': 24, 'lockedImage': 32, 'standardMaterial': 40, 'lockedMaterial': 48, 'mmCost': 56, 'locked': 60, 'heroSelect': 72, 'seenIcon': 80, 'newHeroNotification': 88, 'monkeyMoneyCost': 96, 'monkeyMoneyCostText': 104, 'heroId': 112}    
    def __init__(self, heroImage: UnityEngine.UI.Image, lockedImage: UnityEngine.UI.Image, standardMaterial: UnityEngine.Material, lockedMaterial: UnityEngine.Material, mmCost: System.Int32, locked: System.Boolean, heroSelect: Assets.Scripts.Unity.UI_New.Transitions.HeroSelectTransition, seenIcon: UnityEngine.GameObject, newHeroNotification: UnityEngine.GameObject, monkeyMoneyCost: UnityEngine.GameObject, monkeyMoneyCostText: TMPro.TextMeshProUGUI, heroId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.heroImage = heroImage
		self.lockedImage = lockedImage
		self.standardMaterial = standardMaterial
		self.lockedMaterial = lockedMaterial
		self.mmCost = mmCost
		self.locked = locked
		self.heroSelect = heroSelect
		self.seenIcon = seenIcon
		self.newHeroNotification = newHeroNotification
		self.monkeyMoneyCost = monkeyMoneyCost
		self.monkeyMoneyCostText = monkeyMoneyCostText
		self.heroId = heroId


class HeroFontMaterial:

    offsets = {'name': 16, 'heroNameMaterial': 24}    
    def __init__(self, name: System.String, heroNameMaterial: UnityEngine.Material, **kwargs):
        super().__init__(self, **kwargs)
		self.name = name
		self.heroNameMaterial = heroNameMaterial


class HeroPurchaseSplash:

    offsets = {'heroName': 56, 'heroShortDescription': 64}    
    def __init__(self, heroName: TMPro.TextMeshProUGUI, heroShortDescription: TMPro.TextMeshProUGUI, **kwargs):
        super().__init__(self, **kwargs)
		self.heroName = heroName
		self.heroShortDescription = heroShortDescription


class HeroSkinButton:

    offsets = {'buyPanel': 24, 'newPanel': 32, 'notificationPanel': 40, 'txtBuy': 48, 'heroButtonUnlockEffect': 56, 'heroIcon': 64, 'selectedIcon': 72, 'unlockEffect': 80, 'skinModel': 96, 'heroUpgradeDetails': 104, 'currentIcon': 112}    
    def __init__(self, buyPanel: UnityEngine.GameObject, newPanel: UnityEngine.GameObject, notificationPanel: UnityEngine.GameObject, txtBuy: TMPro.TextMeshProUGUI, heroButtonUnlockEffect: UnityEngine.Animator, heroIcon: UnityEngine.UI.Image, selectedIcon: UnityEngine.UI.Image, unlockEffect: UnityEngine.Animator, skinModel: Assets.Scripts.Models.Skins.SkinModel, heroUpgradeDetails: Assets.Scripts.Unity.UI_New.Main.HeroSelect.HeroUpgradeDetails, currentIcon: Assets.Scripts.Utils.SpriteReference, **kwargs):
        super().__init__(self, **kwargs)
		self.buyPanel = buyPanel
		self.newPanel = newPanel
		self.notificationPanel = notificationPanel
		self.txtBuy = txtBuy
		self.heroButtonUnlockEffect = heroButtonUnlockEffect
		self.heroIcon = heroIcon
		self.selectedIcon = selectedIcon
		self.unlockEffect = unlockEffect
		self.skinModel = skinModel
		self.heroUpgradeDetails = heroUpgradeDetails
		self.currentIcon = currentIcon


class HeroUpgradeButton:

    offsets = {'upgradeIndex': 24, 'highlightEffect': 32, 'icon': 40, 'iconGold': 48, 'iconGoldMaxLevel': 56, 'popupCountdown': 64, 'pressedStartTime': 68, 'upgradeDesc': 72, 'btn': 80, 'OnShowDescription': 88, 'OnHideDescription': 96}    
    def __init__(self, upgradeIndex: TMPro.TextMeshProUGUI, highlightEffect: UnityEngine.GameObject, icon: UnityEngine.UI.Image, iconGold: UnityEngine.UI.Image, iconGoldMaxLevel: UnityEngine.UI.Image, popupCountdown: System.Single, pressedStartTime: System.Single, upgradeDesc: System.String, btn: UnityEngine.UI.Button, OnShowDescription: System.Action<System.String,UnityEngine.Vector2>, OnHideDescription: System.Action, **kwargs):
        super().__init__(self, **kwargs)
		self.upgradeIndex = upgradeIndex
		self.highlightEffect = highlightEffect
		self.icon = icon
		self.iconGold = iconGold
		self.iconGoldMaxLevel = iconGoldMaxLevel
		self.popupCountdown = popupCountdown
		self.pressedStartTime = pressedStartTime
		self.upgradeDesc = upgradeDesc
		self.btn = btn
		self.OnShowDescription = OnShowDescription
		self.OnHideDescription = OnHideDescription


class HeroUpgradeDetails:

    offsets = {'heroName': 56, 'heroShortDescription': 64, 'heroDescription': 72, 'heroPortrait': 80, 'selectButton': 96, 'heroUpgradesPanel': 112, 'heroAbilityPanel': 120, 'upgradePopup': 128, 'selectHeroSkinPanel': 136, 'inGameCostPanel': 144, 'heroDetails': 152, 'heroDescriptions': 160, 'selectButtonText': 168, 'selectedText': 176, 'heroRequirements': 184, 'buyHeroButton': 192, 'purchaseCost': 200, 'lockedText': 208, 'heroSkinSelectTransition': 216, 'heroBundleAnimator': 224, 'heroBundleTitle': 232, 'heroBundleIcon': 240, 'heroBundleBtn': 248, 'topLayer': 256, 'click1Sound': 264, 'tickSound': 272, 'selectSound': 280, 'heroSelectTransition': 288, 'showingSelected': 296, 'heroId': 320, 'lastHeroShown': 328, 'wasOpen': 336, 'cachedHeroStoreBundles': 344}    
    def __init__(self, heroName: TMPro.TextMeshProUGUI, heroShortDescription: TMPro.TextMeshProUGUI, heroDescription: TMPro.TextMeshProUGUI, heroPortrait: UnityEngine.UI.Image, selectButton: UnityEngine.UI.Button, heroUpgradesPanel: UnityEngine.GameObject, heroAbilityPanel: UnityEngine.GameObject, upgradePopup: UpgradePopup, selectHeroSkinPanel: UnityEngine.GameObject, inGameCostPanel: UnityEngine.GameObject, heroDetails: UnityEngine.GameObject, heroDescriptions: UnityEngine.GameObject, selectButtonText: TMPro.TextMeshProUGUI, selectedText: TMPro.TextMeshProUGUI, heroRequirements: UnityEngine.GameObject, buyHeroButton: UnityEngine.GameObject, purchaseCost: TMPro.TextMeshProUGUI, lockedText: TMPro.TextMeshProUGUI, heroSkinSelectTransition: Assets.Scripts.Unity.UI_New.Transitions.HeroSkinSelectTransition, heroBundleAnimator: UnityEngine.Animator, heroBundleTitle: TMPro.TextMeshProUGUI, heroBundleIcon: UnityEngine.UI.Image, heroBundleBtn: UnityEngine.UI.Button, topLayer: UnityEngine.Transform, click1Sound: UnityEngine.AudioClip, tickSound: UnityEngine.AudioClip, selectSound: UnityEngine.AudioClip, heroSelectTransition: Assets.Scripts.Unity.UI_New.Transitions.HeroSelectTransition, showingSelected: System.Boolean, heroId: System.String, lastHeroShown: System.String, wasOpen: System.Boolean, cachedHeroStoreBundles: System.Collections.Generic.Dictionary<System.String,System.ValueTuple<Assets.Scripts.Data.Store.StoreItem,System.Boolean>>, **kwargs):
        super().__init__(self, **kwargs)
		self.heroName = heroName
		self.heroShortDescription = heroShortDescription
		self.heroDescription = heroDescription
		self.heroPortrait = heroPortrait
		self.selectButton = selectButton
		self.heroUpgradesPanel = heroUpgradesPanel
		self.heroAbilityPanel = heroAbilityPanel
		self.upgradePopup = upgradePopup
		self.selectHeroSkinPanel = selectHeroSkinPanel
		self.inGameCostPanel = inGameCostPanel
		self.heroDetails = heroDetails
		self.heroDescriptions = heroDescriptions
		self.selectButtonText = selectButtonText
		self.selectedText = selectedText
		self.heroRequirements = heroRequirements
		self.buyHeroButton = buyHeroButton
		self.purchaseCost = purchaseCost
		self.lockedText = lockedText
		self.heroSkinSelectTransition = heroSkinSelectTransition
		self.heroBundleAnimator = heroBundleAnimator
		self.heroBundleTitle = heroBundleTitle
		self.heroBundleIcon = heroBundleIcon
		self.heroBundleBtn = heroBundleBtn
		self.topLayer = topLayer
		self.click1Sound = click1Sound
		self.tickSound = tickSound
		self.selectSound = selectSound
		self.heroSelectTransition = heroSelectTransition
		self.showingSelected = showingSelected
		self.heroId = heroId
		self.lastHeroShown = lastHeroShown
		self.wasOpen = wasOpen
		self.cachedHeroStoreBundles = cachedHeroStoreBundles


class NewHeroScreenNotification:

    offsets = {'glow': 24, 'newBanner': 32}    
    def __init__(self, glow: UnityEngine.GameObject, newBanner: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.glow = glow
		self.newBanner = newBanner


class CoopButtonChecker:

    offsets = {'coopBtn': 24, 'coopButtonObject': 32, 'coopButtonLockObject': 40, 'coopUnlockEffect': 48, 'unlockText': 56, 'isDestroyed': 64}    
    def __init__(self, coopBtn: UnityEngine.UI.Button, coopButtonObject: UnityEngine.GameObject, coopButtonLockObject: UnityEngine.GameObject, coopUnlockEffect: UnityEngine.GameObject, unlockText: TMPro.TextMeshProUGUI, isDestroyed: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.coopBtn = coopBtn
		self.coopButtonObject = coopButtonObject
		self.coopButtonLockObject = coopButtonLockObject
		self.coopUnlockEffect = coopUnlockEffect
		self.unlockText = unlockText
		self.isDestroyed = isDestroyed


class HomeAchievementsButton:

    offsets = {'googleAchievementsIcon': 24, 'icon': 32, 'newAchieveIcon': 40}    
    def __init__(self, googleAchievementsIcon: UnityEngine.Sprite, icon: UnityEngine.UI.Image, newAchieveIcon: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.googleAchievementsIcon = googleAchievementsIcon
		self.icon = icon
		self.newAchieveIcon = newAchieveIcon


class KnowledgeEnabledChecker:

    offsets = {'enabledSprite': 24, 'disabledSprite': 32, 'icon': 40, 'newPoints': 48}    
    def __init__(self, enabledSprite: Assets.Scripts.Utils.SpriteReference, disabledSprite: Assets.Scripts.Utils.SpriteReference, icon: UnityEngine.UI.Image, newPoints: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.enabledSprite = enabledSprite
		self.disabledSprite = disabledSprite
		self.icon = icon
		self.newPoints = newPoints


class PipEvent:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class PipEventChecker:

    offsets = {'pipEvent': 24, 'notifyPipObj': 32, 'disableOnEnableCheck': 40, 'updateConstantly': 41, 'updateInterval': 44, 'timer': 48, '<MetaData>k__BackingField': 56}    
    def __init__(self, pipEvent: Assets.Scripts.Unity.UI_New.Main.Home.PipEvent, notifyPipObj: UnityEngine.GameObject, disableOnEnableCheck: System.Boolean, updateConstantly: System.Boolean, updateInterval: System.Int32, timer: System.Single, <MetaData>k__BackingField: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.pipEvent = pipEvent
		self.notifyPipObj = notifyPipObj
		self.disableOnEnableCheck = disableOnEnableCheck
		self.updateConstantly = updateConstantly
		self.updateInterval = updateInterval
		self.timer = timer
		self.<MetaData>k__BackingField = <MetaData>k__BackingField


class PipEventManager:
	instance: Assets.Scripts.Unity.UI_New.Main.Home.PipEventManager
    offsets = {'instance': 0}    
    def __init__(self, instance: Assets.Scripts.Unity.UI_New.Main.Home.PipEventManager, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance


class PowersButtonChecker:

    offsets = {'powersBtnNotify': 24, 'powersTimer': 32}    
    def __init__(self, powersBtnNotify: UnityEngine.GameObject, powersTimer: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.powersBtnNotify = powersBtnNotify
		self.powersTimer = powersTimer


class CoopMapButton:

    offsets = {'coopMapDivHoriz_2P': 248, 'coopMapDivHoriz_4P': 256, 'coopMapDivVert_2P': 264, 'coopMapDivVert_4P': 272, 'coopMapDivDiagLR_2P': 280, 'coopMapDivDiagLR_4P': 288, 'coopMapDivDiagRL_2P': 296, 'coopMapDivDiagRL_4P': 304, 'coopMapDiv_FreeForAll': 312}    
    def __init__(self, coopMapDivHoriz_2P: UnityEngine.GameObject, coopMapDivHoriz_4P: UnityEngine.GameObject, coopMapDivVert_2P: UnityEngine.GameObject, coopMapDivVert_4P: UnityEngine.GameObject, coopMapDivDiagLR_2P: UnityEngine.GameObject, coopMapDivDiagLR_4P: UnityEngine.GameObject, coopMapDivDiagRL_2P: UnityEngine.GameObject, coopMapDivDiagRL_4P: UnityEngine.GameObject, coopMapDiv_FreeForAll: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.coopMapDivHoriz_2P = coopMapDivHoriz_2P
		self.coopMapDivHoriz_4P = coopMapDivHoriz_4P
		self.coopMapDivVert_2P = coopMapDivVert_2P
		self.coopMapDivVert_4P = coopMapDivVert_4P
		self.coopMapDivDiagLR_2P = coopMapDivDiagLR_2P
		self.coopMapDivDiagLR_4P = coopMapDivDiagLR_4P
		self.coopMapDivDiagRL_2P = coopMapDivDiagRL_2P
		self.coopMapDivDiagRL_4P = coopMapDivDiagRL_4P
		self.coopMapDiv_FreeForAll = coopMapDiv_FreeForAll


class MapButton:

    offsets = {'mapImage': 24, 'mapBackground': 32, 'basicBackground': 40, 'goldBackground': 48, 'blackBackground': 56, 'mapName': 72, 'medals': 80, 'chimpsGoldSparkles': 88, 'chimpsHematiteSparkles': 96, 'continueIcon': 104, 'animator': 112, 'button': 120, 'friendPanel': 128, 'coopPlayerCount': 136, 'coopPlayCountTxt': 144, 'bonusReward': 152, 'goldenBloonVisual': 168, 'monkeyTeamsVisual': 176, 'mapSelectScreen': 184, 'savedData': 192, 'mapId': 200, 'isDestoryed': 216, 'settings': 224, 'isLocked': 232, 'MapUnlockedEvent': 240}    
    def __init__(self, mapImage: UnityEngine.UI.Image, mapBackground: UnityEngine.UI.Image, basicBackground: Assets.Scripts.Utils.SpriteReference, goldBackground: Assets.Scripts.Utils.SpriteReference, blackBackground: Assets.Scripts.Utils.SpriteReference, mapName: TMPro.TextMeshProUGUI, medals: UnityEngine.GameObject, chimpsGoldSparkles: UnityEngine.GameObject, chimpsHematiteSparkles: UnityEngine.GameObject, continueIcon: UnityEngine.GameObject, animator: UnityEngine.Animator, button: UnityEngine.UI.Button, friendPanel: Assets.Scripts.Unity.UI_New.Main.Facebook.FacebookFriendPanel, coopPlayerCount: UnityEngine.GameObject, coopPlayCountTxt: TMPro.TextMeshProUGUI, bonusReward: UnityEngine.GameObject, goldenBloonVisual: UnityEngine.GameObject, monkeyTeamsVisual: Assets.Scripts.Unity.UI_New.Main.MapSelect.MonkeyTeamsIcon, mapSelectScreen: Assets.Scripts.Unity.UI_New.Main.MapSelect.MapSelectScreen, savedData: System.Boolean, mapId: System.String, isDestoryed: System.Boolean, settings: Assets.Scripts.Unity.Menu.GameMenuWithSettings, isLocked: System.Boolean, MapUnlockedEvent: System.Action<Assets.Scripts.Unity.UI_New.Main.MapSelect.MapButton>, **kwargs):
        super().__init__(self, **kwargs)
		self.mapImage = mapImage
		self.mapBackground = mapBackground
		self.basicBackground = basicBackground
		self.goldBackground = goldBackground
		self.blackBackground = blackBackground
		self.mapName = mapName
		self.medals = medals
		self.chimpsGoldSparkles = chimpsGoldSparkles
		self.chimpsHematiteSparkles = chimpsHematiteSparkles
		self.continueIcon = continueIcon
		self.animator = animator
		self.button = button
		self.friendPanel = friendPanel
		self.coopPlayerCount = coopPlayerCount
		self.coopPlayCountTxt = coopPlayCountTxt
		self.bonusReward = bonusReward
		self.goldenBloonVisual = goldenBloonVisual
		self.monkeyTeamsVisual = monkeyTeamsVisual
		self.mapSelectScreen = mapSelectScreen
		self.savedData = savedData
		self.mapId = mapId
		self.isDestoryed = isDestoryed
		self.settings = settings
		self.isLocked = isLocked
		self.MapUnlockedEvent = MapUnlockedEvent


class MapPip:

    offsets = {'pipImage': 24, 'activatedSprite': 32, 'deactivatedSprite': 40}    
    def __init__(self, pipImage: UnityEngine.UI.Image, activatedSprite: Assets.Scripts.Utils.SpriteReference, deactivatedSprite: Assets.Scripts.Utils.SpriteReference, **kwargs):
        super().__init__(self, **kwargs)
		self.pipImage = pipImage
		self.activatedSprite = activatedSprite
		self.deactivatedSprite = deactivatedSprite


class MapSelectScreen:

    offsets = {'mapSelectTransition': 200}    
    def __init__(self, mapSelectTransition: Assets.Scripts.Unity.UI_New.Transitions.MapSelectTransition, **kwargs):
        super().__init__(self, **kwargs)
		self.mapSelectTransition = mapSelectTransition


class MonkeyTeamsIcon:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class NewMapChecker:

    offsets = {'difficulty': 24}    
    def __init__(self, difficulty: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.difficulty = difficulty


class SeenMapChecker:

    offsets = {'difficulty': 24}    
    def __init__(self, difficulty: Assets.Scripts.Data.MapSets.MapDifficulty, **kwargs):
        super().__init__(self, **kwargs)
		self.difficulty = difficulty


class ModeButton:

    offsets = {'modeType': 24, 'unlockMode': 32, 'unlockDelay': 40, 'button': 48, 'animator': 56, 'medal': 64, 'medalAnimator': 72, 'currentState': 80, 'initialised': 88, 'settings': 96}    
    def __init__(self, modeType: System.String, unlockMode: System.String, unlockDelay: System.Single, button: UnityEngine.UI.Button, animator: UnityEngine.Animator, medal: UnityEngine.GameObject, medalAnimator: UnityEngine.Animator, currentState: System.String, initialised: System.Boolean, settings: Assets.Scripts.Unity.Menu.GameMenuWithSettings, **kwargs):
        super().__init__(self, **kwargs)
		self.modeType = modeType
		self.unlockMode = unlockMode
		self.unlockDelay = unlockDelay
		self.button = button
		self.animator = animator
		self.medal = medal
		self.medalAnimator = medalAnimator
		self.currentState = currentState
		self.initialised = initialised
		self.settings = settings


class ModeScreen:

    offsets = {'easyModes': 200, 'mediumModes': 208, 'hardModes': 216, 'medal': 224, 'easyMedal': 232, 'mediumMedal': 240, 'hardMedal': 248, 'headerTxt': 256, 'subTxt': 264}    
    def __init__(self, easyModes: UnityEngine.GameObject, mediumModes: UnityEngine.GameObject, hardModes: UnityEngine.GameObject, medal: UnityEngine.UI.Image, easyMedal: Assets.Scripts.Utils.SpriteReference, mediumMedal: Assets.Scripts.Utils.SpriteReference, hardMedal: Assets.Scripts.Utils.SpriteReference, headerTxt: TMPro.TextMeshProUGUI, subTxt: TMPro.TextMeshProUGUI, **kwargs):
        super().__init__(self, **kwargs)
		self.easyModes = easyModes
		self.mediumModes = mediumModes
		self.hardModes = hardModes
		self.medal = medal
		self.easyMedal = easyMedal
		self.mediumMedal = mediumMedal
		self.hardMedal = hardMedal
		self.headerTxt = headerTxt
		self.subTxt = subTxt


class MonkeyButton:

    offsets = {'towerImage': 24, 'bgImage': 32, 'towerName': 40, 'xpAmount': 48, 'seenImage': 56, 'seenCountText': 64, 'paragonPip': 72, 'owner': 80, 'lockedImage': 88, 'standardMaterial': 96, 'lockedMaterial': 104, 'giftboxImage': 112, 'towerSet': 120, 'towerContainerSprites': 128, 'towerId': 136}    
    def __init__(self, towerImage: UnityEngine.UI.Image, bgImage: UnityEngine.UI.Image, towerName: TMPro.TextMeshProUGUI, xpAmount: TMPro.TextMeshProUGUI, seenImage: UnityEngine.GameObject, seenCountText: TMPro.TextMeshProUGUI, paragonPip: Assets.Scripts.Unity.UI_New.Main.Home.PipEventChecker, owner: Assets.Scripts.Unity.UI_New.Main.MonkeySelect.MonkeySelectMenu, lockedImage: UnityEngine.UI.Image, standardMaterial: UnityEngine.Material, lockedMaterial: UnityEngine.Material, giftboxImage: UnityEngine.UI.Image, towerSet: System.String, towerContainerSprites: TowerContainerSpritesAsset, towerId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.towerImage = towerImage
		self.bgImage = bgImage
		self.towerName = towerName
		self.xpAmount = xpAmount
		self.seenImage = seenImage
		self.seenCountText = seenCountText
		self.paragonPip = paragonPip
		self.owner = owner
		self.lockedImage = lockedImage
		self.standardMaterial = standardMaterial
		self.lockedMaterial = lockedMaterial
		self.giftboxImage = giftboxImage
		self.towerSet = towerSet
		self.towerContainerSprites = towerContainerSprites
		self.towerId = towerId


class MonkeyGroupButton:

    offsets = {'groupName': 24, 'icon': 32, 'standardMaterial': 40, 'lockedMaterial': 48}    
    def __init__(self, groupName: System.String, icon: UnityEngine.UI.Image, standardMaterial: UnityEngine.Material, lockedMaterial: UnityEngine.Material, **kwargs):
        super().__init__(self, **kwargs)
		self.groupName = groupName
		self.icon = icon
		self.standardMaterial = standardMaterial
		self.lockedMaterial = lockedMaterial


class MonkeySelectMenu:

    offsets = {'towersBtnsAnim': 56, 'monkeySelectAnim': 64, 'gestureSetting': 88, 'tickSound': 96, 'return1Sound': 104, 'openParameterId': 112, 'touch': 120, 'swipeCoroutine': 128, 'shopTowerDetailsModels': 136, 'selectedTowers': 152, 'currentSet': 160}    
    def __init__(self, towersBtnsAnim: UnityEngine.Animator, monkeySelectAnim: UnityEngine.Animator, gestureSetting: Assets.Scripts.Unity.UI_New.Utils.TouchGesture.GestureSettings, tickSound: UnityEngine.AudioClip, return1Sound: UnityEngine.AudioClip, openParameterId: System.Int32, touch: Assets.Scripts.Unity.UI_New.Utils.TouchGesture, swipeCoroutine: System.Collections.IEnumerator, shopTowerDetailsModels: System.Collections.Generic.List<Assets.Scripts.Models.TowerSets.ShopTowerDetailsModel>, selectedTowers: Assets.Scripts.Utils.SizedList<Assets.Scripts.Models.TowerSets.ShopTowerDetailsModel>, currentSet: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.towersBtnsAnim = towersBtnsAnim
		self.monkeySelectAnim = monkeySelectAnim
		self.gestureSetting = gestureSetting
		self.tickSound = tickSound
		self.return1Sound = return1Sound
		self.openParameterId = openParameterId
		self.touch = touch
		self.swipeCoroutine = swipeCoroutine
		self.shopTowerDetailsModels = shopTowerDetailsModels
		self.selectedTowers = selectedTowers
		self.currentSet = currentSet


class PlayerInfo:

    offsets = {'level': 24, 'rankImg': 32, 'regularRankSprite': 40, 'veteranRankSprite': 48, 'barBorderImg': 56, 'regularBorderSprite': 64, 'veteranBorderSprite': 72, 'xpInfo': 80, 'bar': 88, 'regularBarSprite': 96, 'veteranBarSprite': 104, 'nameTxt': 112, 'avatar': 120, 'newGlow': 128, 'newDot': 136, 'avatarBanner': 144}    
    def __init__(self, level: TMPro.TextMeshProUGUI, rankImg: UnityEngine.UI.Image, regularRankSprite: UnityEngine.Sprite, veteranRankSprite: UnityEngine.Sprite, barBorderImg: UnityEngine.UI.Image, regularBorderSprite: UnityEngine.Sprite, veteranBorderSprite: UnityEngine.Sprite, xpInfo: TMPro.TextMeshProUGUI, bar: UnityEngine.UI.Image, regularBarSprite: UnityEngine.Sprite, veteranBarSprite: UnityEngine.Sprite, nameTxt: TMPro.TextMeshProUGUI, avatar: UnityEngine.UI.Image, newGlow: UnityEngine.GameObject, newDot: UnityEngine.GameObject, avatarBanner: UnityEngine.UI.Image, **kwargs):
        super().__init__(self, **kwargs)
		self.level = level
		self.rankImg = rankImg
		self.regularRankSprite = regularRankSprite
		self.veteranRankSprite = veteranRankSprite
		self.barBorderImg = barBorderImg
		self.regularBorderSprite = regularBorderSprite
		self.veteranBorderSprite = veteranBorderSprite
		self.xpInfo = xpInfo
		self.bar = bar
		self.regularBarSprite = regularBarSprite
		self.veteranBarSprite = veteranBarSprite
		self.nameTxt = nameTxt
		self.avatar = avatar
		self.newGlow = newGlow
		self.newDot = newDot
		self.avatarBanner = avatarBanner


class InstaTowerDisplay:

    offsets = {'pathsTxt': 24, 'icon': 32, 'countCont': 40, 'countTxt': 48, 'newNotify': 56, 'grayscaleMat': 64, 'itm': 72}    
    def __init__(self, pathsTxt: TMPro.TextMeshProUGUI, icon: UnityEngine.UI.Image, countCont: UnityEngine.GameObject, countTxt: TMPro.TextMeshProUGUI, newNotify: UnityEngine.GameObject, grayscaleMat: UnityEngine.Material, itm: Assets.Scripts.Models.Profile.InstaTowerModel, **kwargs):
        super().__init__(self, **kwargs)
		self.pathsTxt = pathsTxt
		self.icon = icon
		self.countCont = countCont
		self.countTxt = countTxt
		self.newNotify = newNotify
		self.grayscaleMat = grayscaleMat
		self.itm = itm


class InstaTowerScreen:

    offsets = {'menuTitleTxt': 56, 'buyInstasBtn': 64, 'instaTypeObject': 72, 'instaTypeContainer': 80, 'instaTypePrefab': 88, 'subTitleAnimator': 96, 'typesLoaded': 104, 'showingInstaCollection': 105, 'typeDisplayList': 112, 'instaCollectionObject': 120, 'instaContainer': 128, 'instaScrollRect': 136, 'instaPrefab': 144, 'noInventoryObj': 152, 'subTitleTxt': 160, 'subCountTxt': 168, 'arrowRightBtn': 176, 'arrowLeftBtn': 184, 'gestureSetting': 192, 'touch': 200, 'collectionViewToggle': 208, 'collectionViewToggleTxt': 216, 'collectionViewDescTxt': 224, 'descTxtFadeTime': 232, 'descColor': 236, 'missingInstaSiloutte': 256, 'DEBUGObject': 264, 'DEBUGToggleDebugBtn': 272, 'DEBUGAddAllInstasBtn': 280, 'DEBUGRemoveAllInstasBtn': 288, 'DEBUGAddRandomInstasBtn': 296, 'DEBUGHardClearBtn': 304, 'returnSound': 312, 'click1Sound': 320, 'pageIndex': 328, 'loadViewCR': 336, 'swipeCR': 344}    
    def __init__(self, menuTitleTxt: TMPro.TextMeshProUGUI, buyInstasBtn: UnityEngine.UI.Button, instaTypeObject: UnityEngine.GameObject, instaTypeContainer: UnityEngine.Transform, instaTypePrefab: Assets.Scripts.Unity.UI_New.Main.PowersSelect.InstaTowerTypeDisplay, subTitleAnimator: UnityEngine.Animator, typesLoaded: System.Boolean, showingInstaCollection: System.Boolean, typeDisplayList: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Main.PowersSelect.InstaTowerTypeDisplay>, instaCollectionObject: UnityEngine.GameObject, instaContainer: UnityEngine.Transform, instaScrollRect: UnityEngine.UI.ScrollRect, instaPrefab: Assets.Scripts.Unity.UI_New.Main.PowersSelect.InstaTowerDisplay, noInventoryObj: UnityEngine.GameObject, subTitleTxt: TMPro.TextMeshProUGUI, subCountTxt: TMPro.TextMeshProUGUI, arrowRightBtn: UnityEngine.UI.Button, arrowLeftBtn: UnityEngine.UI.Button, gestureSetting: Assets.Scripts.Unity.UI_New.Utils.TouchGesture.GestureSettings, touch: Assets.Scripts.Unity.UI_New.Utils.TouchGesture, collectionViewToggle: UnityEngine.UI.Toggle, collectionViewToggleTxt: TMPro.TextMeshProUGUI, collectionViewDescTxt: TMPro.TextMeshProUGUI, descTxtFadeTime: System.Single, descColor: UnityEngine.Color, missingInstaSiloutte: UnityEngine.GameObject, DEBUGObject: UnityEngine.GameObject, DEBUGToggleDebugBtn: UnityEngine.UI.Button, DEBUGAddAllInstasBtn: UnityEngine.UI.Button, DEBUGRemoveAllInstasBtn: UnityEngine.UI.Button, DEBUGAddRandomInstasBtn: UnityEngine.UI.Button, DEBUGHardClearBtn: UnityEngine.UI.Button, returnSound: UnityEngine.AudioClip, click1Sound: UnityEngine.AudioClip, pageIndex: System.Int32, loadViewCR: UnityEngine.Coroutine, swipeCR: UnityEngine.Coroutine, **kwargs):
        super().__init__(self, **kwargs)
		self.menuTitleTxt = menuTitleTxt
		self.buyInstasBtn = buyInstasBtn
		self.instaTypeObject = instaTypeObject
		self.instaTypeContainer = instaTypeContainer
		self.instaTypePrefab = instaTypePrefab
		self.subTitleAnimator = subTitleAnimator
		self.typesLoaded = typesLoaded
		self.showingInstaCollection = showingInstaCollection
		self.typeDisplayList = typeDisplayList
		self.instaCollectionObject = instaCollectionObject
		self.instaContainer = instaContainer
		self.instaScrollRect = instaScrollRect
		self.instaPrefab = instaPrefab
		self.noInventoryObj = noInventoryObj
		self.subTitleTxt = subTitleTxt
		self.subCountTxt = subCountTxt
		self.arrowRightBtn = arrowRightBtn
		self.arrowLeftBtn = arrowLeftBtn
		self.gestureSetting = gestureSetting
		self.touch = touch
		self.collectionViewToggle = collectionViewToggle
		self.collectionViewToggleTxt = collectionViewToggleTxt
		self.collectionViewDescTxt = collectionViewDescTxt
		self.descTxtFadeTime = descTxtFadeTime
		self.descColor = descColor
		self.missingInstaSiloutte = missingInstaSiloutte
		self.DEBUGObject = DEBUGObject
		self.DEBUGToggleDebugBtn = DEBUGToggleDebugBtn
		self.DEBUGAddAllInstasBtn = DEBUGAddAllInstasBtn
		self.DEBUGRemoveAllInstasBtn = DEBUGRemoveAllInstasBtn
		self.DEBUGAddRandomInstasBtn = DEBUGAddRandomInstasBtn
		self.DEBUGHardClearBtn = DEBUGHardClearBtn
		self.returnSound = returnSound
		self.click1Sound = click1Sound
		self.pageIndex = pageIndex
		self.loadViewCR = loadViewCR
		self.swipeCR = swipeCR


class InstaTowerTypeDisplay:

    offsets = {'objBtn': 24, 'nameTxt': 32, 'blueBorder': 40, 'goldBorder': 48, 'blackBorder': 56, 'icon': 64, 'countCont': 72, 'countTxt': 80, 'newNotify': 88, 'textColorDisabled': 96, 'disabledMaterial': 112, 'DEBUGAddAllInstasBtn': 120, 'DEBUGRemoveAllInstasBtn': 128, 'DEBUGAddAllButTier5InstasBtn': 136, 'DEBUGAddRandomInstasBtn': 144, 'baseTowerID': 152, 'hasCollectionOrInventory': 160}    
    def __init__(self, objBtn: UnityEngine.UI.Button, nameTxt: TMPro.TextMeshProUGUI, blueBorder: UnityEngine.GameObject, goldBorder: UnityEngine.GameObject, blackBorder: UnityEngine.GameObject, icon: UnityEngine.UI.Image, countCont: UnityEngine.GameObject, countTxt: TMPro.TextMeshProUGUI, newNotify: UnityEngine.GameObject, textColorDisabled: UnityEngine.Color, disabledMaterial: UnityEngine.Material, DEBUGAddAllInstasBtn: UnityEngine.UI.Button, DEBUGRemoveAllInstasBtn: UnityEngine.UI.Button, DEBUGAddAllButTier5InstasBtn: UnityEngine.UI.Button, DEBUGAddRandomInstasBtn: UnityEngine.UI.Button, baseTowerID: System.String, hasCollectionOrInventory: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.objBtn = objBtn
		self.nameTxt = nameTxt
		self.blueBorder = blueBorder
		self.goldBorder = goldBorder
		self.blackBorder = blackBorder
		self.icon = icon
		self.countCont = countCont
		self.countTxt = countTxt
		self.newNotify = newNotify
		self.textColorDisabled = textColorDisabled
		self.disabledMaterial = disabledMaterial
		self.DEBUGAddAllInstasBtn = DEBUGAddAllInstasBtn
		self.DEBUGRemoveAllInstasBtn = DEBUGRemoveAllInstasBtn
		self.DEBUGAddAllButTier5InstasBtn = DEBUGAddAllButTier5InstasBtn
		self.DEBUGAddRandomInstasBtn = DEBUGAddRandomInstasBtn
		self.baseTowerID = baseTowerID
		self.hasCollectionOrInventory = hasCollectionOrInventory


class PowerSelectButton:

    offsets = {'OnSelect': 24, 'powerModel': 32, 'icon': 40, 'powerCountIcon': 48, 'powerCountText': 56, 'powerNameText': 64, 'selectedImage': 72, 'hasInventoryAC': 80, 'noInventoryAC': 88, 'toggle': 96, 'animator': 104, 'newNotify': 112, 'loadIconFrame': 120}    
    def __init__(self, OnSelect: Assets.Scripts.Unity.UI_New.Main.PowersSelect.PowerSelectButton.SelectHander, powerModel: Assets.Scripts.Models.Powers.PowerModel, icon: UnityEngine.UI.Image, powerCountIcon: UnityEngine.GameObject, powerCountText: TMPro.TextMeshProUGUI, powerNameText: TMPro.TextMeshProUGUI, selectedImage: UnityEngine.UI.Image, hasInventoryAC: UnityEngine.RuntimeAnimatorController, noInventoryAC: UnityEngine.RuntimeAnimatorController, toggle: UnityEngine.UI.Toggle, animator: UnityEngine.Animator, newNotify: UnityEngine.GameObject, loadIconFrame: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.OnSelect = OnSelect
		self.powerModel = powerModel
		self.icon = icon
		self.powerCountIcon = powerCountIcon
		self.powerCountText = powerCountText
		self.powerNameText = powerNameText
		self.selectedImage = selectedImage
		self.hasInventoryAC = hasInventoryAC
		self.noInventoryAC = noInventoryAC
		self.toggle = toggle
		self.animator = animator
		self.newNotify = newNotify
		self.loadIconFrame = loadIconFrame


class PowersSelectScreen:

    offsets = {'powerButtonsContainer': 56, 'powerButtonPrefab': 64, 'powerButtons': 72, 'selectedPowerModel': 80, 'selectedPowerIcon': 88, 'selectedPowerTitleText': 96, 'selectedPowerDescriptionText': 104, 'selectedPowerCostText': 112, 'purchaseButton': 120, 'toggleGroup': 128, 'menuTitleTxt': 136, 'instaTowerMenuBtn': 144, 'instaTowerMenuBtnNotify': 152, 'click3Sound': 160, 'unlockSound': 168}    
    def __init__(self, powerButtonsContainer: UnityEngine.Transform, powerButtonPrefab: Assets.Scripts.Unity.UI_New.Main.PowersSelect.PowerSelectButton, powerButtons: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Main.PowersSelect.PowerSelectButton>, selectedPowerModel: Assets.Scripts.Models.Powers.PowerModel, selectedPowerIcon: UnityEngine.UI.Image, selectedPowerTitleText: TMPro.TextMeshProUGUI, selectedPowerDescriptionText: TMPro.TextMeshProUGUI, selectedPowerCostText: TMPro.TextMeshProUGUI, purchaseButton: UnityEngine.UI.Button, toggleGroup: UnityEngine.UI.ToggleGroup, menuTitleTxt: TMPro.TextMeshProUGUI, instaTowerMenuBtn: UnityEngine.UI.Button, instaTowerMenuBtnNotify: UnityEngine.GameObject, click3Sound: UnityEngine.AudioClip, unlockSound: UnityEngine.AudioClip, **kwargs):
        super().__init__(self, **kwargs)
		self.powerButtonsContainer = powerButtonsContainer
		self.powerButtonPrefab = powerButtonPrefab
		self.powerButtons = powerButtons
		self.selectedPowerModel = selectedPowerModel
		self.selectedPowerIcon = selectedPowerIcon
		self.selectedPowerTitleText = selectedPowerTitleText
		self.selectedPowerDescriptionText = selectedPowerDescriptionText
		self.selectedPowerCostText = selectedPowerCostText
		self.purchaseButton = purchaseButton
		self.toggleGroup = toggleGroup
		self.menuTitleTxt = menuTitleTxt
		self.instaTowerMenuBtn = instaTowerMenuBtn
		self.instaTowerMenuBtnNotify = instaTowerMenuBtnNotify
		self.click3Sound = click3Sound
		self.unlockSound = unlockSound


class PatchNotesScreen:

    offsets = {'titleScreen': 24, 'uniWebview': 32, 'blocker': 40}    
    def __init__(self, titleScreen: Assets.Main.Scenes.TitleScreen, uniWebview: NinjaKiwi.Players.LiNKAccountControllers.SteamWebView, blocker: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.titleScreen = titleScreen
		self.uniWebview = uniWebview
		self.blocker = blocker


class UpdateAnnouncementScreen:

    offsets = {'mainImage': 56, 'titleText': 64, 'descriptionText': 72, 'cache': 80}    
    def __init__(self, mainImage: UnityEngine.UI.Image, titleText: NK_TextMeshProUGUI, descriptionText: NK_TextMeshProUGUI, cache: NinjaKiwi.Players.Caching.TaskCache, **kwargs):
        super().__init__(self, **kwargs)
		self.mainImage = mainImage
		self.titleText = titleText
		self.descriptionText = descriptionText
		self.cache = cache


class InteractableObject:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class InteractionChecker:

    offsets = {'sceneCamera': 24}    
    def __init__(self, sceneCamera: UnityEngine.Camera, **kwargs):
        super().__init__(self, **kwargs)
		self.sceneCamera = sceneCamera


class OpenChest:

    offsets = {'chestReady': 24, 'openChestSound': 32, 'clickSound': 40, 'animator': 48, 'interactableAudio': 56}    
    def __init__(self, chestReady: System.Boolean, openChestSound: UnityEngine.AudioClip, clickSound: UnityEngine.AudioClip, animator: UnityEngine.Animator, interactableAudio: Assets.Scripts.Unity.UI_New.Main.WorldItems.PlayInteractableAudio, **kwargs):
        super().__init__(self, **kwargs)
		self.chestReady = chestReady
		self.openChestSound = openChestSound
		self.clickSound = clickSound
		self.animator = animator
		self.interactableAudio = interactableAudio


class OpenGameEventsScreen:
	refreshInterval: System.TimeSpan
    offsets = {'refreshInterval': 0, 'questMonkeyPulse': 24, 'exclamationPointAnimator': 32, 'eventMonkeyAnimator': 40, 'dialogObject': 48, 'dialogText': 56, 'coopEventMonkey': 64, 'currState': 72, 'countdown': 80, 'isInitialized': 88}    
    def __init__(self, refreshInterval: System.TimeSpan, questMonkeyPulse: UnityEngine.GameObject, exclamationPointAnimator: UnityEngine.Animator, eventMonkeyAnimator: UnityEngine.Animator, dialogObject: UnityEngine.GameObject, dialogText: TMPro.TMP_Text, coopEventMonkey: UnityEngine.GameObject, currState: Assets.Scripts.Unity.UI_New.Main.WorldItems.OpenGameEventsScreen.State, countdown: System.Double, isInitialized: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.refreshInterval = refreshInterval
		self.questMonkeyPulse = questMonkeyPulse
		self.exclamationPointAnimator = exclamationPointAnimator
		self.eventMonkeyAnimator = eventMonkeyAnimator
		self.dialogObject = dialogObject
		self.dialogText = dialogText
		self.coopEventMonkey = coopEventMonkey
		self.currState = currState
		self.countdown = countdown
		self.isInitialized = isInitialized


class OpenGiftbox:

    offsets = {'container': 24, 'openChestSound': 32, 'clickSound': 40, 'dialogObject': 48, 'dialogText': 56, 'animator': 64, 'playingOpenAnimation': 72}    
    def __init__(self, container: UnityEngine.GameObject, openChestSound: UnityEngine.AudioClip, clickSound: UnityEngine.AudioClip, dialogObject: UnityEngine.GameObject, dialogText: TMPro.TMP_Text, animator: UnityEngine.Animator, playingOpenAnimation: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.container = container
		self.openChestSound = openChestSound
		self.clickSound = clickSound
		self.dialogObject = dialogObject
		self.dialogText = dialogText
		self.animator = animator
		self.playingOpenAnimation = playingOpenAnimation


class PlayInteractableAudio:

    offsets = {'audioClips': 24, 'groupLimit': 40, 'playOnStart': 44}    
    def __init__(self, audioClips: System.Collections.Generic.List<UnityEngine.AudioClip>, groupLimit: System.Int32, playOnStart: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.audioClips = audioClips
		self.groupLimit = groupLimit
		self.playOnStart = playOnStart


class PlayInteractableClip:

    offsets = {'animationClip': 24, 'interactableAudio': 32, 'animator': 40, 'playableGraph': 48, 'playableOutput': 64, 'playableClip': 80, 'noInterrupt': 96, 'activationsTillDestroy': 100, 'lastTriggered': 104, 'activations': 108}    
    def __init__(self, animationClip: UnityEngine.AnimationClip, interactableAudio: Assets.Scripts.Unity.UI_New.Main.WorldItems.PlayInteractableAudio, animator: UnityEngine.Animator, playableGraph: UnityEngine.Playables.PlayableGraph, playableOutput: UnityEngine.Animations.AnimationPlayableOutput, playableClip: UnityEngine.Animations.AnimationClipPlayable, noInterrupt: System.Boolean, activationsTillDestroy: System.Int32, lastTriggered: System.Single, activations: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.animationClip = animationClip
		self.interactableAudio = interactableAudio
		self.animator = animator
		self.playableGraph = playableGraph
		self.playableOutput = playableOutput
		self.playableClip = playableClip
		self.noInterrupt = noInterrupt
		self.activationsTillDestroy = activationsTillDestroy
		self.lastTriggered = lastTriggered
		self.activations = activations


class PlayInteractableEffect:

    offsets = {'effect': 24, 'effectLocationMarker': 32, 'delay': 40, 'clip': 48, 'isActive': 56, 'timeToTrigger': 60, 'waitForAnimation': 64}    
    def __init__(self, effect: UnityEngine.Object, effectLocationMarker: UnityEngine.GameObject, delay: System.Single, clip: UnityEngine.AnimationClip, isActive: System.Boolean, timeToTrigger: System.Single, waitForAnimation: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.effect = effect
		self.effectLocationMarker = effectLocationMarker
		self.delay = delay
		self.clip = clip
		self.isActive = isActive
		self.timeToTrigger = timeToTrigger
		self.waitForAnimation = waitForAnimation


class CameraMove:

    offsets = {'camera': 16, 'active': 24, 'progress': 28, 'curve': 32, 'start': 40, 'end': 52, 'duration': 64}    
    def __init__(self, camera: UnityEngine.Camera, active: System.Boolean, progress: System.Single, curve: UnityEngine.AnimationCurve, start: UnityEngine.Vector3, end: UnityEngine.Vector3, duration: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.camera = camera
		self.active = active
		self.progress = progress
		self.curve = curve
		self.start = start
		self.end = end
		self.duration = duration


class DragGestureDetector:

    offsets = {'<IsDragging>k__BackingField': 16, '<DragStart>k__BackingField': 20, 'claimedGesture': 32, '<DragOffset>k__BackingField': 40, 'OnDragStart': 48, 'OnDragEnd': 56, 'MinDragDistance': 64, 'tapOnDetector': 72, 'cameraMove': 80}    
    def __init__(self, <IsDragging>k__BackingField: System.Boolean, <DragStart>k__BackingField: UnityEngine.Vector2, claimedGesture: GestureSystem.Gesture, <DragOffset>k__BackingField: UnityEngine.Vector2, OnDragStart: System.Action<GestureSystem.Gesture>, OnDragEnd: System.Action<GestureSystem.Gesture>, MinDragDistance: System.Single, tapOnDetector: GestureSystem.TapOnDetector, cameraMove: UnityEngine.Vector2, **kwargs):
        super().__init__(self, **kwargs)
		self.<IsDragging>k__BackingField = <IsDragging>k__BackingField
		self.<DragStart>k__BackingField = <DragStart>k__BackingField
		self.claimedGesture = claimedGesture
		self.<DragOffset>k__BackingField = <DragOffset>k__BackingField
		self.OnDragStart = OnDragStart
		self.OnDragEnd = OnDragEnd
		self.MinDragDistance = MinDragDistance
		self.tapOnDetector = tapOnDetector
		self.cameraMove = cameraMove


class OdysseyBoatInteractable:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class OdysseyBoatLoadoutEditor:

    offsets = {'editor': 344, 'totalTowers': 352, 'totalPowers': 356, 'totalTowersNonHero': 360, 'modifiedCrewObj': 368, 'infoPanal': 376, 'contentPanal': 384, 'infoBtn': 392, 'odysseyCompleteAnimator': 400, 'shareBtn': 408, 'shareLockedMessagePanel': 416, 'DEBUGIgnoreCompletionCheck': 424, 'shareLocked': 432, 'shareTimerPanelObj': 440, 'shareTimerTxt': 448, 'shareLockedPopupDescTxt': 456, 'sharedObj': 464, 'sharedChalCode': 472, 'createSocialShareBtn': 480, 'shareLockObj': 488, 'createCopyCodeTick': 496, 'sharingLoadingSpinner': 504, 'minCrewNeededPanel': 512, 'txtStatTimeTaken': 520, 'txtStatLivesRemaining': 528, 'txtStatPopCount': 536, 'txtStatCashGenerated': 544, 'txtStatMoabsPopped': 552, 'txtStatAbilitiesUsed': 560, 'odysseyName': 568, 'wasHeroUsed': 576, 'initialisedStats': 577, 'previousHeroAdded': 584}    
    def __init__(self, editor: Assets.Scripts.Unity.UI_New.Odyssey.OdysseyEditor.OdysseyEditor, totalTowers: System.Int32, totalPowers: System.Int32, totalTowersNonHero: System.Int32, modifiedCrewObj: UnityEngine.GameObject, infoPanal: UnityEngine.GameObject, contentPanal: UnityEngine.GameObject, infoBtn: UnityEngine.UI.Button, odysseyCompleteAnimator: UnityEngine.Animator, shareBtn: Assets.Scripts.Unity.UI_New.ButtonExtended, shareLockedMessagePanel: UnityEngine.GameObject, DEBUGIgnoreCompletionCheck: UnityEngine.UI.Toggle, shareLocked: System.Boolean, shareTimerPanelObj: UnityEngine.GameObject, shareTimerTxt: TMPro.TMP_Text, shareLockedPopupDescTxt: TMPro.TMP_Text, sharedObj: UnityEngine.GameObject, sharedChalCode: TMPro.TMP_Text, createSocialShareBtn: UnityEngine.UI.Button, shareLockObj: UnityEngine.GameObject, createCopyCodeTick: UnityEngine.GameObject, sharingLoadingSpinner: UnityEngine.GameObject, minCrewNeededPanel: UnityEngine.GameObject, txtStatTimeTaken: NK_TextMeshProUGUI, txtStatLivesRemaining: NK_TextMeshProUGUI, txtStatPopCount: NK_TextMeshProUGUI, txtStatCashGenerated: NK_TextMeshProUGUI, txtStatMoabsPopped: NK_TextMeshProUGUI, txtStatAbilitiesUsed: NK_TextMeshProUGUI, odysseyName: NK_TextMeshProUGUI, wasHeroUsed: System.Boolean, initialisedStats: System.Boolean, previousHeroAdded: Assets.Scripts.Models.ServerEvents.TowerData, **kwargs):
        super().__init__(self, **kwargs)
		self.editor = editor
		self.totalTowers = totalTowers
		self.totalPowers = totalPowers
		self.totalTowersNonHero = totalTowersNonHero
		self.modifiedCrewObj = modifiedCrewObj
		self.infoPanal = infoPanal
		self.contentPanal = contentPanal
		self.infoBtn = infoBtn
		self.odysseyCompleteAnimator = odysseyCompleteAnimator
		self.shareBtn = shareBtn
		self.shareLockedMessagePanel = shareLockedMessagePanel
		self.DEBUGIgnoreCompletionCheck = DEBUGIgnoreCompletionCheck
		self.shareLocked = shareLocked
		self.shareTimerPanelObj = shareTimerPanelObj
		self.shareTimerTxt = shareTimerTxt
		self.shareLockedPopupDescTxt = shareLockedPopupDescTxt
		self.sharedObj = sharedObj
		self.sharedChalCode = sharedChalCode
		self.createSocialShareBtn = createSocialShareBtn
		self.shareLockObj = shareLockObj
		self.createCopyCodeTick = createCopyCodeTick
		self.sharingLoadingSpinner = sharingLoadingSpinner
		self.minCrewNeededPanel = minCrewNeededPanel
		self.txtStatTimeTaken = txtStatTimeTaken
		self.txtStatLivesRemaining = txtStatLivesRemaining
		self.txtStatPopCount = txtStatPopCount
		self.txtStatCashGenerated = txtStatCashGenerated
		self.txtStatMoabsPopped = txtStatMoabsPopped
		self.txtStatAbilitiesUsed = txtStatAbilitiesUsed
		self.odysseyName = odysseyName
		self.wasHeroUsed = wasHeroUsed
		self.initialisedStats = initialisedStats
		self.previousHeroAdded = previousHeroAdded


class OdysseyBoatLoadoutPanel:

    offsets = {'monkeySeats': 64, 'monkeyMax': 72, 'powerSpace': 80, 'powerMax': 88, 'prefabTower': 96, 'prefabPower': 104, 'prefabHero': 112, 'prefabTowerBackground': 120, 'prefabPowerBackgorund': 128, 'prefabHeroBackgorund': 136, 'objTopPanelNormal': 144, 'titleText': 152, 'objTopPanelExtreme': 160, 'titleTextExtreme': 168, 'objTopPanelActiveOdysseyExtreme': 176, 'topPanelActiveOdysseyExtreme': 184, 'objTowerContent': 192, 'objTowerSeatsContent': 200, 'objPowerContent': 208, 'objPowerSlotsContent': 216, 'objRightTowerPowerContent': 224, 'objResetCrew': 232, 'objResetButtonContainer': 240, 'towerDisplayList': 248, 'powerDisplayList': 256, 'towerBackgroundList': 264, 'powerBackgroundList': 272, 'rightPanelList': 280, 'btnMonkeys': 288, 'btnPowers': 296, 'btnHeros': 304, 'btnResetDefaultLoadout': 312, 'btnClearMonkeys': 320, 'btnClearPowers': 328, 'canMoProblems': 336}    
    def __init__(self, monkeySeats: NK_TextMeshProUGUI, monkeyMax: NK_TextMeshProUGUI, powerSpace: NK_TextMeshProUGUI, powerMax: NK_TextMeshProUGUI, prefabTower: Assets.Scripts.Unity.UI_New.Odyssey.SubScripts.OdysseyTowerDisplay, prefabPower: Assets.Scripts.Unity.UI_New.Odyssey.SubScripts.OdysseyPowerDisplay, prefabHero: Assets.Scripts.Unity.UI_New.Odyssey.SubScripts.OdysseyTowerDisplay, prefabTowerBackground: UnityEngine.GameObject, prefabPowerBackgorund: UnityEngine.GameObject, prefabHeroBackgorund: UnityEngine.GameObject, objTopPanelNormal: UnityEngine.GameObject, titleText: NK_TextMeshProUGUI, objTopPanelExtreme: UnityEngine.GameObject, titleTextExtreme: NK_TextMeshProUGUI, objTopPanelActiveOdysseyExtreme: UnityEngine.GameObject, topPanelActiveOdysseyExtreme: NK_TextMeshProUGUI, objTowerContent: UnityEngine.GameObject, objTowerSeatsContent: UnityEngine.GameObject, objPowerContent: UnityEngine.GameObject, objPowerSlotsContent: UnityEngine.GameObject, objRightTowerPowerContent: UnityEngine.GameObject, objResetCrew: UnityEngine.GameObject, objResetButtonContainer: UnityEngine.GameObject, towerDisplayList: System.Collections.Generic.List<UnityEngine.GameObject>, powerDisplayList: System.Collections.Generic.List<UnityEngine.GameObject>, towerBackgroundList: System.Collections.Generic.List<UnityEngine.GameObject>, powerBackgroundList: System.Collections.Generic.List<UnityEngine.GameObject>, rightPanelList: System.Collections.Generic.List<UnityEngine.GameObject>, btnMonkeys: UnityEngine.UI.Toggle, btnPowers: UnityEngine.UI.Toggle, btnHeros: UnityEngine.UI.Toggle, btnResetDefaultLoadout: UnityEngine.UI.Button, btnClearMonkeys: UnityEngine.UI.Button, btnClearPowers: UnityEngine.UI.Button, canMoProblems: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.monkeySeats = monkeySeats
		self.monkeyMax = monkeyMax
		self.powerSpace = powerSpace
		self.powerMax = powerMax
		self.prefabTower = prefabTower
		self.prefabPower = prefabPower
		self.prefabHero = prefabHero
		self.prefabTowerBackground = prefabTowerBackground
		self.prefabPowerBackgorund = prefabPowerBackgorund
		self.prefabHeroBackgorund = prefabHeroBackgorund
		self.objTopPanelNormal = objTopPanelNormal
		self.titleText = titleText
		self.objTopPanelExtreme = objTopPanelExtreme
		self.titleTextExtreme = titleTextExtreme
		self.objTopPanelActiveOdysseyExtreme = objTopPanelActiveOdysseyExtreme
		self.topPanelActiveOdysseyExtreme = topPanelActiveOdysseyExtreme
		self.objTowerContent = objTowerContent
		self.objTowerSeatsContent = objTowerSeatsContent
		self.objPowerContent = objPowerContent
		self.objPowerSlotsContent = objPowerSlotsContent
		self.objRightTowerPowerContent = objRightTowerPowerContent
		self.objResetCrew = objResetCrew
		self.objResetButtonContainer = objResetButtonContainer
		self.towerDisplayList = towerDisplayList
		self.powerDisplayList = powerDisplayList
		self.towerBackgroundList = towerBackgroundList
		self.powerBackgroundList = powerBackgroundList
		self.rightPanelList = rightPanelList
		self.btnMonkeys = btnMonkeys
		self.btnPowers = btnPowers
		self.btnHeros = btnHeros
		self.btnResetDefaultLoadout = btnResetDefaultLoadout
		self.btnClearMonkeys = btnClearMonkeys
		self.btnClearPowers = btnClearPowers
		self.canMoProblems = canMoProblems


class OdysseyEditorMap:

    offsets = {'mapName': 24, 'mapNumber': 32, 'mapImage': 40, 'mapEditMapDcmBtn': 48, 'mapEditMapBtn': 56, 'index': 64}    
    def __init__(self, mapName: TMPro.TextMeshProUGUI, mapNumber: TMPro.TextMeshProUGUI, mapImage: UnityEngine.UI.Image, mapEditMapDcmBtn: UnityEngine.UI.Button, mapEditMapBtn: UnityEngine.UI.Button, index: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.mapName = mapName
		self.mapNumber = mapNumber
		self.mapImage = mapImage
		self.mapEditMapDcmBtn = mapEditMapDcmBtn
		self.mapEditMapBtn = mapEditMapBtn
		self.index = index


class OdysseyEnvironmentInteractable:

    offsets = {'environmentIndex': 24}    
    def __init__(self, environmentIndex: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.environmentIndex = environmentIndex


class OdysseyEventScreen:

    offsets = {'txtOdysseyTitle': 56, 'txtOdysseySubTitle': 64, 'objTimeRemaining': 72, 'txtTimeRemaining': 80, 'txtDifficulty': 88, 'imgDifficulty': 96, 'imgDifficultyEasy': 104, 'imgDifficultyMedium': 112, 'imgDifficultyHard': 120, 'objLivesPanel': 128, 'txtLivesMessage': 136, 'txtLives': 144, 'txtUserCreatedOdysseyLives': 152, 'txtEditorOdysseyLives': 160, 'txtEditorMapsLeft': 168, 'lootPanel': 176, 'btnCrewDetails': 184, 'btnIslandRules': 192, 'btnDifficultyLeft': 200, 'btnDifficultyRight': 208, 'btnResetCurrentVoyageData': 216, 'btnFirstTimeInfoPanel': 224, 'btnExtendedLoot': 232, 'btnOdysseyEditor': 240, 'crewDetailsHighlight': 248, 'islandRulesHighlight': 256, 'objCrewDetails': 264, 'objIslandRules': 272, 'objCompletedOdyssey': 280, 'objBoatLoadout': 288, 'objIntroPanel': 296, 'objExtendedLootPanel': 304, 'objMinCrewNeeded': 312, 'objDifficultyPanel': 320, 'objDifficultyCompleteBottomBanner': 328, 'objDifficultyClaimedBottomBanner': 336, 'objEditorContainer': 344, 'objEditorUserDataContainer': 352, 'objEditorModeConstructionOverlayTop': 360, 'objEditorModeConstructionOverlayBottom': 368, 'extremeOverlay': 376, 'extremeTopPanelCountRemaining': 384, 'extremeDifficultyOverlay': 392, 'extremeTopPanelCountRemainingTxt': 400, 'btnPlay': 408, 'objPlayLock': 416, 'objLockedMessagePanel': 424, 'greyscaleMaterial': 432, 'clickSound': 440, 'popupSound': 448, 'nextSound': 456, 'returnSound': 464, 'resetSound': 472, 'chestSound': 480, 'starSound': 488, 'tickSound': 496, 'selectSound': 504, 'boatSound': 512, 'collectLootSound': 520, 'objDebugMenu': 528, 'btnDebugClearSaveData': 536, 'btnDebugTestBoatAnimButton': 544, 'btnDebugTestIslandStatues': 552, 'btnDebugTestOdysseyVictory': 560, 'challengeInfoPanel': 568, 'isValidatedTowerSet': 576, 'isValidatedPowerSet': 577, 'odysseyShaderController': 584, 'islandSlots': 592, 'islandStars': 600, 'treasureChests': 608, 'islandSelectedAnimators': 616, 'odysseyWorldAnimator': 624, 'odysseyBoatAnimator': 632, 'odysseyMonkeyAnimator': 640, 'isDisplayingCrewDetails': 648, 'isDisplayingIslandRules': 649, 'difficultyArrowSelected': 652, 'isBackButtonDisabled': 656, '<ChallengeType>k__BackingField': 660, 'odysseyEvent': 664, '<OdysseyData>k__BackingField': 672, 'odysseyWorldMenu': 680, 'odysseyContentData': 688, '_saveData': 696, '<OdysseyId>k__BackingField': 704}    
    def __init__(self, txtOdysseyTitle: NK_TextMeshProUGUI, txtOdysseySubTitle: NK_TextMeshProUGUI, objTimeRemaining: UnityEngine.GameObject, txtTimeRemaining: NK_TextMeshProUGUI, txtDifficulty: NK_TextMeshProUGUI, imgDifficulty: UnityEngine.UI.Image, imgDifficultyEasy: UnityEngine.UI.Image, imgDifficultyMedium: UnityEngine.UI.Image, imgDifficultyHard: UnityEngine.UI.Image, objLivesPanel: UnityEngine.GameObject, txtLivesMessage: NK_TextMeshProUGUI, txtLives: NK_TextMeshProUGUI, txtUserCreatedOdysseyLives: NK_TextMeshProUGUI, txtEditorOdysseyLives: NK_TextMeshProUGUI, txtEditorMapsLeft: NK_TextMeshProUGUI, lootPanel: Assets.Scripts.Unity.UI_New.Store.LootPanel, btnCrewDetails: UnityEngine.UI.Button, btnIslandRules: UnityEngine.UI.Button, btnDifficultyLeft: UnityEngine.UI.Button, btnDifficultyRight: UnityEngine.UI.Button, btnResetCurrentVoyageData: UnityEngine.UI.Button, btnFirstTimeInfoPanel: UnityEngine.UI.Button, btnExtendedLoot: UnityEngine.UI.Button, btnOdysseyEditor: UnityEngine.UI.Button, crewDetailsHighlight: UnityEngine.GameObject, islandRulesHighlight: UnityEngine.GameObject, objCrewDetails: Assets.Scripts.Unity.UI_New.Odyssey.SubScripts.OdysseyCrewDetailsPanelPopup, objIslandRules: Assets.Scripts.Unity.UI_New.Odyssey.OdysseyIslandInfoPanelPopup, objCompletedOdyssey: Assets.Scripts.Unity.UI_New.Odyssey.SubScripts.OdysseyCompletedPopup, objBoatLoadout: Assets.Scripts.Unity.UI_New.Odyssey.OdysseyBoatLoadoutPanel, objIntroPanel: Assets.Scripts.Unity.UI_New.Odyssey.SubScripts.OdysseyIntroPanelPopup, objExtendedLootPanel: Assets.Scripts.Unity.UI_New.Odyssey.SubScripts.OdysseyExtendedLootPanel, objMinCrewNeeded: UnityEngine.GameObject, objDifficultyPanel: UnityEngine.GameObject, objDifficultyCompleteBottomBanner: UnityEngine.GameObject, objDifficultyClaimedBottomBanner: UnityEngine.GameObject, objEditorContainer: UnityEngine.GameObject, objEditorUserDataContainer: UnityEngine.GameObject, objEditorModeConstructionOverlayTop: UnityEngine.GameObject, objEditorModeConstructionOverlayBottom: UnityEngine.GameObject, extremeOverlay: UnityEngine.GameObject, extremeTopPanelCountRemaining: UnityEngine.GameObject, extremeDifficultyOverlay: UnityEngine.GameObject, extremeTopPanelCountRemainingTxt: NK_TextMeshProUGUI, btnPlay: Assets.Scripts.Unity.UI_New.ButtonExtended, objPlayLock: UnityEngine.GameObject, objLockedMessagePanel: UnityEngine.GameObject, greyscaleMaterial: UnityEngine.Material, clickSound: UnityEngine.AudioClip, popupSound: UnityEngine.AudioClip, nextSound: UnityEngine.AudioClip, returnSound: UnityEngine.AudioClip, resetSound: UnityEngine.AudioClip, chestSound: UnityEngine.AudioClip, starSound: UnityEngine.AudioClip, tickSound: UnityEngine.AudioClip, selectSound: UnityEngine.AudioClip, boatSound: UnityEngine.AudioClip, collectLootSound: UnityEngine.AudioClip, objDebugMenu: UnityEngine.GameObject, btnDebugClearSaveData: UnityEngine.UI.Button, btnDebugTestBoatAnimButton: UnityEngine.UI.Button, btnDebugTestIslandStatues: UnityEngine.UI.Button, btnDebugTestOdysseyVictory: UnityEngine.UI.Button, challengeInfoPanel: Assets.Scripts.Unity.UI_New.ChallengeEditor.ChallengeInfoPanel, isValidatedTowerSet: System.Boolean, isValidatedPowerSet: System.Boolean, odysseyShaderController: Assets.Scripts.Unity.UI_New.ShaderUI.OdysseyShaderController, islandSlots: System.Collections.Generic.List<UnityEngine.GameObject>, islandStars: System.Collections.Generic.List<UnityEngine.Animator>, treasureChests: System.Collections.Generic.List<UnityEngine.GameObject>, islandSelectedAnimators: System.Collections.Generic.List<UnityEngine.Animator>, odysseyWorldAnimator: UnityEngine.Animator, odysseyBoatAnimator: UnityEngine.Animator, odysseyMonkeyAnimator: UnityEngine.Animator, isDisplayingCrewDetails: System.Boolean, isDisplayingIslandRules: System.Boolean, difficultyArrowSelected: System.Int32, isBackButtonDisabled: System.Boolean, <ChallengeType>k__BackingField: Assets.Scripts.Models.ServerEvents.ChallengeType, odysseyEvent: Assets.Scripts.Models.ServerEvents.OdysseyEvent, <OdysseyData>k__BackingField: Assets.Scripts.Models.ServerEvents.OdysseyData, odysseyWorldMenu: Assets.Scripts.Unity.UI_New.Odyssey.OdysseyWorldMenu, odysseyContentData: Assets.Scripts.Unity.UI_New.Odyssey.OdysseyEditor.OdysseyContentData, _saveData: Assets.Scripts.Unity.UI_New.Odyssey.SubScripts.OdysseySaveData, <OdysseyId>k__BackingField: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.txtOdysseyTitle = txtOdysseyTitle
		self.txtOdysseySubTitle = txtOdysseySubTitle
		self.objTimeRemaining = objTimeRemaining
		self.txtTimeRemaining = txtTimeRemaining
		self.txtDifficulty = txtDifficulty
		self.imgDifficulty = imgDifficulty
		self.imgDifficultyEasy = imgDifficultyEasy
		self.imgDifficultyMedium = imgDifficultyMedium
		self.imgDifficultyHard = imgDifficultyHard
		self.objLivesPanel = objLivesPanel
		self.txtLivesMessage = txtLivesMessage
		self.txtLives = txtLives
		self.txtUserCreatedOdysseyLives = txtUserCreatedOdysseyLives
		self.txtEditorOdysseyLives = txtEditorOdysseyLives
		self.txtEditorMapsLeft = txtEditorMapsLeft
		self.lootPanel = lootPanel
		self.btnCrewDetails = btnCrewDetails
		self.btnIslandRules = btnIslandRules
		self.btnDifficultyLeft = btnDifficultyLeft
		self.btnDifficultyRight = btnDifficultyRight
		self.btnResetCurrentVoyageData = btnResetCurrentVoyageData
		self.btnFirstTimeInfoPanel = btnFirstTimeInfoPanel
		self.btnExtendedLoot = btnExtendedLoot
		self.btnOdysseyEditor = btnOdysseyEditor
		self.crewDetailsHighlight = crewDetailsHighlight
		self.islandRulesHighlight = islandRulesHighlight
		self.objCrewDetails = objCrewDetails
		self.objIslandRules = objIslandRules
		self.objCompletedOdyssey = objCompletedOdyssey
		self.objBoatLoadout = objBoatLoadout
		self.objIntroPanel = objIntroPanel
		self.objExtendedLootPanel = objExtendedLootPanel
		self.objMinCrewNeeded = objMinCrewNeeded
		self.objDifficultyPanel = objDifficultyPanel
		self.objDifficultyCompleteBottomBanner = objDifficultyCompleteBottomBanner
		self.objDifficultyClaimedBottomBanner = objDifficultyClaimedBottomBanner
		self.objEditorContainer = objEditorContainer
		self.objEditorUserDataContainer = objEditorUserDataContainer
		self.objEditorModeConstructionOverlayTop = objEditorModeConstructionOverlayTop
		self.objEditorModeConstructionOverlayBottom = objEditorModeConstructionOverlayBottom
		self.extremeOverlay = extremeOverlay
		self.extremeTopPanelCountRemaining = extremeTopPanelCountRemaining
		self.extremeDifficultyOverlay = extremeDifficultyOverlay
		self.extremeTopPanelCountRemainingTxt = extremeTopPanelCountRemainingTxt
		self.btnPlay = btnPlay
		self.objPlayLock = objPlayLock
		self.objLockedMessagePanel = objLockedMessagePanel
		self.greyscaleMaterial = greyscaleMaterial
		self.clickSound = clickSound
		self.popupSound = popupSound
		self.nextSound = nextSound
		self.returnSound = returnSound
		self.resetSound = resetSound
		self.chestSound = chestSound
		self.starSound = starSound
		self.tickSound = tickSound
		self.selectSound = selectSound
		self.boatSound = boatSound
		self.collectLootSound = collectLootSound
		self.objDebugMenu = objDebugMenu
		self.btnDebugClearSaveData = btnDebugClearSaveData
		self.btnDebugTestBoatAnimButton = btnDebugTestBoatAnimButton
		self.btnDebugTestIslandStatues = btnDebugTestIslandStatues
		self.btnDebugTestOdysseyVictory = btnDebugTestOdysseyVictory
		self.challengeInfoPanel = challengeInfoPanel
		self.isValidatedTowerSet = isValidatedTowerSet
		self.isValidatedPowerSet = isValidatedPowerSet
		self.odysseyShaderController = odysseyShaderController
		self.islandSlots = islandSlots
		self.islandStars = islandStars
		self.treasureChests = treasureChests
		self.islandSelectedAnimators = islandSelectedAnimators
		self.odysseyWorldAnimator = odysseyWorldAnimator
		self.odysseyBoatAnimator = odysseyBoatAnimator
		self.odysseyMonkeyAnimator = odysseyMonkeyAnimator
		self.isDisplayingCrewDetails = isDisplayingCrewDetails
		self.isDisplayingIslandRules = isDisplayingIslandRules
		self.difficultyArrowSelected = difficultyArrowSelected
		self.isBackButtonDisabled = isBackButtonDisabled
		self.<ChallengeType>k__BackingField = <ChallengeType>k__BackingField
		self.odysseyEvent = odysseyEvent
		self.<OdysseyData>k__BackingField = <OdysseyData>k__BackingField
		self.odysseyWorldMenu = odysseyWorldMenu
		self.odysseyContentData = odysseyContentData
		self._saveData = _saveData
		self.<OdysseyId>k__BackingField = <OdysseyId>k__BackingField


class OdysseyIslandInfoPanelPopup:

    offsets = {'txtDifficultyModes': 64, 'txtMapName': 72, 'txtMapNumber': 80, 'txtStartingCash': 88, 'txtStartRoundDetails': 96, 'editorEditBtn': 104, 'editorReplayBtn': 112, 'modifierContent': 128, 'modifierPrefab': 136, 'modTheme': 144, 'initialized': 152, 'mapIndexSelected': 156}    
    def __init__(self, txtDifficultyModes: NK_TextMeshProUGUI, txtMapName: NK_TextMeshProUGUI, txtMapNumber: NK_TextMeshProUGUI, txtStartingCash: NK_TextMeshProUGUI, txtStartRoundDetails: NK_TextMeshProUGUI, editorEditBtn: UnityEngine.UI.Button, editorReplayBtn: UnityEngine.UI.Button, modifierContent: UnityEngine.Transform, modifierPrefab: UnityEngine.GameObject, modTheme: Assets.Scripts.Unity.UI_New.Store.ModIconTheme, initialized: System.Boolean, mapIndexSelected: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.txtDifficultyModes = txtDifficultyModes
		self.txtMapName = txtMapName
		self.txtMapNumber = txtMapNumber
		self.txtStartingCash = txtStartingCash
		self.txtStartRoundDetails = txtStartRoundDetails
		self.editorEditBtn = editorEditBtn
		self.editorReplayBtn = editorReplayBtn
		self.modifierContent = modifierContent
		self.modifierPrefab = modifierPrefab
		self.modTheme = modTheme
		self.initialized = initialized
		self.mapIndexSelected = mapIndexSelected


class OdysseyIslandInteractable:

    offsets = {'islandIndex': 24}    
    def __init__(self, islandIndex: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.islandIndex = islandIndex


class OdysseyUtils:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class OdysseyWorldCameraController:

    offsets = {'cam': 16, 'cameraMove': 24, 'dragStartPosition': 32, 'velocity': 44, 'pushVelocity': 56, 'previousPosition': 68, 'startPosition': 80, 'isDragging': 92, 'CameraWasMoved': 96, 'draggingDisable': 104, 'config': 112}    
    def __init__(self, cam: UnityEngine.Camera, cameraMove: Assets.Scripts.Unity.UI_New.Odyssey.CameraMove, dragStartPosition: UnityEngine.Vector3, velocity: UnityEngine.Vector3, pushVelocity: UnityEngine.Vector3, previousPosition: UnityEngine.Vector3, startPosition: UnityEngine.Vector3, isDragging: System.Boolean, CameraWasMoved: System.Action, draggingDisable: System.Boolean, config: Assets.Scripts.Unity.UI_New.Odyssey.OdysseyWorldConfig, **kwargs):
        super().__init__(self, **kwargs)
		self.cam = cam
		self.cameraMove = cameraMove
		self.dragStartPosition = dragStartPosition
		self.velocity = velocity
		self.pushVelocity = pushVelocity
		self.previousPosition = previousPosition
		self.startPosition = startPosition
		self.isDragging = isDragging
		self.CameraWasMoved = CameraWasMoved
		self.draggingDisable = draggingDisable
		self.config = config


class OdysseyWorldConfig:

    offsets = {'friction': 16, 'dragSensitivity': 20, 'maxVelocity': 24, 'xmin': 28, 'xmax': 32, 'xmaxEasy': 36, 'xmaxMedium': 40, 'xmaxHard': 44, 'zmin': 48, 'zmax': 52, 'yPos': 56, 'xRotation': 60, 'xStartCamPos': 64, 'yStartCamPos': 68, 'zStartCamPos': 72, 'cameraMoveEase': 80, 'cameraMoveDuration': 88}    
    def __init__(self, friction: System.Single, dragSensitivity: System.Single, maxVelocity: System.Single, xmin: System.Single, xmax: System.Single, xmaxEasy: System.Single, xmaxMedium: System.Single, xmaxHard: System.Single, zmin: System.Single, zmax: System.Single, yPos: System.Single, xRotation: System.Single, xStartCamPos: System.Single, yStartCamPos: System.Single, zStartCamPos: System.Single, cameraMoveEase: UnityEngine.AnimationCurve, cameraMoveDuration: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.friction = friction
		self.dragSensitivity = dragSensitivity
		self.maxVelocity = maxVelocity
		self.xmin = xmin
		self.xmax = xmax
		self.xmaxEasy = xmaxEasy
		self.xmaxMedium = xmaxMedium
		self.xmaxHard = xmaxHard
		self.zmin = zmin
		self.zmax = zmax
		self.yPos = yPos
		self.xRotation = xRotation
		self.xStartCamPos = xStartCamPos
		self.yStartCamPos = yStartCamPos
		self.zStartCamPos = zStartCamPos
		self.cameraMoveEase = cameraMoveEase
		self.cameraMoveDuration = cameraMoveDuration


class OdysseyWorldGestures:
	TapGestureDurationThreshold: System.Single
    offsets = {'TapGestureDurationThreshold': 0, 'gestureManager': 16, 'dragDetector': 24, 'screenPushDetector': 32, 'cameraController': 40, 'TouchedIslandEvent': 48, 'gameIsFocused': 56}    
    def __init__(self, TapGestureDurationThreshold: System.Single, gestureManager: GestureSystem.GestureManager, dragDetector: Assets.Scripts.Unity.UI_New.Odyssey.DragGestureDetector, screenPushDetector: GestureSystem.ScreenPushDetector, cameraController: Assets.Scripts.Unity.UI_New.Odyssey.OdysseyWorldCameraController, TouchedIslandEvent: System.Action<GestureSystem.TouchableObject>, gameIsFocused: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.TapGestureDurationThreshold = TapGestureDurationThreshold
		self.gestureManager = gestureManager
		self.dragDetector = dragDetector
		self.screenPushDetector = screenPushDetector
		self.cameraController = cameraController
		self.TouchedIslandEvent = TouchedIslandEvent
		self.gameIsFocused = gameIsFocused


class OdysseyWorldMenu:

    offsets = {'gameGestures': 24, 'uiCanvas': 32, 'groundCollider': 40, 'cameraController': 48, 'config': 56, 'objFullScreenClouds': 64, 'ISLAND_CAMERA_OFFSET': 72, 'islands': 80, 'enviroments': 88, 'odysseyEventScreen': 96}    
    def __init__(self, gameGestures: Assets.Scripts.Unity.UI_New.Odyssey.OdysseyWorldGestures, uiCanvas: UnityEngine.Canvas, groundCollider: UnityEngine.BoxCollider, cameraController: Assets.Scripts.Unity.UI_New.Odyssey.OdysseyWorldCameraController, config: Assets.Scripts.Unity.UI_New.Odyssey.OdysseyWorldConfig, objFullScreenClouds: UnityEngine.GameObject, ISLAND_CAMERA_OFFSET: System.Int32, islands: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Unity.UI_New.Odyssey.OdysseyIslandInteractable>, enviroments: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Unity.UI_New.Odyssey.OdysseyEnvironmentInteractable>, odysseyEventScreen: Assets.Scripts.Unity.UI_New.Odyssey.OdysseyEventScreen, **kwargs):
        super().__init__(self, **kwargs)
		self.gameGestures = gameGestures
		self.uiCanvas = uiCanvas
		self.groundCollider = groundCollider
		self.cameraController = cameraController
		self.config = config
		self.objFullScreenClouds = objFullScreenClouds
		self.ISLAND_CAMERA_OFFSET = ISLAND_CAMERA_OFFSET
		self.islands = islands
		self.enviroments = enviroments
		self.odysseyEventScreen = odysseyEventScreen


class TouchableObjectDetector:

    offsets = {'OnTouchedObject': 16}    
    def __init__(self, OnTouchedObject: System.Action<GestureSystem.TouchableObject>, **kwargs):
        super().__init__(self, **kwargs)
		self.OnTouchedObject = OnTouchedObject


class OdysseyChallengeEditor:

    offsets = {'backgroundBtn': 24, 'mapMaskBtn': 32, 'mapImage': 40, 'mapName': 48, 'maxTowersObject': 56, 'maxTowers': 64, 'maxTowerTxt': 72, 'difficulty': 80, 'mode': 88, 'cash': 96, 'bloonSpeed': 104, 'bloonSpeedTxt': 112, 'bloonSpeedLeftBtn': 120, 'bloonSpeedRightBtn': 128, 'bloonSpeedDefaultBtn': 136, 'bloonSpeedDefNotch': 144, 'moabSpeed': 152, 'moabSpeedTxt': 160, 'moabSpeedLeftBtn': 168, 'moabSpeedRightBtn': 176, 'moabSpeedDefaultBtn': 184, 'moabSpeedDefNotch': 192, 'ceramicHealth': 200, 'ceramicHealthTxt': 208, 'ceramicHealthLeftBtn': 216, 'ceramicHealthRightBtn': 224, 'ceramicHealthDefaultBtn': 232, 'ceramicHealthDefNotch': 240, 'moabHealth': 248, 'moabHealthTxt': 256, 'moabHealthLeftBtn': 264, 'moabHealthRightBtn': 272, 'moabHealthDefaultBtn': 280, 'moabHealthDefNotch': 288, 'regrowSpeed': 296, 'regrowSpeedTxt': 304, 'regrowSpeedLeftBtn': 312, 'regrowSpeedRightBtn': 320, 'regrowSpeedDefaultBtn': 328, 'regrowSpeedDefNotch': 336, 'maxLives': 344, 'round': 352, 'endRound': 360, 'mkToggle': 368, 'sellingToggle': 376, 'powersToggle': 384, 'continuesToggle': 392, 'allCamoToggle': 400, 'allRegenToggle': 408, 'disableDoubleCashToggle': 416, 'dcm': 424, 'originalDcm': 432, 'modes': 440, 'modesLocs': 448, 'difficulties': 456, 'difficultiesLocs': 464, 'restric': 472, 'index': 480, 'qaEditorOnlyFeature': 488, 'roundSetDataTxt': 496, 'importRoundSetBtn': 504, 'addRoundSetBtn': 512, 'removeRoundSetBtn': 520, 'importedRoundsetSaveData': 528, 'addRoundsetSaveData': 536, 'panel_importRoundsetDataContent': 544, 'panel_roundSetJsonData': 552, 'panel_roundSetNameData': 560, 'panel_addRoundSetBtn': 568, 'panel_removeRoundSetBtn': 576, 'panel_roundsetSaveData': 584, 'panel_backgroundBackBtn': 592, 'listenersEnabled': 600, 'locs': 608, 'odysseyEditorScreen': 616, 'odysseyEditorMap': 624}    
    def __init__(self, backgroundBtn: UnityEngine.UI.Button, mapMaskBtn: UnityEngine.UI.Button, mapImage: UnityEngine.UI.Image, mapName: TMPro.TMP_Text, maxTowersObject: UnityEngine.GameObject, maxTowers: TMPro.TMP_InputField, maxTowerTxt: TMPro.TMP_Text, difficulty: TMPro.TMP_Dropdown, mode: TMPro.TMP_Dropdown, cash: TMPro.TMP_InputField, bloonSpeed: UnityEngine.UI.Slider, bloonSpeedTxt: TMPro.TMP_Text, bloonSpeedLeftBtn: UnityEngine.UI.Button, bloonSpeedRightBtn: UnityEngine.UI.Button, bloonSpeedDefaultBtn: UnityEngine.UI.Button, bloonSpeedDefNotch: UnityEngine.GameObject, moabSpeed: UnityEngine.UI.Slider, moabSpeedTxt: TMPro.TMP_Text, moabSpeedLeftBtn: UnityEngine.UI.Button, moabSpeedRightBtn: UnityEngine.UI.Button, moabSpeedDefaultBtn: UnityEngine.UI.Button, moabSpeedDefNotch: UnityEngine.GameObject, ceramicHealth: UnityEngine.UI.Slider, ceramicHealthTxt: TMPro.TMP_Text, ceramicHealthLeftBtn: UnityEngine.UI.Button, ceramicHealthRightBtn: UnityEngine.UI.Button, ceramicHealthDefaultBtn: UnityEngine.UI.Button, ceramicHealthDefNotch: UnityEngine.GameObject, moabHealth: UnityEngine.UI.Slider, moabHealthTxt: TMPro.TMP_Text, moabHealthLeftBtn: UnityEngine.UI.Button, moabHealthRightBtn: UnityEngine.UI.Button, moabHealthDefaultBtn: UnityEngine.UI.Button, moabHealthDefNotch: UnityEngine.GameObject, regrowSpeed: UnityEngine.UI.Slider, regrowSpeedTxt: TMPro.TMP_Text, regrowSpeedLeftBtn: UnityEngine.UI.Button, regrowSpeedRightBtn: UnityEngine.UI.Button, regrowSpeedDefaultBtn: UnityEngine.UI.Button, regrowSpeedDefNotch: UnityEngine.GameObject, maxLives: TMPro.TMP_InputField, round: TMPro.TMP_InputField, endRound: TMPro.TMP_InputField, mkToggle: UnityEngine.UI.Toggle, sellingToggle: UnityEngine.UI.Toggle, powersToggle: UnityEngine.UI.Toggle, continuesToggle: UnityEngine.UI.Toggle, allCamoToggle: UnityEngine.UI.Toggle, allRegenToggle: UnityEngine.UI.Toggle, disableDoubleCashToggle: UnityEngine.UI.Toggle, dcm: Assets.Scripts.Models.ServerEvents.DailyChallengeModel, originalDcm: Assets.Scripts.Models.ServerEvents.DailyChallengeModel, modes: System.Collections.Generic.List<System.String>, modesLocs: System.Collections.Generic.List<System.String>, difficulties: System.Collections.Generic.List<System.String>, difficultiesLocs: System.Collections.Generic.List<System.String>, restric: Assets.Scripts.Models.ServerEvents.Restrictions, index: System.Int32, qaEditorOnlyFeature: UnityEngine.GameObject, roundSetDataTxt: TMPro.TMP_Text, importRoundSetBtn: UnityEngine.UI.Button, addRoundSetBtn: UnityEngine.UI.Button, removeRoundSetBtn: UnityEngine.UI.Button, importedRoundsetSaveData: TMPro.TMP_Dropdown, addRoundsetSaveData: TMPro.TMP_Dropdown, panel_importRoundsetDataContent: UnityEngine.GameObject, panel_roundSetJsonData: TMPro.TMP_InputField, panel_roundSetNameData: TMPro.TMP_InputField, panel_addRoundSetBtn: UnityEngine.UI.Button, panel_removeRoundSetBtn: UnityEngine.UI.Button, panel_roundsetSaveData: TMPro.TMP_Dropdown, panel_backgroundBackBtn: UnityEngine.UI.Button, listenersEnabled: System.Boolean, locs: NinjaKiwi.Common.ILocProvider, odysseyEditorScreen: Assets.Scripts.Unity.UI_New.Odyssey.OdysseyEditor.OdysseyEditor, odysseyEditorMap: Assets.Scripts.Unity.UI_New.Odyssey.OdysseyEditorMap, **kwargs):
        super().__init__(self, **kwargs)
		self.backgroundBtn = backgroundBtn
		self.mapMaskBtn = mapMaskBtn
		self.mapImage = mapImage
		self.mapName = mapName
		self.maxTowersObject = maxTowersObject
		self.maxTowers = maxTowers
		self.maxTowerTxt = maxTowerTxt
		self.difficulty = difficulty
		self.mode = mode
		self.cash = cash
		self.bloonSpeed = bloonSpeed
		self.bloonSpeedTxt = bloonSpeedTxt
		self.bloonSpeedLeftBtn = bloonSpeedLeftBtn
		self.bloonSpeedRightBtn = bloonSpeedRightBtn
		self.bloonSpeedDefaultBtn = bloonSpeedDefaultBtn
		self.bloonSpeedDefNotch = bloonSpeedDefNotch
		self.moabSpeed = moabSpeed
		self.moabSpeedTxt = moabSpeedTxt
		self.moabSpeedLeftBtn = moabSpeedLeftBtn
		self.moabSpeedRightBtn = moabSpeedRightBtn
		self.moabSpeedDefaultBtn = moabSpeedDefaultBtn
		self.moabSpeedDefNotch = moabSpeedDefNotch
		self.ceramicHealth = ceramicHealth
		self.ceramicHealthTxt = ceramicHealthTxt
		self.ceramicHealthLeftBtn = ceramicHealthLeftBtn
		self.ceramicHealthRightBtn = ceramicHealthRightBtn
		self.ceramicHealthDefaultBtn = ceramicHealthDefaultBtn
		self.ceramicHealthDefNotch = ceramicHealthDefNotch
		self.moabHealth = moabHealth
		self.moabHealthTxt = moabHealthTxt
		self.moabHealthLeftBtn = moabHealthLeftBtn
		self.moabHealthRightBtn = moabHealthRightBtn
		self.moabHealthDefaultBtn = moabHealthDefaultBtn
		self.moabHealthDefNotch = moabHealthDefNotch
		self.regrowSpeed = regrowSpeed
		self.regrowSpeedTxt = regrowSpeedTxt
		self.regrowSpeedLeftBtn = regrowSpeedLeftBtn
		self.regrowSpeedRightBtn = regrowSpeedRightBtn
		self.regrowSpeedDefaultBtn = regrowSpeedDefaultBtn
		self.regrowSpeedDefNotch = regrowSpeedDefNotch
		self.maxLives = maxLives
		self.round = round
		self.endRound = endRound
		self.mkToggle = mkToggle
		self.sellingToggle = sellingToggle
		self.powersToggle = powersToggle
		self.continuesToggle = continuesToggle
		self.allCamoToggle = allCamoToggle
		self.allRegenToggle = allRegenToggle
		self.disableDoubleCashToggle = disableDoubleCashToggle
		self.dcm = dcm
		self.originalDcm = originalDcm
		self.modes = modes
		self.modesLocs = modesLocs
		self.difficulties = difficulties
		self.difficultiesLocs = difficultiesLocs
		self.restric = restric
		self.index = index
		self.qaEditorOnlyFeature = qaEditorOnlyFeature
		self.roundSetDataTxt = roundSetDataTxt
		self.importRoundSetBtn = importRoundSetBtn
		self.addRoundSetBtn = addRoundSetBtn
		self.removeRoundSetBtn = removeRoundSetBtn
		self.importedRoundsetSaveData = importedRoundsetSaveData
		self.addRoundsetSaveData = addRoundsetSaveData
		self.panel_importRoundsetDataContent = panel_importRoundsetDataContent
		self.panel_roundSetJsonData = panel_roundSetJsonData
		self.panel_roundSetNameData = panel_roundSetNameData
		self.panel_addRoundSetBtn = panel_addRoundSetBtn
		self.panel_removeRoundSetBtn = panel_removeRoundSetBtn
		self.panel_roundsetSaveData = panel_roundsetSaveData
		self.panel_backgroundBackBtn = panel_backgroundBackBtn
		self.listenersEnabled = listenersEnabled
		self.locs = locs
		self.odysseyEditorScreen = odysseyEditorScreen
		self.odysseyEditorMap = odysseyEditorMap


class OdysseyContentData:

    offsets = {'odysseyData': 16, 'challengeType': 24, 'playerChallenge': 32, 'mapIndexSelected': 40, 'showShareScreen': 44}    
    def __init__(self, odysseyData: Assets.Scripts.Models.ServerEvents.OdysseyData, challengeType: Assets.Scripts.Models.ServerEvents.ChallengeType, playerChallenge: Assets.Scripts.Unity.UI_New.ChallengeEditor.PlayerChallenge, mapIndexSelected: System.Int32, showShareScreen: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.odysseyData = odysseyData
		self.challengeType = challengeType
		self.playerChallenge = playerChallenge
		self.mapIndexSelected = mapIndexSelected
		self.showShareScreen = showShareScreen


class OdysseyDataType:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class OdysseyEditor:

    offsets = {'odysseyName': 56, 'odysseyDescription': 64, 'odysseyId': 72, 'odysseyLocsKey': 80, 'odysseyDifficultySelect': 88, 'rewardsTrophiesEasy': 96, 'rewardsTrophiesMedium': 104, 'rewardsTrophiesHard': 112, 'rewardsMmEasy': 120, 'rewardsMmMedium': 128, 'rewardsMmHard': 136, 'rewardsEasyType': 144, 'rewardsEasyPathTypes': 152, 'rewardsEasyBlocker': 160, 'rewardsEasyPowersIcon': 168, 'rewardsEasyInstasIcon': 176, 'rewardsMedType': 184, 'rewardsMedPathTypes': 192, 'rewardsMedBlocker': 200, 'rewardsMedPowersIcon': 208, 'rewardsMedInstasIcon': 216, 'rewardsHardType': 224, 'rewardsHardPathTypes': 232, 'rewardsHardBlocker': 240, 'rewardsHardPowersIcon': 248, 'rewardsHardInstasIcon': 256, 'resetBtn': 264, 'playBtn': 272, 'shareBtn': 280, 'shareBoatLoadoutScreenBtn': 288, 'DEBUGIgnoreCompletionCheck': 296, 'shareLockObj': 304, 'shareLockInfoPopupObj': 312, 'shareLockInfoPopupTxt': 320, 'lives': 328, 'extremeModeTgl': 336, 'boatLoadoutPanel': 344, 'contentMaps': 352, 'prefabMapObj': 360, 'challengeEditorObj': 368, 'challengeEditor': 376, 'maxTowerSlots': 384, 'maxPowerSlots': 392, 'maxBoatTowers': 400, 'maxBoatPowers': 408, 'prefabPowersObj': 416, 'prefabTowerObj': 424, 'prefabHeroObj': 432, 'powersContainer': 440, 'towersContainer': 448, 'addMonkeyButton': 456, 'addPowersButton': 464, 'mapDisplayBeginner': 472, 'mapDisplayInter': 480, 'mapDisplayAdvanced': 488, 'mapDisplayExpert': 496, 'mapBGBackBtn': 504, 'grayscaleMaterial': 512, 'mapSelectObject': 520, 'mapDisplayPrefab': 528, 'mapDisplayParent': 536, 'mapSelectScrollRect': 544, 'mapScrollSpeedAdjuster': 552, 'mapSelectInit': 556, 'targetMap': 560, 'beginnerMap': 568, 'interMap': 576, 'advancedMap': 584, 'expertMap': 592, 'cmEditorOnlyFeature': 600, 'maxObjects': 608, 'excludedObjects': 616, 'includedObjects': 624, 'excludedObjectsSlots': 632, 'includedObjectsSlots': 640, 'excludedTitleTxt': 648, 'includedTitleTxt': 656, 'listSelectObject': 664, 'towerSelectBGBackBtn': 672, 'towerRestrictionBtn': 680, 'towerRestrictionMenu': 688, 'maps': 696, 'boatLoadout': 704, 'sharingInProgress': 712, 'scrollMofo': 713, 'towersSelectedClicked': 714, 'powersSelectedClicked': 715, 'odysseyDataType': 716, 'difficultySelected': 720, 'rewardTypes': 728, 'rewardTypesLocs': 736, 'instaTowerPathTypes': 744, 'difficultiesLocs': 752, 'allTowerDisplays': 760, 'allPowerDisplays': 768, 'importTxt': 800, 'importBtn': 808, 'exportBtn': 816, 'storedData': 824, 'storedDataType': 832, 'odysseyContentData': 840, 'sharingAllowed': 848}    
    def __init__(self, odysseyName: NK_TextMeshProInputField, odysseyDescription: NK_TextMeshProInputField, odysseyId: TMPro.TMP_InputField, odysseyLocsKey: TMPro.TMP_Dropdown, odysseyDifficultySelect: TMPro.TMP_Dropdown, rewardsTrophiesEasy: TMPro.TMP_InputField, rewardsTrophiesMedium: TMPro.TMP_InputField, rewardsTrophiesHard: TMPro.TMP_InputField, rewardsMmEasy: TMPro.TMP_InputField, rewardsMmMedium: TMPro.TMP_InputField, rewardsMmHard: TMPro.TMP_InputField, rewardsEasyType: TMPro.TMP_Dropdown, rewardsEasyPathTypes: TMPro.TMP_Dropdown, rewardsEasyBlocker: UnityEngine.GameObject, rewardsEasyPowersIcon: UnityEngine.GameObject, rewardsEasyInstasIcon: UnityEngine.GameObject, rewardsMedType: TMPro.TMP_Dropdown, rewardsMedPathTypes: TMPro.TMP_Dropdown, rewardsMedBlocker: UnityEngine.GameObject, rewardsMedPowersIcon: UnityEngine.GameObject, rewardsMedInstasIcon: UnityEngine.GameObject, rewardsHardType: TMPro.TMP_Dropdown, rewardsHardPathTypes: TMPro.TMP_Dropdown, rewardsHardBlocker: UnityEngine.GameObject, rewardsHardPowersIcon: UnityEngine.GameObject, rewardsHardInstasIcon: UnityEngine.GameObject, resetBtn: UnityEngine.UI.Button, playBtn: UnityEngine.UI.Button, shareBtn: Assets.Scripts.Unity.UI_New.ButtonExtended, shareBoatLoadoutScreenBtn: UnityEngine.UI.Button, DEBUGIgnoreCompletionCheck: UnityEngine.UI.Toggle, shareLockObj: UnityEngine.GameObject, shareLockInfoPopupObj: UnityEngine.GameObject, shareLockInfoPopupTxt: TMPro.TextMeshProUGUI, lives: TMPro.TMP_InputField, extremeModeTgl: UnityEngine.UI.Toggle, boatLoadoutPanel: UnityEngine.GameObject, contentMaps: UnityEngine.GameObject, prefabMapObj: UnityEngine.GameObject, challengeEditorObj: UnityEngine.GameObject, challengeEditor: Assets.Scripts.Unity.UI_New.Odyssey.OdysseyEditor.OdysseyChallengeEditor, maxTowerSlots: TMPro.TMP_InputField, maxPowerSlots: TMPro.TMP_InputField, maxBoatTowers: TMPro.TMP_InputField, maxBoatPowers: TMPro.TMP_InputField, prefabPowersObj: UnityEngine.GameObject, prefabTowerObj: UnityEngine.GameObject, prefabHeroObj: UnityEngine.GameObject, powersContainer: UnityEngine.Transform, towersContainer: UnityEngine.Transform, addMonkeyButton: UnityEngine.UI.Button, addPowersButton: UnityEngine.UI.Button, mapDisplayBeginner: UnityEngine.UI.Toggle, mapDisplayInter: UnityEngine.UI.Toggle, mapDisplayAdvanced: UnityEngine.UI.Toggle, mapDisplayExpert: UnityEngine.UI.Toggle, mapBGBackBtn: UnityEngine.UI.Button, grayscaleMaterial: UnityEngine.Material, mapSelectObject: UnityEngine.GameObject, mapDisplayPrefab: UnityEngine.GameObject, mapDisplayParent: UnityEngine.Transform, mapSelectScrollRect: UnityEngine.UI.ScrollRect, mapScrollSpeedAdjuster: System.Single, mapSelectInit: System.Boolean, targetMap: UnityEngine.RectTransform, beginnerMap: UnityEngine.RectTransform, interMap: UnityEngine.RectTransform, advancedMap: UnityEngine.RectTransform, expertMap: UnityEngine.RectTransform, cmEditorOnlyFeature: UnityEngine.GameObject, maxObjects: TMPro.TMP_InputField, excludedObjects: UnityEngine.Transform, includedObjects: UnityEngine.Transform, excludedObjectsSlots: UnityEngine.Transform, includedObjectsSlots: UnityEngine.Transform, excludedTitleTxt: NK_TextMeshProUGUI, includedTitleTxt: NK_TextMeshProUGUI, listSelectObject: UnityEngine.GameObject, towerSelectBGBackBtn: UnityEngine.UI.Button, towerRestrictionBtn: UnityEngine.UI.Button, towerRestrictionMenu: UnityEngine.GameObject, maps: System.Collections.Generic.List<Assets.Scripts.Data.MapSets.MapDetails>, boatLoadout: Assets.Scripts.Unity.UI_New.Odyssey.OdysseyBoatLoadoutEditor, sharingInProgress: System.Boolean, scrollMofo: System.Boolean, towersSelectedClicked: System.Boolean, powersSelectedClicked: System.Boolean, odysseyDataType: Assets.Scripts.Models.ServerEvents.ChallengeType, difficultySelected: System.Nullable<Assets.Scripts.Models.ServerEvents.OdysseyDifficulty>, rewardTypes: System.Collections.Generic.List<System.String>, rewardTypesLocs: System.Collections.Generic.List<System.String>, instaTowerPathTypes: System.Collections.Generic.List<System.String>, difficultiesLocs: System.Collections.Generic.List<System.String>, allTowerDisplays: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.DailyChallenge.DCModTowerDisplay>, allPowerDisplays: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.DailyChallenge.DCModPowerDisplay>, importTxt: TMPro.TMP_InputField, importBtn: UnityEngine.UI.Button, exportBtn: UnityEngine.UI.Button, storedData: System.Object, storedDataType: Assets.Scripts.Unity.UI_New.Odyssey.OdysseyEditor.OdysseyEditor.DataType, odysseyContentData: Assets.Scripts.Unity.UI_New.Odyssey.OdysseyEditor.OdysseyContentData, sharingAllowed: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.odysseyName = odysseyName
		self.odysseyDescription = odysseyDescription
		self.odysseyId = odysseyId
		self.odysseyLocsKey = odysseyLocsKey
		self.odysseyDifficultySelect = odysseyDifficultySelect
		self.rewardsTrophiesEasy = rewardsTrophiesEasy
		self.rewardsTrophiesMedium = rewardsTrophiesMedium
		self.rewardsTrophiesHard = rewardsTrophiesHard
		self.rewardsMmEasy = rewardsMmEasy
		self.rewardsMmMedium = rewardsMmMedium
		self.rewardsMmHard = rewardsMmHard
		self.rewardsEasyType = rewardsEasyType
		self.rewardsEasyPathTypes = rewardsEasyPathTypes
		self.rewardsEasyBlocker = rewardsEasyBlocker
		self.rewardsEasyPowersIcon = rewardsEasyPowersIcon
		self.rewardsEasyInstasIcon = rewardsEasyInstasIcon
		self.rewardsMedType = rewardsMedType
		self.rewardsMedPathTypes = rewardsMedPathTypes
		self.rewardsMedBlocker = rewardsMedBlocker
		self.rewardsMedPowersIcon = rewardsMedPowersIcon
		self.rewardsMedInstasIcon = rewardsMedInstasIcon
		self.rewardsHardType = rewardsHardType
		self.rewardsHardPathTypes = rewardsHardPathTypes
		self.rewardsHardBlocker = rewardsHardBlocker
		self.rewardsHardPowersIcon = rewardsHardPowersIcon
		self.rewardsHardInstasIcon = rewardsHardInstasIcon
		self.resetBtn = resetBtn
		self.playBtn = playBtn
		self.shareBtn = shareBtn
		self.shareBoatLoadoutScreenBtn = shareBoatLoadoutScreenBtn
		self.DEBUGIgnoreCompletionCheck = DEBUGIgnoreCompletionCheck
		self.shareLockObj = shareLockObj
		self.shareLockInfoPopupObj = shareLockInfoPopupObj
		self.shareLockInfoPopupTxt = shareLockInfoPopupTxt
		self.lives = lives
		self.extremeModeTgl = extremeModeTgl
		self.boatLoadoutPanel = boatLoadoutPanel
		self.contentMaps = contentMaps
		self.prefabMapObj = prefabMapObj
		self.challengeEditorObj = challengeEditorObj
		self.challengeEditor = challengeEditor
		self.maxTowerSlots = maxTowerSlots
		self.maxPowerSlots = maxPowerSlots
		self.maxBoatTowers = maxBoatTowers
		self.maxBoatPowers = maxBoatPowers
		self.prefabPowersObj = prefabPowersObj
		self.prefabTowerObj = prefabTowerObj
		self.prefabHeroObj = prefabHeroObj
		self.powersContainer = powersContainer
		self.towersContainer = towersContainer
		self.addMonkeyButton = addMonkeyButton
		self.addPowersButton = addPowersButton
		self.mapDisplayBeginner = mapDisplayBeginner
		self.mapDisplayInter = mapDisplayInter
		self.mapDisplayAdvanced = mapDisplayAdvanced
		self.mapDisplayExpert = mapDisplayExpert
		self.mapBGBackBtn = mapBGBackBtn
		self.grayscaleMaterial = grayscaleMaterial
		self.mapSelectObject = mapSelectObject
		self.mapDisplayPrefab = mapDisplayPrefab
		self.mapDisplayParent = mapDisplayParent
		self.mapSelectScrollRect = mapSelectScrollRect
		self.mapScrollSpeedAdjuster = mapScrollSpeedAdjuster
		self.mapSelectInit = mapSelectInit
		self.targetMap = targetMap
		self.beginnerMap = beginnerMap
		self.interMap = interMap
		self.advancedMap = advancedMap
		self.expertMap = expertMap
		self.cmEditorOnlyFeature = cmEditorOnlyFeature
		self.maxObjects = maxObjects
		self.excludedObjects = excludedObjects
		self.includedObjects = includedObjects
		self.excludedObjectsSlots = excludedObjectsSlots
		self.includedObjectsSlots = includedObjectsSlots
		self.excludedTitleTxt = excludedTitleTxt
		self.includedTitleTxt = includedTitleTxt
		self.listSelectObject = listSelectObject
		self.towerSelectBGBackBtn = towerSelectBGBackBtn
		self.towerRestrictionBtn = towerRestrictionBtn
		self.towerRestrictionMenu = towerRestrictionMenu
		self.maps = maps
		self.boatLoadout = boatLoadout
		self.sharingInProgress = sharingInProgress
		self.scrollMofo = scrollMofo
		self.towersSelectedClicked = towersSelectedClicked
		self.powersSelectedClicked = powersSelectedClicked
		self.odysseyDataType = odysseyDataType
		self.difficultySelected = difficultySelected
		self.rewardTypes = rewardTypes
		self.rewardTypesLocs = rewardTypesLocs
		self.instaTowerPathTypes = instaTowerPathTypes
		self.difficultiesLocs = difficultiesLocs
		self.allTowerDisplays = allTowerDisplays
		self.allPowerDisplays = allPowerDisplays
		self.importTxt = importTxt
		self.importBtn = importBtn
		self.exportBtn = exportBtn
		self.storedData = storedData
		self.storedDataType = storedDataType
		self.odysseyContentData = odysseyContentData
		self.sharingAllowed = sharingAllowed


class OdysseyBoatSlot:

    offsets = {'positionFull': 24, 'positionEmpty': 32, 'btn': 40}    
    def __init__(self, positionFull: UnityEngine.GameObject, positionEmpty: UnityEngine.GameObject, btn: UnityEngine.UI.Button, **kwargs):
        super().__init__(self, **kwargs)
		self.positionFull = positionFull
		self.positionEmpty = positionEmpty
		self.btn = btn


class OdysseyCompletedPopup:

    offsets = {'txtOdysseyTitle': 64, 'lootPanel': 72, 'btnCollect': 80, 'victorySound': 88, 'sceneAnimator': 96, 'userChalLikeTgl': 104, 'userChalFavTgl': 112, 'likeTglEnabledBg': 120, 'ratingCountTxt': 128, 'lootSetToCollect': 136, 'claimedLootPanel': 144, 'btnNextPanel': 152, 'txtStatTimeTaken': 160, 'txtStatLivesRemaining': 168, 'txtStatPopCount': 176, 'txtStatCashGenerated': 184, 'txtStatMoabsPopped': 192, 'txtStatAbilitiesUsed': 200, 'prefabTower': 208, 'prefabPower': 216, 'prefabHero': 224, 'prefabTowerBackground': 232, 'prefabPowerBackgorund': 240, 'prefabHeroBackgorund': 248, 'objTowerContent': 256, 'objTowerSeatsContent': 264, 'objPowerContent': 272, 'objPowerSlotsContent': 280, 'towerDisplayList': 288, 'powerDisplayList': 296, 'towerBackgroundList': 304, 'powerBackgroundList': 312}    
    def __init__(self, txtOdysseyTitle: NK_TextMeshProUGUI, lootPanel: Assets.Scripts.Unity.UI_New.Store.LootPanel, btnCollect: Assets.Scripts.Unity.UI_New.ButtonExtended, victorySound: UnityEngine.AudioClip, sceneAnimator: UnityEngine.Animator, userChalLikeTgl: UnityEngine.UI.Toggle, userChalFavTgl: UnityEngine.UI.Toggle, likeTglEnabledBg: UnityEngine.GameObject, ratingCountTxt: NK_TextMeshProUGUI, lootSetToCollect: Assets.Scripts.Models.Store.LootSet, claimedLootPanel: UnityEngine.GameObject, btnNextPanel: UnityEngine.UI.Button, txtStatTimeTaken: NK_TextMeshProUGUI, txtStatLivesRemaining: NK_TextMeshProUGUI, txtStatPopCount: NK_TextMeshProUGUI, txtStatCashGenerated: NK_TextMeshProUGUI, txtStatMoabsPopped: NK_TextMeshProUGUI, txtStatAbilitiesUsed: NK_TextMeshProUGUI, prefabTower: Assets.Scripts.Unity.UI_New.Odyssey.SubScripts.OdysseyTowerDisplay, prefabPower: Assets.Scripts.Unity.UI_New.Odyssey.SubScripts.OdysseyPowerDisplay, prefabHero: Assets.Scripts.Unity.UI_New.Odyssey.SubScripts.OdysseyTowerDisplay, prefabTowerBackground: UnityEngine.GameObject, prefabPowerBackgorund: UnityEngine.GameObject, prefabHeroBackgorund: UnityEngine.GameObject, objTowerContent: UnityEngine.GameObject, objTowerSeatsContent: UnityEngine.GameObject, objPowerContent: UnityEngine.GameObject, objPowerSlotsContent: UnityEngine.GameObject, towerDisplayList: System.Collections.Generic.List<UnityEngine.GameObject>, powerDisplayList: System.Collections.Generic.List<UnityEngine.GameObject>, towerBackgroundList: System.Collections.Generic.List<UnityEngine.GameObject>, powerBackgroundList: System.Collections.Generic.List<UnityEngine.GameObject>, **kwargs):
        super().__init__(self, **kwargs)
		self.txtOdysseyTitle = txtOdysseyTitle
		self.lootPanel = lootPanel
		self.btnCollect = btnCollect
		self.victorySound = victorySound
		self.sceneAnimator = sceneAnimator
		self.userChalLikeTgl = userChalLikeTgl
		self.userChalFavTgl = userChalFavTgl
		self.likeTglEnabledBg = likeTglEnabledBg
		self.ratingCountTxt = ratingCountTxt
		self.lootSetToCollect = lootSetToCollect
		self.claimedLootPanel = claimedLootPanel
		self.btnNextPanel = btnNextPanel
		self.txtStatTimeTaken = txtStatTimeTaken
		self.txtStatLivesRemaining = txtStatLivesRemaining
		self.txtStatPopCount = txtStatPopCount
		self.txtStatCashGenerated = txtStatCashGenerated
		self.txtStatMoabsPopped = txtStatMoabsPopped
		self.txtStatAbilitiesUsed = txtStatAbilitiesUsed
		self.prefabTower = prefabTower
		self.prefabPower = prefabPower
		self.prefabHero = prefabHero
		self.prefabTowerBackground = prefabTowerBackground
		self.prefabPowerBackgorund = prefabPowerBackgorund
		self.prefabHeroBackgorund = prefabHeroBackgorund
		self.objTowerContent = objTowerContent
		self.objTowerSeatsContent = objTowerSeatsContent
		self.objPowerContent = objPowerContent
		self.objPowerSlotsContent = objPowerSlotsContent
		self.towerDisplayList = towerDisplayList
		self.powerDisplayList = powerDisplayList
		self.towerBackgroundList = towerBackgroundList
		self.powerBackgroundList = powerBackgroundList


class OdysseyCrewDetailsPanelPopup:

    offsets = {'heroSeats': 64, 'monkeySeats': 72, 'monkeyMax': 80, 'powerSpace': 88, 'powerMax': 96, 'allHerosBanner': 104, 'herosContentPanel': 112, 'towersContentPanel': 120, 'powersContentPanel': 128, 'towerPrefab': 136, 'powerPrefab': 144, 'extremeOverlay': 152, 'herosDisplayList': 160, 'towerDisplayList': 168, 'powerDisplayList': 176}    
    def __init__(self, heroSeats: NK_TextMeshProUGUI, monkeySeats: NK_TextMeshProUGUI, monkeyMax: NK_TextMeshProUGUI, powerSpace: NK_TextMeshProUGUI, powerMax: NK_TextMeshProUGUI, allHerosBanner: UnityEngine.GameObject, herosContentPanel: UnityEngine.GameObject, towersContentPanel: UnityEngine.GameObject, powersContentPanel: UnityEngine.GameObject, towerPrefab: Assets.Scripts.Unity.UI_New.Odyssey.SubScripts.OdysseyTowerDisplay, powerPrefab: Assets.Scripts.Unity.UI_New.Odyssey.SubScripts.OdysseyPowerDisplay, extremeOverlay: UnityEngine.GameObject, herosDisplayList: System.Collections.Generic.List<UnityEngine.GameObject>, towerDisplayList: System.Collections.Generic.List<UnityEngine.GameObject>, powerDisplayList: System.Collections.Generic.List<UnityEngine.GameObject>, **kwargs):
        super().__init__(self, **kwargs)
		self.heroSeats = heroSeats
		self.monkeySeats = monkeySeats
		self.monkeyMax = monkeyMax
		self.powerSpace = powerSpace
		self.powerMax = powerMax
		self.allHerosBanner = allHerosBanner
		self.herosContentPanel = herosContentPanel
		self.towersContentPanel = towersContentPanel
		self.powersContentPanel = powersContentPanel
		self.towerPrefab = towerPrefab
		self.powerPrefab = powerPrefab
		self.extremeOverlay = extremeOverlay
		self.herosDisplayList = herosDisplayList
		self.towerDisplayList = towerDisplayList
		self.powerDisplayList = powerDisplayList


class OdysseyExtendedLootPanel:

    offsets = {'lootPanel': 64}    
    def __init__(self, lootPanel: Assets.Scripts.Unity.UI_New.Store.LootPanel, **kwargs):
        super().__init__(self, **kwargs)
		self.lootPanel = lootPanel


class OdysseyIntroPanelPopup:

    offsets = {'txtTitle': 64, 'txtBody': 72, 'extremeModeObject': 80, 'btnOk': 88}    
    def __init__(self, txtTitle: NK_TextMeshProUGUI, txtBody: NK_TextMeshProUGUI, extremeModeObject: UnityEngine.GameObject, btnOk: Assets.Scripts.Unity.UI_New.ButtonExtended, **kwargs):
        super().__init__(self, **kwargs)
		self.txtTitle = txtTitle
		self.txtBody = txtBody
		self.extremeModeObject = extremeModeObject
		self.btnOk = btnOk


class OdysseyMapPanel:

    offsets = {'tglMapToggle': 24, 'imgMapImage': 32, 'objCompletedStar': 40, 'completeStarAnimator': 48, 'valueSet': 56, 'currentSelectedMap': 57, 'callback': 64}    
    def __init__(self, tglMapToggle: UnityEngine.UI.Toggle, imgMapImage: UnityEngine.UI.Image, objCompletedStar: UnityEngine.GameObject, completeStarAnimator: UnityEngine.Animator, valueSet: System.Boolean, currentSelectedMap: System.Boolean, callback: Assets.Scripts.Unity.UI_New.Odyssey.SubScripts.OdysseyMapPanel.ReturnCallback, **kwargs):
        super().__init__(self, **kwargs)
		self.tglMapToggle = tglMapToggle
		self.imgMapImage = imgMapImage
		self.objCompletedStar = objCompletedStar
		self.completeStarAnimator = completeStarAnimator
		self.valueSet = valueSet
		self.currentSelectedMap = currentSelectedMap
		self.callback = callback


class OdysseyPopup:

    offsets = {'btnClose': 24, 'metaData': 32, 'initialised': 40, 'animator': 48, 'odysseyEventScreen': 56}    
    def __init__(self, btnClose: Assets.Scripts.Unity.UI_New.ButtonExtended, metaData: System.Object, initialised: System.Boolean, animator: UnityEngine.Animator, odysseyEventScreen: Assets.Scripts.Unity.UI_New.Odyssey.OdysseyEventScreen, **kwargs):
        super().__init__(self, **kwargs)
		self.btnClose = btnClose
		self.metaData = metaData
		self.initialised = initialised
		self.animator = animator
		self.odysseyEventScreen = odysseyEventScreen


class OdysseyPowerDisplay:

    offsets = {'boatLoadoutPanel': 88, 'odysseyEventScreen': 96, 'objLiNKPowersInventoryIcon': 104, 'txtLiNKPowersInventoryIcon': 112, 'txtRedPowerCount': 120, 'showLiNKPowerData': 128}    
    def __init__(self, boatLoadoutPanel: Assets.Scripts.Unity.UI_New.Odyssey.OdysseyBoatLoadoutPanel, odysseyEventScreen: Assets.Scripts.Unity.UI_New.Odyssey.OdysseyEventScreen, objLiNKPowersInventoryIcon: UnityEngine.GameObject, txtLiNKPowersInventoryIcon: NK_TextMeshProUGUI, txtRedPowerCount: NK_TextMeshProUGUI, showLiNKPowerData: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.boatLoadoutPanel = boatLoadoutPanel
		self.odysseyEventScreen = odysseyEventScreen
		self.objLiNKPowersInventoryIcon = objLiNKPowersInventoryIcon
		self.txtLiNKPowersInventoryIcon = txtLiNKPowersInventoryIcon
		self.txtRedPowerCount = txtRedPowerCount
		self.showLiNKPowerData = showLiNKPowerData


class OdysseySaveData:

    offsets = {'activeOdysey': 40, 'difficultySaveData': 48, 'seenFirstTimePopup': 56, 'embarkedOnAnOdyssey': 60, 'startTime': 64, 'isInitialized': 72}    
    def __init__(self, activeOdysey: Assets.Scripts.Unity.UI_New.Odyssey.SubScripts.OdysseySaveData.EmbarkedActiveOdyssey, difficultySaveData: System.Collections.Generic.Dictionary<System.Int32,Assets.Scripts.Unity.UI_New.Odyssey.SubScripts.OdysseySaveData.OdysseyDifficultySaveData>, seenFirstTimePopup: System.Boolean, embarkedOnAnOdyssey: System.Int32, startTime: System.DateTime, isInitialized: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.activeOdysey = activeOdysey
		self.difficultySaveData = difficultySaveData
		self.seenFirstTimePopup = seenFirstTimePopup
		self.embarkedOnAnOdyssey = embarkedOnAnOdyssey
		self.startTime = startTime
		self.isInitialized = isInitialized


class OdysseyTowerDisplay:

    offsets = {'boatLoadoutPanel': 96, 'odysseyEventScreen': 104, 'towerRestrictiedTxt': 112, 'showTextCount': 120}    
    def __init__(self, boatLoadoutPanel: Assets.Scripts.Unity.UI_New.Odyssey.OdysseyBoatLoadoutPanel, odysseyEventScreen: Assets.Scripts.Unity.UI_New.Odyssey.OdysseyEventScreen, towerRestrictiedTxt: TMPro.TMP_Text, showTextCount: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.boatLoadoutPanel = boatLoadoutPanel
		self.odysseyEventScreen = odysseyEventScreen
		self.towerRestrictiedTxt = towerRestrictiedTxt
		self.showTextCount = showTextCount


class DebugCameraIntervalTimer:

    offsets = {'intervalAmount': 24, 'time': 28}    
    def __init__(self, intervalAmount: System.Single, time: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.intervalAmount = intervalAmount
		self.time = time


class DebugTextToggle:

    offsets = {'text': 24}    
    def __init__(self, text: TMPro.TextMeshProUGUI, **kwargs):
        super().__init__(self, **kwargs)
		self.text = text


class PauseScreen:

    offsets = {'visibleStateLabel': 56, 'jukeBoxPlayer': 64, 'dragAndDropAnim': 72, 'continuousPlayAnim': 80, 'gameHintsAnim': 88, 'disableNudgeModeAnim': 96, 'txtInfo': 104, 'dragAndDropToggle': 112, 'continuousPlayToggle': 120, 'gameHintsToggle': 128, 'disableNudgeModeToggle': 136, 'heroVoiceControl': 144, 'disableNudgeModeGO': 152, 'lockAndDropText': 160, 'storeButton': 168, 'hotkeysButton': 176, 'homeButton': 184, 'restartButton': 192, 'continueButton': 200, 'challengeRulesButton': 208, 'sidePanel': 216}    
    def __init__(self, visibleStateLabel: System.String, jukeBoxPlayer: Assets.Scripts.Unity.Audio.MiniJukeBoxPlayer, dragAndDropAnim: UnityEngine.Animator, continuousPlayAnim: UnityEngine.Animator, gameHintsAnim: UnityEngine.Animator, disableNudgeModeAnim: UnityEngine.Animator, txtInfo: TMPro.TMP_Text, dragAndDropToggle: UnityEngine.UI.Toggle, continuousPlayToggle: UnityEngine.UI.Toggle, gameHintsToggle: UnityEngine.UI.Toggle, disableNudgeModeToggle: UnityEngine.UI.Toggle, heroVoiceControl: HeroVoiceToggleControl, disableNudgeModeGO: UnityEngine.GameObject, lockAndDropText: TMPro.TextMeshProUGUI, storeButton: UnityEngine.GameObject, hotkeysButton: UnityEngine.GameObject, homeButton: UnityEngine.GameObject, restartButton: UnityEngine.GameObject, continueButton: UnityEngine.GameObject, challengeRulesButton: UnityEngine.GameObject, sidePanel: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.visibleStateLabel = visibleStateLabel
		self.jukeBoxPlayer = jukeBoxPlayer
		self.dragAndDropAnim = dragAndDropAnim
		self.continuousPlayAnim = continuousPlayAnim
		self.gameHintsAnim = gameHintsAnim
		self.disableNudgeModeAnim = disableNudgeModeAnim
		self.txtInfo = txtInfo
		self.dragAndDropToggle = dragAndDropToggle
		self.continuousPlayToggle = continuousPlayToggle
		self.gameHintsToggle = gameHintsToggle
		self.disableNudgeModeToggle = disableNudgeModeToggle
		self.heroVoiceControl = heroVoiceControl
		self.disableNudgeModeGO = disableNudgeModeGO
		self.lockAndDropText = lockAndDropText
		self.storeButton = storeButton
		self.hotkeysButton = hotkeysButton
		self.homeButton = homeButton
		self.restartButton = restartButton
		self.continueButton = continueButton
		self.challengeRulesButton = challengeRulesButton
		self.sidePanel = sidePanel


class AvatarItem:

    offsets = {'id': 24, 'profileAvatar': 32, 'img': 40, 'trophyStoreBtnObj': 48, 'limitedTimeObj': 56, 'costTxt': 64, 'activeTgl': 72, 'isLocked': 80}    
    def __init__(self, id: System.String, profileAvatar: Assets.Scripts.Data.ProfileAvatarsNS.ProfileAvatar, img: UnityEngine.UI.Image, trophyStoreBtnObj: UnityEngine.GameObject, limitedTimeObj: UnityEngine.GameObject, costTxt: NK_TextMeshProUGUI, activeTgl: UnityEngine.UI.Toggle, isLocked: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.id = id
		self.profileAvatar = profileAvatar
		self.img = img
		self.trophyStoreBtnObj = trophyStoreBtnObj
		self.limitedTimeObj = limitedTimeObj
		self.costTxt = costTxt
		self.activeTgl = activeTgl
		self.isLocked = isLocked


class BannerItem:

    offsets = {'id': 24, 'profileBanner': 32, 'img': 40, 'trophyStoreBtnObj': 48, 'limitedTimeObj': 56, 'costTxt': 64, 'activeTgl': 72, 'isLocked': 80}    
    def __init__(self, id: System.String, profileBanner: Assets.Scripts.Data.ProfileAvatarsNS.ProfileBanner, img: UnityEngine.UI.Image, trophyStoreBtnObj: UnityEngine.GameObject, limitedTimeObj: UnityEngine.GameObject, costTxt: NK_TextMeshProUGUI, activeTgl: UnityEngine.UI.Toggle, isLocked: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.id = id
		self.profileBanner = profileBanner
		self.img = img
		self.trophyStoreBtnObj = trophyStoreBtnObj
		self.limitedTimeObj = limitedTimeObj
		self.costTxt = costTxt
		self.activeTgl = activeTgl
		self.isLocked = isLocked


class Btd6PlayerStatPair:

    offsets = {'OnSelect': 24, 'OnDeselect': 32, 'Warn': 40, 'statName': 48, 'icon': 56, 'statValue': 64, 'btn': 72, 'tick': 80, 'id': 88, 'isSelected': 96, 'selectionBlocked': 97}    
    def __init__(self, OnSelect: Assets.Scripts.Unity.UI_New.PlayerStats.Btd6PlayerStatPair.SelectHander, OnDeselect: Assets.Scripts.Unity.UI_New.PlayerStats.Btd6PlayerStatPair.SelectHander, Warn: Assets.Scripts.Unity.UI_New.PlayerStats.Btd6PlayerStatPair.SelectHander, statName: NK_TextMeshProUGUI, icon: UnityEngine.UI.Image, statValue: NK_TextMeshProUGUI, btn: UnityEngine.UI.Button, tick: UnityEngine.GameObject, id: System.String, isSelected: System.Boolean, selectionBlocked: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.OnSelect = OnSelect
		self.OnDeselect = OnDeselect
		self.Warn = Warn
		self.statName = statName
		self.icon = icon
		self.statValue = statValue
		self.btn = btn
		self.tick = tick
		self.id = id
		self.isSelected = isSelected
		self.selectionBlocked = selectionBlocked


class NamedMonkeyPanel:

    offsets = {'OnSelect': 24, 'monkeyName': 32, 'highlight': 40, 'icon': 48, 'id': 56}    
    def __init__(self, OnSelect: Assets.Scripts.Unity.UI_New.PlayerStats.NamedMonkeyPanel.SelectHander, monkeyName: NK_TextMeshProUGUI, highlight: UnityEngine.GameObject, icon: UnityEngine.UI.Image, id: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.OnSelect = OnSelect
		self.monkeyName = monkeyName
		self.highlight = highlight
		self.icon = icon
		self.id = id


class OnMouseOverMedal:

    offsets = {'infoPopUp': 24, 'titleLoc': 32, 'descriptionLoc': 40, 'modeLoc': 48, 'canShow': 56}    
    def __init__(self, infoPopUp: UnityEngine.GameObject, titleLoc: System.String, descriptionLoc: System.String, modeLoc: System.String, canShow: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.infoPopUp = infoPopUp
		self.titleLoc = titleLoc
		self.descriptionLoc = descriptionLoc
		self.modeLoc = modeLoc
		self.canShow = canShow


class PlayerStatsScreen:

    offsets = {'overallStatsPublic': 56, 'overallStatsPrivate': 64, 'topTowers': 72, 'topHeroes': 80, 'singlePlayerMedals': 88, 'coopPlayerMedals': 96, 'specialMedals': 104, 'medalPrefab': 112, 'settingsBtn': 120, 'avatarSettingsBtn': 128, 'previewPublicBtn': 136, 'okBtn': 144, 'cancelBtn': 152, 'buyBtn': 160, 'bannerButton': 168, 'removeButton': 176, 'playerName': 184, 'playerAvatar': 192, 'playerAvatarFrame': 200, 'playerBanner': 208, 'sharedStats': 216, 'noMedalTxtObj': 224, 'avatarsTab': 232, 'bannersTab': 240, 'settingsMenu': 248, 'avatarToggles': 256, 'bannerToggles': 264, 'prefabStat': 272, 'statPanel': 280, 'customBannerGameObject': 288, 'emptyBannerObject': 296, 'avatarItemPrefab': 304, 'bannerItemPrefab': 312, 'followBtn': 320, 'followBtnTxt': 328, 'followingImg': 336, 'followingThrober': 344, 'followerCountThrober': 352, 'followerCountTxt': 360, 'followerCountContainer': 368, 'clickSound': 376, 'returnSound': 384, 'selectSound': 392, 'level': 400, 'xpInfo': 408, 'bar': 416, 'vetObj': 424, 'vetRankTxt': 432, 'vetXpTxt': 440, 'vetRankBarImg': 448, 'loadingWheel': 456, 'namedMonkeyMenu': 464, 'namedMonkeyOption': 472, 'namedMonkeyBannerBtn': 480, 'storeIdPrefix': 488, 'publicOverallStatsList': 496, 'privateOverallStatsList': 504, 'topHeroesList': 512, 'topTowersList': 520, 'avatarItems': 528, 'bannerItems': 536, 'namedMonkeys': 544, 'playerStats': 552, 'currentlySelectedAvatar': 560, 'currentlySelectedBanner': 568, 'isEditMode': 576, 'isPublicPreview': 577, 'selectedStatCount': 580, 'selectedNamedMonkey': 584, 'isClosed': 592, 'trophyStoreIsOpen': 593, 'reopenSettingsMenu': 594, 'hasPurchasedNamedMonkeys': 595}    
    def __init__(self, overallStatsPublic: UnityEngine.GameObject, overallStatsPrivate: UnityEngine.GameObject, topTowers: UnityEngine.GameObject, topHeroes: UnityEngine.GameObject, singlePlayerMedals: UnityEngine.GameObject, coopPlayerMedals: UnityEngine.GameObject, specialMedals: UnityEngine.GameObject, medalPrefab: UnityEngine.GameObject, settingsBtn: UnityEngine.UI.Button, avatarSettingsBtn: UnityEngine.UI.Button, previewPublicBtn: UnityEngine.UI.Button, okBtn: UnityEngine.UI.Button, cancelBtn: UnityEngine.UI.Button, buyBtn: UnityEngine.UI.Button, bannerButton: UnityEngine.UI.Button, removeButton: UnityEngine.UI.Button, playerName: NK_TextMeshProUGUI, playerAvatar: UnityEngine.UI.Image, playerAvatarFrame: UnityEngine.UI.Image, playerBanner: UnityEngine.UI.Image, sharedStats: NK_TextMeshProUGUI, noMedalTxtObj: UnityEngine.GameObject, avatarsTab: UnityEngine.UI.Toggle, bannersTab: UnityEngine.UI.Toggle, settingsMenu: UnityEngine.GameObject, avatarToggles: UnityEngine.UI.ToggleGroup, bannerToggles: UnityEngine.UI.ToggleGroup, prefabStat: UnityEngine.GameObject, statPanel: UnityEngine.GameObject, customBannerGameObject: UnityEngine.GameObject, emptyBannerObject: UnityEngine.GameObject, avatarItemPrefab: Assets.Scripts.Unity.UI_New.PlayerStats.AvatarItem, bannerItemPrefab: Assets.Scripts.Unity.UI_New.PlayerStats.BannerItem, followBtn: UnityEngine.UI.Button, followBtnTxt: NK_TextMeshProUGUI, followingImg: UnityEngine.UI.Image, followingThrober: UnityEngine.UI.Image, followerCountThrober: UnityEngine.UI.Image, followerCountTxt: NK_TextMeshProUGUI, followerCountContainer: UnityEngine.GameObject, clickSound: UnityEngine.AudioClip, returnSound: UnityEngine.AudioClip, selectSound: UnityEngine.AudioClip, level: NK_TextMeshProUGUI, xpInfo: NK_TextMeshProUGUI, bar: UnityEngine.UI.Image, vetObj: UnityEngine.GameObject, vetRankTxt: NK_TextMeshProUGUI, vetXpTxt: NK_TextMeshProUGUI, vetRankBarImg: UnityEngine.UI.Image, loadingWheel: UnityEngine.GameObject, namedMonkeyMenu: UnityEngine.GameObject, namedMonkeyOption: UnityEngine.GameObject, namedMonkeyBannerBtn: UnityEngine.UI.Button, storeIdPrefix: System.String, publicOverallStatsList: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.PlayerStats.Btd6PlayerStatPair>, privateOverallStatsList: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.PlayerStats.Btd6PlayerStatPair>, topHeroesList: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.PlayerStats.Btd6PlayerStatPair>, topTowersList: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.PlayerStats.Btd6PlayerStatPair>, avatarItems: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Unity.UI_New.PlayerStats.AvatarItem>, bannerItems: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Unity.UI_New.PlayerStats.BannerItem>, namedMonkeys: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Unity.UI_New.PlayerStats.NamedMonkeyPanel>, playerStats: Assets.Scripts.Unity.Player.Btd6PlayerStats, currentlySelectedAvatar: Assets.Scripts.Unity.UI_New.PlayerStats.AvatarItem, currentlySelectedBanner: Assets.Scripts.Unity.UI_New.PlayerStats.BannerItem, isEditMode: System.Boolean, isPublicPreview: System.Boolean, selectedStatCount: System.Int32, selectedNamedMonkey: System.String, isClosed: System.Boolean, trophyStoreIsOpen: System.Boolean, reopenSettingsMenu: System.Boolean, hasPurchasedNamedMonkeys: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.overallStatsPublic = overallStatsPublic
		self.overallStatsPrivate = overallStatsPrivate
		self.topTowers = topTowers
		self.topHeroes = topHeroes
		self.singlePlayerMedals = singlePlayerMedals
		self.coopPlayerMedals = coopPlayerMedals
		self.specialMedals = specialMedals
		self.medalPrefab = medalPrefab
		self.settingsBtn = settingsBtn
		self.avatarSettingsBtn = avatarSettingsBtn
		self.previewPublicBtn = previewPublicBtn
		self.okBtn = okBtn
		self.cancelBtn = cancelBtn
		self.buyBtn = buyBtn
		self.bannerButton = bannerButton
		self.removeButton = removeButton
		self.playerName = playerName
		self.playerAvatar = playerAvatar
		self.playerAvatarFrame = playerAvatarFrame
		self.playerBanner = playerBanner
		self.sharedStats = sharedStats
		self.noMedalTxtObj = noMedalTxtObj
		self.avatarsTab = avatarsTab
		self.bannersTab = bannersTab
		self.settingsMenu = settingsMenu
		self.avatarToggles = avatarToggles
		self.bannerToggles = bannerToggles
		self.prefabStat = prefabStat
		self.statPanel = statPanel
		self.customBannerGameObject = customBannerGameObject
		self.emptyBannerObject = emptyBannerObject
		self.avatarItemPrefab = avatarItemPrefab
		self.bannerItemPrefab = bannerItemPrefab
		self.followBtn = followBtn
		self.followBtnTxt = followBtnTxt
		self.followingImg = followingImg
		self.followingThrober = followingThrober
		self.followerCountThrober = followerCountThrober
		self.followerCountTxt = followerCountTxt
		self.followerCountContainer = followerCountContainer
		self.clickSound = clickSound
		self.returnSound = returnSound
		self.selectSound = selectSound
		self.level = level
		self.xpInfo = xpInfo
		self.bar = bar
		self.vetObj = vetObj
		self.vetRankTxt = vetRankTxt
		self.vetXpTxt = vetXpTxt
		self.vetRankBarImg = vetRankBarImg
		self.loadingWheel = loadingWheel
		self.namedMonkeyMenu = namedMonkeyMenu
		self.namedMonkeyOption = namedMonkeyOption
		self.namedMonkeyBannerBtn = namedMonkeyBannerBtn
		self.storeIdPrefix = storeIdPrefix
		self.publicOverallStatsList = publicOverallStatsList
		self.privateOverallStatsList = privateOverallStatsList
		self.topHeroesList = topHeroesList
		self.topTowersList = topTowersList
		self.avatarItems = avatarItems
		self.bannerItems = bannerItems
		self.namedMonkeys = namedMonkeys
		self.playerStats = playerStats
		self.currentlySelectedAvatar = currentlySelectedAvatar
		self.currentlySelectedBanner = currentlySelectedBanner
		self.isEditMode = isEditMode
		self.isPublicPreview = isPublicPreview
		self.selectedStatCount = selectedStatCount
		self.selectedNamedMonkey = selectedNamedMonkey
		self.isClosed = isClosed
		self.trophyStoreIsOpen = trophyStoreIsOpen
		self.reopenSettingsMenu = reopenSettingsMenu
		self.hasPurchasedNamedMonkeys = hasPurchasedNamedMonkeys


class CoopDisconnectedPopup:

    offsets = {'message': 232, 'closeButton': 240, 'giveUpButton': 248, 'rejoinButton': 256, 'rejoiningThrobber': 264, 'rejoinFunc': 272, 'lobbyId': 280, 'fromMenu': 288}    
    def __init__(self, message: TMPro.TextMeshProUGUI, closeButton: UnityEngine.UI.Button, giveUpButton: UnityEngine.UI.Button, rejoinButton: UnityEngine.UI.Button, rejoiningThrobber: UnityEngine.GameObject, rejoinFunc: System.Func<System.Threading.CancellationToken,System.Threading.Tasks.Task>, lobbyId: System.String, fromMenu: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.message = message
		self.closeButton = closeButton
		self.giveUpButton = giveUpButton
		self.rejoinButton = rejoinButton
		self.rejoiningThrobber = rejoiningThrobber
		self.rejoinFunc = rejoinFunc
		self.lobbyId = lobbyId
		self.fromMenu = fromMenu


class HintPanel:

    offsets = {'hintId': 24, 'animator': 32, 'text': 40, 'image': 48, 'opening': 56, 'closing': 57, 'closingTimer': 60}    
    def __init__(self, hintId: System.Int32, animator: UnityEngine.Animator, text: TMPro.TextMeshProUGUI, image: UnityEngine.UI.Image, opening: System.Boolean, closing: System.Boolean, closingTimer: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.hintId = hintId
		self.animator = animator
		self.text = text
		self.image = image
		self.opening = opening
		self.closing = closing
		self.closingTimer = closingTimer


class Popup:

    offsets = {'disablesHotKeys': 24, 'animator': 32, 'lastTrigger': 40, 'titleObj': 48, 'bodyObj': 56, 'okObj': 64, 'cancelObj': 72, 'cashObj': 80, 'title': 88, 'body': 96, 'image': 104, 'cashText': 112, 'okText': 120, 'cancelText': 128, 'currentCashInfo': 136, 'currentCashText': 144, 'clickSound': 152, 'closeSound': 160, 'animationDelay': 168, 'autoHideDelay': 172, 'delayTillHideEnabled': 176, 'instantClose': 180, 'canHide': 181, '<active>k__BackingField': 182, 'confirmCallback': 184, 'cancelCallback': 192, 'background': 200, 'popupHide': 208, 'popupEnd': 216, 'transition': 224}    
    def __init__(self, disablesHotKeys: System.Boolean, animator: UnityEngine.Animator, lastTrigger: System.String, titleObj: UnityEngine.GameObject, bodyObj: UnityEngine.GameObject, okObj: UnityEngine.GameObject, cancelObj: UnityEngine.GameObject, cashObj: UnityEngine.GameObject, title: TMPro.TextMeshProUGUI, body: TMPro.TextMeshProUGUI, image: UnityEngine.UI.Image, cashText: TMPro.TextMeshProUGUI, okText: TMPro.TextMeshProUGUI, cancelText: TMPro.TextMeshProUGUI, currentCashInfo: UnityEngine.GameObject, currentCashText: TMPro.TextMeshProUGUI, clickSound: UnityEngine.AudioClip, closeSound: UnityEngine.AudioClip, animationDelay: System.Single, autoHideDelay: System.Single, delayTillHideEnabled: System.Single, instantClose: System.Boolean, canHide: System.Boolean, <active>k__BackingField: System.Boolean, confirmCallback: Assets.Scripts.Unity.UI_New.Popups.PopupScreen.ReturnCallback, cancelCallback: Assets.Scripts.Unity.UI_New.Popups.PopupScreen.ReturnCallback, background: Assets.Scripts.Unity.UI_New.Popups.PopupScreen.BackGround, popupHide: System.Action<Assets.Scripts.Unity.UI_New.Popups.Popup>, popupEnd: System.Action<Assets.Scripts.Unity.UI_New.Popups.Popup>, transition: Assets.Scripts.Unity.UI_New.Popups.Popup.TransitionAnim, **kwargs):
        super().__init__(self, **kwargs)
		self.disablesHotKeys = disablesHotKeys
		self.animator = animator
		self.lastTrigger = lastTrigger
		self.titleObj = titleObj
		self.bodyObj = bodyObj
		self.okObj = okObj
		self.cancelObj = cancelObj
		self.cashObj = cashObj
		self.title = title
		self.body = body
		self.image = image
		self.cashText = cashText
		self.okText = okText
		self.cancelText = cancelText
		self.currentCashInfo = currentCashInfo
		self.currentCashText = currentCashText
		self.clickSound = clickSound
		self.closeSound = closeSound
		self.animationDelay = animationDelay
		self.autoHideDelay = autoHideDelay
		self.delayTillHideEnabled = delayTillHideEnabled
		self.instantClose = instantClose
		self.canHide = canHide
		self.<active>k__BackingField = <active>k__BackingField
		self.confirmCallback = confirmCallback
		self.cancelCallback = cancelCallback
		self.background = background
		self.popupHide = popupHide
		self.popupEnd = popupEnd
		self.transition = transition


class PopupScreen:
	instance: Assets.Scripts.Unity.UI_New.Popups.PopupScreen
    offsets = {'instance': 0, 'popupLayer': 24, 'backgroundPR': 32, 'commonPopupPR': 40, 'tutorialVictoryPopupPR': 48, 'welcomePopupPR': 56, 'coopDisconnectedPopup': 64, 'coopSyncingPopup': 72, 'coopRejoiningPopup': 80, 'eventPopupPR': 88, 'setValuePopup': 96, 'setNamePopup': 104, 'apopalypseWarningPopup': 112, 'trophyStorePopup': 120, 'storePopup': 128, 'racePassStorePopup': 136, 'raceEndedPopup': 144, 'hintPanelPrefab': 160, 'hintPanelLayer': 168, 'hintPanelLayer43': 176, 'activePopupHandles': 184, 'waitFrame': 216, 'backgroundHandle': 224, 'backgroundOwner': 248, 'hints': 256, 'activeHintPanel': 264, 'activeHintPanelOpHandle': 272, 'makingHintPanel': 296, 'origHintPanelY': 300}    
    def __init__(self, instance: Assets.Scripts.Unity.UI_New.Popups.PopupScreen, popupLayer: UnityEngine.Transform, backgroundPR: Assets.Scripts.Utils.PrefabReference, commonPopupPR: Assets.Scripts.Utils.PrefabReference, tutorialVictoryPopupPR: Assets.Scripts.Utils.PrefabReference, welcomePopupPR: Assets.Scripts.Utils.PrefabReference, coopDisconnectedPopup: Assets.Scripts.Utils.PrefabReference, coopSyncingPopup: Assets.Scripts.Utils.PrefabReference, coopRejoiningPopup: Assets.Scripts.Utils.PrefabReference, eventPopupPR: Assets.Scripts.Utils.PrefabReference, setValuePopup: Assets.Scripts.Utils.PrefabReference, setNamePopup: Assets.Scripts.Utils.PrefabReference, apopalypseWarningPopup: Assets.Scripts.Utils.PrefabReference, trophyStorePopup: Assets.Scripts.Utils.PrefabReference, storePopup: Assets.Scripts.Utils.PrefabReference, racePassStorePopup: Assets.Scripts.Utils.PrefabReference, raceEndedPopup: Assets.Scripts.Utils.PrefabReference, hintPanelPrefab: Assets.Scripts.Utils.PrefabReference, hintPanelLayer: UnityEngine.Transform, hintPanelLayer43: UnityEngine.Transform, activePopupHandles: System.Collections.Generic.List<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle<UnityEngine.GameObject>>, waitFrame: System.Boolean, backgroundHandle: UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle<UnityEngine.GameObject>, backgroundOwner: System.Int32, hints: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Popups.PopupScreen.HintData>, activeHintPanel: UnityEngine.GameObject, activeHintPanelOpHandle: UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle<UnityEngine.GameObject>, makingHintPanel: System.Boolean, origHintPanelY: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.popupLayer = popupLayer
		self.backgroundPR = backgroundPR
		self.commonPopupPR = commonPopupPR
		self.tutorialVictoryPopupPR = tutorialVictoryPopupPR
		self.welcomePopupPR = welcomePopupPR
		self.coopDisconnectedPopup = coopDisconnectedPopup
		self.coopSyncingPopup = coopSyncingPopup
		self.coopRejoiningPopup = coopRejoiningPopup
		self.eventPopupPR = eventPopupPR
		self.setValuePopup = setValuePopup
		self.setNamePopup = setNamePopup
		self.apopalypseWarningPopup = apopalypseWarningPopup
		self.trophyStorePopup = trophyStorePopup
		self.storePopup = storePopup
		self.racePassStorePopup = racePassStorePopup
		self.raceEndedPopup = raceEndedPopup
		self.hintPanelPrefab = hintPanelPrefab
		self.hintPanelLayer = hintPanelLayer
		self.hintPanelLayer43 = hintPanelLayer43
		self.activePopupHandles = activePopupHandles
		self.waitFrame = waitFrame
		self.backgroundHandle = backgroundHandle
		self.backgroundOwner = backgroundOwner
		self.hints = hints
		self.activeHintPanel = activeHintPanel
		self.activeHintPanelOpHandle = activeHintPanelOpHandle
		self.makingHintPanel = makingHintPanel
		self.origHintPanelY = origHintPanelY


class RaceEndedPopup:

    offsets = {'bestTimeTxt': 232, 'globalRacePosTxt': 240, 'globalRaceBadgeImg': 248, 'globalRaceLootPnl': 256, 'miniRacePosTxt': 264, 'miniRaceLootPnl': 272, 'claimBtn': 280, 'claimBtnTxt': 288, 'raceEvent': 296, 'preventClose': 304, 'isDebug': 305, 'allLootRewards': 312}    
    def __init__(self, bestTimeTxt: TMPro.TextMeshProUGUI, globalRacePosTxt: TMPro.TextMeshProUGUI, globalRaceBadgeImg: UnityEngine.UI.Image, globalRaceLootPnl: Assets.Scripts.Unity.UI_New.Store.LootPanel, miniRacePosTxt: TMPro.TextMeshProUGUI, miniRaceLootPnl: Assets.Scripts.Unity.UI_New.Store.LootPanel, claimBtn: UnityEngine.UI.Button, claimBtnTxt: TMPro.TextMeshProUGUI, raceEvent: Assets.Scripts.Models.ServerEvents.RaceEvent, preventClose: System.Boolean, isDebug: System.Boolean, allLootRewards: Assets.Scripts.Models.Store.LootSet, **kwargs):
        super().__init__(self, **kwargs)
		self.bestTimeTxt = bestTimeTxt
		self.globalRacePosTxt = globalRacePosTxt
		self.globalRaceBadgeImg = globalRaceBadgeImg
		self.globalRaceLootPnl = globalRaceLootPnl
		self.miniRacePosTxt = miniRacePosTxt
		self.miniRaceLootPnl = miniRaceLootPnl
		self.claimBtn = claimBtn
		self.claimBtnTxt = claimBtnTxt
		self.raceEvent = raceEvent
		self.preventClose = preventClose
		self.isDebug = isDebug
		self.allLootRewards = allLootRewards


class RacePassStorePopup:

    offsets = {'priceTxt': 232, 'purchaseBtn': 240, 'priceTxt2': 248, 'purchaseBtn2': 256, 'closeBtn': 264, 'storeItem': 272, 'storeItem2': 280, 'purchaseCompleteCallback': 288}    
    def __init__(self, priceTxt: TMPro.TextMeshProUGUI, purchaseBtn: UnityEngine.UI.Button, priceTxt2: TMPro.TextMeshProUGUI, purchaseBtn2: UnityEngine.UI.Button, closeBtn: UnityEngine.UI.Button, storeItem: Assets.Scripts.Data.Store.StoreItem, storeItem2: Assets.Scripts.Data.Store.StoreItem, purchaseCompleteCallback: Assets.Scripts.Unity.UI_New.Popups.PopupScreen.ReturnCallback, **kwargs):
        super().__init__(self, **kwargs)
		self.priceTxt = priceTxt
		self.purchaseBtn = purchaseBtn
		self.priceTxt2 = priceTxt2
		self.purchaseBtn2 = purchaseBtn2
		self.closeBtn = closeBtn
		self.storeItem = storeItem
		self.storeItem2 = storeItem2
		self.purchaseCompleteCallback = purchaseCompleteCallback


class StorePopup:

    offsets = {'itemImg': 232, 'titleTxt': 240, 'descTxt': 248, 'priceTxt': 256, 'salePriceTxt': 264, 'saleObject': 272, 'purchaseBtn': 280, 'closeBtn': 288, 'storeItem': 296, 'purchaseCompleteCallback': 304, 'boughtLockedHeroId': 312}    
    def __init__(self, itemImg: UnityEngine.UI.Image, titleTxt: TMPro.TextMeshProUGUI, descTxt: TMPro.TextMeshProUGUI, priceTxt: TMPro.TextMeshProUGUI, salePriceTxt: TMPro.TextMeshProUGUI, saleObject: UnityEngine.GameObject, purchaseBtn: UnityEngine.UI.Button, closeBtn: UnityEngine.UI.Button, storeItem: Assets.Scripts.Data.Store.StoreItem, purchaseCompleteCallback: Assets.Scripts.Unity.UI_New.Popups.PopupScreen.ReturnCallback, boughtLockedHeroId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.itemImg = itemImg
		self.titleTxt = titleTxt
		self.descTxt = descTxt
		self.priceTxt = priceTxt
		self.salePriceTxt = salePriceTxt
		self.saleObject = saleObject
		self.purchaseBtn = purchaseBtn
		self.closeBtn = closeBtn
		self.storeItem = storeItem
		self.purchaseCompleteCallback = purchaseCompleteCallback
		self.boughtLockedHeroId = boughtLockedHeroId


class EventPanel:

    offsets = {'goldBackground': 24, 'glowBackground': 32, 'tierText': 40, 'tierTextGlobalOffsetY': 48, 'tierTextMiniOffsetY': 52, 'badgeImg': 56, 'raceReward': 64}    
    def __init__(self, goldBackground: UnityEngine.GameObject, glowBackground: UnityEngine.GameObject, tierText: TMPro.TextMeshProUGUI, tierTextGlobalOffsetY: System.Single, tierTextMiniOffsetY: System.Single, badgeImg: UnityEngine.UI.Image, raceReward: Assets.Scripts.Models.ServerEvents.LeaderboardReward, **kwargs):
        super().__init__(self, **kwargs)
		self.goldBackground = goldBackground
		self.glowBackground = glowBackground
		self.tierText = tierText
		self.tierTextGlobalOffsetY = tierTextGlobalOffsetY
		self.tierTextMiniOffsetY = tierTextMiniOffsetY
		self.badgeImg = badgeImg
		self.raceReward = raceReward


class EventRewardsScreen:

    offsets = {'eventRewardPanels': 56, 'eventTimerObj': 64, 'eventTimerTxt': 72, 'eventTimerCountdownTxt': 80, 'eventTimeImg': 88, 'fullRaceLeaderboardTog': 96, 'miniRaceLeaderboardTog': 104, 'eventData': 112, 'isMiniRace': 120, 'playerRank': 124, 'totalLeadboardCount': 128, 'miniPlayerRank': 132, 'miniTotalLeaderboardRank': 136}    
    def __init__(self, eventRewardPanels: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Races.EventPanel>, eventTimerObj: UnityEngine.GameObject, eventTimerTxt: TMPro.TextMeshProUGUI, eventTimerCountdownTxt: TMPro.TextMeshProUGUI, eventTimeImg: UnityEngine.UI.Image, fullRaceLeaderboardTog: UnityEngine.UI.Toggle, miniRaceLeaderboardTog: UnityEngine.UI.Toggle, eventData: Assets.Scripts.Models.ServerEvents.BaseServerEvent, isMiniRace: System.Boolean, playerRank: System.Int32, totalLeadboardCount: System.Int32, miniPlayerRank: System.Int32, miniTotalLeaderboardRank: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.eventRewardPanels = eventRewardPanels
		self.eventTimerObj = eventTimerObj
		self.eventTimerTxt = eventTimerTxt
		self.eventTimerCountdownTxt = eventTimerCountdownTxt
		self.eventTimeImg = eventTimeImg
		self.fullRaceLeaderboardTog = fullRaceLeaderboardTog
		self.miniRaceLeaderboardTog = miniRaceLeaderboardTog
		self.eventData = eventData
		self.isMiniRace = isMiniRace
		self.playerRank = playerRank
		self.totalLeadboardCount = totalLeadboardCount
		self.miniPlayerRank = miniPlayerRank
		self.miniTotalLeaderboardRank = miniTotalLeaderboardRank


class BaseRewardPanel:

    offsets = {'panelAnimator': 24, 'OnClosed': 32, 'interactable': 40}    
    def __init__(self, panelAnimator: UnityEngine.Animator, OnClosed: System.Action, interactable: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.panelAnimator = panelAnimator
		self.OnClosed = OnClosed
		self.interactable = interactable


class CollectionRewardPanel:

    offsets = {'caption': 48, 'quantity': 56, 'icon': 64}    
    def __init__(self, caption: TMPro.TMP_Text, quantity: TMPro.TMP_Text, icon: UnityEngine.UI.Image, **kwargs):
        super().__init__(self, **kwargs)
		self.caption = caption
		self.quantity = quantity
		self.icon = icon


class EventRewardPanel:

    offsets = {'caption': 48, 'quantity': 56, 'icon': 64}    
    def __init__(self, caption: TMPro.TMP_Text, quantity: TMPro.TMP_Text, icon: UnityEngine.UI.Image, **kwargs):
        super().__init__(self, **kwargs)
		self.caption = caption
		self.quantity = quantity
		self.icon = icon


class GenericRewardPanel:

    offsets = {'caption': 48, 'quantity': 56, 'icon': 64}    
    def __init__(self, caption: TMPro.TMP_Text, quantity: TMPro.TMP_Text, icon: UnityEngine.UI.Image, **kwargs):
        super().__init__(self, **kwargs)
		self.caption = caption
		self.quantity = quantity
		self.icon = icon


class InstaMonkeyRewardPanel:

    offsets = {'caption': 48, 'tier': 56, 'icon': 64}    
    def __init__(self, caption: TMPro.TMP_Text, tier: TMPro.TMP_Text, icon: UnityEngine.UI.Image, **kwargs):
        super().__init__(self, **kwargs)
		self.caption = caption
		self.tier = tier
		self.icon = icon


class InstaRankRewardPanel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PowerRewardPanel:

    offsets = {'quantity': 48, 'caption': 56, 'icon': 64}    
    def __init__(self, quantity: TMPro.TMP_Text, caption: TMPro.TMP_Text, icon: UnityEngine.UI.Image, **kwargs):
        super().__init__(self, **kwargs)
		self.quantity = quantity
		self.caption = caption
		self.icon = icon


class RewardsScreen:

    offsets = {'genericRewardPanel': 56, 'instaRankRewardPanel': 64, 'powerRewardPanel': 72, 'instaMonkeyRewardPanel': 80, 'eventRewardPanel': 88, 'collectionRewardPanel': 96, 'activePanel': 104, 'lootIndex': 112, 'OnClosedCallback': 120, 'lootSet': 128}    
    def __init__(self, genericRewardPanel: Assets.Scripts.Unity.UI_New.Rewards.GenericRewardPanel, instaRankRewardPanel: Assets.Scripts.Unity.UI_New.Rewards.InstaRankRewardPanel, powerRewardPanel: Assets.Scripts.Unity.UI_New.Rewards.PowerRewardPanel, instaMonkeyRewardPanel: Assets.Scripts.Unity.UI_New.Rewards.InstaMonkeyRewardPanel, eventRewardPanel: Assets.Scripts.Unity.UI_New.Rewards.EventRewardPanel, collectionRewardPanel: Assets.Scripts.Unity.UI_New.Rewards.CollectionRewardPanel, activePanel: Assets.Scripts.Unity.UI_New.Rewards.BaseRewardPanel, lootIndex: System.Int32, OnClosedCallback: System.Action, lootSet: Assets.Scripts.Models.Store.LootSet, **kwargs):
        super().__init__(self, **kwargs)
		self.genericRewardPanel = genericRewardPanel
		self.instaRankRewardPanel = instaRankRewardPanel
		self.powerRewardPanel = powerRewardPanel
		self.instaMonkeyRewardPanel = instaMonkeyRewardPanel
		self.eventRewardPanel = eventRewardPanel
		self.collectionRewardPanel = collectionRewardPanel
		self.activePanel = activePanel
		self.lootIndex = lootIndex
		self.OnClosedCallback = OnClosedCallback
		self.lootSet = lootSet


class HotkeysScreen:
	monkeyFields: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Settings.HotkeysScreenField>
    offsets = {'monkeyFields': 0, 'gameplayFields': 8, 'sandboxFields': 16, 'allFields': 24, 'defaultHotkeysData': 32, 'monkeysContainer': 56, 'gameplayContainer': 64, 'sandboxContainer': 72, 'fieldBeingChanged': 80, 'chordKeyCode': 88, 'initialised': 92, 'saved': 93}    
    def __init__(self, monkeyFields: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Settings.HotkeysScreenField>, gameplayFields: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Settings.HotkeysScreenField>, sandboxFields: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Settings.HotkeysScreenField>, allFields: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Settings.HotkeysScreenField>, defaultHotkeysData: Assets.Scripts.Unity.UI_New.InGame.HotkeysData, monkeysContainer: UnityEngine.GameObject, gameplayContainer: UnityEngine.GameObject, sandboxContainer: UnityEngine.GameObject, fieldBeingChanged: Assets.Scripts.Unity.UI_New.Settings.HotkeysScreenField, chordKeyCode: UnityEngine.KeyCode, initialised: System.Boolean, saved: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.monkeyFields = monkeyFields
		self.gameplayFields = gameplayFields
		self.sandboxFields = sandboxFields
		self.allFields = allFields
		self.defaultHotkeysData = defaultHotkeysData
		self.monkeysContainer = monkeysContainer
		self.gameplayContainer = gameplayContainer
		self.sandboxContainer = sandboxContainer
		self.fieldBeingChanged = fieldBeingChanged
		self.chordKeyCode = chordKeyCode
		self.initialised = initialised
		self.saved = saved


class HotkeysScreenField:

    offsets = {'commandName': 24, 'initialHotkey': 32, 'currentHotkey': 40, 'button': 48, 'commandNameText': 56, 'keyText': 64, 'changedHighlight': 72, 'hotkeysScreen': 80, 'buttonAnimator': 88}    
    def __init__(self, commandName: System.String, initialHotkey: System.Tuple<UnityEngine.KeyCode,UnityEngine.KeyCode>, currentHotkey: System.Tuple<UnityEngine.KeyCode,UnityEngine.KeyCode>, button: UnityEngine.UI.Button, commandNameText: TMPro.TextMeshProUGUI, keyText: TMPro.TextMeshProUGUI, changedHighlight: UnityEngine.GameObject, hotkeysScreen: Assets.Scripts.Unity.UI_New.Settings.HotkeysScreen, buttonAnimator: UnityEngine.Animator, **kwargs):
        super().__init__(self, **kwargs)
		self.commandName = commandName
		self.initialHotkey = initialHotkey
		self.currentHotkey = currentHotkey
		self.button = button
		self.commandNameText = commandNameText
		self.keyText = keyText
		self.changedHighlight = changedHighlight
		self.hotkeysScreen = hotkeysScreen
		self.buttonAnimator = buttonAnimator


class LanguageAsset:

    offsets = {'languages': 24}    
    def __init__(self, languages: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Settings.LanguageData>, **kwargs):
        super().__init__(self, **kwargs)
		self.languages = languages


class LanguageData:

    offsets = {'code': 16, 'icon': 24, 'text': 32}    
    def __init__(self, code: NinjaKiwi.Common.Language, icon: Assets.Scripts.Utils.SpriteReference, text: Assets.Scripts.Utils.SpriteReference, **kwargs):
        super().__init__(self, **kwargs)
		self.code = code
		self.icon = icon
		self.text = text


class LanguageSelectButton:

    offsets = {'languageCode': 24, 'textImage': 32, 'btn': 40, 'selectedImage': 48, 'selectedSprite': 56, 'deselectedSprite': 64}    
    def __init__(self, languageCode: NinjaKiwi.Common.Language, textImage: UnityEngine.UI.Image, btn: UnityEngine.UI.Button, selectedImage: UnityEngine.UI.Image, selectedSprite: Assets.Scripts.Utils.SpriteReference, deselectedSprite: Assets.Scripts.Utils.SpriteReference, **kwargs):
        super().__init__(self, **kwargs)
		self.languageCode = languageCode
		self.textImage = textImage
		self.btn = btn
		self.selectedImage = selectedImage
		self.selectedSprite = selectedSprite
		self.deselectedSprite = deselectedSprite


class LanguageSelectScreen:

    offsets = {'languageAsset': 56, 'buttonPrefab': 64, 'container': 72, 'languageSelectButtons': 80}    
    def __init__(self, languageAsset: Assets.Scripts.Unity.UI_New.Settings.LanguageAsset, buttonPrefab: Assets.Scripts.Unity.UI_New.Settings.LanguageSelectButton, container: UnityEngine.Transform, languageSelectButtons: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Settings.LanguageSelectButton>, **kwargs):
        super().__init__(self, **kwargs)
		self.languageAsset = languageAsset
		self.buttonPrefab = buttonPrefab
		self.container = container
		self.languageSelectButtons = languageSelectButtons


class ScreenSizeDropDown:

    offsets = {'animator': 24, 'content': 32, 'titleText': 40, 'currentScreenSizeText': 48, 'okText': 56, 'fullscreenText': 64, 'fullscreenTick': 72, 'panel': 80, 'listItemPrefab': 88, 'currentSelection': 96, 'selections': 104, 'genericResolutions': 112, 'dropDownShowing': 120}    
    def __init__(self, animator: UnityEngine.Animator, content: UnityEngine.Transform, titleText: TMPro.TextMeshProUGUI, currentScreenSizeText: TMPro.TextMeshProUGUI, okText: TMPro.TextMeshProUGUI, fullscreenText: TMPro.TextMeshProUGUI, fullscreenTick: UnityEngine.GameObject, panel: UnityEngine.GameObject, listItemPrefab: UnityEngine.GameObject, currentSelection: Assets.Scripts.Unity.UI_New.Settings.ScreenSizeDropDownSelection, selections: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Settings.ScreenSizeDropDownSelection>, genericResolutions: System.Collections.Generic.List<UnityEngine.Resolution>, dropDownShowing: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.animator = animator
		self.content = content
		self.titleText = titleText
		self.currentScreenSizeText = currentScreenSizeText
		self.okText = okText
		self.fullscreenText = fullscreenText
		self.fullscreenTick = fullscreenTick
		self.panel = panel
		self.listItemPrefab = listItemPrefab
		self.currentSelection = currentSelection
		self.selections = selections
		self.genericResolutions = genericResolutions
		self.dropDownShowing = dropDownShowing


class ScreenSizeDropDownSelection:

    offsets = {'screenSizeDropDown': 24, 'tickbox': 32, 'resolution': 40}    
    def __init__(self, screenSizeDropDown: Assets.Scripts.Unity.UI_New.Settings.ScreenSizeDropDown, tickbox: UnityEngine.GameObject, resolution: UnityEngine.Resolution, **kwargs):
        super().__init__(self, **kwargs)
		self.screenSizeDropDown = screenSizeDropDown
		self.tickbox = tickbox
		self.resolution = resolution


class SettingsScreen:

    offsets = {'copyrightText': 56, 'jukeBoxText': 64, 'jukeBoxEnabledText': 72, 'flagImage': 80, 'languageAsset': 88, 'backupButton': 96, 'backupStatus': 104, 'backupInProgress': 112, 'backupSucceeded': 120, 'backupFailed': 128, 'androidFlagIcon': 136, 'backupBtn': 144, 'profileBtn': 152, 'langBtn': 160, 'hotkeysBtn': 168, 'extraSettingsBtn': 176, 'jukeBoxBtn': 184, 'jukeBoxCheckBtn': 192, 'jukeBoxTickImg': 200, 'extraSettingsBtnNotify': 208, 'doubleCashPopup': 216, 'doubleCashHideTime': 224, 'toggleDebug': 232, 'debugPanel': 240, 'giftDC': 248, 'giftBB': 256, 'giftSB': 264, 'giftBT': 272, 'giftST': 280, 'updateNotes': 288, 'autoHide': 296, 'hideTime': 300, 'closed': 304, 'updatePopupEvent': 312}    
    def __init__(self, copyrightText: TMPro.TextMeshProUGUI, jukeBoxText: NK_TextMeshProUGUI, jukeBoxEnabledText: NK_TextMeshProUGUI, flagImage: UnityEngine.UI.Image, languageAsset: Assets.Scripts.Unity.UI_New.Settings.LanguageAsset, backupButton: UnityEngine.UI.Button, backupStatus: UnityEngine.GameObject, backupInProgress: UnityEngine.GameObject, backupSucceeded: UnityEngine.GameObject, backupFailed: UnityEngine.GameObject, androidFlagIcon: Assets.Scripts.Utils.SpriteReference, backupBtn: UnityEngine.UI.Button, profileBtn: UnityEngine.UI.Button, langBtn: UnityEngine.UI.Button, hotkeysBtn: UnityEngine.UI.Button, extraSettingsBtn: UnityEngine.UI.Button, jukeBoxBtn: UnityEngine.UI.Button, jukeBoxCheckBtn: UnityEngine.UI.Button, jukeBoxTickImg: UnityEngine.UI.Image, extraSettingsBtnNotify: UnityEngine.GameObject, doubleCashPopup: UnityEngine.GameObject, doubleCashHideTime: System.Single, toggleDebug: UnityEngine.UI.Button, debugPanel: UnityEngine.GameObject, giftDC: UnityEngine.UI.Button, giftBB: UnityEngine.UI.Button, giftSB: UnityEngine.UI.Button, giftBT: UnityEngine.UI.Button, giftST: UnityEngine.UI.Button, updateNotes: UnityEngine.GameObject, autoHide: System.Boolean, hideTime: System.Single, closed: System.Boolean, updatePopupEvent: Assets.Scripts.Models.ServerEvents.UpdatePopupEvent, **kwargs):
        super().__init__(self, **kwargs)
		self.copyrightText = copyrightText
		self.jukeBoxText = jukeBoxText
		self.jukeBoxEnabledText = jukeBoxEnabledText
		self.flagImage = flagImage
		self.languageAsset = languageAsset
		self.backupButton = backupButton
		self.backupStatus = backupStatus
		self.backupInProgress = backupInProgress
		self.backupSucceeded = backupSucceeded
		self.backupFailed = backupFailed
		self.androidFlagIcon = androidFlagIcon
		self.backupBtn = backupBtn
		self.profileBtn = profileBtn
		self.langBtn = langBtn
		self.hotkeysBtn = hotkeysBtn
		self.extraSettingsBtn = extraSettingsBtn
		self.jukeBoxBtn = jukeBoxBtn
		self.jukeBoxCheckBtn = jukeBoxCheckBtn
		self.jukeBoxTickImg = jukeBoxTickImg
		self.extraSettingsBtnNotify = extraSettingsBtnNotify
		self.doubleCashPopup = doubleCashPopup
		self.doubleCashHideTime = doubleCashHideTime
		self.toggleDebug = toggleDebug
		self.debugPanel = debugPanel
		self.giftDC = giftDC
		self.giftBB = giftBB
		self.giftSB = giftSB
		self.giftBT = giftBT
		self.giftST = giftST
		self.updateNotes = updateNotes
		self.autoHide = autoHide
		self.hideTime = hideTime
		self.closed = closed
		self.updatePopupEvent = updatePopupEvent


class SliderPercentText:

    offsets = {'text': 24, 'slider': 32}    
    def __init__(self, text: TMPro.TextMeshProUGUI, slider: UnityEngine.UI.Slider, **kwargs):
        super().__init__(self, **kwargs)
		self.text = text
		self.slider = slider


class TwitchSettingsUI:

    offsets = {'logInBtn': 56, 'logOutBtn': 64, 'usernameTxt': 72, 'loggingInSpinner': 80, 'signedInInfo': 88, 'twitchPollPanel': 96, 'twitchPollCreationPanel': 104, 'backgroundCloseBtn': 112, 'activeSubPoll': 128, 'isSubscribedToPollEvents': 136}    
    def __init__(self, logInBtn: UnityEngine.UI.Button, logOutBtn: UnityEngine.UI.Button, usernameTxt: NK_TextMeshProUGUI, loggingInSpinner: UnityEngine.UI.Image, signedInInfo: UnityEngine.GameObject, twitchPollPanel: Assets.Scripts.Unity.UI_New.Twitch.TwitchPollPanel, twitchPollCreationPanel: Assets.Scripts.Unity.UI_New.Twitch.TwitchPollCreationPanel, backgroundCloseBtn: UnityEngine.UI.Button, activeSubPoll: Assets.Twitch.Models.SubPoll, isSubscribedToPollEvents: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.logInBtn = logInBtn
		self.logOutBtn = logOutBtn
		self.usernameTxt = usernameTxt
		self.loggingInSpinner = loggingInSpinner
		self.signedInInfo = signedInInfo
		self.twitchPollPanel = twitchPollPanel
		self.twitchPollCreationPanel = twitchPollCreationPanel
		self.backgroundCloseBtn = backgroundCloseBtn
		self.activeSubPoll = activeSubPoll
		self.isSubscribedToPollEvents = isSubscribedToPollEvents


class OdysseyShaderController:

    offsets = {'propertyName1': 24, 'propertyName2': 32, 'propertyName3': 40, 'transitionTime': 48, 'startedTransitioningAt': 52, 'transitioning': 56, 'forward': 57, 'propertyIdTransition1': 60, 'propertyIdTransition2': 64, 'propertyIdTransition3': 68, 'currentActiveShader': 72, 'priorDifficltyState': 76, 'lerp0102': 80, 'lerp0203': 84, 'lerp0301': 88}    
    def __init__(self, propertyName1: System.String, propertyName2: System.String, propertyName3: System.String, transitionTime: System.Single, startedTransitioningAt: System.Single, transitioning: System.Boolean, forward: System.Boolean, propertyIdTransition1: System.Int32, propertyIdTransition2: System.Int32, propertyIdTransition3: System.Int32, currentActiveShader: System.Int32, priorDifficltyState: System.Int32, lerp0102: System.Single, lerp0203: System.Single, lerp0301: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.propertyName1 = propertyName1
		self.propertyName2 = propertyName2
		self.propertyName3 = propertyName3
		self.transitionTime = transitionTime
		self.startedTransitioningAt = startedTransitioningAt
		self.transitioning = transitioning
		self.forward = forward
		self.propertyIdTransition1 = propertyIdTransition1
		self.propertyIdTransition2 = propertyIdTransition2
		self.propertyIdTransition3 = propertyIdTransition3
		self.currentActiveShader = currentActiveShader
		self.priorDifficltyState = priorDifficltyState
		self.lerp0102 = lerp0102
		self.lerp0203 = lerp0203
		self.lerp0301 = lerp0301


class BaseProductButton:

    offsets = {'heading': 24, 'price': 32, 'timeRemaining': 40, 'button': 48, 'buyButtonArea': 56, 'productModel': 64, 'localizedPriceString': 72, 'icon': 80, 'limitedTimePrefix': 88}    
    def __init__(self, heading: TMPro.TMP_Text, price: TMPro.TMP_Text, timeRemaining: TMPro.TMP_Text, button: UnityEngine.UI.Button, buyButtonArea: UnityEngine.UI.Button, productModel: Assets.Scripts.Data.Store.StoreItem, localizedPriceString: System.String, icon: UnityEngine.UI.Image, limitedTimePrefix: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.heading = heading
		self.price = price
		self.timeRemaining = timeRemaining
		self.button = button
		self.buyButtonArea = buyButtonArea
		self.productModel = productModel
		self.localizedPriceString = localizedPriceString
		self.icon = icon
		self.limitedTimePrefix = limitedTimePrefix


class BasicLootInfo:

    offsets = {'description': 24, 'icon': 32}    
    def __init__(self, description: TMPro.TMP_Text, icon: UnityEngine.UI.Image, **kwargs):
        super().__init__(self, **kwargs)
		self.description = description
		self.icon = icon


class LootButton:

    offsets = {'standardContainer': 24, 'quantity': 32, 'title': 40, 'icon': 48}    
    def __init__(self, standardContainer: UnityEngine.Transform, quantity: TMPro.TMP_Text, title: TMPro.TMP_Text, icon: UnityEngine.UI.Image, **kwargs):
        super().__init__(self, **kwargs)
		self.standardContainer = standardContainer
		self.quantity = quantity
		self.title = title
		self.icon = icon


class LootPanel:

    offsets = {'theme': 24, 'lootContainer': 32}    
    def __init__(self, theme: Assets.Scripts.Unity.UI_New.Store.LootThemeType, lootContainer: UnityEngine.Transform, **kwargs):
        super().__init__(self, **kwargs)
		self.theme = theme
		self.lootContainer = lootContainer


class LootScreen:
	instance: Assets.Scripts.Unity.UI_New.Store.LootScreen
    offsets = {'instance': 0, 'lootThemes': 24}    
    def __init__(self, instance: Assets.Scripts.Unity.UI_New.Store.LootScreen, lootThemes: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Store.LootThemeItem>, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.lootThemes = lootThemes


class LootTheme:

    offsets = {'generalLootPrefab': 24, 'instaTowerLootPrefab': 32, 'map': 40}    
    def __init__(self, generalLootPrefab: Assets.Scripts.Unity.UI_New.Store.LootItem.BaseLootItemPanel, instaTowerLootPrefab: Assets.Scripts.Unity.UI_New.Store.LootItem.BaseLootItemPanel, map: System.Collections.Generic.Dictionary<System.Type,Assets.Scripts.Unity.UI_New.Store.LootItem.BaseLootItemPanel>, **kwargs):
        super().__init__(self, **kwargs)
		self.generalLootPrefab = generalLootPrefab
		self.instaTowerLootPrefab = instaTowerLootPrefab
		self.map = map


class LootThemeItem:

    offsets = {'type': 16, 'theme': 24}    
    def __init__(self, type: Assets.Scripts.Unity.UI_New.Store.LootThemeType, theme: Assets.Scripts.Unity.UI_New.Store.LootTheme, **kwargs):
        super().__init__(self, **kwargs)
		self.type = type
		self.theme = theme


class LootThemeType:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class ModIconTheme:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ProductButton:

    offsets = {'storeScreen': 96, 'description': 104, 'standardContainer': 112, 'descriptionContainer': 120, 'displayDescription': 128, 'lootPanel': 136, 'standardBgImage': 144, 'descriptionBgImage': 152, 'limitedTimeBgTint': 160, 'saleImage': 176, 'bonusImage': 184, 'timeRemainingBg': 192, 'saleBannerSprite': 200, 'bonusBannerSprite': 208, 'limitedTimeBannerSprite': 216, 'buyGroup': 224, 'saleYPos': 232, 'saleTab': 240, 'saleOrigPrice': 248, 'index': 256}    
    def __init__(self, storeScreen: Assets.Scripts.Unity.UI_New.Store.StoreScreen, description: TMPro.TMP_Text, standardContainer: UnityEngine.GameObject, descriptionContainer: UnityEngine.GameObject, displayDescription: System.Boolean, lootPanel: Assets.Scripts.Unity.UI_New.Store.LootPanel, standardBgImage: UnityEngine.UI.Image, descriptionBgImage: UnityEngine.UI.Image, limitedTimeBgTint: UnityEngine.Color, saleImage: UnityEngine.UI.Image, bonusImage: UnityEngine.UI.Image, timeRemainingBg: UnityEngine.UI.Image, saleBannerSprite: UnityEngine.Sprite, bonusBannerSprite: UnityEngine.Sprite, limitedTimeBannerSprite: UnityEngine.Sprite, buyGroup: UnityEngine.RectTransform, saleYPos: System.Single, saleTab: UnityEngine.Transform, saleOrigPrice: TMPro.TMP_Text, index: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.storeScreen = storeScreen
		self.description = description
		self.standardContainer = standardContainer
		self.descriptionContainer = descriptionContainer
		self.displayDescription = displayDescription
		self.lootPanel = lootPanel
		self.standardBgImage = standardBgImage
		self.descriptionBgImage = descriptionBgImage
		self.limitedTimeBgTint = limitedTimeBgTint
		self.saleImage = saleImage
		self.bonusImage = bonusImage
		self.timeRemainingBg = timeRemainingBg
		self.saleBannerSprite = saleBannerSprite
		self.bonusBannerSprite = bonusBannerSprite
		self.limitedTimeBannerSprite = limitedTimeBannerSprite
		self.buyGroup = buyGroup
		self.saleYPos = saleYPos
		self.saleTab = saleTab
		self.saleOrigPrice = saleOrigPrice
		self.index = index


class PurchaseTowerUnlockType:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class Purchaser:
	instance: Assets.Scripts.Unity.UI_New.Store.Purchaser
    offsets = {'instance': 0, 'storeController': 24, 'storeExtensionProvider': 32, 'catalog': 40, 'restoring': 48, 'initializationFailureReason': 52, 'OnInitialised': 56, 'OnPurchaseComplete': 64, 'OnPurchaseFailedCallback': 72, 'processingPurchases': 80, 'unviewedLoot': 88}    
    def __init__(self, instance: Assets.Scripts.Unity.UI_New.Store.Purchaser, storeController: UnityEngine.Purchasing.IStoreController, storeExtensionProvider: UnityEngine.Purchasing.IExtensionProvider, catalog: UnityEngine.Purchasing.ProductCatalog, restoring: System.Boolean, initializationFailureReason: UnityEngine.Purchasing.InitializationFailureReason, OnInitialised: System.Action, OnPurchaseComplete: System.Action, OnPurchaseFailedCallback: System.Action, processingPurchases: System.Collections.Generic.List<UnityEngine.Purchasing.Product>, unviewedLoot: System.Collections.Generic.List<Assets.Scripts.Models.Store.LootSet>, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.storeController = storeController
		self.storeExtensionProvider = storeExtensionProvider
		self.catalog = catalog
		self.restoring = restoring
		self.initializationFailureReason = initializationFailureReason
		self.OnInitialised = OnInitialised
		self.OnPurchaseComplete = OnPurchaseComplete
		self.OnPurchaseFailedCallback = OnPurchaseFailedCallback
		self.processingPurchases = processingPurchases
		self.unviewedLoot = unviewedLoot


class PurchaserEnableButton:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class StoreScreen:

    offsets = {'productButtonPrefab': 56, 'storeFilter': 64, 'productContainer': 72, 'productButtons': 80, 'restoreButton': 88, 'bg': 96, 'scrollRect': 104, 'purchasedItemSound': 112}    
    def __init__(self, productButtonPrefab: Assets.Scripts.Unity.UI_New.Store.ProductButton, storeFilter: Assets.Scripts.Data.Store.StoreFilter, productContainer: UnityEngine.Transform, productButtons: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Store.ProductButton>, restoreButton: UnityEngine.UI.Button, bg: UnityEngine.GameObject, scrollRect: UnityEngine.UI.ScrollRect, purchasedItemSound: UnityEngine.AudioClip, **kwargs):
        super().__init__(self, **kwargs)
		self.productButtonPrefab = productButtonPrefab
		self.storeFilter = storeFilter
		self.productContainer = productContainer
		self.productButtons = productButtons
		self.restoreButton = restoreButton
		self.bg = bg
		self.scrollRect = scrollRect
		self.purchasedItemSound = purchasedItemSound


class TowerProductButton:

    offsets = {'tower': 96, 'upgradeScreen': 104, 'unlockType': 112, 'allUpgardesAndParagon': 116}    
    def __init__(self, tower: System.String, upgradeScreen: Assets.Scripts.Unity.UI_New.Upgrade.UpgradeScreen, unlockType: Assets.Scripts.Unity.UI_New.Store.PurchaseTowerUnlockType, allUpgardesAndParagon: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.tower = tower
		self.upgradeScreen = upgradeScreen
		self.unlockType = unlockType
		self.allUpgardesAndParagon = allUpgardesAndParagon


class BaseLargeLootItemPanel:

    offsets = {'title': 40}    
    def __init__(self, title: TMPro.TMP_Text, **kwargs):
        super().__init__(self, **kwargs)
		self.title = title


class BaseLootItemPanel:

    offsets = {'shortDescription': 24, 'icon': 32}    
    def __init__(self, shortDescription: TMPro.TMP_Text, icon: UnityEngine.UI.Image, **kwargs):
        super().__init__(self, **kwargs)
		self.shortDescription = shortDescription
		self.icon = icon


class BonusLootItemPanel:

    offsets = {'origDescription': 40}    
    def __init__(self, origDescription: TMPro.TMP_Text, **kwargs):
        super().__init__(self, **kwargs)
		self.origDescription = origDescription


class InstaTowerLootItemPanel:

    offsets = {'towerImageLoader': 40}    
    def __init__(self, towerImageLoader: TowerImageLoader, **kwargs):
        super().__init__(self, **kwargs)
		self.towerImageLoader = towerImageLoader


class HeroSelectTransition:

    offsets = {'heroButtonPrefab': 24, 'heroSelectScrollRect': 32, 'heroSelectRectTrans': 40, 'heroDetails': 48, 'heroButtons': 56, 'unusedHeroButtons': 64, 'sortedTowers': 72}    
    def __init__(self, heroButtonPrefab: Assets.Scripts.Unity.UI_New.Main.HeroSelect.HeroButton, heroSelectScrollRect: UnityEngine.UI.ScrollRect, heroSelectRectTrans: UnityEngine.RectTransform, heroDetails: Assets.Scripts.Unity.UI_New.Main.HeroSelect.HeroUpgradeDetails, heroButtons: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Main.HeroSelect.HeroButton>, unusedHeroButtons: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Main.HeroSelect.HeroButton>, sortedTowers: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Transitions.HeroSelectTransition.TowerDetailsModelSort>, **kwargs):
        super().__init__(self, **kwargs)
		self.heroButtonPrefab = heroButtonPrefab
		self.heroSelectScrollRect = heroSelectScrollRect
		self.heroSelectRectTrans = heroSelectRectTrans
		self.heroDetails = heroDetails
		self.heroButtons = heroButtons
		self.unusedHeroButtons = unusedHeroButtons
		self.sortedTowers = sortedTowers


class HeroSkinSelectTransition:

    offsets = {'heroSkinButtonPrefab': 24, 'groupTransform': 32, 'heroSkinButtons': 40}    
    def __init__(self, heroSkinButtonPrefab: Assets.Scripts.Unity.UI_New.Main.HeroSelect.HeroSkinButton, groupTransform: UnityEngine.Transform, heroSkinButtons: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Main.HeroSelect.HeroSkinButton>, **kwargs):
        super().__init__(self, **kwargs)
		self.heroSkinButtonPrefab = heroSkinButtonPrefab
		self.groupTransform = groupTransform
		self.heroSkinButtons = heroSkinButtons


class MapSelectTransition:
	startingIndex: System.Int32
    offsets = {'startingIndex': 0, 'selectedMapDifficultyIndex': 4, 'indexToSet': 8, 'pipPrefab': 32, 'pipParent': 40, 'gestureSetting': 48, 'returnSound': 56, 'goldenBloonAnimation': 72, 'gbTimer': 80, 'anim': 88, 'openParameterId': 96, 'pipCount': 100, 'pips': 104, 'selectedMaps': 112, 'mapCounts': 120, 'touch': 128, 'swipeCoroutine': 136, 'initialised': 144}    
    def __init__(self, startingIndex: System.Int32, selectedMapDifficultyIndex: System.Int32, indexToSet: System.Int32, pipPrefab: UnityEngine.GameObject, pipParent: UnityEngine.GameObject, gestureSetting: Assets.Scripts.Unity.UI_New.Utils.TouchGesture.GestureSettings, returnSound: UnityEngine.AudioClip, goldenBloonAnimation: UnityEngine.GameObject, gbTimer: System.Single, anim: UnityEngine.Animator, openParameterId: System.Int32, pipCount: System.Int32, pips: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Main.MapSelect.MapPip>, selectedMaps: System.Collections.Generic.List<Assets.Scripts.Data.MapSets.MapDetails>, mapCounts: System.Collections.Generic.Dictionary<Assets.Scripts.Data.MapSets.MapDifficulty,System.Int32>, touch: Assets.Scripts.Unity.UI_New.Utils.TouchGesture, swipeCoroutine: System.Collections.IEnumerator, initialised: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.startingIndex = startingIndex
		self.selectedMapDifficultyIndex = selectedMapDifficultyIndex
		self.indexToSet = indexToSet
		self.pipPrefab = pipPrefab
		self.pipParent = pipParent
		self.gestureSetting = gestureSetting
		self.returnSound = returnSound
		self.goldenBloonAnimation = goldenBloonAnimation
		self.gbTimer = gbTimer
		self.anim = anim
		self.openParameterId = openParameterId
		self.pipCount = pipCount
		self.pips = pips
		self.selectedMaps = selectedMaps
		self.mapCounts = mapCounts
		self.touch = touch
		self.swipeCoroutine = swipeCoroutine
		self.initialised = initialised


class TrophyItemBinding:

    offsets = {'trophyStoreItem': 16, 'isPurchased': 24, 'isFeatured': 25, 'onSale': 26, 'isEnabled': 27, 'isLimitedTime': 28, 'saleEndDate': 32, 'basePrice': 40, 'salePrice': 44, 'isNew': 48}    
    def __init__(self, trophyStoreItem: Assets.Scripts.Data.TrophyStore.TrophyStoreItem, isPurchased: System.Boolean, isFeatured: System.Boolean, onSale: System.Boolean, isEnabled: System.Boolean, isLimitedTime: System.Boolean, saleEndDate: System.DateTime, basePrice: System.Int32, salePrice: System.Int32, isNew: System.Nullable<System.Boolean>, **kwargs):
        super().__init__(self, **kwargs)
		self.trophyStoreItem = trophyStoreItem
		self.isPurchased = isPurchased
		self.isFeatured = isFeatured
		self.onSale = onSale
		self.isEnabled = isEnabled
		self.isLimitedTime = isLimitedTime
		self.saleEndDate = saleEndDate
		self.basePrice = basePrice
		self.salePrice = salePrice
		self.isNew = isNew


class TrophyItemPanel:

    offsets = {'icon': 24, 'typeIcon': 32, 'price': 40, 'saleOrgPrice': 48, 'shortName': 56, 'timeLeftText': 64, 'standardBgImage': 72, 'purchasedBgImage': 80, 'selectedImage': 88, 'saleBannerSprite': 96, 'newBannerSprite': 104, 'purchasedBannerSprite': 112, 'notPurchasedGroup': 120, 'enabledTick': 128, 'limitedTime': 136, 'button': 144, 'emoteText': 152, 'isPurchased': 160, 'isFeatured': 161, 'isEnabled': 162, 'isLimitedTime': 163, 'onSale': 164, 'isNew': 165, 'currentPrice': 168, 'trophyStoreItem': 176, 'saleEndDate': 184, 'isPurchasing': 192, 'SaleEnded': 200}    
    def __init__(self, icon: UnityEngine.UI.Image, typeIcon: UnityEngine.UI.Image, price: TMPro.TMP_Text, saleOrgPrice: TMPro.TMP_Text, shortName: TMPro.TMP_Text, timeLeftText: TMPro.TMP_Text, standardBgImage: UnityEngine.UI.Image, purchasedBgImage: UnityEngine.UI.Image, selectedImage: UnityEngine.UI.Image, saleBannerSprite: UnityEngine.GameObject, newBannerSprite: UnityEngine.GameObject, purchasedBannerSprite: UnityEngine.GameObject, notPurchasedGroup: UnityEngine.GameObject, enabledTick: UnityEngine.GameObject, limitedTime: UnityEngine.GameObject, button: UnityEngine.UI.Button, emoteText: TMPro.TMP_Text, isPurchased: System.Boolean, isFeatured: System.Boolean, isEnabled: System.Boolean, isLimitedTime: System.Boolean, onSale: System.Boolean, isNew: System.Boolean, currentPrice: System.Int32, trophyStoreItem: Assets.Scripts.Data.TrophyStore.TrophyStoreItem, saleEndDate: System.DateTime, isPurchasing: System.Boolean, SaleEnded: System.Action, **kwargs):
        super().__init__(self, **kwargs)
		self.icon = icon
		self.typeIcon = typeIcon
		self.price = price
		self.saleOrgPrice = saleOrgPrice
		self.shortName = shortName
		self.timeLeftText = timeLeftText
		self.standardBgImage = standardBgImage
		self.purchasedBgImage = purchasedBgImage
		self.selectedImage = selectedImage
		self.saleBannerSprite = saleBannerSprite
		self.newBannerSprite = newBannerSprite
		self.purchasedBannerSprite = purchasedBannerSprite
		self.notPurchasedGroup = notPurchasedGroup
		self.enabledTick = enabledTick
		self.limitedTime = limitedTime
		self.button = button
		self.emoteText = emoteText
		self.isPurchased = isPurchased
		self.isFeatured = isFeatured
		self.isEnabled = isEnabled
		self.isLimitedTime = isLimitedTime
		self.onSale = onSale
		self.isNew = isNew
		self.currentPrice = currentPrice
		self.trophyStoreItem = trophyStoreItem
		self.saleEndDate = saleEndDate
		self.isPurchasing = isPurchasing
		self.SaleEnded = SaleEnded


class TrophyStoreScreen:

    offsets = {'trophyPrefab': 56, 'scrollContainer': 64, 'featuredTab': 72, 'heroesTab': 80, 'monkeysTab': 88, 'bloonsTab': 96, 'coopTab': 104, 'gameuiTab': 112, 'inventoryTab': 120, 'bottomInfo': 128, 'heading': 136, 'description': 144, 'price': 152, 'emoteIconText': 160, 'icon': 168, 'purchaseButton': 176, 'enableButton': 184, 'infoButton': 192, 'enableTick': 200, 'purchasedObj': 208, 'clickSound': 216, 'openSound': 224, 'returnSound': 232, 'selectSound': 240, 'purchaseSound': 248, 'audioPreviewModule': 256, 'trophyCount': 264, 'trophyItemPanels': 272, 'selectedItem': 280, 'lastTab': 288, 'isClosed': 292, 'trophyStoreBankData': 296, 'purchasingItem': 304, 'isPurchasing': 312}    
    def __init__(self, trophyPrefab: Assets.Scripts.Unity.UI_New.TrophyStore.TrophyItemPanel, scrollContainer: UnityEngine.RectTransform, featuredTab: UnityEngine.UI.Toggle, heroesTab: UnityEngine.UI.Toggle, monkeysTab: UnityEngine.UI.Toggle, bloonsTab: UnityEngine.UI.Toggle, coopTab: UnityEngine.UI.Toggle, gameuiTab: UnityEngine.UI.Toggle, inventoryTab: UnityEngine.UI.Toggle, bottomInfo: UnityEngine.GameObject, heading: TMPro.TMP_Text, description: TMPro.TMP_Text, price: TMPro.TMP_Text, emoteIconText: TMPro.TMP_Text, icon: UnityEngine.UI.Image, purchaseButton: UnityEngine.UI.Button, enableButton: UnityEngine.UI.Button, infoButton: UnityEngine.UI.Button, enableTick: UnityEngine.GameObject, purchasedObj: UnityEngine.GameObject, clickSound: UnityEngine.AudioClip, openSound: UnityEngine.AudioClip, returnSound: UnityEngine.AudioClip, selectSound: UnityEngine.AudioClip, purchaseSound: UnityEngine.AudioClip, audioPreviewModule: AudioPreviewModule, trophyCount: TMPro.TMP_Text, trophyItemPanels: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.TrophyStore.TrophyItemPanel>, selectedItem: Assets.Scripts.Unity.UI_New.TrophyStore.TrophyItemPanel, lastTab: Assets.Scripts.Data.TrophyStore.TrophyStoreFilter, isClosed: System.Boolean, trophyStoreBankData: Assets.Scripts.Data.TrophyStore.TrophyStoreBankData, purchasingItem: Assets.Scripts.Unity.UI_New.TrophyStore.TrophyItemPanel, isPurchasing: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.trophyPrefab = trophyPrefab
		self.scrollContainer = scrollContainer
		self.featuredTab = featuredTab
		self.heroesTab = heroesTab
		self.monkeysTab = monkeysTab
		self.bloonsTab = bloonsTab
		self.coopTab = coopTab
		self.gameuiTab = gameuiTab
		self.inventoryTab = inventoryTab
		self.bottomInfo = bottomInfo
		self.heading = heading
		self.description = description
		self.price = price
		self.emoteIconText = emoteIconText
		self.icon = icon
		self.purchaseButton = purchaseButton
		self.enableButton = enableButton
		self.infoButton = infoButton
		self.enableTick = enableTick
		self.purchasedObj = purchasedObj
		self.clickSound = clickSound
		self.openSound = openSound
		self.returnSound = returnSound
		self.selectSound = selectSound
		self.purchaseSound = purchaseSound
		self.audioPreviewModule = audioPreviewModule
		self.trophyCount = trophyCount
		self.trophyItemPanels = trophyItemPanels
		self.selectedItem = selectedItem
		self.lastTab = lastTab
		self.isClosed = isClosed
		self.trophyStoreBankData = trophyStoreBankData
		self.purchasingItem = purchasingItem
		self.isPurchasing = isPurchasing


class InGameTutorial:

    offsets = {'monkeyArrow': 24, 'heroArrow': 32, 'placementCircle': 40, 'placementAnimationStart': 48, 'placementAnimationEnd': 56, 'monkeySelectAnimation': 64, 'upgradeMonkeyAnimation': 72, 'victorySound': 80, 'goAnimation': 88, 'upgradesButton': 96, 'abilitiesButton': 104, 'debugSkipTutorial': 120, 'placedFirstTower': 121, 'pathPurchased': 124, 'firstTowerPos': 128, 'blockerZone': 136, 'towersCreated': 144, 'OnClickEvent': 152, 'shopPanelTowerGlow': 160, 'upgradeButtonGlow': 168, 'upgradesScreenOpened': 176, 'purchasedUpgrade': 177, 'upgradesMenuClosed': 178, 'towerUpgraded': 179}    
    def __init__(self, monkeyArrow: UnityEngine.GameObject, heroArrow: UnityEngine.GameObject, placementCircle: UnityEngine.GameObject, placementAnimationStart: UnityEngine.GameObject, placementAnimationEnd: UnityEngine.GameObject, monkeySelectAnimation: UnityEngine.GameObject, upgradeMonkeyAnimation: UnityEngine.GameObject, victorySound: UnityEngine.AudioClip, goAnimation: UnityEngine.GameObject, upgradesButton: UnityEngine.GameObject, abilitiesButton: UnityEngine.GameObject, debugSkipTutorial: System.Boolean, placedFirstTower: System.Boolean, pathPurchased: System.Int32, firstTowerPos: UnityEngine.Vector2, blockerZone: BlockerZone, towersCreated: System.Int32, OnClickEvent: System.Action, shopPanelTowerGlow: UnityEngine.GameObject, upgradeButtonGlow: UnityEngine.GameObject, upgradesScreenOpened: System.Boolean, purchasedUpgrade: System.Boolean, upgradesMenuClosed: System.Boolean, towerUpgraded: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.monkeyArrow = monkeyArrow
		self.heroArrow = heroArrow
		self.placementCircle = placementCircle
		self.placementAnimationStart = placementAnimationStart
		self.placementAnimationEnd = placementAnimationEnd
		self.monkeySelectAnimation = monkeySelectAnimation
		self.upgradeMonkeyAnimation = upgradeMonkeyAnimation
		self.victorySound = victorySound
		self.goAnimation = goAnimation
		self.upgradesButton = upgradesButton
		self.abilitiesButton = abilitiesButton
		self.debugSkipTutorial = debugSkipTutorial
		self.placedFirstTower = placedFirstTower
		self.pathPurchased = pathPurchased
		self.firstTowerPos = firstTowerPos
		self.blockerZone = blockerZone
		self.towersCreated = towersCreated
		self.OnClickEvent = OnClickEvent
		self.shopPanelTowerGlow = shopPanelTowerGlow
		self.upgradeButtonGlow = upgradeButtonGlow
		self.upgradesScreenOpened = upgradesScreenOpened
		self.purchasedUpgrade = purchasedUpgrade
		self.upgradesMenuClosed = upgradesMenuClosed
		self.towerUpgraded = towerUpgraded


class TutorialScreen:

    offsets = {'tutorialBGA': 56, 'startTutorialBtn': 64, 'startTutorialBackgroundBtn': 72}    
    def __init__(self, tutorialBGA: UnityEngine.AudioClip, startTutorialBtn: UnityEngine.UI.Button, startTutorialBackgroundBtn: UnityEngine.UI.Button, **kwargs):
        super().__init__(self, **kwargs)
		self.tutorialBGA = tutorialBGA
		self.startTutorialBtn = startTutorialBtn
		self.startTutorialBackgroundBtn = startTutorialBackgroundBtn


class TwitchItemStatusIcon:

    offsets = {'wonGo': 24, 'lostGo': 32, 'pendingGo': 40, 'votingGo': 48, 'completedGo': 56}    
    def __init__(self, wonGo: UnityEngine.GameObject, lostGo: UnityEngine.GameObject, pendingGo: UnityEngine.GameObject, votingGo: UnityEngine.GameObject, completedGo: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.wonGo = wonGo
		self.lostGo = lostGo
		self.pendingGo = pendingGo
		self.votingGo = votingGo
		self.completedGo = completedGo


class TwitchPollCreationPanel:
	_maxWinners: System.Int32
    offsets = {'_maxWinners': 0, 'requiredPollNumberTxt': 24, 'totalDurationTxt': 32, 'pollDurationSlider': 40, 'pollDurationTxt': 48, 'maxWinners': 56, 'closeBtn': 64, 'createBtn': 72, 'selectAllBtn': 80, 'towerDisplayPrefab': 88, 'excludedTowers': 96, 'includedTowers': 104, 'excludedTowersContent': 112, 'includedTowersContent': 120, 'bitVoteToggle': 128, 'pointVoteToggle': 136, 'bitsPerVoteInput': 144, 'pointsPerVoteInput': 152, 'backgroundCloseBtn': 160, 'OnCreatePollClicked': 168, 'availableTowers': 176, 'selectedTowerButtons': 184, 'excludedTowerButtons': 192, '_requiredPolls': 200}    
    def __init__(self, _maxWinners: System.Int32, requiredPollNumberTxt: NK_TextMeshProUGUI, totalDurationTxt: NK_TextMeshProUGUI, pollDurationSlider: UnityEngine.UI.Slider, pollDurationTxt: TMPro.TMP_Text, maxWinners: TMPro.TMP_Dropdown, closeBtn: UnityEngine.UI.Button, createBtn: UnityEngine.UI.Button, selectAllBtn: UnityEngine.UI.Button, towerDisplayPrefab: Assets.Scripts.Unity.UI_New.Twitch.TwitchTowerButton, excludedTowers: UnityEngine.Transform, includedTowers: UnityEngine.Transform, excludedTowersContent: UnityEngine.GameObject, includedTowersContent: UnityEngine.GameObject, bitVoteToggle: UnityEngine.UI.Toggle, pointVoteToggle: UnityEngine.UI.Toggle, bitsPerVoteInput: TMPro.TMP_InputField, pointsPerVoteInput: TMPro.TMP_InputField, backgroundCloseBtn: UnityEngine.UI.Button, OnCreatePollClicked: System.Action, availableTowers: System.Collections.Generic.List<Assets.Scripts.Models.TowerSets.TowerDetailsModel>, selectedTowerButtons: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Twitch.TwitchTowerButton>, excludedTowerButtons: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Twitch.TwitchTowerButton>, _requiredPolls: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self._maxWinners = _maxWinners
		self.requiredPollNumberTxt = requiredPollNumberTxt
		self.totalDurationTxt = totalDurationTxt
		self.pollDurationSlider = pollDurationSlider
		self.pollDurationTxt = pollDurationTxt
		self.maxWinners = maxWinners
		self.closeBtn = closeBtn
		self.createBtn = createBtn
		self.selectAllBtn = selectAllBtn
		self.towerDisplayPrefab = towerDisplayPrefab
		self.excludedTowers = excludedTowers
		self.includedTowers = includedTowers
		self.excludedTowersContent = excludedTowersContent
		self.includedTowersContent = includedTowersContent
		self.bitVoteToggle = bitVoteToggle
		self.pointVoteToggle = pointVoteToggle
		self.bitsPerVoteInput = bitsPerVoteInput
		self.pointsPerVoteInput = pointsPerVoteInput
		self.backgroundCloseBtn = backgroundCloseBtn
		self.OnCreatePollClicked = OnCreatePollClicked
		self.availableTowers = availableTowers
		self.selectedTowerButtons = selectedTowerButtons
		self.excludedTowerButtons = excludedTowerButtons
		self._requiredPolls = _requiredPolls


class TwitchPollPanel:

    offsets = {'createPollBtn': 24, 'cancelPollBtn': 32, 'statusTxt': 40, 'optionTemplate': 48, 'contentParent': 56, 'loadingSpinner': 64, 'twitchPollCreationPanel': 72, 'choicePanels': 80}    
    def __init__(self, createPollBtn: UnityEngine.UI.Button, cancelPollBtn: UnityEngine.UI.Button, statusTxt: NK_TextMeshProUGUI, optionTemplate: Assets.Scripts.Unity.UI_New.Twitch.TwitchPollPanelOption, contentParent: UnityEngine.Transform, loadingSpinner: UnityEngine.GameObject, twitchPollCreationPanel: Assets.Scripts.Unity.UI_New.Twitch.TwitchPollCreationPanel, choicePanels: System.Collections.Generic.List<Assets.Scripts.Unity.UI_New.Twitch.TwitchPollPanelOption>, **kwargs):
        super().__init__(self, **kwargs)
		self.createPollBtn = createPollBtn
		self.cancelPollBtn = cancelPollBtn
		self.statusTxt = statusTxt
		self.optionTemplate = optionTemplate
		self.contentParent = contentParent
		self.loadingSpinner = loadingSpinner
		self.twitchPollCreationPanel = twitchPollCreationPanel
		self.choicePanels = choicePanels


class TwitchPollPanelOption:

    offsets = {'titleTxt': 24, 'votesTxt': 32, 'statusIcon': 40, '_votes': 48, '_status': 52}    
    def __init__(self, titleTxt: NK_TextMeshProUGUI, votesTxt: NK_TextMeshProUGUI, statusIcon: Assets.Scripts.Unity.UI_New.Twitch.TwitchItemStatusIcon, _votes: System.UInt32, _status: Assets.Twitch.Models.PollItemStatus, **kwargs):
        super().__init__(self, **kwargs)
		self.titleTxt = titleTxt
		self.votesTxt = votesTxt
		self.statusIcon = statusIcon
		self._votes = _votes
		self._status = _status


class TwitchTowerButton:

    offsets = {'clickArea': 64, 'OnButtonClicked': 72}    
    def __init__(self, clickArea: UnityEngine.UI.Button, OnButtonClicked: System.Action<System.String>, **kwargs):
        super().__init__(self, **kwargs)
		self.clickArea = clickArea
		self.OnButtonClicked = OnButtonClicked


class SelectedUpgrade:

    offsets = {'portrait': 24, 'portraitBackground': 32, 'animationToSet': 40, 'upgradeName': 48, 'unlockCost': 56, 'xpUnlockCost': 64, 'paragonXpUnlockCost': 72, 'backgroundUnlockedTxt': 80, 'backgroundParagonUnlockedTxt': 88, 'tier5Animation': 96, 'aquireButton': 104, 'fastUiMat': 112, 'greyScaleMat': 120, 'normalBtnImage': 128, 'paragonBtnImage': 136, 'selectedDetails': 144, 'hasUpgrade': 152, 'selectedTower': 160}    
    def __init__(self, portrait: UnityEngine.UI.Image, portraitBackground: UnityEngine.UI.Image, animationToSet: System.String, upgradeName: TMPro.TextMeshProUGUI, unlockCost: TMPro.TextMeshProUGUI, xpUnlockCost: TMPro.TextMeshProUGUI, paragonXpUnlockCost: TMPro.TextMeshProUGUI, backgroundUnlockedTxt: TMPro.TextMeshProUGUI, backgroundParagonUnlockedTxt: TMPro.TextMeshProUGUI, tier5Animation: UnityEngine.Animator, aquireButton: Assets.Scripts.Unity.UI_New.ButtonExtended, fastUiMat: UnityEngine.Material, greyScaleMat: UnityEngine.Material, normalBtnImage: UnityEngine.UI.Image, paragonBtnImage: UnityEngine.UI.Image, selectedDetails: Assets.Scripts.Unity.UI_New.Upgrade.UpgradeDetails, hasUpgrade: System.Boolean, selectedTower: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.portrait = portrait
		self.portraitBackground = portraitBackground
		self.animationToSet = animationToSet
		self.upgradeName = upgradeName
		self.unlockCost = unlockCost
		self.xpUnlockCost = xpUnlockCost
		self.paragonXpUnlockCost = paragonXpUnlockCost
		self.backgroundUnlockedTxt = backgroundUnlockedTxt
		self.backgroundParagonUnlockedTxt = backgroundParagonUnlockedTxt
		self.tier5Animation = tier5Animation
		self.aquireButton = aquireButton
		self.fastUiMat = fastUiMat
		self.greyScaleMat = greyScaleMat
		self.normalBtnImage = normalBtnImage
		self.paragonBtnImage = paragonBtnImage
		self.selectedDetails = selectedDetails
		self.hasUpgrade = hasUpgrade
		self.selectedTower = selectedTower


class UpgradeDetails:

    offsets = {'icon': 24, 'upgradeName': 32, 'upgradeCost': 40, 'abilityObject': 48, 'baseTowerID': 56, 'portrait': 64, 'upgrade': 72, 'restrictedIcon': 80, 'spriteMaterial': 88, 'lockedMaterial': 96, 'standardTheme': 104, 'tier5Theme': 112, 'paragonTheme': 120, 'path': 128, 'hasUpgrade': 132, 'theme': 136, 'isLocked': 144, 'upgradeScreen': 152, 'prevHadUpgrade': 160, 'beginShowPopup': 161, 'popupTimer': 164}    
    def __init__(self, icon: UnityEngine.UI.Image, upgradeName: TMPro.TextMeshProUGUI, upgradeCost: TMPro.TextMeshProUGUI, abilityObject: UnityEngine.GameObject, baseTowerID: System.String, portrait: Assets.Scripts.Utils.SpriteReference, upgrade: Assets.Scripts.Models.Towers.Upgrades.UpgradeModel, restrictedIcon: UnityEngine.UI.Image, spriteMaterial: UnityEngine.Material, lockedMaterial: UnityEngine.Material, standardTheme: Assets.Scripts.Unity.UI_New.Upgrade.UpgradeDetails.UpgradeDetailsTheme, tier5Theme: Assets.Scripts.Unity.UI_New.Upgrade.UpgradeDetails.UpgradeDetailsTheme, paragonTheme: Assets.Scripts.Unity.UI_New.Upgrade.UpgradeDetails.UpgradeDetailsTheme, path: System.Int32, hasUpgrade: System.Boolean, theme: Assets.Scripts.Unity.UI_New.Upgrade.UpgradeDetails.UpgradeDetailsTheme, isLocked: System.Boolean, upgradeScreen: Assets.Scripts.Unity.UI_New.Upgrade.UpgradeScreen, prevHadUpgrade: System.Boolean, beginShowPopup: System.Boolean, popupTimer: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.icon = icon
		self.upgradeName = upgradeName
		self.upgradeCost = upgradeCost
		self.abilityObject = abilityObject
		self.baseTowerID = baseTowerID
		self.portrait = portrait
		self.upgrade = upgrade
		self.restrictedIcon = restrictedIcon
		self.spriteMaterial = spriteMaterial
		self.lockedMaterial = lockedMaterial
		self.standardTheme = standardTheme
		self.tier5Theme = tier5Theme
		self.paragonTheme = paragonTheme
		self.path = path
		self.hasUpgrade = hasUpgrade
		self.theme = theme
		self.isLocked = isLocked
		self.upgradeScreen = upgradeScreen
		self.prevHadUpgrade = prevHadUpgrade
		self.beginShowPopup = beginShowPopup
		self.popupTimer = popupTimer


class UpgradeScreen:

    offsets = {'selectedUpgrade': 56, 'xpToSpend': 64, 'towerTitle': 72, 'towerDescription': 80, 'towerTitleParagon': 88, 'towerDescriptionParagon': 96, 'caveat': 104, 'path1Container': 112, 'path2Container': 120, 'path3Container': 128, 'prevArrow': 136, 'nextArrow': 144, 'upgradePrefab': 152, 'initialized': 184, 'seenUpgrades': 192, 'currentIndex': 200, 'hasTower': 204, 'upgradePopup': 208, 'upgradePopupLeft': 216, 'selectedDetails': 224, 'upgradePopupPrefab': 232, 'upgradePopupLeftPrefab': 240, 'purchaseTowerXP': 248, 'purchaseAllTowerUpgrades': 256, 'purchaseAllTowerUpgradesIncludingParagon': 264, 'purchaseParagonTowerUpgrades': 272, 'fastUIMaterial': 280, 'grayscaleUIMaterial': 288, 'towerContainerSprites': 296, 'towerLevelUpSound': 304, 'paragonLevelUpSound': 312, 'click3Sound': 320, 'returnSound': 328, 'return2Sound': 336, 'backgroundColour': 344, 'backgroundParagonColour': 360, 'paragonPanel': 376, 'paragonTitlePanel': 384, 'paragonAnim': 392, 'paragonTglOn': 400, 'paragonTglOff': 408, 'paragonUpgradeDetails': 416, 'towerSet': 424, 'currTowerId': 432}    
    def __init__(self, selectedUpgrade: Assets.Scripts.Unity.UI_New.Upgrade.SelectedUpgrade, xpToSpend: TMPro.TextMeshProUGUI, towerTitle: TMPro.TextMeshProUGUI, towerDescription: TMPro.TextMeshProUGUI, towerTitleParagon: TMPro.TextMeshProUGUI, towerDescriptionParagon: TMPro.TextMeshProUGUI, caveat: TMPro.TextMeshProUGUI, path1Container: UnityEngine.GameObject, path2Container: UnityEngine.GameObject, path3Container: UnityEngine.GameObject, prevArrow: UnityEngine.GameObject, nextArrow: UnityEngine.GameObject, upgradePrefab: UnityEngine.GameObject, initialized: System.Boolean, seenUpgrades: System.Collections.Generic.List<System.String>, currentIndex: System.Int32, hasTower: System.Boolean, upgradePopup: UpgradePopup, upgradePopupLeft: UpgradePopup, selectedDetails: Assets.Scripts.Unity.UI_New.Upgrade.UpgradeDetails, upgradePopupPrefab: UpgradePopup, upgradePopupLeftPrefab: UpgradePopup, purchaseTowerXP: Assets.Scripts.Unity.UI_New.Store.TowerProductButton, purchaseAllTowerUpgrades: Assets.Scripts.Unity.UI_New.Store.TowerProductButton, purchaseAllTowerUpgradesIncludingParagon: Assets.Scripts.Unity.UI_New.Store.TowerProductButton, purchaseParagonTowerUpgrades: Assets.Scripts.Unity.UI_New.Store.TowerProductButton, fastUIMaterial: UnityEngine.Material, grayscaleUIMaterial: UnityEngine.Material, towerContainerSprites: TowerContainerSpritesAsset, towerLevelUpSound: UnityEngine.AudioClip, paragonLevelUpSound: UnityEngine.AudioClip, click3Sound: UnityEngine.AudioClip, returnSound: UnityEngine.AudioClip, return2Sound: UnityEngine.AudioClip, backgroundColour: UnityEngine.Color, backgroundParagonColour: UnityEngine.Color, paragonPanel: UnityEngine.GameObject, paragonTitlePanel: UnityEngine.GameObject, paragonAnim: UnityEngine.Animator, paragonTglOn: UnityEngine.Sprite, paragonTglOff: UnityEngine.Sprite, paragonUpgradeDetails: Assets.Scripts.Unity.UI_New.Upgrade.UpgradeDetails, towerSet: System.String, currTowerId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.selectedUpgrade = selectedUpgrade
		self.xpToSpend = xpToSpend
		self.towerTitle = towerTitle
		self.towerDescription = towerDescription
		self.towerTitleParagon = towerTitleParagon
		self.towerDescriptionParagon = towerDescriptionParagon
		self.caveat = caveat
		self.path1Container = path1Container
		self.path2Container = path2Container
		self.path3Container = path3Container
		self.prevArrow = prevArrow
		self.nextArrow = nextArrow
		self.upgradePrefab = upgradePrefab
		self.initialized = initialized
		self.seenUpgrades = seenUpgrades
		self.currentIndex = currentIndex
		self.hasTower = hasTower
		self.upgradePopup = upgradePopup
		self.upgradePopupLeft = upgradePopupLeft
		self.selectedDetails = selectedDetails
		self.upgradePopupPrefab = upgradePopupPrefab
		self.upgradePopupLeftPrefab = upgradePopupLeftPrefab
		self.purchaseTowerXP = purchaseTowerXP
		self.purchaseAllTowerUpgrades = purchaseAllTowerUpgrades
		self.purchaseAllTowerUpgradesIncludingParagon = purchaseAllTowerUpgradesIncludingParagon
		self.purchaseParagonTowerUpgrades = purchaseParagonTowerUpgrades
		self.fastUIMaterial = fastUIMaterial
		self.grayscaleUIMaterial = grayscaleUIMaterial
		self.towerContainerSprites = towerContainerSprites
		self.towerLevelUpSound = towerLevelUpSound
		self.paragonLevelUpSound = paragonLevelUpSound
		self.click3Sound = click3Sound
		self.returnSound = returnSound
		self.return2Sound = return2Sound
		self.backgroundColour = backgroundColour
		self.backgroundParagonColour = backgroundParagonColour
		self.paragonPanel = paragonPanel
		self.paragonTitlePanel = paragonTitlePanel
		self.paragonAnim = paragonAnim
		self.paragonTglOn = paragonTglOn
		self.paragonTglOff = paragonTglOff
		self.paragonUpgradeDetails = paragonUpgradeDetails
		self.towerSet = towerSet
		self.currTowerId = currTowerId


class AnimationStateEvents:

    offsets = {'OnStateExitEvent': 24}    
    def __init__(self, OnStateExitEvent: Assets.Scripts.Unity.UI_New.Utils.AnimationStateEvents.AnimStateDelegate, **kwargs):
        super().__init__(self, **kwargs)
		self.OnStateExitEvent = OnStateExitEvent


class CopyText:

    offsets = {'targetText': 24, 'cloneText': 32}    
    def __init__(self, targetText: TMPro.TextMeshProUGUI, cloneText: TMPro.TextMeshProUGUI, **kwargs):
        super().__init__(self, **kwargs)
		self.targetText = targetText
		self.cloneText = cloneText


class DebugValueScreen:

    offsets = {'input': 232}    
    def __init__(self, input: TMPro.TMP_InputField, **kwargs):
        super().__init__(self, **kwargs)
		self.input = input


class EnableIfBadActor:

    offsets = {'target': 24}    
    def __init__(self, target: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.target = target


class InGameMapRect:

    offsets = {'x4_3_Bottom': 24, 'x16_9_Right': 28}    
    def __init__(self, x4_3_Bottom: System.Single, x16_9_Right: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.x4_3_Bottom = x4_3_Bottom
		self.x16_9_Right = x16_9_Right


class InGameUIRect:

    offsets = {'x4_3_Bottom': 24, 'x16_9_Right': 28}    
    def __init__(self, x4_3_Bottom: System.Single, x16_9_Right: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.x4_3_Bottom = x4_3_Bottom
		self.x16_9_Right = x16_9_Right


class OrientationSwapper:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RatioCanvasScaler:
	REFRESO: UnityEngine.Vector2
    offsets = {'REFRESO': 0, 'REFRESO4x3': 8, 'REFRESOSTEAM': 16, 'REFRESOSTEAM4x3': 24, 'UPDATEONTHEFLY': 32, 'refResolution': 24, 'refResolution4x3': 32, 'refResolutionSteam': 40, 'refResolutionSteam4x3': 48, 'updateOnTheFly': 56}    
    def __init__(self, REFRESO: UnityEngine.Vector2, REFRESO4x3: UnityEngine.Vector2, REFRESOSTEAM: UnityEngine.Vector2, REFRESOSTEAM4x3: UnityEngine.Vector2, UPDATEONTHEFLY: System.Boolean, refResolution: UnityEngine.Vector2, refResolution4x3: UnityEngine.Vector2, refResolutionSteam: UnityEngine.Vector2, refResolutionSteam4x3: UnityEngine.Vector2, updateOnTheFly: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.REFRESO = REFRESO
		self.REFRESO4x3 = REFRESO4x3
		self.REFRESOSTEAM = REFRESOSTEAM
		self.REFRESOSTEAM4x3 = REFRESOSTEAM4x3
		self.UPDATEONTHEFLY = UPDATEONTHEFLY
		self.refResolution = refResolution
		self.refResolution4x3 = refResolution4x3
		self.refResolutionSteam = refResolutionSteam
		self.refResolutionSteam4x3 = refResolutionSteam4x3
		self.updateOnTheFly = updateOnTheFly


class RatioEnabler:

    offsets = {'enable16_9': 24, 'enable4_3': 25, 'destroyIfNotUsed': 26}    
    def __init__(self, enable16_9: System.Boolean, enable4_3: System.Boolean, destroyIfNotUsed: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.enable16_9 = enable16_9
		self.enable4_3 = enable4_3
		self.destroyIfNotUsed = destroyIfNotUsed


class RatioObject:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class RegisterCameraWithCommonBackgroundScreen:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SafeArea:

    offsets = {'left': 24, 'right': 28, 'top': 32, 'bottom': 36, 'use4_3Values': 40, 'left4_3': 44, 'right4_3': 48, 'top4_3': 52, 'bottom4_3': 56}    
    def __init__(self, left: System.Single, right: System.Single, top: System.Single, bottom: System.Single, use4_3Values: System.Boolean, left4_3: System.Single, right4_3: System.Single, top4_3: System.Single, bottom4_3: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.left = left
		self.right = right
		self.top = top
		self.bottom = bottom
		self.use4_3Values = use4_3Values
		self.left4_3 = left4_3
		self.right4_3 = right4_3
		self.top4_3 = top4_3
		self.bottom4_3 = bottom4_3


class SpinningImage:

    offsets = {'rotateAround': 24, 'speed': 36}    
    def __init__(self, rotateAround: UnityEngine.Vector3, speed: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.rotateAround = rotateAround
		self.speed = speed


class SwipeController:
	triggered: System.Boolean
    offsets = {'triggered': 0, 'direction': 24, 'swipeSpeed': 28, 'swipeLength': 32, 'classObject': 40, 'behaviour': 48, 'functionIndex': 56, 'prevPointerPos': 60, 'distance': 68, 'skip': 72, 'pointerDown': 73, '_functionName': 80}    
    def __init__(self, triggered: System.Boolean, direction: Assets.Scripts.Unity.UI_New.Utils.UIDirection, swipeSpeed: System.Single, swipeLength: System.Single, classObject: UnityEngine.GameObject, behaviour: UnityEngine.MonoBehaviour, functionIndex: System.Int32, prevPointerPos: UnityEngine.Vector2, distance: System.Single, skip: System.Boolean, pointerDown: System.Boolean, _functionName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.triggered = triggered
		self.direction = direction
		self.swipeSpeed = swipeSpeed
		self.swipeLength = swipeLength
		self.classObject = classObject
		self.behaviour = behaviour
		self.functionIndex = functionIndex
		self.prevPointerPos = prevPointerPos
		self.distance = distance
		self.skip = skip
		self.pointerDown = pointerDown
		self._functionName = _functionName


class TouchGesture:

    offsets = {'settings': 16, 'swipeStartTime': 24, 'couldBeSwipe': 28, 'startPos': 32, 'stationaryForFrames': 40, 'lastPhase': 44}    
    def __init__(self, settings: Assets.Scripts.Unity.UI_New.Utils.TouchGesture.GestureSettings, swipeStartTime: System.Single, couldBeSwipe: System.Boolean, startPos: UnityEngine.Vector2, stationaryForFrames: System.Int32, lastPhase: UnityEngine.TouchPhase, **kwargs):
        super().__init__(self, **kwargs)
		self.settings = settings
		self.swipeStartTime = swipeStartTime
		self.couldBeSwipe = couldBeSwipe
		self.startPos = startPos
		self.stationaryForFrames = stationaryForFrames
		self.lastPhase = lastPhase


class UIDirection:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class UIDragHandler:

    offsets = {'onBeginDrag': 24}    
    def __init__(self, onBeginDrag: Assets.Scripts.Unity.UI_New.Utils.UIDragHandler.DragHandler, **kwargs):
        super().__init__(self, **kwargs)
		self.onBeginDrag = onBeginDrag


class UIOrientation:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class AtlasLateBinding:

    offsets = {'atlasHandles': 24, 'temporarilyDisabledScenes': 32}    
    def __init__(self, atlasHandles: System.Collections.Generic.Dictionary<System.String,UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle<UnityEngine.U2D.SpriteAtlas>>, temporarilyDisabledScenes: System.Collections.Generic.HashSet<System.String>, **kwargs):
        super().__init__(self, **kwargs)
		self.atlasHandles = atlasHandles
		self.temporarilyDisabledScenes = temporarilyDisabledScenes


class CanvasTextFps:

    offsets = {'targetTextField': 24, 'updateFrequency': 32, 'timeSinceLastUpdate': 36, 'deltaIndex': 40}    
    def __init__(self, targetTextField: UnityEngine.UI.Text, updateFrequency: System.Single, timeSinceLastUpdate: System.Single, deltaIndex: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.targetTextField = targetTextField
		self.updateFrequency = updateFrequency
		self.timeSinceLastUpdate = timeSinceLastUpdate
		self.deltaIndex = deltaIndex


class CoroutineContext:
	instance: UnityEngine.MonoBehaviour
    offsets = {'instance': 0}    
    def __init__(self, instance: UnityEngine.MonoBehaviour, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance


class CustomDcSliderWithDeadzone:

    offsets = {'button0': 352, 'button1': 360, 'button2': 368, 'button3': 376, 'button4': 384, 'restrictionUpgradeDisplay': 392, 'deltaAtBegindDrag': 400, 'draggingSlider': 408, 'draggingSliderDeltaMinMet': 409}    
    def __init__(self, button0: UnityEngine.UI.Button, button1: UnityEngine.UI.Button, button2: UnityEngine.UI.Button, button3: UnityEngine.UI.Button, button4: UnityEngine.UI.Button, restrictionUpgradeDisplay: Assets.Scripts.Unity.UI_New.DailyChallenge.DCRestrictionUpgradeDisplay, deltaAtBegindDrag: UnityEngine.Vector2, draggingSlider: System.Boolean, draggingSliderDeltaMinMet: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.button0 = button0
		self.button1 = button1
		self.button2 = button2
		self.button3 = button3
		self.button4 = button4
		self.restrictionUpgradeDisplay = restrictionUpgradeDisplay
		self.deltaAtBegindDrag = deltaAtBegindDrag
		self.draggingSlider = draggingSlider
		self.draggingSliderDeltaMinMet = draggingSliderDeltaMinMet


class GameObjectEvents:

    offsets = {'OnDragEvent': 24}    
    def __init__(self, OnDragEvent: System.Action, **kwargs):
        super().__init__(self, **kwargs)
		self.OnDragEvent = OnDragEvent


class PlayerPrefBool:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PlayerPrefFloat:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PlayerPrefInt:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PlayerPrefString:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PlayerPrefWrapper<T>:

    offsets = {'key': 0, 'initialised': 0, '_accessor_value': 0}    
    def __init__(self, key: System.String, initialised: System.Boolean, _accessor_value: T, **kwargs):
        super().__init__(self, **kwargs)
		self.key = key
		self.initialised = initialised
		self._accessor_value = _accessor_value


class ScrollRectWithDragCancel:

    offsets = {'dragData': 296}    
    def __init__(self, dragData: UnityEngine.EventSystems.PointerEventData, **kwargs):
        super().__init__(self, **kwargs)
		self.dragData = dragData


class ScrollableElement:

    offsets = {'parentScrollRect': 24}    
    def __init__(self, parentScrollRect: UnityEngine.UI.ScrollRect, **kwargs):
        super().__init__(self, **kwargs)
		self.parentScrollRect = parentScrollRect


class ScrollableSlider:

    offsets = {'timesMoreVerticalTooScroll': 352, 'parentScrollRect': 360, 'draggingScrollRect': 368}    
    def __init__(self, timesMoreVerticalTooScroll: System.Single, parentScrollRect: UnityEngine.UI.ScrollRect, draggingScrollRect: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.timesMoreVerticalTooScroll = timesMoreVerticalTooScroll
		self.parentScrollRect = parentScrollRect
		self.draggingScrollRect = draggingScrollRect


class WeightedGroup<T>:

    offsets = {'items': 0}    
    def __init__(self, items: System.Collections.Generic.List<Assets.Scripts.Unity.Utils.WeightedGroup.WeightedItem<T,T>>, **kwargs):
        super().__init__(self, **kwargs)
		self.items = items


class BoostSettings:

    offsets = {'value': 16, 'boost': 24}    
    def __init__(self, value: System.String, boost: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value = value
		self.boost = boost


class ElasticQuery:

    offsets = {'bool': 16}    
    def __init__(self, bool: Assets.Scripts.Unity.Utils.ElasticSearch.QueryObjects, **kwargs):
        super().__init__(self, **kwargs)
		self.bool = bool


class ElasticQueryOptions:

    offsets = {'sort': 16, 'search_type': 24}    
    def __init__(self, sort: System.Collections.Generic.List<System.Object>, search_type: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.sort = sort
		self.search_type = search_type


class Match:

    offsets = {'match': 16}    
    def __init__(self, match: System.Collections.Generic.Dictionary<System.String,System.Object>, **kwargs):
        super().__init__(self, **kwargs)
		self.match = match


class PainlessScript:

    offsets = {'lang': 16, 'source': 24}    
    def __init__(self, lang: System.String, source: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.lang = lang
		self.source = source


class QueryObject:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class QueryObjectScript:

    offsets = {'script': 16}    
    def __init__(self, script: Assets.Scripts.Unity.Utils.ElasticSearch.QueryScript, **kwargs):
        super().__init__(self, **kwargs)
		self.script = script


class QueryObjectTerm:

    offsets = {'term': 16}    
    def __init__(self, term: System.Collections.Generic.Dictionary<System.String,Assets.Scripts.Unity.Utils.ElasticSearch.BoostSettings>, **kwargs):
        super().__init__(self, **kwargs)
		self.term = term


class QueryObjects:

    offsets = {'must': 16, 'must_not': 24, 'filter': 32, 'should': 40, 'minimum_should_match': 48}    
    def __init__(self, must: System.Collections.Generic.List<Assets.Scripts.Unity.Utils.ElasticSearch.QueryObject>, must_not: System.Collections.Generic.List<Assets.Scripts.Unity.Utils.ElasticSearch.QueryObject>, filter: System.Collections.Generic.List<Assets.Scripts.Unity.Utils.ElasticSearch.QueryObject>, should: System.Collections.Generic.List<Assets.Scripts.Unity.Utils.ElasticSearch.QueryObject>, minimum_should_match: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.must = must
		self.must_not = must_not
		self.filter = filter
		self.should = should
		self.minimum_should_match = minimum_should_match


class QueryScript:

    offsets = {'script': 16}    
    def __init__(self, script: Assets.Scripts.Unity.Utils.ElasticSearch.PainlessScript, **kwargs):
        super().__init__(self, **kwargs)
		self.script = script


class QueryType:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class SearchType:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class SortType:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class AnimationClipReference:

    offsets = {'guidRef': 16}    
    def __init__(self, guidRef: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.guidRef = guidRef


class AssetReference:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AssetReference<T>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AssetReferenceAttribute:

    offsets = {'objType': 16}    
    def __init__(self, objType: System.Type, **kwargs):
        super().__init__(self, **kwargs)
		self.objType = objType


class AudioClipReference:

    offsets = {'guidRef': 16}    
    def __init__(self, guidRef: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.guidRef = guidRef


class AudioSourceReference:

    offsets = {'guidRef': 16}    
    def __init__(self, guidRef: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.guidRef = guidRef


class AverageTime:

    offsets = {'sampleCount': 16, 'stopWatch': 24, 'simulationTimeSamples': 32}    
    def __init__(self, sampleCount: System.Int32, stopWatch: System.Diagnostics.Stopwatch, simulationTimeSamples: System.Collections.Generic.List<System.TimeSpan>, **kwargs):
        super().__init__(self, **kwargs)
		self.sampleCount = sampleCount
		self.stopWatch = stopWatch
		self.simulationTimeSamples = simulationTimeSamples


class BTD6TimeUtil:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Cache<T>:

    offsets = {'value': 0, 'isValid': 0, 'calculation': 0, 'onUpdate': 0, 'onInvalidate': 0, 'onChange': 0}    
    def __init__(self, value: T, isValid: System.Boolean, calculation: System.Func<T>, onUpdate: System.Action<T>, onInvalidate: System.Action<T>, onChange: System.Action, **kwargs):
        super().__init__(self, **kwargs)
		self.value = value
		self.isValid = isValid
		self.calculation = calculation
		self.onUpdate = onUpdate
		self.onInvalidate = onInvalidate
		self.onChange = onChange


class Cacheable:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CachedEnumerable<T>:

    offsets = {'cache': 0, 'isCached': 0, 'source': 0}    
    def __init__(self, cache: Assets.Scripts.Utils.SizedList<T>, isCached: System.Boolean, source: System.Collections.Generic.IEnumerable<T>, **kwargs):
        super().__init__(self, **kwargs)
		self.cache = cache
		self.isCached = isCached
		self.source = source


class CachedEnumerableFrame<T>:

    offsets = {'cachedEnumerable': 0, 'sim': 0, 'lastCachedAt': 0}    
    def __init__(self, cachedEnumerable: Assets.Scripts.Utils.CachedEnumerable<T>, sim: Assets.Scripts.Simulation.Simulation, lastCachedAt: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.cachedEnumerable = cachedEnumerable
		self.sim = sim
		self.lastCachedAt = lastCachedAt


class Comparer<T>:

    offsets = {'compare': 0}    
    def __init__(self, compare: System.Comparison<T>, **kwargs):
        super().__init__(self, **kwargs)
		self.compare = compare


class DailyChannelModel:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DataEncoder:
	settings: Newtonsoft.Json.JsonSerializerSettings
    offsets = {'settings': 0}    
    def __init__(self, settings: Newtonsoft.Json.JsonSerializerSettings, **kwargs):
        super().__init__(self, **kwargs)
		self.settings = settings


class DebugUtil:

    offsets = {'isVisibile': 16, 'isLanguageVisible': 17}    
    def __init__(self, isVisibile: System.Boolean, isLanguageVisible: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.isVisibile = isVisibile
		self.isLanguageVisible = isLanguageVisible


class DiscordUpdate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class FileIOUtil:
	sandboxRoot: System.String
    offsets = {'sandboxRoot': 0}    
    def __init__(self, sandboxRoot: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.sandboxRoot = sandboxRoot


class ForcePause:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class GarbageTracker:
	allTracked: System.Collections.Generic.List<Assets.Scripts.Utils.TrackedGarbageEntry>
    offsets = {'allTracked': 0, 'tracked': 8}    
    def __init__(self, allTracked: System.Collections.Generic.List<Assets.Scripts.Utils.TrackedGarbageEntry>, tracked: System.Collections.Generic.Dictionary<System.Object,System.Collections.Generic.List<Assets.Scripts.Utils.TrackedGarbageEntry>>, **kwargs):
        super().__init__(self, **kwargs)
		self.allTracked = allTracked
		self.tracked = tracked


class GarbageTrackerTest:

    offsets = {'keep': 16}    
    def __init__(self, keep: System.Collections.Generic.List<Assets.Scripts.Utils.GarbageTrackerTest.TestObject>, **kwargs):
        super().__init__(self, **kwargs)
		self.keep = keep


class GenericCache:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class HashUtils:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Helpers:
	GlobalExpressionParamaters: System.Collections.Generic.Dictionary<System.String,System.Object>
    offsets = {'GlobalExpressionParamaters': 0, 'samplePrefabsTo': 16, 'seededRandom': 24, 'audioTaskPool': 32}    
    def __init__(self, GlobalExpressionParamaters: System.Collections.Generic.Dictionary<System.String,System.Object>, samplePrefabsTo: System.Collections.Generic.HashSet<System.String>, seededRandom: Assets.Scripts.Utils.SeededRandom, audioTaskPool: Assets.Scripts.Utils.SizedList<Assets.Scripts.Unity.Bridge.AudioTask>, **kwargs):
        super().__init__(self, **kwargs)
		self.GlobalExpressionParamaters = GlobalExpressionParamaters
		self.samplePrefabsTo = samplePrefabsTo
		self.seededRandom = seededRandom
		self.audioTaskPool = audioTaskPool


class IResourceReleaser:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class KonFuze:

    offsets = {'HackDetected': 8, 'rng': 16, 'rngEncrypt': 24, 'seedAtLastSet': 32, 'honey': 40, 'pot': 48}    
    def __init__(self, HackDetected: System.Boolean, rng: Assets.Scripts.Utils.SeededRandom, rngEncrypt: Assets.Scripts.Utils.SeededRandom, seedAtLastSet: System.Int64, honey: System.Double, pot: System.Double, **kwargs):
        super().__init__(self, **kwargs)
		self.HackDetected = HackDetected
		self.rng = rng
		self.rngEncrypt = rngEncrypt
		self.seedAtLastSet = seedAtLastSet
		self.honey = honey
		self.pot = pot


class KonFuze_NoShuffle:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class LayoutUtil:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class LeaderboardDownloader:
	leaderboardStorage: NinjaKiwi.Common.StorageManager
    offsets = {'leaderboardStorage': 0}    
    def __init__(self, leaderboardStorage: NinjaKiwi.Common.StorageManager, **kwargs):
        super().__init__(self, **kwargs)
		self.leaderboardStorage = leaderboardStorage


class LeaderboardPoolHelper:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class LeaderboardScoreCache:

    offsets = {'id': 16, 'scores': 24, 'isHighPriority': 32, 'maxScores': 36, 'creationTime': 40}    
    def __init__(self, id: System.String, scores: System.Collections.Generic.IEnumerable<NinjaKiwi.LiNK.DataModels.ScoreModel>, isHighPriority: System.Boolean, maxScores: System.Int32, creationTime: System.DateTime, **kwargs):
        super().__init__(self, **kwargs)
		self.id = id
		self.scores = scores
		self.isHighPriority = isHighPriority
		self.maxScores = maxScores
		self.creationTime = creationTime


class LockList<T>:

    offsets = {'list': 0, 'lockActions': 0, 'lockCount': 0, 'hasActions': 0}    
    def __init__(self, list: Assets.Scripts.Utils.SizedList<T>, lockActions: Assets.Scripts.Utils.SizedList<Assets.Scripts.Utils.LockList.LockAction<T>>, lockCount: System.Int32, hasActions: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.list = list
		self.lockActions = lockActions
		self.lockCount = lockCount
		self.hasActions = hasActions


class LockListDisposableLock<T>:

    offsets = {'lockList': 0, 'count': 0}    
    def __init__(self, lockList: Assets.Scripts.Utils.LockList<T>, count: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.lockList = lockList
		self.count = count


class LockListEnumerator<T>:

    offsets = {'passthrough': 0, 'release': 0}    
    def __init__(self, passthrough: Assets.Scripts.Utils.SizedListEnumerator<T>, release: System.Action, **kwargs):
        super().__init__(self, **kwargs)
		self.passthrough = passthrough
		self.release = release


class NetworkUtils:
	lastInternetCheck: System.Tuple<System.DateTime,System.Boolean>
    offsets = {'lastInternetCheck': 0}    
    def __init__(self, lastInternetCheck: System.Tuple<System.DateTime,System.Boolean>, **kwargs):
        super().__init__(self, **kwargs)
		self.lastInternetCheck = lastInternetCheck


class ObjectCache:

    offsets = {'creationTime': 16, 'deserializedObject': 24, 'isDownloading': 32, 'id': 40}    
    def __init__(self, creationTime: System.DateTime, deserializedObject: System.Object, isDownloading: System.Boolean, id: Assets.Scripts.Utils.ObjectCache.Id, **kwargs):
        super().__init__(self, **kwargs)
		self.creationTime = creationTime
		self.deserializedObject = deserializedObject
		self.isDownloading = isDownloading
		self.id = id


class ObjectCacheExtensions:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class OnlineProfileManager:
	uploadTask: System.Threading.Tasks.Task
    offsets = {'uploadTask': 0, 'uploadTaskCanceller': 8, 'isWaitingtoUpload': 16, 'lastUpdateTime': 24, 'lastUploadHash': 32}    
    def __init__(self, uploadTask: System.Threading.Tasks.Task, uploadTaskCanceller: System.Threading.CancellationTokenSource, isWaitingtoUpload: System.Boolean, lastUpdateTime: System.DateTime, lastUploadHash: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.uploadTask = uploadTask
		self.uploadTaskCanceller = uploadTaskCanceller
		self.isWaitingtoUpload = isWaitingtoUpload
		self.lastUpdateTime = lastUpdateTime
		self.lastUploadHash = lastUploadHash


class OnlineProfileUpdater:
	<Instance>k__BackingField: Assets.Scripts.Utils.OnlineProfileUpdater
    offsets = {'<Instance>k__BackingField': 0, 'isRefreshing': 24, 'isSyncing': 25, 'requiresRefresh': 26, 'lastCheckTime': 32, 'syncTask': 40, 'syncTaskCanceller': 48}    
    def __init__(self, <Instance>k__BackingField: Assets.Scripts.Utils.OnlineProfileUpdater, isRefreshing: System.Boolean, isSyncing: System.Boolean, requiresRefresh: System.Boolean, lastCheckTime: System.DateTime, syncTask: System.Threading.Tasks.Task, syncTaskCanceller: System.Threading.CancellationTokenSource, **kwargs):
        super().__init__(self, **kwargs)
		self.<Instance>k__BackingField = <Instance>k__BackingField
		self.isRefreshing = isRefreshing
		self.isSyncing = isSyncing
		self.requiresRefresh = requiresRefresh
		self.lastCheckTime = lastCheckTime
		self.syncTask = syncTask
		self.syncTaskCanceller = syncTaskCanceller


class Optional<T>:
	Invalid: Assets.Scripts.Utils.Optional<T>
    offsets = {'Invalid': 0, 'isValid': 0, 'value': 0}    
    def __init__(self, Invalid: Assets.Scripts.Utils.Optional<T>, isValid: System.Boolean, value: T, **kwargs):
        super().__init__(self, **kwargs)
		self.Invalid = Invalid
		self.isValid = isValid
		self.value = value


class PrefabReference:

    offsets = {'guidRef': 16}    
    def __init__(self, guidRef: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.guidRef = guidRef


class ProcessAccumulatingTimer:
	timers: System.Collections.Generic.Dictionary<System.String,System.Diagnostics.Stopwatch>
    offsets = {'timers': 0, 'ticks': 8}    
    def __init__(self, timers: System.Collections.Generic.Dictionary<System.String,System.Diagnostics.Stopwatch>, ticks: System.Collections.Generic.Dictionary<System.String,System.Int64>, **kwargs):
        super().__init__(self, **kwargs)
		self.timers = timers
		self.ticks = ticks


class ProcessTimer:
	timers: System.Collections.Generic.Dictionary<System.String,System.Diagnostics.Stopwatch>
    offsets = {'timers': 0}    
    def __init__(self, timers: System.Collections.Generic.Dictionary<System.String,System.Diagnostics.Stopwatch>, **kwargs):
        super().__init__(self, **kwargs)
		self.timers = timers


class ResourceLoader:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ResourceReleaser<T>:
	trackedReleasers: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.List<Assets.Scripts.Utils.IResourceReleaser>>
    offsets = {'trackedReleasers': 0, 'onLoadHandler': 0, '<toRelease>k__BackingField': 0}    
    def __init__(self, trackedReleasers: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.List<Assets.Scripts.Utils.IResourceReleaser>>, onLoadHandler: System.Action<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle<T>>, <toRelease>k__BackingField: UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle<T>, **kwargs):
        super().__init__(self, **kwargs)
		self.trackedReleasers = trackedReleasers
		self.onLoadHandler = onLoadHandler
		self.<toRelease>k__BackingField = <toRelease>k__BackingField


class ScoreDifficulty:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class SeededRandom:
	reportUsecountFlag: System.Boolean
    offsets = {'reportUsecountFlag': 0, 'initialSeed': 16, 'currentSeed': 24, 'useCount': 32}    
    def __init__(self, reportUsecountFlag: System.Boolean, initialSeed: System.Int64, currentSeed: System.Int64, useCount: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.reportUsecountFlag = reportUsecountFlag
		self.initialSeed = initialSeed
		self.currentSeed = currentSeed
		self.useCount = useCount


class SizedList<T>:

    offsets = {'count': 0}    
    def __init__(self, count: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.count = count


class SizedListEnumerator<T>:

    offsets = {'index': 0, 'count': 0, 'list': 0}    
    def __init__(self, index: System.Int32, count: System.Int32, list: Assets.Scripts.Utils.SizedList<T>, **kwargs):
        super().__init__(self, **kwargs)
		self.index = index
		self.count = count
		self.list = list


class SizedListPool<T>:
	zeroEnumerator: Assets.Scripts.Utils.SizedListEnumerator<T>
    offsets = {'zeroEnumerator': 0, 'pool': 0}    
    def __init__(self, zeroEnumerator: Assets.Scripts.Utils.SizedListEnumerator<T>, pool: System.Collections.Generic.Stack<Assets.Scripts.Utils.SizedList<T>>, **kwargs):
        super().__init__(self, **kwargs)
		self.zeroEnumerator = zeroEnumerator
		self.pool = pool


class SortedSizedList<T>:

    offsets = {'sortFunction': 0}    
    def __init__(self, sortFunction: Assets.Scripts.Utils.SortedSizedList.SortFunction<T>, **kwargs):
        super().__init__(self, **kwargs)
		self.sortFunction = sortFunction


class SpriteReference:

    offsets = {'guidRef': 16}    
    def __init__(self, guidRef: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.guidRef = guidRef


class SpriteReleaser:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SteamUpdate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class StorageDataFetcher:
	cache: System.Collections.Generic.List<Assets.Scripts.Utils.ObjectCache>
    offsets = {'cache': 0, 'downloadTimeout': 8}    
    def __init__(self, cache: System.Collections.Generic.List<Assets.Scripts.Utils.ObjectCache>, downloadTimeout: System.TimeSpan, **kwargs):
        super().__init__(self, **kwargs)
		self.cache = cache
		self.downloadTimeout = downloadTimeout


class StorageFile:

    offsets = {'dataFolder': 16, 'fileName': 24, 'dataType': 32}    
    def __init__(self, dataFolder: System.String, fileName: System.String, dataType: System.Type, **kwargs):
        super().__init__(self, **kwargs)
		self.dataFolder = dataFolder
		self.fileName = fileName
		self.dataType = dataType


class StructLockListEnumerable<T>:

    offsets = {'list': 0}    
    def __init__(self, list: Assets.Scripts.Utils.LockList<T>, **kwargs):
        super().__init__(self, **kwargs)
		self.list = list


class StructLockListEnumerator<T>:

    offsets = {'list': 0, 'index': 0}    
    def __init__(self, list: Assets.Scripts.Utils.LockList<T>, index: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.list = list
		self.index = index


class TextureReference:

    offsets = {'guidRef': 16}    
    def __init__(self, guidRef: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.guidRef = guidRef


class TimeManager:
	inBetweenRounds: System.Boolean
    offsets = {'inBetweenRounds': 0, 'fastForwardActive': 1, 'gamePaused': 2, 'coopPaused': 3, 'debugStep': 4, 'networkScale': 8, 'timeScaleWithoutNetwork': 12, 'maxSimulationStepsPerUpdate': 16}    
    def __init__(self, inBetweenRounds: System.Boolean, fastForwardActive: System.Boolean, gamePaused: System.Boolean, coopPaused: System.Boolean, debugStep: System.Boolean, networkScale: System.Single, timeScaleWithoutNetwork: System.Single, maxSimulationStepsPerUpdate: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.inBetweenRounds = inBetweenRounds
		self.fastForwardActive = fastForwardActive
		self.gamePaused = gamePaused
		self.coopPaused = coopPaused
		self.debugStep = debugStep
		self.networkScale = networkScale
		self.timeScaleWithoutNetwork = timeScaleWithoutNetwork
		self.maxSimulationStepsPerUpdate = maxSimulationStepsPerUpdate


class TopScore:

    offsets = {'isLoggedInUser': 16, 'userID': 24, 'userName': 32, 'icon': 40, 'iconUrl': 48, 'score': 56, 'difficulty': 60}    
    def __init__(self, isLoggedInUser: System.Boolean, userID: System.String, userName: System.String, icon: UnityEngine.Texture2D, iconUrl: System.String, score: System.Int32, difficulty: Assets.Scripts.Utils.ScoreDifficulty, **kwargs):
        super().__init__(self, **kwargs)
		self.isLoggedInUser = isLoggedInUser
		self.userID = userID
		self.userName = userName
		self.icon = icon
		self.iconUrl = iconUrl
		self.score = score
		self.difficulty = difficulty


class TrackedGarbageEntry:

    offsets = {'name': 16, 'group': 24, 'target': 32}    
    def __init__(self, name: System.String, group: System.String, target: System.WeakReference, **kwargs):
        super().__init__(self, **kwargs)
		self.name = name
		self.group = group
		self.target = target


class TurnOffComponentOnRelease:

    offsets = {'component': 24, '<DefaultActiveState>k__BackingField': 32}    
    def __init__(self, component: UnityEngine.Component, <DefaultActiveState>k__BackingField: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.component = component
		self.<DefaultActiveState>k__BackingField = <DefaultActiveState>k__BackingField


class TurnOffOnRelease:

    offsets = {'<DefaultActiveState>k__BackingField': 24}    
    def __init__(self, <DefaultActiveState>k__BackingField: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.<DefaultActiveState>k__BackingField = <DefaultActiveState>k__BackingField


class TypeSelectionAsString:

    offsets = {'rootNamespace': 16, 'baseType': 24}    
    def __init__(self, rootNamespace: System.String, baseType: System.Type, **kwargs):
        super().__init__(self, **kwargs)
		self.rootNamespace = rootNamespace
		self.baseType = baseType


class UnityHelpers:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class WebViewUtil:
	instance: Assets.Scripts.Utils.WebViewUtil
    offsets = {'instance': 0, 'lawvc': 16}    
    def __init__(self, instance: Assets.Scripts.Utils.WebViewUtil, lawvc: NinjaKiwi.Players.LiNKAccountControllers.IWebViewLinkAccountController, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.lawvc = lawvc


class GeomExtensions:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class IntPoint:
	zero: Geom.IntPoint
    offsets = {'zero': 0, 'x': 16, 'y': 20}    
    def __init__(self, zero: Geom.IntPoint, x: System.Int32, y: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.zero = zero
		self.x = x
		self.y = y


class Point:

    offsets = {'x': 16, 'y': 20}    
    def __init__(self, x: System.Single, y: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.x = x
		self.y = y


class Size:

    offsets = {'w': 16, 'h': 20}    
    def __init__(self, w: System.Int32, h: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.w = w
		self.h = h


class AppleTvCursor:

    offsets = {'cursorImage': 112, 'timeTouchBegin': 120}    
    def __init__(self, cursorImage: UnityEngine.UI.Image, timeTouchBegin: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.cursorImage = cursorImage
		self.timeTouchBegin = timeTouchBegin


class ButtonTransitionStyle:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class ClickState:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class ControllerEventDelegate:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Cursor:

    offsets = {'onMenuPressed': 16, 'onBackPressed': 24, 'cursorObject': 32, 'cursorState': 40, 'previousPosition': 44, 'cursorPosition': 52, 'currentObject': 64, 'inputMode': 72, 'controllerStateChanged': 88, 'controllerState': 96, 'raycastResults': 104}    
    def __init__(self, onMenuPressed: GestureSystem.ControllerEventDelegate, onBackPressed: GestureSystem.ControllerEventDelegate, cursorObject: UnityEngine.GameObject, cursorState: GestureSystem.ClickState, previousPosition: UnityEngine.Vector2, cursorPosition: UnityEngine.Vector2, currentObject: UnityEngine.GameObject, inputMode: GestureSystem.InputMode, controllerStateChanged: System.Boolean, controllerState: System.Collections.Generic.Dictionary<GestureSystem.GCButton,GestureSystem.Cursor.ButtonState>, raycastResults: System.Collections.Generic.List<UnityEngine.EventSystems.RaycastResult>, **kwargs):
        super().__init__(self, **kwargs)
		self.onMenuPressed = onMenuPressed
		self.onBackPressed = onBackPressed
		self.cursorObject = cursorObject
		self.cursorState = cursorState
		self.previousPosition = previousPosition
		self.cursorPosition = cursorPosition
		self.currentObject = currentObject
		self.inputMode = inputMode
		self.controllerStateChanged = controllerStateChanged
		self.controllerState = controllerState
		self.raycastResults = raycastResults


class CustomButton:
	buttonGroups: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.List<GestureSystem.CustomButton>>
    offsets = {'buttonGroups': 0, '<IsClickable>k__BackingField': 256, 'onPointerEnter': 264, 'onPointerExit': 272, 'onPointerDown': 280, 'onPointerUp': 288, 'active': 296, 'inactive': 304, 'locked': 312, 'highlighted': 320, 'groupId': 328, '<IsFocused>k__BackingField': 336}    
    def __init__(self, buttonGroups: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.List<GestureSystem.CustomButton>>, <IsClickable>k__BackingField: System.Boolean, onPointerEnter: UnityEngine.Events.UnityEvent, onPointerExit: UnityEngine.Events.UnityEvent, onPointerDown: UnityEngine.Events.UnityEvent, onPointerUp: UnityEngine.Events.UnityEvent, active: UnityEngine.GameObject, inactive: UnityEngine.GameObject, locked: UnityEngine.GameObject, highlighted: UnityEngine.GameObject, groupId: System.String, <IsFocused>k__BackingField: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.buttonGroups = buttonGroups
		self.<IsClickable>k__BackingField = <IsClickable>k__BackingField
		self.onPointerEnter = onPointerEnter
		self.onPointerExit = onPointerExit
		self.onPointerDown = onPointerDown
		self.onPointerUp = onPointerUp
		self.active = active
		self.inactive = inactive
		self.locked = locked
		self.highlighted = highlighted
		self.groupId = groupId
		self.<IsFocused>k__BackingField = <IsFocused>k__BackingField


class DisableGesturesWhileOpen:
	openCount: System.Int32
    offsets = {'openCount': 0}    
    def __init__(self, openCount: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.openCount = openCount


class GCButton:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class GameControllers:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Gesture:

    offsets = {'<Active>k__BackingField': 16, 'ClaimedByDetector': 24, 'touchType': 32, 'hoverType': 36, 'touchedObject': 40, 'hoveredObject': 48, 'isController': 56, 'startPosition': 60, 'position': 68, 'startTime': 76, 'phase': 80, 'distance': 84, 'duration': 88}    
    def __init__(self, <Active>k__BackingField: System.Boolean, ClaimedByDetector: GestureSystem.IGestureDetector, touchType: GestureSystem.TapOnType, hoverType: GestureSystem.TapOnType, touchedObject: GestureSystem.TouchableObject, hoveredObject: GestureSystem.TouchableObject, isController: System.Boolean, startPosition: UnityEngine.Vector2, position: UnityEngine.Vector2, startTime: System.Single, phase: UnityEngine.TouchPhase, distance: System.Single, duration: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.<Active>k__BackingField = <Active>k__BackingField
		self.ClaimedByDetector = ClaimedByDetector
		self.touchType = touchType
		self.hoverType = hoverType
		self.touchedObject = touchedObject
		self.hoveredObject = hoveredObject
		self.isController = isController
		self.startPosition = startPosition
		self.position = position
		self.startTime = startTime
		self.phase = phase
		self.distance = distance
		self.duration = duration


class GestureManager:
	GesturesEnabled: System.Boolean
    offsets = {'GesturesEnabled': 0, 'detectors': 24, '<InstalledCursor>k__BackingField': 32}    
    def __init__(self, GesturesEnabled: System.Boolean, detectors: System.Collections.Generic.List<GestureSystem.IGestureDetector>, <InstalledCursor>k__BackingField: GestureSystem.ICursor, **kwargs):
        super().__init__(self, **kwargs)
		self.GesturesEnabled = GesturesEnabled
		self.detectors = detectors
		self.<InstalledCursor>k__BackingField = <InstalledCursor>k__BackingField


class HoverClick:

    offsets = {'hoverTriggerTime': 24, 'hoverTriggerTimeLeft': 28, 'button': 32}    
    def __init__(self, hoverTriggerTime: System.Single, hoverTriggerTimeLeft: System.Single, button: GestureSystem.CustomButton, **kwargs):
        super().__init__(self, **kwargs)
		self.hoverTriggerTime = hoverTriggerTime
		self.hoverTriggerTimeLeft = hoverTriggerTimeLeft
		self.button = button


class HoverDetector:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ICursor:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class IGameControllers:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class IGestureDetector:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class IHoverClick:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class IOSCursor:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class InputMode:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class MainControllerConnected_t:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MainControllerDisconnected_t:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MouseCursor:

    offsets = {'previousMousePosition': 112}    
    def __init__(self, previousMousePosition: UnityEngine.Vector2, **kwargs):
        super().__init__(self, **kwargs)
		self.previousMousePosition = previousMousePosition


class NoGameControllers:

    offsets = {'onMainControllerConnected': 24, 'onMainControllerDisconnected': 32, 'onValueChanged': 40}    
    def __init__(self, onMainControllerConnected: GestureSystem.MainControllerConnected_t, onMainControllerDisconnected: GestureSystem.MainControllerDisconnected_t, onValueChanged: GestureSystem.ValueChanged_t, **kwargs):
        super().__init__(self, **kwargs)
		self.onMainControllerConnected = onMainControllerConnected
		self.onMainControllerDisconnected = onMainControllerDisconnected
		self.onValueChanged = onValueChanged


class PinchDetector:

    offsets = {'g1': 16, 'g2': 24, 'active': 32, 'initialDistance': 36, 'distance': 40, 'initialCenterPoint': 44, '<Delta>k__BackingField': 52, '<Pinch>k__BackingField': 56, 'centerPoint': 60, 'OnPinchChangedEvent': 72}    
    def __init__(self, g1: GestureSystem.Gesture, g2: GestureSystem.Gesture, active: System.Boolean, initialDistance: System.Single, distance: System.Single, initialCenterPoint: UnityEngine.Vector2, <Delta>k__BackingField: System.Single, <Pinch>k__BackingField: System.Single, centerPoint: UnityEngine.Vector2, OnPinchChangedEvent: System.Action<System.Single,System.Single,UnityEngine.Vector2>, **kwargs):
        super().__init__(self, **kwargs)
		self.g1 = g1
		self.g2 = g2
		self.active = active
		self.initialDistance = initialDistance
		self.distance = distance
		self.initialCenterPoint = initialCenterPoint
		self.<Delta>k__BackingField = <Delta>k__BackingField
		self.<Pinch>k__BackingField = <Pinch>k__BackingField
		self.centerPoint = centerPoint
		self.OnPinchChangedEvent = OnPinchChangedEvent


class PinchGestureDetector:

    offsets = {'gestures': 16, '<Active>k__BackingField': 24, '<Started>k__BackingField': 25, '<MidPoint>k__BackingField': 28, '<PinchStartMidPoint>k__BackingField': 36, '<Change>k__BackingField': 44, 'PinchStartDistance': 48}    
    def __init__(self, gestures: System.Collections.Generic.List<GestureSystem.Gesture>, <Active>k__BackingField: System.Boolean, <Started>k__BackingField: System.Boolean, <MidPoint>k__BackingField: UnityEngine.Vector2, <PinchStartMidPoint>k__BackingField: UnityEngine.Vector2, <Change>k__BackingField: System.Single, PinchStartDistance: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.gestures = gestures
		self.<Active>k__BackingField = <Active>k__BackingField
		self.<Started>k__BackingField = <Started>k__BackingField
		self.<MidPoint>k__BackingField = <MidPoint>k__BackingField
		self.<PinchStartMidPoint>k__BackingField = <PinchStartMidPoint>k__BackingField
		self.<Change>k__BackingField = <Change>k__BackingField
		self.PinchStartDistance = PinchStartDistance


class RaycastingDetector:

    offsets = {'uiRaycastResults': 24, 'groundCollider': 32, 'cam': 40}    
    def __init__(self, uiRaycastResults: System.Collections.Generic.List<UnityEngine.EventSystems.RaycastResult>, groundCollider: UnityEngine.BoxCollider, cam: UnityEngine.Camera, **kwargs):
        super().__init__(self, **kwargs)
		self.uiRaycastResults = uiRaycastResults
		self.groundCollider = groundCollider
		self.cam = cam


class ScreenEdge:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class ScreenPushDetector:

    offsets = {'<Edge>k__BackingField': 16, 'currentGesture': 24}    
    def __init__(self, <Edge>k__BackingField: GestureSystem.ScreenEdge, currentGesture: GestureSystem.Gesture, **kwargs):
        super().__init__(self, **kwargs)
		self.<Edge>k__BackingField = <Edge>k__BackingField
		self.currentGesture = currentGesture


class SimpleTapGestureDetector:

    offsets = {'Trigger': 16, 'tapOnDetector': 24}    
    def __init__(self, Trigger: System.Action<GestureSystem.Gesture>, tapOnDetector: GestureSystem.TapOnDetector, **kwargs):
        super().__init__(self, **kwargs)
		self.Trigger = Trigger
		self.tapOnDetector = tapOnDetector


class TapOnDetector:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class TapOnType:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class TouchableObject:

    offsets = {'touchableType': 24}    
    def __init__(self, touchableType: GestureSystem.TouchableObjectType, **kwargs):
        super().__init__(self, **kwargs)
		self.touchableType = touchableType


class TouchableObjectType:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class ValueChanged_t:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PluginVersion:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CommonTypesUtil:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class DataSource:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class Gravity:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class LeaderboardCollection:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class LeaderboardStart:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class LeaderboardTimeSpan:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class ResponseStatus:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class UIStatus:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class VideoCaptureMode:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class VideoCaptureOverlayState:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class VideoQualityLevel:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class EventVisibility:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class IEvent:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class AdvertisingResult:

    offsets = {'mStatus': 16, 'mLocalEndpointName': 24}    
    def __init__(self, mStatus: GooglePlayGames.BasicApi.ResponseStatus, mLocalEndpointName: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.mStatus = mStatus
		self.mLocalEndpointName = mLocalEndpointName


class ConnectionRequest:

    offsets = {'mRemoteEndpoint': 16}    
    def __init__(self, mRemoteEndpoint: GooglePlayGames.BasicApi.Nearby.EndpointDetails, **kwargs):
        super().__init__(self, **kwargs)
		self.mRemoteEndpoint = mRemoteEndpoint


class ConnectionResponse:

    offsets = {'mLocalClientId': 16, 'mRemoteEndpointId': 24, 'mResponseStatus': 32}    
    def __init__(self, mLocalClientId: System.Int64, mRemoteEndpointId: System.String, mResponseStatus: GooglePlayGames.BasicApi.Nearby.ConnectionResponse.Status, **kwargs):
        super().__init__(self, **kwargs)
		self.mLocalClientId = mLocalClientId
		self.mRemoteEndpointId = mRemoteEndpointId
		self.mResponseStatus = mResponseStatus


class EndpointDetails:

    offsets = {'mEndpointId': 16, 'mName': 24, 'mServiceId': 32}    
    def __init__(self, mEndpointId: System.String, mName: System.String, mServiceId: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.mEndpointId = mEndpointId
		self.mName = mName
		self.mServiceId = mServiceId


class IDiscoveryListener:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class IMessageListener:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class InitializationStatus:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class NearbyConnectionConfiguration:

    offsets = {'mInitializationCallback': 16, 'mLocalClientId': 24}    
    def __init__(self, mInitializationCallback: System.Action<GooglePlayGames.BasicApi.Nearby.InitializationStatus>, mLocalClientId: System.Int64, **kwargs):
        super().__init__(self, **kwargs)
		self.mInitializationCallback = mInitializationCallback
		self.mLocalClientId = mLocalClientId


class ConflictCallback:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ConflictResolutionStrategy:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class IConflictResolver:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ISavedGameClient:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class ISavedGameMetadata:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SavedGameMetadataUpdate:

    offsets = {'mDescriptionUpdated': 16, 'mNewDescription': 24, 'mCoverImageUpdated': 32, 'mNewPlayedTime': 48}    
    def __init__(self, mDescriptionUpdated: System.Boolean, mNewDescription: System.String, mCoverImageUpdated: System.Boolean, mNewPlayedTime: System.Nullable<System.TimeSpan>, **kwargs):
        super().__init__(self, **kwargs)
		self.mDescriptionUpdated = mDescriptionUpdated
		self.mNewDescription = mNewDescription
		self.mCoverImageUpdated = mCoverImageUpdated
		self.mNewPlayedTime = mNewPlayedTime


class SavedGameRequestStatus:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class SelectUIStatus:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class CaptureOverlayStateListener:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class IVideoClient:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class VideoCapabilities:

    offsets = {'mIsCameraSupported': 16, 'mIsMicSupported': 17, 'mIsWriteStorageSupported': 18}    
    def __init__(self, mIsCameraSupported: System.Boolean, mIsMicSupported: System.Boolean, mIsWriteStorageSupported: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.mIsCameraSupported = mIsCameraSupported
		self.mIsMicSupported = mIsMicSupported
		self.mIsWriteStorageSupported = mIsWriteStorageSupported


class VideoCaptureState:

    offsets = {'mIsCapturing': 16, 'mCaptureMode': 20, 'mQualityLevel': 24, 'mIsOverlayVisible': 28, 'mIsPaused': 29}    
    def __init__(self, mIsCapturing: System.Boolean, mCaptureMode: GooglePlayGames.BasicApi.VideoCaptureMode, mQualityLevel: GooglePlayGames.BasicApi.VideoQualityLevel, mIsOverlayVisible: System.Boolean, mIsPaused: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.mIsCapturing = mIsCapturing
		self.mCaptureMode = mCaptureMode
		self.mQualityLevel = mQualityLevel
		self.mIsOverlayVisible = mIsOverlayVisible
		self.mIsPaused = mIsPaused


class Logger:
	debugLogEnabled: System.Boolean
    offsets = {'debugLogEnabled': 0, 'warningLogEnabled': 1}    
    def __init__(self, debugLogEnabled: System.Boolean, warningLogEnabled: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.debugLogEnabled = debugLogEnabled
		self.warningLogEnabled = warningLogEnabled


class Misc:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PlayGamesHelperObject:
	instance: GooglePlayGames.OurUtils.PlayGamesHelperObject
    offsets = {'instance': 0, 'sIsDummy': 8, 'sQueue': 16, 'sQueueEmpty': 24, 'sPauseCallbackList': 32, 'sFocusCallbackList': 40, 'localQueue': 24}    
    def __init__(self, instance: GooglePlayGames.OurUtils.PlayGamesHelperObject, sIsDummy: System.Boolean, sQueue: System.Collections.Generic.List<System.Action>, sQueueEmpty: System.Boolean, sPauseCallbackList: System.Collections.Generic.List<System.Action<System.Boolean>>, sFocusCallbackList: System.Collections.Generic.List<System.Action<System.Boolean>>, localQueue: System.Collections.Generic.List<System.Action>, **kwargs):
        super().__init__(self, **kwargs)
		self.instance = instance
		self.sIsDummy = sIsDummy
		self.sQueue = sQueue
		self.sQueueEmpty = sQueueEmpty
		self.sPauseCallbackList = sPauseCallbackList
		self.sFocusCallbackList = sFocusCallbackList
		self.localQueue = localQueue


class EmbeddedAttribute:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Remap:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class CubicBezier:

    offsets = {'startPoint': 16, 'startTangent': 28, 'endTangent': 40, 'endPoint': 52}    
    def __init__(self, startPoint: UnityEngine.Vector3, startTangent: UnityEngine.Vector3, endTangent: UnityEngine.Vector3, endPoint: UnityEngine.Vector3, **kwargs):
        super().__init__(self, **kwargs)
		self.startPoint = startPoint
		self.startTangent = startTangent
		self.endTangent = endTangent
		self.endPoint = endPoint


class Curve:

    offsets = {'endTangent': 16, 'point': 28}    
    def __init__(self, endTangent: UnityEngine.Vector3, point: UnityEngine.Vector3, **kwargs):
        super().__init__(self, **kwargs)
		self.endTangent = endTangent
		self.point = point


class CurveFollower:

    offsets = {'path': 24, 'granularity': 32, 'duration': 36, 'onComplete': 40, 'rotationFollowsCurve': 44, 'rotationPingPong': 45, 'playOnActivate': 46, '<IsPlaying>k__BackingField': 47, 'useEaseCurve': 48, 'ease': 56, 'easeMin': 64, 'easeMax': 68, 'unscaledTime': 72, 'samples': 80, 'segments': 88, 'totalLength': 96, 'speed': 100, 'initialRotation': 104, 'currentSampleIndex': 120, 'progressToNextSample': 124, 'totalProgressDistance': 128, 'direction': 132, 'paused': 136, 'startTime': 140, 'OnLoop': 144, 'isInitialised': 152}    
    def __init__(self, path: NinjaKiwi.CustomAnimation.CurvedPath, granularity: System.Int32, duration: System.Single, onComplete: NinjaKiwi.CustomAnimation.CurveFollower.OnCompleteBehaviour, rotationFollowsCurve: System.Boolean, rotationPingPong: System.Boolean, playOnActivate: System.Boolean, <IsPlaying>k__BackingField: System.Boolean, useEaseCurve: System.Boolean, ease: UnityEngine.AnimationCurve, easeMin: System.Single, easeMax: System.Single, unscaledTime: System.Boolean, samples: System.Collections.Generic.List<NinjaKiwi.CustomAnimation.PathSample>, segments: System.Collections.Generic.List<NinjaKiwi.CustomAnimation.CurveFollower.LineSegmentInfo>, totalLength: System.Single, speed: System.Single, initialRotation: UnityEngine.Quaternion, currentSampleIndex: System.Int32, progressToNextSample: System.Single, totalProgressDistance: System.Single, direction: System.Single, paused: System.Boolean, startTime: System.Single, OnLoop: System.Action, isInitialised: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.path = path
		self.granularity = granularity
		self.duration = duration
		self.onComplete = onComplete
		self.rotationFollowsCurve = rotationFollowsCurve
		self.rotationPingPong = rotationPingPong
		self.playOnActivate = playOnActivate
		self.<IsPlaying>k__BackingField = <IsPlaying>k__BackingField
		self.useEaseCurve = useEaseCurve
		self.ease = ease
		self.easeMin = easeMin
		self.easeMax = easeMax
		self.unscaledTime = unscaledTime
		self.samples = samples
		self.segments = segments
		self.totalLength = totalLength
		self.speed = speed
		self.initialRotation = initialRotation
		self.currentSampleIndex = currentSampleIndex
		self.progressToNextSample = progressToNextSample
		self.totalProgressDistance = totalProgressDistance
		self.direction = direction
		self.paused = paused
		self.startTime = startTime
		self.OnLoop = OnLoop
		self.isInitialised = isInitialised


class CurveSample:

    offsets = {'tangent': 16, 'point': 28}    
    def __init__(self, tangent: UnityEngine.Vector3, point: UnityEngine.Vector3, **kwargs):
        super().__init__(self, **kwargs)
		self.tangent = tangent
		self.point = point


class CurvedPath:

    offsets = {'curves': 24, 'startPoint': 32, 'startTangent': 44}    
    def __init__(self, curves: System.Collections.Generic.List<NinjaKiwi.CustomAnimation.Curve>, startPoint: UnityEngine.Vector3, startTangent: UnityEngine.Vector3, **kwargs):
        super().__init__(self, **kwargs)
		self.curves = curves
		self.startPoint = startPoint
		self.startTangent = startTangent


class PathSample:

    offsets = {'tile': 16, 'position': 24, 'tangent': 36}    
    def __init__(self, tile: Geom.IntPoint, position: UnityEngine.Vector3, tangent: UnityEngine.Vector3, **kwargs):
        super().__init__(self, **kwargs)
		self.tile = tile
		self.position = position
		self.tangent = tangent


class ConnectionConfig:

    offsets = {'Reconnect': 16, 'Rejoin': 24, 'Latency': 32, 'Awol': 40}    
    def __init__(self, Reconnect: NinjaKiwi.LiNK.Lobbies.ConnectionConfig.ReconnectConfig, Rejoin: NinjaKiwi.LiNK.Lobbies.ConnectionConfig.RejoinConfig, Latency: NinjaKiwi.LiNK.Lobbies.ConnectionConfig.LatencyConfig, Awol: NinjaKiwi.LiNK.Lobbies.ConnectionConfig.AwolConfig, **kwargs):
        super().__init__(self, **kwargs)
		self.Reconnect = Reconnect
		self.Rejoin = Rejoin
		self.Latency = Latency
		self.Awol = Awol


class ConnectionDetails:

    offsets = {'RelayHostName': 16, 'RelayPort': 24, 'RelayBinaryVersion': 32, 'LobbyID': 40, 'PlayerNumber': 48, 'PlayerGlobalID': 56}    
    def __init__(self, RelayHostName: System.String, RelayPort: System.Int32, RelayBinaryVersion: System.Version, LobbyID: System.String, PlayerNumber: System.Byte, PlayerGlobalID: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.RelayHostName = RelayHostName
		self.RelayPort = RelayPort
		self.RelayBinaryVersion = RelayBinaryVersion
		self.LobbyID = LobbyID
		self.PlayerNumber = PlayerNumber
		self.PlayerGlobalID = PlayerGlobalID


class Countdown:

    offsets = {'TicksRemaining': 16}    
    def __init__(self, TicksRemaining: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.TicksRemaining = TicksRemaining


class DebugGameConnection:

    offsets = {'OtherPlayerLatencyUpdatedEvent': 200, 'OtherPlayerPredictionUpdatedEvent': 208, 'OtherPlayers': 216, 'DebugSelf': 224, 'GetMessageHistoryLength': 232}    
    def __init__(self, OtherPlayerLatencyUpdatedEvent: System.Action<System.TimeSpan,System.DateTime,System.Boolean>, OtherPlayerPredictionUpdatedEvent: System.Action<System.DateTime,System.TimeSpan>, OtherPlayers: System.Collections.Generic.IEnumerable<NinjaKiwi.LiNK.Lobbies.DebugGameConnection.DebugPlayer>, DebugSelf: NinjaKiwi.LiNK.Lobbies.DebugGameConnection.DebugSelfPlayer, GetMessageHistoryLength: System.Func<System.Int32>, **kwargs):
        super().__init__(self, **kwargs)
		self.OtherPlayerLatencyUpdatedEvent = OtherPlayerLatencyUpdatedEvent
		self.OtherPlayerPredictionUpdatedEvent = OtherPlayerPredictionUpdatedEvent
		self.OtherPlayers = OtherPlayers
		self.DebugSelf = DebugSelf
		self.GetMessageHistoryLength = GetMessageHistoryLength


class GameConnection:
	Config: NinjaKiwi.LiNK.Lobbies.ConnectionConfig
    offsets = {'Config': 0, 'OwnPlayerNumber': 16, 'LobbyID': 24, 'ReceiveQueue': 32, 'OwnLatencyUpdatedEvent': 40, 'LatencyWarningEvent': 48, 'RelayDisconnectedEvent': 56, 'ReconnectingEvent': 64, 'ReconnectedEvent': 72, 'RejoinedEvent': 80, 'DisconnectedEvent': 88, 'PlayerAWOLEvent': 96, 'PlayerNotAWOLEvent': 104, 'NoPlayersAWOLEvent': 112, 'PlayerLeftEvent': 120, 'PlayerRejoinedEvent': 128, 'LogEvent': 136, 'SelfPlayer': 144, 'SentMessages': 152, 'OtherPlayersPrivate': 160, 'Connection': 168, 'ConnectionDetails': 176, 'ReconnectCanceller': 184, 'IsDisposed': 192, 'MessageCounter': 196}    
    def __init__(self, Config: NinjaKiwi.LiNK.Lobbies.ConnectionConfig, OwnPlayerNumber: System.Byte, LobbyID: System.String, ReceiveQueue: System.Collections.Generic.Queue<NinjaKiwi.LiNK.Lobbies.NKMultiConnection.ReceivedMessage>, OwnLatencyUpdatedEvent: System.Action<NinjaKiwi.LiNK.Lobbies.LatencyMeasurements.LatencyMeasurement>, LatencyWarningEvent: System.Action, RelayDisconnectedEvent: System.Action<System.Exception>, ReconnectingEvent: System.Action<System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<System.Int32>>>, ReconnectedEvent: System.Action, RejoinedEvent: System.Action, DisconnectedEvent: System.Action<System.String>, PlayerAWOLEvent: System.Action<System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<System.Int32>>,System.Byte>, PlayerNotAWOLEvent: System.Action<System.Byte>, NoPlayersAWOLEvent: System.Action, PlayerLeftEvent: System.Action<System.Byte,System.String>, PlayerRejoinedEvent: System.Action<System.Byte>, LogEvent: System.Action<System.String>, SelfPlayer: NinjaKiwi.LiNK.Lobbies.SelfPlayer, SentMessages: System.Collections.Generic.LinkedList<NinjaKiwi.LiNK.Lobbies.GameConnection.ExternalMessageToSend>, OtherPlayersPrivate: System.Collections.Generic.Dictionary<System.Byte,NinjaKiwi.LiNK.Lobbies.OtherPlayerPrivate>, Connection: NinjaKiwi.LiNK.Lobbies.NKMultiConnection, ConnectionDetails: NinjaKiwi.LiNK.Lobbies.ConnectionDetails, ReconnectCanceller: System.Threading.CancellationTokenSource, IsDisposed: System.Boolean, MessageCounter: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.Config = Config
		self.OwnPlayerNumber = OwnPlayerNumber
		self.LobbyID = LobbyID
		self.ReceiveQueue = ReceiveQueue
		self.OwnLatencyUpdatedEvent = OwnLatencyUpdatedEvent
		self.LatencyWarningEvent = LatencyWarningEvent
		self.RelayDisconnectedEvent = RelayDisconnectedEvent
		self.ReconnectingEvent = ReconnectingEvent
		self.ReconnectedEvent = ReconnectedEvent
		self.RejoinedEvent = RejoinedEvent
		self.DisconnectedEvent = DisconnectedEvent
		self.PlayerAWOLEvent = PlayerAWOLEvent
		self.PlayerNotAWOLEvent = PlayerNotAWOLEvent
		self.NoPlayersAWOLEvent = NoPlayersAWOLEvent
		self.PlayerLeftEvent = PlayerLeftEvent
		self.PlayerRejoinedEvent = PlayerRejoinedEvent
		self.LogEvent = LogEvent
		self.SelfPlayer = SelfPlayer
		self.SentMessages = SentMessages
		self.OtherPlayersPrivate = OtherPlayersPrivate
		self.Connection = Connection
		self.ConnectionDetails = ConnectionDetails
		self.ReconnectCanceller = ReconnectCanceller
		self.IsDisposed = IsDisposed
		self.MessageCounter = MessageCounter


class GameDetails:

    offsets = {'ConnectionDetails': 16, 'Players': 24}    
    def __init__(self, ConnectionDetails: NinjaKiwi.LiNK.Lobbies.ConnectionDetails, Players: System.Collections.Generic.SortedDictionary<System.Byte,System.String>, **kwargs):
        super().__init__(self, **kwargs)
		self.ConnectionDetails = ConnectionDetails
		self.Players = Players


class IEnumerableExtensions:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class LiNKLobby:

    offsets = {'<MatchmakingParameters>k__BackingField': 16, 'LiNK': 24, 'Model': 32}    
    def __init__(self, <MatchmakingParameters>k__BackingField: NinjaKiwi.LiNK.Lobbies.MatchMakingParameters, LiNK: NinjaKiwi.LiNK.Api, Model: NinjaKiwi.LiNK.DataModels.LobbyModel, **kwargs):
        super().__init__(self, **kwargs)
		self.<MatchmakingParameters>k__BackingField = <MatchmakingParameters>k__BackingField
		self.LiNK = LiNK
		self.Model = Model


class LiNKLobbyFactory:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Lobby:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class LobbyConnection:
	LatencyFailCountThreshold: System.Int32
    offsets = {'LatencyFailCountThreshold': 0, 'LiNKLobby': 16, 'OtherPlayers': 24, 'ReceiveQueue': 32, 'ReconnectCanceller': 40, 'MaxRetries': 48, '<Game>k__BackingField': 56, '<OwnPlayerInfo>k__BackingField': 64, 'DebugMode': 72, 'StartEvent': 80, 'PlayersChangedEvent': 88, 'PlayerChangedEvent': 96, 'PlayerJoinedEvent': 104, 'PlayerLeftEvent': 112, 'ReconnectingEvent': 120, 'ReconnectedEvent': 128, 'DisconnectedEvent': 136, 'NotAvailableEvent': 144, 'Connection': 152, 'IsDisposed': 160}    
    def __init__(self, LatencyFailCountThreshold: System.Int32, LiNKLobby: NinjaKiwi.LiNK.Lobbies.LiNKLobby, OtherPlayers: System.Collections.Generic.SortedDictionary<System.Byte,System.String>, ReceiveQueue: System.Collections.Generic.Queue<NinjaKiwi.LiNK.Lobbies.NKMultiConnection.ReceivedMessage>, ReconnectCanceller: System.Threading.CancellationTokenSource, MaxRetries: System.Int32, <Game>k__BackingField: NinjaKiwi.LiNK.Lobbies.GameConnection, <OwnPlayerInfo>k__BackingField: System.String, DebugMode: System.Boolean, StartEvent: System.Action<NinjaKiwi.LiNK.Lobbies.GameConnection>, PlayersChangedEvent: System.Action, PlayerChangedEvent: System.Action<System.Byte>, PlayerJoinedEvent: System.Action<System.Byte>, PlayerLeftEvent: System.Action<System.Byte>, ReconnectingEvent: System.Action<System.Exception>, ReconnectedEvent: System.Action, DisconnectedEvent: System.Action, NotAvailableEvent: System.Action<System.String>, Connection: NinjaKiwi.LiNK.Lobbies.NKMultiConnection, IsDisposed: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.LatencyFailCountThreshold = LatencyFailCountThreshold
		self.LiNKLobby = LiNKLobby
		self.OtherPlayers = OtherPlayers
		self.ReceiveQueue = ReceiveQueue
		self.ReconnectCanceller = ReconnectCanceller
		self.MaxRetries = MaxRetries
		self.<Game>k__BackingField = <Game>k__BackingField
		self.<OwnPlayerInfo>k__BackingField = <OwnPlayerInfo>k__BackingField
		self.DebugMode = DebugMode
		self.StartEvent = StartEvent
		self.PlayersChangedEvent = PlayersChangedEvent
		self.PlayerChangedEvent = PlayerChangedEvent
		self.PlayerJoinedEvent = PlayerJoinedEvent
		self.PlayerLeftEvent = PlayerLeftEvent
		self.ReconnectingEvent = ReconnectingEvent
		self.ReconnectedEvent = ReconnectedEvent
		self.DisconnectedEvent = DisconnectedEvent
		self.NotAvailableEvent = NotAvailableEvent
		self.Connection = Connection
		self.IsDisposed = IsDisposed


class ManualCountdown:

    offsets = {'TaskCompletionSource': 24}    
    def __init__(self, TaskCompletionSource: System.Threading.Tasks.TaskCompletionSource<System.Int32>, **kwargs):
        super().__init__(self, **kwargs)
		self.TaskCompletionSource = TaskCompletionSource


class NKMultiConnection:

    offsets = {'Details': 16, 'ReceiveQueue': 24, 'LatencyFailCountThreshold': 32, 'NKGI': 40, 'LatencyFailCounter': 48, 'DisconnectedEvent': 56, 'PlayerConnectedEvent': 64, 'PlayerDisconnectedEvent': 72, 'LatencyUpdateEvent': 80}    
    def __init__(self, Details: NinjaKiwi.LiNK.Lobbies.ConnectionDetails, ReceiveQueue: System.Collections.Generic.Queue<NinjaKiwi.LiNK.Lobbies.NKMultiConnection.ReceivedMessage>, LatencyFailCountThreshold: System.Int32, NKGI: NinjaKiwi.NKMulti.NKMultiGameInterface, LatencyFailCounter: System.Int32, DisconnectedEvent: System.Action<System.Exception>, PlayerConnectedEvent: System.Action<System.Byte>, PlayerDisconnectedEvent: System.Action<System.Byte>, LatencyUpdateEvent: NinjaKiwi.LiNK.Lobbies.NKMultiConnection.LatencyUpdate, **kwargs):
        super().__init__(self, **kwargs)
		self.Details = Details
		self.ReceiveQueue = ReceiveQueue
		self.LatencyFailCountThreshold = LatencyFailCountThreshold
		self.NKGI = NKGI
		self.LatencyFailCounter = LatencyFailCounter
		self.DisconnectedEvent = DisconnectedEvent
		self.PlayerConnectedEvent = PlayerConnectedEvent
		self.PlayerDisconnectedEvent = PlayerDisconnectedEvent
		self.LatencyUpdateEvent = LatencyUpdateEvent


class OtherPlayer:

    offsets = {'P': 16, '<PlayerNumber>k__BackingField': 24}    
    def __init__(self, P: NinjaKiwi.LiNK.Lobbies.OtherPlayerPrivate, <PlayerNumber>k__BackingField: System.Byte, **kwargs):
        super().__init__(self, **kwargs)
		self.P = P
		self.<PlayerNumber>k__BackingField = <PlayerNumber>k__BackingField


class OtherPlayerPrivate:

    offsets = {'Info': 16, 'LastMessageReceived': 24, 'MessageDeliveryConfirmed': 28, '<Public>k__BackingField': 32, '<Latency>k__BackingField': 40, '<LatencyVariance>k__BackingField': 48, '<IsStarted>k__BackingField': 56, '<IsDisconnected>k__BackingField': 57, '<IsAWOL>k__BackingField': 58, 'Cooldown': 60, 'TotalAwolCount': 64, 'Config': 72, 'LatencyMeasurements': 80, 'PendingLatencyMeasurements': 88, 'RecentAwolTimes': 96, 'StartTime': 104, 'LatencyUpdateEvent': 112, 'PredictionUpdateEvent': 120, 'AWOLEvent': 128, 'KickedEvent': 136, 'Stats': 144}    
    def __init__(self, Info: System.String, LastMessageReceived: System.Int32, MessageDeliveryConfirmed: System.Int32, <Public>k__BackingField: NinjaKiwi.LiNK.Lobbies.OtherPlayer, <Latency>k__BackingField: System.TimeSpan, <LatencyVariance>k__BackingField: System.TimeSpan, <IsStarted>k__BackingField: System.Boolean, <IsDisconnected>k__BackingField: System.Boolean, <IsAWOL>k__BackingField: System.Boolean, Cooldown: System.Int32, TotalAwolCount: System.Int32, Config: NinjaKiwi.LiNK.Lobbies.ConnectionConfig, LatencyMeasurements: NinjaKiwi.LiNK.Lobbies.LatencyMeasurements.LatencyHistory, PendingLatencyMeasurements: System.Collections.Generic.Queue<NinjaKiwi.LiNK.Lobbies.LatencyMeasurements.LatencyMeasurement>, RecentAwolTimes: System.Collections.Generic.Queue<System.DateTime>, StartTime: System.DateTime, LatencyUpdateEvent: System.Action<System.TimeSpan,System.DateTime,System.Boolean>, PredictionUpdateEvent: System.Action<System.DateTime,System.TimeSpan>, AWOLEvent: System.Action, KickedEvent: System.Action, Stats: NinjaKiwi.LiNK.Lobbies.OtherPlayerPrivate.NormalisedStats, **kwargs):
        super().__init__(self, **kwargs)
		self.Info = Info
		self.LastMessageReceived = LastMessageReceived
		self.MessageDeliveryConfirmed = MessageDeliveryConfirmed
		self.<Public>k__BackingField = <Public>k__BackingField
		self.<Latency>k__BackingField = <Latency>k__BackingField
		self.<LatencyVariance>k__BackingField = <LatencyVariance>k__BackingField
		self.<IsStarted>k__BackingField = <IsStarted>k__BackingField
		self.<IsDisconnected>k__BackingField = <IsDisconnected>k__BackingField
		self.<IsAWOL>k__BackingField = <IsAWOL>k__BackingField
		self.Cooldown = Cooldown
		self.TotalAwolCount = TotalAwolCount
		self.Config = Config
		self.LatencyMeasurements = LatencyMeasurements
		self.PendingLatencyMeasurements = PendingLatencyMeasurements
		self.RecentAwolTimes = RecentAwolTimes
		self.StartTime = StartTime
		self.LatencyUpdateEvent = LatencyUpdateEvent
		self.PredictionUpdateEvent = PredictionUpdateEvent
		self.AWOLEvent = AWOLEvent
		self.KickedEvent = KickedEvent
		self.Stats = Stats


class Player:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SecondsCountdown:

    offsets = {'NextTickTime': 24, 'IsDisposed': 32}    
    def __init__(self, NextTickTime: System.DateTime, IsDisposed: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.NextTickTime = NextTickTime
		self.IsDisposed = IsDisposed


class SelfPlayer:

    offsets = {'<PlayerNumber>k__BackingField': 16, '<Info>k__BackingField': 24, '<Latency>k__BackingField': 32, '<LatencyVariance>k__BackingField': 40, 'LatencyHistory': 48}    
    def __init__(self, <PlayerNumber>k__BackingField: System.Byte, <Info>k__BackingField: System.String, <Latency>k__BackingField: System.TimeSpan, <LatencyVariance>k__BackingField: System.TimeSpan, LatencyHistory: NinjaKiwi.LiNK.Lobbies.LatencyMeasurements.LatencyHistory, **kwargs):
        super().__init__(self, **kwargs)
		self.<PlayerNumber>k__BackingField = <PlayerNumber>k__BackingField
		self.<Info>k__BackingField = <Info>k__BackingField
		self.<Latency>k__BackingField = <Latency>k__BackingField
		self.<LatencyVariance>k__BackingField = <LatencyVariance>k__BackingField
		self.LatencyHistory = LatencyHistory


class TimeSpanExtensions:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Writable:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class WritableExtensions:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class LatencyHistory:

    offsets = {'MaxLength': 16, 'Queue': 24}    
    def __init__(self, MaxLength: System.Int32, Queue: System.Collections.Generic.Queue<NinjaKiwi.LiNK.Lobbies.LatencyMeasurements.LatencyMeasurement>, **kwargs):
        super().__init__(self, **kwargs)
		self.MaxLength = MaxLength
		self.Queue = Queue


class LatencyMeasurement:

    offsets = {'TimeReceived': 16, 'Value': 24, 'Counter': 32, 'IsOutlier': 36}    
    def __init__(self, TimeReceived: System.DateTime, Value: System.TimeSpan, Counter: System.UInt32, IsOutlier: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.TimeReceived = TimeReceived
		self.Value = Value
		self.Counter = Counter
		self.IsOutlier = IsOutlier


class Quartiles<T>:

    offsets = {'Median': 0, 'Q1': 0, 'Q3': 0}    
    def __init__(self, Median: T, Q1: T, Q3: T, **kwargs):
        super().__init__(self, **kwargs)
		self.Median = Median
		self.Q1 = Q1
		self.Q3 = Q3


class StatsExtensions:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BinaryReadWriteExtensions:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class IenumerableExtensions:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class JoinSessionMessage:

    offsets = {'MatchID': 32, 'PeerID': 40, 'PlayerGlobalID': 48}    
    def __init__(self, MatchID: System.String, PeerID: System.Int32, PlayerGlobalID: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.MatchID = MatchID
		self.PeerID = PeerID
		self.PlayerGlobalID = PlayerGlobalID


class JoinSessionResponseMessage:

    offsets = {'Success': 32, 'ConnectedPlayers': 40}    
    def __init__(self, Success: System.Boolean, ConnectedPlayers: System.Collections.Generic.List<System.Byte>, **kwargs):
        super().__init__(self, **kwargs)
		self.Success = Success
		self.ConnectedPlayers = ConnectedPlayers


class LatencyMeasurement:

    offsets = {'TimeMeasured': 16, 'Counter': 24, 'IsDelayed': 28, 'Task': 32}    
    def __init__(self, TimeMeasured: System.DateTime, Counter: System.UInt32, IsDelayed: System.Boolean, Task: System.Threading.Tasks.Task<System.TimeSpan>, **kwargs):
        super().__init__(self, **kwargs)
		self.TimeMeasured = TimeMeasured
		self.Counter = Counter
		self.IsDelayed = IsDelayed
		self.Task = Task


class LatencyReportMessage:

    offsets = {'Latency': 32}    
    def __init__(self, Latency: System.Int64, **kwargs):
        super().__init__(self, **kwargs)
		self.Latency = Latency


class LatencyTestMessage:

    offsets = {'PeerID': 32, 'Timestamp': 40, 'IsReply': 48}    
    def __init__(self, PeerID: System.Int32, Timestamp: System.Int64, IsReply: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.PeerID = PeerID
		self.Timestamp = Timestamp
		self.IsReply = IsReply


class Message:

    offsets = {'Code': 16}    
    def __init__(self, Code: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.Code = Code


class MessageFactory:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MessageTooBigException:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class NKMultiConnection:

    offsets = {'SendQueue': 16, 'ReceiveQueue': 24, 'Socket': 32, 'NetworkStream': 40, 'Reader': 48, 'Writer': 56}    
    def __init__(self, SendQueue: System.Collections.Generic.Queue<NinjaKiwi.NKMulti.Message>, ReceiveQueue: System.Collections.Generic.Queue<NinjaKiwi.NKMulti.Message>, Socket: System.Net.Sockets.Socket, NetworkStream: System.Net.Sockets.NetworkStream, Reader: NinjaKiwi.NKMulti.IO.MessageReader, Writer: NinjaKiwi.NKMulti.IO.MessageWriter, **kwargs):
        super().__init__(self, **kwargs)
		self.SendQueue = SendQueue
		self.ReceiveQueue = ReceiveQueue
		self.Socket = Socket
		self.NetworkStream = NetworkStream
		self.Reader = Reader
		self.Writer = Writer


class NKMultiConnector:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class NKMultiGameInterface:
	Version: System.Version
    offsets = {'Version': 0, 'QUEUE_WARNING_LIMIT': 8, 'LATENCY_CHECK_INTERVAL': 16, 'LATENCY_CHECK_TIMEOUT': 24, 'RelayHostName': 16, 'RelayPort': 24, 'RelayBinaryVersion': 32, 'PeerID': 40, 'PlayerGlobalID': 48, 'MatchID': 56, 'Received': 64, '<IsConnected>k__BackingField': 72, 'DisconnectedEvent': 80, 'PeerConnectedEvent': 88, 'PeerDisconnectedEvent': 96, 'LatencyUpdateEvent': 104, 'relayConnection': 112, 'JoinTaskCompletionSource': 120, 'NextLatencyCheckTime': 128, 'LatencyMeasurmentInProgress': 136, 'LatencyMeasurementCounter': 144, 'PingsInFlight': 152}    
    def __init__(self, Version: System.Version, QUEUE_WARNING_LIMIT: System.Int32, LATENCY_CHECK_INTERVAL: System.TimeSpan, LATENCY_CHECK_TIMEOUT: System.TimeSpan, RelayHostName: System.String, RelayPort: System.Int32, RelayBinaryVersion: System.Version, PeerID: System.Int32, PlayerGlobalID: System.String, MatchID: System.String, Received: System.Collections.Generic.Queue<System.IO.BinaryReader>, <IsConnected>k__BackingField: System.Boolean, DisconnectedEvent: System.Action<System.Exception>, PeerConnectedEvent: System.Action<System.Int32>, PeerDisconnectedEvent: System.Action<System.Int32>, LatencyUpdateEvent: System.Action<NinjaKiwi.NKMulti.LatencyMeasurement>, relayConnection: NinjaKiwi.NKMulti.NKMultiConnection, JoinTaskCompletionSource: System.Threading.Tasks.TaskCompletionSource<System.Boolean>, NextLatencyCheckTime: System.DateTime, LatencyMeasurmentInProgress: System.Threading.Tasks.Task<System.TimeSpan>, LatencyMeasurementCounter: System.UInt32, PingsInFlight: System.Collections.Generic.Dictionary<System.Int64,NinjaKiwi.NKMulti.NKMultiGameInterface.Ping>, **kwargs):
        super().__init__(self, **kwargs)
		self.Version = Version
		self.QUEUE_WARNING_LIMIT = QUEUE_WARNING_LIMIT
		self.LATENCY_CHECK_INTERVAL = LATENCY_CHECK_INTERVAL
		self.LATENCY_CHECK_TIMEOUT = LATENCY_CHECK_TIMEOUT
		self.RelayHostName = RelayHostName
		self.RelayPort = RelayPort
		self.RelayBinaryVersion = RelayBinaryVersion
		self.PeerID = PeerID
		self.PlayerGlobalID = PlayerGlobalID
		self.MatchID = MatchID
		self.Received = Received
		self.<IsConnected>k__BackingField = <IsConnected>k__BackingField
		self.DisconnectedEvent = DisconnectedEvent
		self.PeerConnectedEvent = PeerConnectedEvent
		self.PeerDisconnectedEvent = PeerDisconnectedEvent
		self.LatencyUpdateEvent = LatencyUpdateEvent
		self.relayConnection = relayConnection
		self.JoinTaskCompletionSource = JoinTaskCompletionSource
		self.NextLatencyCheckTime = NextLatencyCheckTime
		self.LatencyMeasurmentInProgress = LatencyMeasurmentInProgress
		self.LatencyMeasurementCounter = LatencyMeasurementCounter
		self.PingsInFlight = PingsInFlight


class NKMultiMessage:

    offsets = {'Data': 32, 'Content': 40}    
    def __init__(self, Data: System.IO.MemoryStream, Content: NinjaKiwi.NKMulti.Writable, **kwargs):
        super().__init__(self, **kwargs)
		self.Data = Data
		self.Content = Content


class PeerConnectedMessage:

    offsets = {'PeerID': 32, 'ConnectedPlayers': 40}    
    def __init__(self, PeerID: System.Int32, ConnectedPlayers: System.Collections.Generic.List<System.Byte>, **kwargs):
        super().__init__(self, **kwargs)
		self.PeerID = PeerID
		self.ConnectedPlayers = ConnectedPlayers


class PeerDisconnectedMessage:

    offsets = {'PeerID': 32, 'ConnectedPlayers': 40}    
    def __init__(self, PeerID: System.Int32, ConnectedPlayers: System.Collections.Generic.List<System.Byte>, **kwargs):
        super().__init__(self, **kwargs)
		self.PeerID = PeerID
		self.ConnectedPlayers = ConnectedPlayers


class PeerTargetedMessage:

    offsets = {'PeerID': 32, 'Message': 40}    
    def __init__(self, PeerID: System.Int32, Message: NinjaKiwi.NKMulti.Message, **kwargs):
        super().__init__(self, **kwargs)
		self.PeerID = PeerID
		self.Message = Message


class Writable:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MessageBuffer:
	DEFAULT_BUFFER_SIZE: System.Int32
    offsets = {'DEFAULT_BUFFER_SIZE': 0, 'byteStream': 24, 'byteReader': 32}    
    def __init__(self, DEFAULT_BUFFER_SIZE: System.Int32, byteStream: System.IO.MemoryStream, byteReader: System.IO.BinaryReader, **kwargs):
        super().__init__(self, **kwargs)
		self.DEFAULT_BUFFER_SIZE = DEFAULT_BUFFER_SIZE
		self.byteStream = byteStream
		self.byteReader = byteReader


class MessageReader:

    offsets = {'stream': 16, 'buffer': 24, 'currentRelayMessage': 32, 'currentPart': 40, 'currentPartBytesNeeded': 44, 'currentPartBytesRead': 48}    
    def __init__(self, stream: System.Net.Sockets.NetworkStream, buffer: NinjaKiwi.NKMulti.IO.MessageBuffer, currentRelayMessage: NinjaKiwi.NKMulti.Transfer.RelayMessage, currentPart: NinjaKiwi.NKMulti.IO.MessageReader.Part, currentPartBytesNeeded: System.Int32, currentPartBytesRead: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.stream = stream
		self.buffer = buffer
		self.currentRelayMessage = currentRelayMessage
		self.currentPart = currentPart
		self.currentPartBytesNeeded = currentPartBytesNeeded
		self.currentPartBytesRead = currentPartBytesRead


class MessageWriter:

    offsets = {'stream': 16, 'writer': 24, 'buffer': 32, 'relayMessageFactory': 40}    
    def __init__(self, stream: System.IO.Stream, writer: System.IO.BinaryWriter, buffer: System.IO.BufferedStream, relayMessageFactory: NinjaKiwi.NKMulti.Transfer.RelayMessageFactory, **kwargs):
        super().__init__(self, **kwargs)
		self.stream = stream
		self.writer = writer
		self.buffer = buffer
		self.relayMessageFactory = relayMessageFactory


class Head:

    offsets = {'Version': 16, 'MessageLength': 18}    
    def __init__(self, Version: System.Byte, MessageLength: System.Int16, **kwargs):
        super().__init__(self, **kwargs)
		self.Version = Version
		self.MessageLength = MessageLength


class RelayMessage:

    offsets = {'Head': 16, 'Message': 24, 'Tail': 32}    
    def __init__(self, Head: NinjaKiwi.NKMulti.Transfer.Head, Message: NinjaKiwi.NKMulti.Message, Tail: NinjaKiwi.NKMulti.Transfer.Tail, **kwargs):
        super().__init__(self, **kwargs)
		self.Head = Head
		self.Message = Message
		self.Tail = Tail


class RelayMessageFactory:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Tail:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class BackgroundTestWebViewLinkAccountController:

    offsets = {'backgroundPrefab': 16, 'viewGameObject': 24}    
    def __init__(self, backgroundPrefab: UnityEngine.GameObject, viewGameObject: UnityEngine.GameObject, **kwargs):
        super().__init__(self, **kwargs)
		self.backgroundPrefab = backgroundPrefab
		self.viewGameObject = viewGameObject


class IWebViewLinkAccountController:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class MobileWebviewLiNKAccountController:

    offsets = {'liNKAccountController': 16, 'viewGameObject': 24, 'webview': 32, 'background': 40, 'loadOperation': 48, 'destroyed': 72}    
    def __init__(self, liNKAccountController: NinjaKiwi.Players.LiNKAccountController, viewGameObject: UnityEngine.GameObject, webview: NinjaKiwi.Players.LiNKAccountControllers.WebviewFromPlugin, background: WebviewBackground, loadOperation: UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle<UnityEngine.ResourceManagement.ResourceProviders.SceneInstance>, destroyed: System.Boolean, **kwargs):
        super().__init__(self, **kwargs)
		self.liNKAccountController = liNKAccountController
		self.viewGameObject = viewGameObject
		self.webview = webview
		self.background = background
		self.loadOperation = loadOperation
		self.destroyed = destroyed


class NullWebViewLinkAccountController:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class SteamWebView:

    offsets = {'onlyShowNK': 24, 'browserReady': 25, 'texture': 32, 'lastMousePos': 40, 'verticalScrollMax': 48, 'veritcalScrollCurrent': 52, 'horizontalScrollMax': 56, 'horizontalScrollCurrent': 60, 'hidden': 64, 'loadingUrl': 65, 'OnMessageReceived': 72, 'OnPageFinished': 80, 'OnPageErrorReceived': 88}    
    def __init__(self, onlyShowNK: System.Boolean, browserReady: System.Boolean, texture: UnityEngine.Texture2D, lastMousePos: UnityEngine.Vector2, verticalScrollMax: System.UInt32, veritcalScrollCurrent: System.UInt32, horizontalScrollMax: System.UInt32, horizontalScrollCurrent: System.UInt32, hidden: System.Boolean, loadingUrl: System.Boolean, OnMessageReceived: UniWebView.MessageReceivedDelegate, OnPageFinished: UniWebView.PageFinishedDelegate, OnPageErrorReceived: UniWebView.PageErrorReceivedDelegate, **kwargs):
        super().__init__(self, **kwargs)
		self.onlyShowNK = onlyShowNK
		self.browserReady = browserReady
		self.texture = texture
		self.lastMousePos = lastMousePos
		self.verticalScrollMax = verticalScrollMax
		self.veritcalScrollCurrent = veritcalScrollCurrent
		self.horizontalScrollMax = horizontalScrollMax
		self.horizontalScrollCurrent = horizontalScrollCurrent
		self.hidden = hidden
		self.loadingUrl = loadingUrl
		self.OnMessageReceived = OnMessageReceived
		self.OnPageFinished = OnPageFinished
		self.OnPageErrorReceived = OnPageErrorReceived


class WebviewFromPlugin:
	TIMEOUT_SECONDS: System.Single
    offsets = {'TIMEOUT_SECONDS': 0, 'LoadedEvent': 24, 'RestoredEvent': 32, 'UpdatedEvent': 40, 'LinkedEvent': 48, 'LinkingEvent': 56, 'LoginToAuthProviderEvent': 64, 'LoggedInEvent': 72, 'CloseEvent': 80, 'uniWebview': 88, 'loadUrl': 96}    
    def __init__(self, TIMEOUT_SECONDS: System.Single, LoadedEvent: System.Action, RestoredEvent: System.Action, UpdatedEvent: System.Action<NinjaKiwi.LiNK.DataModels.UserModel>, LinkedEvent: System.Action<NinjaKiwi.LiNK.DataModels.UserModel>, LinkingEvent: System.Action<NinjaKiwi.LiNK.AuthenticationProviders.AuthProviderType>, LoginToAuthProviderEvent: System.Action<NinjaKiwi.LiNK.AuthenticationProviders.AuthProviderType>, LoggedInEvent: System.Action<NinjaKiwi.LiNK.DataModels.LoginResponseModel>, CloseEvent: System.Action, uniWebview: NinjaKiwi.Players.LiNKAccountControllers.SteamWebView, loadUrl: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.TIMEOUT_SECONDS = TIMEOUT_SECONDS
		self.LoadedEvent = LoadedEvent
		self.RestoredEvent = RestoredEvent
		self.UpdatedEvent = UpdatedEvent
		self.LinkedEvent = LinkedEvent
		self.LinkingEvent = LinkingEvent
		self.LoginToAuthProviderEvent = LoginToAuthProviderEvent
		self.LoggedInEvent = LoggedInEvent
		self.CloseEvent = CloseEvent
		self.uniWebview = uniWebview
		self.loadUrl = loadUrl


class BundleInfo:

    offsets = {'hashHigh': 16, 'hashLow': 24, 'sizeHigh': 32, 'sizeLow': 40}    
    def __init__(self, hashHigh: System.String, hashLow: System.String, sizeHigh: System.Int64, sizeLow: System.Int64, **kwargs):
        super().__init__(self, **kwargs)
		self.hashHigh = hashHigh
		self.hashLow = hashLow
		self.sizeHigh = sizeHigh
		self.sizeLow = sizeLow


class BundleLoader:
	WasFreshInstall: System.Boolean
    offsets = {'WasFreshInstall': 0, 'ActiveVariant': 8}    
    def __init__(self, WasFreshInstall: System.Boolean, ActiveVariant: System.String, **kwargs):
        super().__init__(self, **kwargs)
		self.WasFreshInstall = WasFreshInstall
		self.ActiveVariant = ActiveVariant


class ExceptionEventArgs:

    offsets = {'<Exception>k__BackingField': 16}    
    def __init__(self, <Exception>k__BackingField: System.Exception, **kwargs):
        super().__init__(self, **kwargs)
		self.<Exception>k__BackingField = <Exception>k__BackingField


class IPendingPromise:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class IPendingPromise<PromisedT>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class IPromise:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class IPromise<PromisedT>:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class IPromiseInfo:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class IPromiseTimer:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class IRejectable:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PredicateWait:

    offsets = {'predicate': 16, 'timeStarted': 24, 'pendingPromise': 32, 'timeData': 40}    
    def __init__(self, predicate: System.Func<RSG.TimeData,System.Boolean>, timeStarted: System.Single, pendingPromise: RSG.IPendingPromise, timeData: RSG.TimeData, **kwargs):
        super().__init__(self, **kwargs)
		self.predicate = predicate
		self.timeStarted = timeStarted
		self.pendingPromise = pendingPromise
		self.timeData = timeData


class Promise:
	EnablePromiseTracking: System.Boolean
    offsets = {'EnablePromiseTracking': 0, 'unhandlerException': 8, 'nextPromiseId': 16, 'pendingPromises': 24, 'rejectionException': 16, 'rejectHandlers': 24, 'resolveHandlers': 32, '<Id>k__BackingField': 40, '<Name>k__BackingField': 48, '<CurState>k__BackingField': 56}    
    def __init__(self, EnablePromiseTracking: System.Boolean, unhandlerException: System.EventHandler<RSG.ExceptionEventArgs>, nextPromiseId: System.Int32, pendingPromises: System.Collections.Generic.HashSet<RSG.IPromiseInfo>, rejectionException: System.Exception, rejectHandlers: System.Collections.Generic.List<RSG.RejectHandler>, resolveHandlers: System.Collections.Generic.List<RSG.Promise.ResolveHandler>, <Id>k__BackingField: System.Int32, <Name>k__BackingField: System.String, <CurState>k__BackingField: RSG.PromiseState, **kwargs):
        super().__init__(self, **kwargs)
		self.EnablePromiseTracking = EnablePromiseTracking
		self.unhandlerException = unhandlerException
		self.nextPromiseId = nextPromiseId
		self.pendingPromises = pendingPromises
		self.rejectionException = rejectionException
		self.rejectHandlers = rejectHandlers
		self.resolveHandlers = resolveHandlers
		self.<Id>k__BackingField = <Id>k__BackingField
		self.<Name>k__BackingField = <Name>k__BackingField
		self.<CurState>k__BackingField = <CurState>k__BackingField


class Promise<PromisedT>:

    offsets = {'rejectionException': 0, 'resolveValue': 0, 'rejectHandlers': 0, 'resolveCallbacks': 0, 'resolveRejectables': 0, '<Id>k__BackingField': 0, '<Name>k__BackingField': 0, '<CurState>k__BackingField': 0}    
    def __init__(self, rejectionException: System.Exception, resolveValue: PromisedT, rejectHandlers: System.Collections.Generic.List<RSG.RejectHandler>, resolveCallbacks: System.Collections.Generic.List<System.Action<PromisedT>>, resolveRejectables: System.Collections.Generic.List<RSG.IRejectable>, <Id>k__BackingField: System.Int32, <Name>k__BackingField: System.String, <CurState>k__BackingField: RSG.PromiseState, **kwargs):
        super().__init__(self, **kwargs)
		self.rejectionException = rejectionException
		self.resolveValue = resolveValue
		self.rejectHandlers = rejectHandlers
		self.resolveCallbacks = resolveCallbacks
		self.resolveRejectables = resolveRejectables
		self.<Id>k__BackingField = <Id>k__BackingField
		self.<Name>k__BackingField = <Name>k__BackingField
		self.<CurState>k__BackingField = <CurState>k__BackingField


class PromiseAsyncExtensions:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PromiseExtensions:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class PromiseState:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class PromiseTimer:

    offsets = {'curTime': 16, 'waiting': 24}    
    def __init__(self, curTime: System.Single, waiting: System.Collections.Generic.List<RSG.PredicateWait>, **kwargs):
        super().__init__(self, **kwargs)
		self.curTime = curTime
		self.waiting = waiting


class RejectHandler:

    offsets = {'callback': 16, 'rejectable': 24}    
    def __init__(self, callback: System.Action<System.Exception>, rejectable: RSG.IRejectable, **kwargs):
        super().__init__(self, **kwargs)
		self.callback = callback
		self.rejectable = rejectable


class TimeData:

    offsets = {'elapsedTime': 16, 'deltaTime': 20}    
    def __init__(self, elapsedTime: System.Single, deltaTime: System.Single, **kwargs):
        super().__init__(self, **kwargs)
		self.elapsedTime = elapsedTime
		self.deltaTime = deltaTime


class EnumerableExt:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class IsUnmanagedAttribute:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class Il2CppSetOptionAttribute:

    offsets = {'<Option>k__BackingField': 16, '<Value>k__BackingField': 24}    
    def __init__(self, <Option>k__BackingField: Unity.IL2CPP.CompilerServices.Option, <Value>k__BackingField: System.Object, **kwargs):
        super().__init__(self, **kwargs)
		self.<Option>k__BackingField = <Option>k__BackingField
		self.<Value>k__BackingField = <Value>k__BackingField


class Option:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class SignInWithApple:
	_loginCompletedCallback: UnityEngine.SignInWithApple.SignInWithApple.Callback
    offsets = {'_loginCompletedCallback': 0, '_credentialStateCallback': 8, '_eventQueue': 16, 'onLogin': 24, 'onCredentialState': 32, 'onError': 40}    
    def __init__(self, _loginCompletedCallback: UnityEngine.SignInWithApple.SignInWithApple.Callback, _credentialStateCallback: UnityEngine.SignInWithApple.SignInWithApple.Callback, _eventQueue: System.Collections.Concurrent.ConcurrentQueue<System.Action>, onLogin: UnityEngine.SignInWithApple.SignInWithAppleEvent, onCredentialState: UnityEngine.SignInWithApple.SignInWithAppleEvent, onError: UnityEngine.SignInWithApple.SignInWithAppleEvent, **kwargs):
        super().__init__(self, **kwargs)
		self._loginCompletedCallback = _loginCompletedCallback
		self._credentialStateCallback = _credentialStateCallback
		self._eventQueue = _eventQueue
		self.onLogin = onLogin
		self.onCredentialState = onCredentialState
		self.onError = onError


class SignInWithAppleEvent:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)



class UserCredentialState:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class UserDetectionStatus:

    offsets = {'value__': 16}    
    def __init__(self, value__: System.Int32, **kwargs):
        super().__init__(self, **kwargs)
		self.value__ = value__


class UserInfo:

    offsets = {'userId': 16, 'email': 24, 'displayName': 32, 'idToken': 40, 'error': 48, 'userDetectionStatus': 56}    
    def __init__(self, userId: System.String, email: System.String, displayName: System.String, idToken: System.String, error: System.String, userDetectionStatus: UnityEngine.SignInWithApple.UserDetectionStatus, **kwargs):
        super().__init__(self, **kwargs)
		self.userId = userId
		self.email = email
		self.displayName = displayName
		self.idToken = idToken
		self.error = error
		self.userDetectionStatus = userDetectionStatus


class NonDrawingGraphic:

    offsets = {}    
    def __init__(self, **kwargs):
        super().__init__(self, **kwargs)
